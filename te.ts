// "use strict";
// (self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
//   [783],
//   {
//     9732: function (
//       __unused_webpack___webpack_module__,
//       __webpack_exports__,
//       __webpack_require__
//     ) {
//       let emojiRegex, e, e, e, e, e, e, e, e, e;
//       __webpack_require__.d(__webpack_exports__, {
//         Kq: function () {
//           return HorizontalAlign;
//         },
//         cS: function () {
//           return Jimp;
//         },
//         g$: function () {
//           return VerticalAlign;
//         },
//         mx: function () {
//           return loadFont;
//         },
//         oV: function () {
//           return rgbaToInt;
//         },
//       });
//       var ResizeStrategy,
//         ResizeStrategy2,
//         process = __webpack_require__(257),
//         commonjsGlobal =
//           "undefined" != typeof globalThis
//             ? globalThis
//             : "undefined" != typeof window
//             ? window
//             : "undefined" != typeof global
//             ? global
//             : "undefined" != typeof self
//             ? self
//             : {};
//       function getDefaultExportFromCjs(t) {
//         return t &&
//           t.__esModule &&
//           Object.prototype.hasOwnProperty.call(t, "default")
//           ? t.default
//           : t;
//       }
//       function getAugmentedNamespace(t) {
//         if (t.__esModule) return t;
//         var e = t.default;
//         if ("function" == typeof e) {
//           var i = function t() {
//             return this instanceof t
//               ? Reflect.construct(e, arguments, this.constructor)
//               : e.apply(this, arguments);
//           };
//           i.prototype = e.prototype;
//         } else i = {};
//         return (
//           Object.defineProperty(i, "__esModule", { value: !0 }),
//           Object.keys(t).forEach(function (e) {
//             var r = Object.getOwnPropertyDescriptor(t, e);
//             Object.defineProperty(
//               i,
//               e,
//               r.get
//                 ? r
//                 : {
//                     enumerable: !0,
//                     get: function () {
//                       return t[e];
//                     },
//                   }
//             );
//           }),
//           i
//         );
//       }
//       "undefined" == typeof self &&
//         "object" == typeof commonjsGlobal &&
//         (commonjsGlobal.self = commonjsGlobal);
//       var global$1 =
//           "undefined" != typeof global
//             ? global
//             : "undefined" != typeof self
//             ? self
//             : "undefined" != typeof window
//             ? window
//             : {},
//         lookup = [],
//         revLookup = [],
//         Arr = "undefined" != typeof Uint8Array ? Uint8Array : Array,
//         inited = !1;
//       function init() {
//         inited = !0;
//         for (
//           var t =
//               "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
//             e = 0;
//           e < 64;
//           ++e
//         )
//           (lookup[e] = t[e]), (revLookup[t.charCodeAt(e)] = e);
//         (revLookup["-".charCodeAt(0)] = 62),
//           (revLookup["_".charCodeAt(0)] = 63);
//       }
//       function toByteArray(t) {
//         inited || init();
//         var e,
//           i,
//           r,
//           n,
//           a,
//           s,
//           o = t.length;
//         if (o % 4 > 0)
//           throw Error("Invalid string. Length must be a multiple of 4");
//         (a = "=" === t[o - 2] ? 2 : "=" === t[o - 1] ? 1 : 0),
//           (s = new Arr((3 * o) / 4 - a)),
//           (r = a > 0 ? o - 4 : o);
//         var l = 0;
//         for (e = 0, i = 0; e < r; e += 4, i += 3)
//           (n =
//             (revLookup[t.charCodeAt(e)] << 18) |
//             (revLookup[t.charCodeAt(e + 1)] << 12) |
//             (revLookup[t.charCodeAt(e + 2)] << 6) |
//             revLookup[t.charCodeAt(e + 3)]),
//             (s[l++] = (n >> 16) & 255),
//             (s[l++] = (n >> 8) & 255),
//             (s[l++] = 255 & n);
//         return (
//           2 === a
//             ? ((n =
//                 (revLookup[t.charCodeAt(e)] << 2) |
//                 (revLookup[t.charCodeAt(e + 1)] >> 4)),
//               (s[l++] = 255 & n))
//             : 1 === a &&
//               ((n =
//                 (revLookup[t.charCodeAt(e)] << 10) |
//                 (revLookup[t.charCodeAt(e + 1)] << 4) |
//                 (revLookup[t.charCodeAt(e + 2)] >> 2)),
//               (s[l++] = (n >> 8) & 255),
//               (s[l++] = 255 & n)),
//           s
//         );
//       }
//       function tripletToBase64(t) {
//         return (
//           lookup[(t >> 18) & 63] +
//           lookup[(t >> 12) & 63] +
//           lookup[(t >> 6) & 63] +
//           lookup[63 & t]
//         );
//       }
//       function encodeChunk(t, e, i) {
//         for (var r = [], n = e; n < i; n += 3)
//           r.push(tripletToBase64((t[n] << 16) + (t[n + 1] << 8) + t[n + 2]));
//         return r.join("");
//       }
//       function fromByteArray(t) {
//         var e;
//         inited || init();
//         for (
//           var i = t.length,
//             r = i % 3,
//             n = "",
//             a = [],
//             s = 16383,
//             o = 0,
//             l = i - r;
//           o < l;
//           o += s
//         )
//           a.push(encodeChunk(t, o, o + s > l ? l : o + s));
//         return (
//           1 === r
//             ? (n += lookup[(e = t[i - 1]) >> 2] + lookup[(e << 4) & 63] + "==")
//             : 2 === r &&
//               (n +=
//                 lookup[(e = (t[i - 2] << 8) + t[i - 1]) >> 10] +
//                 lookup[(e >> 4) & 63] +
//                 lookup[(e << 2) & 63] +
//                 "="),
//           a.push(n),
//           a.join("")
//         );
//       }
//       function read(t, e, i, r, n) {
//         var a,
//           s,
//           o = 8 * n - r - 1,
//           l = (1 << o) - 1,
//           h = l >> 1,
//           u = -7,
//           f = i ? n - 1 : 0,
//           c = i ? -1 : 1,
//           d = t[e + f];
//         for (
//           f += c, a = d & ((1 << -u) - 1), d >>= -u, u += o;
//           u > 0;
//           a = 256 * a + t[e + f], f += c, u -= 8
//         );
//         for (
//           s = a & ((1 << -u) - 1), a >>= -u, u += r;
//           u > 0;
//           s = 256 * s + t[e + f], f += c, u -= 8
//         );
//         if (0 === a) a = 1 - h;
//         else {
//           if (a === l) return s ? NaN : (1 / 0) * (d ? -1 : 1);
//           (s += Math.pow(2, r)), (a -= h);
//         }
//         return (d ? -1 : 1) * s * Math.pow(2, a - r);
//       }
//       function write(t, e, i, r, n, a) {
//         var s,
//           o,
//           l,
//           h = 8 * a - n - 1,
//           u = (1 << h) - 1,
//           f = u >> 1,
//           c = 23 === n ? 5960464477539062e-23 : 0,
//           d = r ? 0 : a - 1,
//           p = r ? 1 : -1,
//           m = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
//         for (
//           isNaN((e = Math.abs(e))) || e === 1 / 0
//             ? ((o = isNaN(e) ? 1 : 0), (s = u))
//             : ((s = Math.floor(Math.log(e) / Math.LN2)),
//               e * (l = Math.pow(2, -s)) < 1 && (s--, (l *= 2)),
//               (e += s + f >= 1 ? c / l : c * Math.pow(2, 1 - f)) * l >= 2 &&
//                 (s++, (l /= 2)),
//               s + f >= u
//                 ? ((o = 0), (s = u))
//                 : s + f >= 1
//                 ? ((o = (e * l - 1) * Math.pow(2, n)), (s += f))
//                 : ((o = e * Math.pow(2, f - 1) * Math.pow(2, n)), (s = 0)));
//           n >= 8;
//           t[i + d] = 255 & o, d += p, o /= 256, n -= 8
//         );
//         for (
//           s = (s << n) | o, h += n;
//           h > 0;
//           t[i + d] = 255 & s, d += p, s /= 256, h -= 8
//         );
//         t[i + d - p] |= 128 * m;
//       }
//       var toString = {}.toString,
//         isArray =
//           Array.isArray ||
//           function (t) {
//             return "[object Array]" == toString.call(t);
//           },
//         INSPECT_MAX_BYTES = 50;
//       function kMaxLength() {
//         return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
//       }
//       function createBuffer(t, e) {
//         if (kMaxLength() < e) throw RangeError("Invalid typed array length");
//         return (
//           Buffer.TYPED_ARRAY_SUPPORT
//             ? ((t = new Uint8Array(e)).__proto__ = Buffer.prototype)
//             : (null === t && (t = new Buffer(e)), (t.length = e)),
//           t
//         );
//       }
//       function Buffer(t, e, i) {
//         if (!(Buffer.TYPED_ARRAY_SUPPORT || this instanceof Buffer))
//           return new Buffer(t, e, i);
//         if ("number" == typeof t) {
//           if ("string" == typeof e)
//             throw Error(
//               "If encoding is specified then the first argument must be a string"
//             );
//           return allocUnsafe(this, t);
//         }
//         return from(this, t, e, i);
//       }
//       function from(t, e, i, r) {
//         if ("number" == typeof e)
//           throw TypeError('"value" argument must not be a number');
//         return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer
//           ? fromArrayBuffer(t, e, i, r)
//           : "string" == typeof e
//           ? fromString(t, e, i)
//           : fromObject(t, e);
//       }
//       function assertSize(t) {
//         if ("number" != typeof t)
//           throw TypeError('"size" argument must be a number');
//         if (t < 0) throw RangeError('"size" argument must not be negative');
//       }
//       function alloc(t, e, i, r) {
//         return (
//           assertSize(e),
//           e <= 0
//             ? createBuffer(t, e)
//             : void 0 !== i
//             ? "string" == typeof r
//               ? createBuffer(t, e).fill(i, r)
//               : createBuffer(t, e).fill(i)
//             : createBuffer(t, e)
//         );
//       }
//       function allocUnsafe(t, e) {
//         if (
//           (assertSize(e),
//           (t = createBuffer(t, e < 0 ? 0 : 0 | checked(e))),
//           !Buffer.TYPED_ARRAY_SUPPORT)
//         )
//           for (var i = 0; i < e; ++i) t[i] = 0;
//         return t;
//       }
//       function fromString(t, e, i) {
//         if (
//           (("string" == typeof i && "" !== i) || (i = "utf8"),
//           !Buffer.isEncoding(i))
//         )
//           throw TypeError('"encoding" must be a valid string encoding');
//         var r = 0 | byteLength(e, i),
//           n = (t = createBuffer(t, r)).write(e, i);
//         return n !== r && (t = t.slice(0, n)), t;
//       }
//       function fromArrayLike(t, e) {
//         var i = e.length < 0 ? 0 : 0 | checked(e.length);
//         t = createBuffer(t, i);
//         for (var r = 0; r < i; r += 1) t[r] = 255 & e[r];
//         return t;
//       }
//       function fromArrayBuffer(t, e, i, r) {
//         if ((e.byteLength, i < 0 || e.byteLength < i))
//           throw RangeError("'offset' is out of bounds");
//         if (e.byteLength < i + (r || 0))
//           throw RangeError("'length' is out of bounds");
//         return (
//           (e =
//             void 0 === i && void 0 === r
//               ? new Uint8Array(e)
//               : void 0 === r
//               ? new Uint8Array(e, i)
//               : new Uint8Array(e, i, r)),
//           Buffer.TYPED_ARRAY_SUPPORT
//             ? ((t = e).__proto__ = Buffer.prototype)
//             : (t = fromArrayLike(t, e)),
//           t
//         );
//       }
//       function fromObject(t, e) {
//         if (internalIsBuffer(e)) {
//           var i = 0 | checked(e.length);
//           return 0 === (t = createBuffer(t, i)).length || e.copy(t, 0, 0, i), t;
//         }
//         if (e) {
//           if (
//             ("undefined" != typeof ArrayBuffer &&
//               e.buffer instanceof ArrayBuffer) ||
//             "length" in e
//           )
//             return "number" != typeof e.length || isnan(e.length)
//               ? createBuffer(t, 0)
//               : fromArrayLike(t, e);
//           if ("Buffer" === e.type && isArray(e.data))
//             return fromArrayLike(t, e.data);
//         }
//         throw TypeError(
//           "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
//         );
//       }
//       function checked(t) {
//         if (t >= kMaxLength())
//           throw RangeError(
//             "Attempt to allocate Buffer larger than maximum size: 0x" +
//               kMaxLength().toString(16) +
//               " bytes"
//           );
//         return 0 | t;
//       }
//       function internalIsBuffer(t) {
//         return !(null == t || !t._isBuffer);
//       }
//       function byteLength(t, e) {
//         if (internalIsBuffer(t)) return t.length;
//         if (
//           "undefined" != typeof ArrayBuffer &&
//           "function" == typeof ArrayBuffer.isView &&
//           (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)
//         )
//           return t.byteLength;
//         "string" != typeof t && (t = "" + t);
//         var i = t.length;
//         if (0 === i) return 0;
//         for (var r = !1; ; )
//           switch (e) {
//             case "ascii":
//             case "latin1":
//             case "binary":
//               return i;
//             case "utf8":
//             case "utf-8":
//             case void 0:
//               return utf8ToBytes(t).length;
//             case "ucs2":
//             case "ucs-2":
//             case "utf16le":
//             case "utf-16le":
//               return 2 * i;
//             case "hex":
//               return i >>> 1;
//             case "base64":
//               return base64ToBytes(t).length;
//             default:
//               if (r) return utf8ToBytes(t).length;
//               (e = ("" + e).toLowerCase()), (r = !0);
//           }
//       }
//       function slowToString(t, e, i) {
//         var r = !1;
//         if (
//           ((void 0 === e || e < 0) && (e = 0),
//           e > this.length ||
//             ((void 0 === i || i > this.length) && (i = this.length), i <= 0) ||
//             (i >>>= 0) <= (e >>>= 0))
//         )
//           return "";
//         for (t || (t = "utf8"); ; )
//           switch (t) {
//             case "hex":
//               return hexSlice(this, e, i);
//             case "utf8":
//             case "utf-8":
//               return utf8Slice(this, e, i);
//             case "ascii":
//               return asciiSlice(this, e, i);
//             case "latin1":
//             case "binary":
//               return latin1Slice(this, e, i);
//             case "base64":
//               return base64Slice(this, e, i);
//             case "ucs2":
//             case "ucs-2":
//             case "utf16le":
//             case "utf-16le":
//               return utf16leSlice(this, e, i);
//             default:
//               if (r) throw TypeError("Unknown encoding: " + t);
//               (t = (t + "").toLowerCase()), (r = !0);
//           }
//       }
//       function swap(t, e, i) {
//         var r = t[e];
//         (t[e] = t[i]), (t[i] = r);
//       }
//       function bidirectionalIndexOf(t, e, i, r, n) {
//         if (0 === t.length) return -1;
//         if (
//           ("string" == typeof i
//             ? ((r = i), (i = 0))
//             : i > 2147483647
//             ? (i = 2147483647)
//             : i < -2147483648 && (i = -2147483648),
//           isNaN((i = +i)) && (i = n ? 0 : t.length - 1),
//           i < 0 && (i = t.length + i),
//           i >= t.length)
//         ) {
//           if (n) return -1;
//           i = t.length - 1;
//         } else if (i < 0) {
//           if (!n) return -1;
//           i = 0;
//         }
//         if (
//           ("string" == typeof e && (e = Buffer.from(e, r)), internalIsBuffer(e))
//         )
//           return 0 === e.length ? -1 : arrayIndexOf(t, e, i, r, n);
//         if ("number" == typeof e)
//           return (
//             (e &= 255),
//             Buffer.TYPED_ARRAY_SUPPORT &&
//             "function" == typeof Uint8Array.prototype.indexOf
//               ? n
//                 ? Uint8Array.prototype.indexOf.call(t, e, i)
//                 : Uint8Array.prototype.lastIndexOf.call(t, e, i)
//               : arrayIndexOf(t, [e], i, r, n)
//           );
//         throw TypeError("val must be string, number or Buffer");
//       }
//       function arrayIndexOf(t, e, i, r, n) {
//         var a,
//           s = 1,
//           o = t.length,
//           l = e.length;
//         if (
//           void 0 !== r &&
//           ("ucs2" === (r = String(r).toLowerCase()) ||
//             "ucs-2" === r ||
//             "utf16le" === r ||
//             "utf-16le" === r)
//         ) {
//           if (t.length < 2 || e.length < 2) return -1;
//           (s = 2), (o /= 2), (l /= 2), (i /= 2);
//         }
//         function h(t, e) {
//           return 1 === s ? t[e] : t.readUInt16BE(e * s);
//         }
//         if (n) {
//           var u = -1;
//           for (a = i; a < o; a++)
//             if (h(t, a) === h(e, -1 === u ? 0 : a - u)) {
//               if ((-1 === u && (u = a), a - u + 1 === l)) return u * s;
//             } else -1 !== u && (a -= a - u), (u = -1);
//         } else
//           for (i + l > o && (i = o - l), a = i; a >= 0; a--) {
//             for (var f = !0, c = 0; c < l; c++)
//               if (h(t, a + c) !== h(e, c)) {
//                 f = !1;
//                 break;
//               }
//             if (f) return a;
//           }
//         return -1;
//       }
//       function hexWrite(t, e, i, r) {
//         i = Number(i) || 0;
//         var n = t.length - i;
//         r ? (r = Number(r)) > n && (r = n) : (r = n);
//         var a = e.length;
//         if (a % 2 != 0) throw TypeError("Invalid hex string");
//         r > a / 2 && (r = a / 2);
//         for (var s = 0; s < r; ++s) {
//           var o = parseInt(e.substr(2 * s, 2), 16);
//           if (isNaN(o)) break;
//           t[i + s] = o;
//         }
//         return s;
//       }
//       function utf8Write(t, e, i, r) {
//         return blitBuffer(utf8ToBytes(e, t.length - i), t, i, r);
//       }
//       function asciiWrite(t, e, i, r) {
//         return blitBuffer(asciiToBytes(e), t, i, r);
//       }
//       function latin1Write(t, e, i, r) {
//         return asciiWrite(t, e, i, r);
//       }
//       function base64Write(t, e, i, r) {
//         return blitBuffer(base64ToBytes(e), t, i, r);
//       }
//       function ucs2Write(t, e, i, r) {
//         return blitBuffer(utf16leToBytes(e, t.length - i), t, i, r);
//       }
//       function base64Slice(t, e, i) {
//         return 0 === e && i === t.length
//           ? fromByteArray(t)
//           : fromByteArray(t.slice(e, i));
//       }
//       function utf8Slice(t, e, i) {
//         i = Math.min(t.length, i);
//         for (var r = [], n = e; n < i; ) {
//           var a,
//             s,
//             o,
//             l,
//             h = t[n],
//             u = null,
//             f = h > 239 ? 4 : h > 223 ? 3 : h > 191 ? 2 : 1;
//           if (n + f <= i)
//             switch (f) {
//               case 1:
//                 h < 128 && (u = h);
//                 break;
//               case 2:
//                 128 == (192 & (a = t[n + 1])) &&
//                   (l = ((31 & h) << 6) | (63 & a)) > 127 &&
//                   (u = l);
//                 break;
//               case 3:
//                 (a = t[n + 1]),
//                   (s = t[n + 2]),
//                   128 == (192 & a) &&
//                     128 == (192 & s) &&
//                     (l = ((15 & h) << 12) | ((63 & a) << 6) | (63 & s)) >
//                       2047 &&
//                     (l < 55296 || l > 57343) &&
//                     (u = l);
//                 break;
//               case 4:
//                 (a = t[n + 1]),
//                   (s = t[n + 2]),
//                   (o = t[n + 3]),
//                   128 == (192 & a) &&
//                     128 == (192 & s) &&
//                     128 == (192 & o) &&
//                     (l =
//                       ((15 & h) << 18) |
//                       ((63 & a) << 12) |
//                       ((63 & s) << 6) |
//                       (63 & o)) > 65535 &&
//                     l < 1114112 &&
//                     (u = l);
//             }
//           null === u
//             ? ((u = 65533), (f = 1))
//             : u > 65535 &&
//               ((u -= 65536),
//               r.push(((u >>> 10) & 1023) | 55296),
//               (u = 56320 | (1023 & u))),
//             r.push(u),
//             (n += f);
//         }
//         return decodeCodePointsArray(r);
//       }
//       (Buffer.TYPED_ARRAY_SUPPORT =
//         void 0 === global$1.TYPED_ARRAY_SUPPORT ||
//         global$1.TYPED_ARRAY_SUPPORT),
//         kMaxLength(),
//         (Buffer.poolSize = 8192),
//         (Buffer._augment = function (t) {
//           return (t.__proto__ = Buffer.prototype), t;
//         }),
//         (Buffer.from = function (t, e, i) {
//           return from(null, t, e, i);
//         }),
//         Buffer.TYPED_ARRAY_SUPPORT &&
//           ((Buffer.prototype.__proto__ = Uint8Array.prototype),
//           (Buffer.__proto__ = Uint8Array),
//           "undefined" != typeof Symbol &&
//             Symbol.species &&
//             Buffer[Symbol.species]),
//         (Buffer.alloc = function (t, e, i) {
//           return alloc(null, t, e, i);
//         }),
//         (Buffer.allocUnsafe = function (t) {
//           return allocUnsafe(null, t);
//         }),
//         (Buffer.allocUnsafeSlow = function (t) {
//           return allocUnsafe(null, t);
//         }),
//         (Buffer.isBuffer = isBuffer),
//         (Buffer.compare = function (t, e) {
//           if (!internalIsBuffer(t) || !internalIsBuffer(e))
//             throw TypeError("Arguments must be Buffers");
//           if (t === e) return 0;
//           for (
//             var i = t.length, r = e.length, n = 0, a = Math.min(i, r);
//             n < a;
//             ++n
//           )
//             if (t[n] !== e[n]) {
//               (i = t[n]), (r = e[n]);
//               break;
//             }
//           return i < r ? -1 : r < i ? 1 : 0;
//         }),
//         (Buffer.isEncoding = function (t) {
//           switch (String(t).toLowerCase()) {
//             case "hex":
//             case "utf8":
//             case "utf-8":
//             case "ascii":
//             case "latin1":
//             case "binary":
//             case "base64":
//             case "ucs2":
//             case "ucs-2":
//             case "utf16le":
//             case "utf-16le":
//               return !0;
//             default:
//               return !1;
//           }
//         }),
//         (Buffer.concat = function (t, e) {
//           if (!isArray(t))
//             throw TypeError('"list" argument must be an Array of Buffers');
//           if (0 === t.length) return Buffer.alloc(0);
//           if (void 0 === e)
//             for (e = 0, i = 0; i < t.length; ++i) e += t[i].length;
//           var i,
//             r = Buffer.allocUnsafe(e),
//             n = 0;
//           for (i = 0; i < t.length; ++i) {
//             var a = t[i];
//             if (!internalIsBuffer(a))
//               throw TypeError('"list" argument must be an Array of Buffers');
//             a.copy(r, n), (n += a.length);
//           }
//           return r;
//         }),
//         (Buffer.byteLength = byteLength),
//         (Buffer.prototype._isBuffer = !0),
//         (Buffer.prototype.swap16 = function () {
//           var t = this.length;
//           if (t % 2 != 0)
//             throw RangeError("Buffer size must be a multiple of 16-bits");
//           for (var e = 0; e < t; e += 2) swap(this, e, e + 1);
//           return this;
//         }),
//         (Buffer.prototype.swap32 = function () {
//           var t = this.length;
//           if (t % 4 != 0)
//             throw RangeError("Buffer size must be a multiple of 32-bits");
//           for (var e = 0; e < t; e += 4)
//             swap(this, e, e + 3), swap(this, e + 1, e + 2);
//           return this;
//         }),
//         (Buffer.prototype.swap64 = function () {
//           var t = this.length;
//           if (t % 8 != 0)
//             throw RangeError("Buffer size must be a multiple of 64-bits");
//           for (var e = 0; e < t; e += 8)
//             swap(this, e, e + 7),
//               swap(this, e + 1, e + 6),
//               swap(this, e + 2, e + 5),
//               swap(this, e + 3, e + 4);
//           return this;
//         }),
//         (Buffer.prototype.toString = function () {
//           var t = 0 | this.length;
//           return 0 === t
//             ? ""
//             : 0 == arguments.length
//             ? utf8Slice(this, 0, t)
//             : slowToString.apply(this, arguments);
//         }),
//         (Buffer.prototype.equals = function (t) {
//           if (!internalIsBuffer(t))
//             throw TypeError("Argument must be a Buffer");
//           return this === t || 0 === Buffer.compare(this, t);
//         }),
//         (Buffer.prototype.inspect = function () {
//           var t = "",
//             e = INSPECT_MAX_BYTES;
//           return (
//             this.length > 0 &&
//               ((t = this.toString("hex", 0, e).match(/.{2}/g).join(" ")),
//               this.length > e && (t += " ... ")),
//             "<Buffer " + t + ">"
//           );
//         }),
//         (Buffer.prototype.compare = function (t, e, i, r, n) {
//           if (!internalIsBuffer(t))
//             throw TypeError("Argument must be a Buffer");
//           if (
//             (void 0 === e && (e = 0),
//             void 0 === i && (i = t ? t.length : 0),
//             void 0 === r && (r = 0),
//             void 0 === n && (n = this.length),
//             e < 0 || i > t.length || r < 0 || n > this.length)
//           )
//             throw RangeError("out of range index");
//           if (r >= n && e >= i) return 0;
//           if (r >= n) return -1;
//           if (e >= i) return 1;
//           if (this === t) return 0;
//           for (
//             var a = (n >>>= 0) - (r >>>= 0),
//               s = (i >>>= 0) - (e >>>= 0),
//               o = Math.min(a, s),
//               l = this.slice(r, n),
//               h = t.slice(e, i),
//               u = 0;
//             u < o;
//             ++u
//           )
//             if (l[u] !== h[u]) {
//               (a = l[u]), (s = h[u]);
//               break;
//             }
//           return a < s ? -1 : s < a ? 1 : 0;
//         }),
//         (Buffer.prototype.includes = function (t, e, i) {
//           return -1 !== this.indexOf(t, e, i);
//         }),
//         (Buffer.prototype.indexOf = function (t, e, i) {
//           return bidirectionalIndexOf(this, t, e, i, !0);
//         }),
//         (Buffer.prototype.lastIndexOf = function (t, e, i) {
//           return bidirectionalIndexOf(this, t, e, i, !1);
//         }),
//         (Buffer.prototype.write = function (t, e, i, r) {
//           if (void 0 === e) (r = "utf8"), (i = this.length), (e = 0);
//           else if (void 0 === i && "string" == typeof e)
//             (r = e), (i = this.length), (e = 0);
//           else {
//             if (!isFinite(e))
//               throw Error(
//                 "Buffer.write(string, encoding, offset[, length]) is no longer supported"
//               );
//             (e |= 0),
//               isFinite(i)
//                 ? ((i |= 0), void 0 === r && (r = "utf8"))
//                 : ((r = i), (i = void 0));
//           }
//           var n = this.length - e;
//           if (
//             ((void 0 === i || i > n) && (i = n),
//             (t.length > 0 && (i < 0 || e < 0)) || e > this.length)
//           )
//             throw RangeError("Attempt to write outside buffer bounds");
//           r || (r = "utf8");
//           for (var a = !1; ; )
//             switch (r) {
//               case "hex":
//                 return hexWrite(this, t, e, i);
//               case "utf8":
//               case "utf-8":
//                 return utf8Write(this, t, e, i);
//               case "ascii":
//                 return asciiWrite(this, t, e, i);
//               case "latin1":
//               case "binary":
//                 return latin1Write(this, t, e, i);
//               case "base64":
//                 return base64Write(this, t, e, i);
//               case "ucs2":
//               case "ucs-2":
//               case "utf16le":
//               case "utf-16le":
//                 return ucs2Write(this, t, e, i);
//               default:
//                 if (a) throw TypeError("Unknown encoding: " + r);
//                 (r = ("" + r).toLowerCase()), (a = !0);
//             }
//         }),
//         (Buffer.prototype.toJSON = function () {
//           return {
//             type: "Buffer",
//             data: Array.prototype.slice.call(this._arr || this, 0),
//           };
//         });
//       var MAX_ARGUMENTS_LENGTH = 4096;
//       function decodeCodePointsArray(t) {
//         var e = t.length;
//         if (e <= MAX_ARGUMENTS_LENGTH)
//           return String.fromCharCode.apply(String, t);
//         for (var i = "", r = 0; r < e; )
//           i += String.fromCharCode.apply(
//             String,
//             t.slice(r, (r += MAX_ARGUMENTS_LENGTH))
//           );
//         return i;
//       }
//       function asciiSlice(t, e, i) {
//         var r = "";
//         i = Math.min(t.length, i);
//         for (var n = e; n < i; ++n) r += String.fromCharCode(127 & t[n]);
//         return r;
//       }
//       function latin1Slice(t, e, i) {
//         var r = "";
//         i = Math.min(t.length, i);
//         for (var n = e; n < i; ++n) r += String.fromCharCode(t[n]);
//         return r;
//       }
//       function hexSlice(t, e, i) {
//         var r = t.length;
//         (!e || e < 0) && (e = 0), (!i || i < 0 || i > r) && (i = r);
//         for (var n = "", a = e; a < i; ++a) n += toHex(t[a]);
//         return n;
//       }
//       function utf16leSlice(t, e, i) {
//         for (var r = t.slice(e, i), n = "", a = 0; a < r.length; a += 2)
//           n += String.fromCharCode(r[a] + 256 * r[a + 1]);
//         return n;
//       }
//       function checkOffset(t, e, i) {
//         if (t % 1 != 0 || t < 0) throw RangeError("offset is not uint");
//         if (t + e > i)
//           throw RangeError("Trying to access beyond buffer length");
//       }
//       function checkInt(t, e, i, r, n, a) {
//         if (!internalIsBuffer(t))
//           throw TypeError('"buffer" argument must be a Buffer instance');
//         if (e > n || e < a)
//           throw RangeError('"value" argument is out of bounds');
//         if (i + r > t.length) throw RangeError("Index out of range");
//       }
//       function objectWriteUInt16(t, e, i, r) {
//         e < 0 && (e = 65535 + e + 1);
//         for (var n = 0, a = Math.min(t.length - i, 2); n < a; ++n)
//           t[i + n] =
//             (e & (255 << (8 * (r ? n : 1 - n)))) >>> (8 * (r ? n : 1 - n));
//       }
//       function objectWriteUInt32(t, e, i, r) {
//         e < 0 && (e = 4294967295 + e + 1);
//         for (var n = 0, a = Math.min(t.length - i, 4); n < a; ++n)
//           t[i + n] = (e >>> (8 * (r ? n : 3 - n))) & 255;
//       }
//       function checkIEEE754(t, e, i, r, n, a) {
//         if (i + r > t.length || i < 0) throw RangeError("Index out of range");
//       }
//       function writeFloat(t, e, i, r, n) {
//         return n || checkIEEE754(t, e, i, 4), write(t, e, i, r, 23, 4), i + 4;
//       }
//       function writeDouble(t, e, i, r, n) {
//         return n || checkIEEE754(t, e, i, 8), write(t, e, i, r, 52, 8), i + 8;
//       }
//       (Buffer.prototype.slice = function (t, e) {
//         var i,
//           r = this.length;
//         if (
//           ((t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r),
//           (e = void 0 === e ? r : ~~e) < 0
//             ? (e += r) < 0 && (e = 0)
//             : e > r && (e = r),
//           e < t && (e = t),
//           Buffer.TYPED_ARRAY_SUPPORT)
//         )
//           (i = this.subarray(t, e)).__proto__ = Buffer.prototype;
//         else {
//           var n = e - t;
//           i = new Buffer(n, void 0);
//           for (var a = 0; a < n; ++a) i[a] = this[a + t];
//         }
//         return i;
//       }),
//         (Buffer.prototype.readUIntLE = function (t, e, i) {
//           (t |= 0), (e |= 0), i || checkOffset(t, e, this.length);
//           for (var r = this[t], n = 1, a = 0; ++a < e && (n *= 256); )
//             r += this[t + a] * n;
//           return r;
//         }),
//         (Buffer.prototype.readUIntBE = function (t, e, i) {
//           (t |= 0), (e |= 0), i || checkOffset(t, e, this.length);
//           for (var r = this[t + --e], n = 1; e > 0 && (n *= 256); )
//             r += this[t + --e] * n;
//           return r;
//         }),
//         (Buffer.prototype.readUInt8 = function (t, e) {
//           return e || checkOffset(t, 1, this.length), this[t];
//         }),
//         (Buffer.prototype.readUInt16LE = function (t, e) {
//           return (
//             e || checkOffset(t, 2, this.length), this[t] | (this[t + 1] << 8)
//           );
//         }),
//         (Buffer.prototype.readUInt16BE = function (t, e) {
//           return (
//             e || checkOffset(t, 2, this.length), (this[t] << 8) | this[t + 1]
//           );
//         }),
//         (Buffer.prototype.readUInt32LE = function (t, e) {
//           return (
//             e || checkOffset(t, 4, this.length),
//             (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) +
//               16777216 * this[t + 3]
//           );
//         }),
//         (Buffer.prototype.readUInt32BE = function (t, e) {
//           return (
//             e || checkOffset(t, 4, this.length),
//             16777216 * this[t] +
//               ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3])
//           );
//         }),
//         (Buffer.prototype.readIntLE = function (t, e, i) {
//           (t |= 0), (e |= 0), i || checkOffset(t, e, this.length);
//           for (var r = this[t], n = 1, a = 0; ++a < e && (n *= 256); )
//             r += this[t + a] * n;
//           return r >= (n *= 128) && (r -= Math.pow(2, 8 * e)), r;
//         }),
//         (Buffer.prototype.readIntBE = function (t, e, i) {
//           (t |= 0), (e |= 0), i || checkOffset(t, e, this.length);
//           for (var r = e, n = 1, a = this[t + --r]; r > 0 && (n *= 256); )
//             a += this[t + --r] * n;
//           return a >= (n *= 128) && (a -= Math.pow(2, 8 * e)), a;
//         }),
//         (Buffer.prototype.readInt8 = function (t, e) {
//           return (
//             e || checkOffset(t, 1, this.length),
//             128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
//           );
//         }),
//         (Buffer.prototype.readInt16LE = function (t, e) {
//           e || checkOffset(t, 2, this.length);
//           var i = this[t] | (this[t + 1] << 8);
//           return 32768 & i ? 4294901760 | i : i;
//         }),
//         (Buffer.prototype.readInt16BE = function (t, e) {
//           e || checkOffset(t, 2, this.length);
//           var i = this[t + 1] | (this[t] << 8);
//           return 32768 & i ? 4294901760 | i : i;
//         }),
//         (Buffer.prototype.readInt32LE = function (t, e) {
//           return (
//             e || checkOffset(t, 4, this.length),
//             this[t] |
//               (this[t + 1] << 8) |
//               (this[t + 2] << 16) |
//               (this[t + 3] << 24)
//           );
//         }),
//         (Buffer.prototype.readInt32BE = function (t, e) {
//           return (
//             e || checkOffset(t, 4, this.length),
//             (this[t] << 24) |
//               (this[t + 1] << 16) |
//               (this[t + 2] << 8) |
//               this[t + 3]
//           );
//         }),
//         (Buffer.prototype.readFloatLE = function (t, e) {
//           return e || checkOffset(t, 4, this.length), read(this, t, !0, 23, 4);
//         }),
//         (Buffer.prototype.readFloatBE = function (t, e) {
//           return e || checkOffset(t, 4, this.length), read(this, t, !1, 23, 4);
//         }),
//         (Buffer.prototype.readDoubleLE = function (t, e) {
//           return e || checkOffset(t, 8, this.length), read(this, t, !0, 52, 8);
//         }),
//         (Buffer.prototype.readDoubleBE = function (t, e) {
//           return e || checkOffset(t, 8, this.length), read(this, t, !1, 52, 8);
//         }),
//         (Buffer.prototype.writeUIntLE = function (t, e, i, r) {
//           (t = +t),
//             (e |= 0),
//             (i |= 0),
//             r || checkInt(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
//           var n = 1,
//             a = 0;
//           for (this[e] = 255 & t; ++a < i && (n *= 256); )
//             this[e + a] = (t / n) & 255;
//           return e + i;
//         }),
//         (Buffer.prototype.writeUIntBE = function (t, e, i, r) {
//           (t = +t),
//             (e |= 0),
//             (i |= 0),
//             r || checkInt(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
//           var n = i - 1,
//             a = 1;
//           for (this[e + n] = 255 & t; --n >= 0 && (a *= 256); )
//             this[e + n] = (t / a) & 255;
//           return e + i;
//         }),
//         (Buffer.prototype.writeUInt8 = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 1, 255, 0),
//             Buffer.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
//             (this[e] = 255 & t),
//             e + 1
//           );
//         }),
//         (Buffer.prototype.writeUInt16LE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 2, 65535, 0),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
//               : objectWriteUInt16(this, t, e, !0),
//             e + 2
//           );
//         }),
//         (Buffer.prototype.writeUInt16BE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 2, 65535, 0),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
//               : objectWriteUInt16(this, t, e, !1),
//             e + 2
//           );
//         }),
//         (Buffer.prototype.writeUInt32LE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 4, 4294967295, 0),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e + 3] = t >>> 24),
//                 (this[e + 2] = t >>> 16),
//                 (this[e + 1] = t >>> 8),
//                 (this[e] = 255 & t))
//               : objectWriteUInt32(this, t, e, !0),
//             e + 4
//           );
//         }),
//         (Buffer.prototype.writeUInt32BE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 4, 4294967295, 0),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e] = t >>> 24),
//                 (this[e + 1] = t >>> 16),
//                 (this[e + 2] = t >>> 8),
//                 (this[e + 3] = 255 & t))
//               : objectWriteUInt32(this, t, e, !1),
//             e + 4
//           );
//         }),
//         (Buffer.prototype.writeIntLE = function (t, e, i, r) {
//           if (((t = +t), (e |= 0), !r)) {
//             var n = Math.pow(2, 8 * i - 1);
//             checkInt(this, t, e, i, n - 1, -n);
//           }
//           var a = 0,
//             s = 1,
//             o = 0;
//           for (this[e] = 255 & t; ++a < i && (s *= 256); )
//             t < 0 && 0 === o && 0 !== this[e + a - 1] && (o = 1),
//               (this[e + a] = (((t / s) | 0) - o) & 255);
//           return e + i;
//         }),
//         (Buffer.prototype.writeIntBE = function (t, e, i, r) {
//           if (((t = +t), (e |= 0), !r)) {
//             var n = Math.pow(2, 8 * i - 1);
//             checkInt(this, t, e, i, n - 1, -n);
//           }
//           var a = i - 1,
//             s = 1,
//             o = 0;
//           for (this[e + a] = 255 & t; --a >= 0 && (s *= 256); )
//             t < 0 && 0 === o && 0 !== this[e + a + 1] && (o = 1),
//               (this[e + a] = (((t / s) | 0) - o) & 255);
//           return e + i;
//         }),
//         (Buffer.prototype.writeInt8 = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 1, 127, -128),
//             Buffer.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
//             t < 0 && (t = 255 + t + 1),
//             (this[e] = 255 & t),
//             e + 1
//           );
//         }),
//         (Buffer.prototype.writeInt16LE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 2, 32767, -32768),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
//               : objectWriteUInt16(this, t, e, !0),
//             e + 2
//           );
//         }),
//         (Buffer.prototype.writeInt16BE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 2, 32767, -32768),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
//               : objectWriteUInt16(this, t, e, !1),
//             e + 2
//           );
//         }),
//         (Buffer.prototype.writeInt32LE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 4, 2147483647, -2147483648),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e] = 255 & t),
//                 (this[e + 1] = t >>> 8),
//                 (this[e + 2] = t >>> 16),
//                 (this[e + 3] = t >>> 24))
//               : objectWriteUInt32(this, t, e, !0),
//             e + 4
//           );
//         }),
//         (Buffer.prototype.writeInt32BE = function (t, e, i) {
//           return (
//             (t = +t),
//             (e |= 0),
//             i || checkInt(this, t, e, 4, 2147483647, -2147483648),
//             t < 0 && (t = 4294967295 + t + 1),
//             Buffer.TYPED_ARRAY_SUPPORT
//               ? ((this[e] = t >>> 24),
//                 (this[e + 1] = t >>> 16),
//                 (this[e + 2] = t >>> 8),
//                 (this[e + 3] = 255 & t))
//               : objectWriteUInt32(this, t, e, !1),
//             e + 4
//           );
//         }),
//         (Buffer.prototype.writeFloatLE = function (t, e, i) {
//           return writeFloat(this, t, e, !0, i);
//         }),
//         (Buffer.prototype.writeFloatBE = function (t, e, i) {
//           return writeFloat(this, t, e, !1, i);
//         }),
//         (Buffer.prototype.writeDoubleLE = function (t, e, i) {
//           return writeDouble(this, t, e, !0, i);
//         }),
//         (Buffer.prototype.writeDoubleBE = function (t, e, i) {
//           return writeDouble(this, t, e, !1, i);
//         }),
//         (Buffer.prototype.copy = function (t, e, i, r) {
//           if (
//             (i || (i = 0),
//             r || 0 === r || (r = this.length),
//             e >= t.length && (e = t.length),
//             e || (e = 0),
//             r > 0 && r < i && (r = i),
//             r === i || 0 === t.length || 0 === this.length)
//           )
//             return 0;
//           if (e < 0) throw RangeError("targetStart out of bounds");
//           if (i < 0 || i >= this.length)
//             throw RangeError("sourceStart out of bounds");
//           if (r < 0) throw RangeError("sourceEnd out of bounds");
//           r > this.length && (r = this.length),
//             t.length - e < r - i && (r = t.length - e + i);
//           var n,
//             a = r - i;
//           if (this === t && i < e && e < r)
//             for (n = a - 1; n >= 0; --n) t[n + e] = this[n + i];
//           else if (a < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT)
//             for (n = 0; n < a; ++n) t[n + e] = this[n + i];
//           else Uint8Array.prototype.set.call(t, this.subarray(i, i + a), e);
//           return a;
//         }),
//         (Buffer.prototype.fill = function (t, e, i, r) {
//           if ("string" == typeof t) {
//             if (
//               ("string" == typeof e
//                 ? ((r = e), (e = 0), (i = this.length))
//                 : "string" == typeof i && ((r = i), (i = this.length)),
//               1 === t.length)
//             ) {
//               var n,
//                 a = t.charCodeAt(0);
//               a < 256 && (t = a);
//             }
//             if (void 0 !== r && "string" != typeof r)
//               throw TypeError("encoding must be a string");
//             if ("string" == typeof r && !Buffer.isEncoding(r))
//               throw TypeError("Unknown encoding: " + r);
//           } else "number" == typeof t && (t &= 255);
//           if (e < 0 || this.length < e || this.length < i)
//             throw RangeError("Out of range index");
//           if (i <= e) return this;
//           if (
//             ((e >>>= 0),
//             (i = void 0 === i ? this.length : i >>> 0),
//             t || (t = 0),
//             "number" == typeof t)
//           )
//             for (n = e; n < i; ++n) this[n] = t;
//           else {
//             var s = internalIsBuffer(t)
//                 ? t
//                 : utf8ToBytes(new Buffer(t, r).toString()),
//               o = s.length;
//             for (n = 0; n < i - e; ++n) this[n + e] = s[n % o];
//           }
//           return this;
//         });
//       var HeaderTypes,
//         INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
//       function base64clean(t) {
//         if ((t = stringtrim(t).replace(INVALID_BASE64_RE, "")).length < 2)
//           return "";
//         for (; t.length % 4 != 0; ) t += "=";
//         return t;
//       }
//       function stringtrim(t) {
//         return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
//       }
//       function toHex(t) {
//         return t < 16 ? "0" + t.toString(16) : t.toString(16);
//       }
//       function utf8ToBytes(t, e) {
//         var i;
//         e = e || 1 / 0;
//         for (var r = t.length, n = null, a = [], s = 0; s < r; ++s) {
//           if ((i = t.charCodeAt(s)) > 55295 && i < 57344) {
//             if (!n) {
//               if (i > 56319 || s + 1 === r) {
//                 (e -= 3) > -1 && a.push(239, 191, 189);
//                 continue;
//               }
//               n = i;
//               continue;
//             }
//             if (i < 56320) {
//               (e -= 3) > -1 && a.push(239, 191, 189), (n = i);
//               continue;
//             }
//             i = 65536 + (((n - 55296) << 10) | (i - 56320));
//           } else n && (e -= 3) > -1 && a.push(239, 191, 189);
//           if (((n = null), i < 128)) {
//             if ((e -= 1) < 0) break;
//             a.push(i);
//           } else if (i < 2048) {
//             if ((e -= 2) < 0) break;
//             a.push((i >> 6) | 192, (63 & i) | 128);
//           } else if (i < 65536) {
//             if ((e -= 3) < 0) break;
//             a.push((i >> 12) | 224, ((i >> 6) & 63) | 128, (63 & i) | 128);
//           } else {
//             if (!(i < 1114112)) throw Error("Invalid code point");
//             if ((e -= 4) < 0) break;
//             a.push(
//               (i >> 18) | 240,
//               ((i >> 12) & 63) | 128,
//               ((i >> 6) & 63) | 128,
//               (63 & i) | 128
//             );
//           }
//         }
//         return a;
//       }
//       function asciiToBytes(t) {
//         for (var e = [], i = 0; i < t.length; ++i)
//           e.push(255 & t.charCodeAt(i));
//         return e;
//       }
//       function utf16leToBytes(t, e) {
//         for (var i, r, n = [], a = 0; a < t.length && !((e -= 2) < 0); ++a)
//           (r = (i = t.charCodeAt(a)) >> 8), n.push(i % 256), n.push(r);
//         return n;
//       }
//       function base64ToBytes(t) {
//         return toByteArray(base64clean(t));
//       }
//       function blitBuffer(t, e, i, r) {
//         for (var n = 0; n < r && !(n + i >= e.length || n >= t.length); ++n)
//           e[n + i] = t[n];
//         return n;
//       }
//       function isnan(t) {
//         return t != t;
//       }
//       function isBuffer(t) {
//         return (
//           null != t && (!!t._isBuffer || isFastBuffer(t) || isSlowBuffer(t))
//         );
//       }
//       function isFastBuffer(t) {
//         return (
//           !!t.constructor &&
//           "function" == typeof t.constructor.isBuffer &&
//           t.constructor.isBuffer(t)
//         );
//       }
//       function isSlowBuffer(t) {
//         return (
//           "function" == typeof t.readFloatLE &&
//           "function" == typeof t.slice &&
//           isFastBuffer(t.slice(0, 0))
//         );
//       }
//       !(function (t) {
//         (t[(t.BITMAP_INFO_HEADER = 40)] = "BITMAP_INFO_HEADER"),
//           (t[(t.BITMAP_V2_INFO_HEADER = 52)] = "BITMAP_V2_INFO_HEADER"),
//           (t[(t.BITMAP_V3_INFO_HEADER = 56)] = "BITMAP_V3_INFO_HEADER"),
//           (t[(t.BITMAP_V4_HEADER = 108)] = "BITMAP_V4_HEADER"),
//           (t[(t.BITMAP_V5_HEADER = 124)] = "BITMAP_V5_HEADER");
//       })(HeaderTypes || (HeaderTypes = {}));
//       var BmpCompression,
//         HeaderTypes$1 = HeaderTypes;
//       function maskColor(t, e, i, r) {
//         let n = (1 + ~t) & t,
//           a = (1 + ~e) & e,
//           s = (1 + ~i) & i,
//           o = (1 + ~r) & r,
//           l = t / n + 1,
//           h = e / a + 1,
//           u = i / s + 1,
//           f = r / o + 1;
//         return {
//           shiftRed: (e) => (((e & t) / n) * 256) / l,
//           shiftGreen: (t) => (((t & e) / a) * 256) / h,
//           shiftBlue: (t) => (((t & i) / s) * 256) / u,
//           shiftAlpha: 0 !== r ? (t) => (((t & r) / o) * 256) / f : () => 255,
//         };
//       }
//       !(function (t) {
//         (t[(t.NONE = 0)] = "NONE"),
//           (t[(t.BI_RLE8 = 1)] = "BI_RLE8"),
//           (t[(t.BI_RLE4 = 2)] = "BI_RLE4"),
//           (t[(t.BI_BIT_FIELDS = 3)] = "BI_BIT_FIELDS"),
//           (t[(t.BI_ALPHA_BIT_FIELDS = 6)] = "BI_ALPHA_BIT_FIELDS");
//       })(BmpCompression || (BmpCompression = {}));
//       class BmpDecoder {
//         flag;
//         fileSize;
//         reserved1;
//         reserved2;
//         offset;
//         headerSize;
//         width;
//         height;
//         planes;
//         bitPP;
//         compression;
//         rawSize;
//         hr;
//         vr;
//         colors;
//         importantColors;
//         palette;
//         data;
//         maskRed;
//         maskGreen;
//         maskBlue;
//         maskAlpha;
//         toRGBA;
//         pos;
//         bottomUp;
//         buffer;
//         locRed;
//         locGreen;
//         locBlue;
//         locAlpha;
//         shiftRed;
//         shiftGreen;
//         shiftBlue;
//         shiftAlpha;
//         constructor(t, { toRGBA: e } = { toRGBA: !1 }) {
//           if (
//             ((this.buffer = t),
//             (this.toRGBA = !!e),
//             (this.pos = 0),
//             (this.bottomUp = !0),
//             (this.flag = this.buffer.toString("utf-8", 0, (this.pos += 2))),
//             "BM" !== this.flag)
//           )
//             throw Error("Invalid BMP File");
//           (this.locRed = this.toRGBA ? 0 : 3),
//             (this.locGreen = this.toRGBA ? 1 : 2),
//             (this.locBlue = this.toRGBA ? 2 : 1),
//             (this.locAlpha = this.toRGBA ? 3 : 0),
//             this.parseHeader(),
//             this.parseRGBA();
//         }
//         parseHeader() {
//           if (
//             ((this.fileSize = this.readUInt32LE()),
//             (this.reserved1 = this.buffer.readUInt16LE(this.pos)),
//             (this.pos += 2),
//             (this.reserved2 = this.buffer.readUInt16LE(this.pos)),
//             (this.pos += 2),
//             (this.offset = this.readUInt32LE()),
//             (this.headerSize = this.readUInt32LE()),
//             !(this.headerSize in HeaderTypes$1))
//           )
//             throw Error(`Unsupported BMP header size ${this.headerSize}`);
//           if (
//             ((this.width = this.readUInt32LE()),
//             (this.height = this.readUInt32LE()),
//             (this.height =
//               this.height > 2147483647
//                 ? this.height - 4294967296
//                 : this.height),
//             (this.planes = this.buffer.readUInt16LE(this.pos)),
//             (this.pos += 2),
//             (this.bitPP = this.buffer.readUInt16LE(this.pos)),
//             (this.pos += 2),
//             (this.compression = this.readUInt32LE()),
//             (this.rawSize = this.readUInt32LE()),
//             (this.hr = this.readUInt32LE()),
//             (this.vr = this.readUInt32LE()),
//             (this.colors = this.readUInt32LE()),
//             (this.importantColors = this.readUInt32LE()),
//             32 === this.bitPP
//               ? ((this.maskAlpha = 0),
//                 (this.maskRed = 16711680),
//                 (this.maskGreen = 65280),
//                 (this.maskBlue = 255))
//               : 16 === this.bitPP &&
//                 ((this.maskAlpha = 0),
//                 (this.maskRed = 31744),
//                 (this.maskGreen = 992),
//                 (this.maskBlue = 31)),
//             (this.headerSize > HeaderTypes$1.BITMAP_INFO_HEADER ||
//               this.compression === BmpCompression.BI_BIT_FIELDS ||
//               this.compression === BmpCompression.BI_ALPHA_BIT_FIELDS) &&
//               ((this.maskRed = this.readUInt32LE()),
//               (this.maskGreen = this.readUInt32LE()),
//               (this.maskBlue = this.readUInt32LE())),
//             (this.headerSize > HeaderTypes$1.BITMAP_V2_INFO_HEADER ||
//               this.compression === BmpCompression.BI_ALPHA_BIT_FIELDS) &&
//               (this.maskAlpha = this.readUInt32LE()),
//             this.headerSize > HeaderTypes$1.BITMAP_V3_INFO_HEADER &&
//               (this.pos +=
//                 HeaderTypes$1.BITMAP_V4_HEADER -
//                 HeaderTypes$1.BITMAP_V3_INFO_HEADER),
//             this.headerSize > HeaderTypes$1.BITMAP_V4_HEADER &&
//               (this.pos +=
//                 HeaderTypes$1.BITMAP_V5_HEADER -
//                 HeaderTypes$1.BITMAP_V4_HEADER),
//             this.bitPP <= 8 || this.colors > 0)
//           ) {
//             let t = 0 === this.colors ? 1 << this.bitPP : this.colors;
//             this.palette = Array(t);
//             for (let e = 0; e < t; e++) {
//               let t = this.buffer.readUInt8(this.pos++),
//                 i = this.buffer.readUInt8(this.pos++),
//                 r = this.buffer.readUInt8(this.pos++),
//                 n = this.buffer.readUInt8(this.pos++);
//               this.palette[e] = { red: r, green: i, blue: t, quad: n };
//             }
//           }
//           this.height < 0 && ((this.height *= -1), (this.bottomUp = !1));
//           let t = maskColor(
//             this.maskRed,
//             this.maskGreen,
//             this.maskBlue,
//             this.maskAlpha
//           );
//           (this.shiftRed = t.shiftRed),
//             (this.shiftGreen = t.shiftGreen),
//             (this.shiftBlue = t.shiftBlue),
//             (this.shiftAlpha = t.shiftAlpha);
//         }
//         parseRGBA() {
//           switch (
//             ((this.data = Buffer.alloc(this.width * this.height * 4)),
//             this.bitPP)
//           ) {
//             case 1:
//               this.bit1();
//               break;
//             case 4:
//               this.bit4();
//               break;
//             case 8:
//               this.bit8();
//               break;
//             case 16:
//               this.bit16();
//               break;
//             case 24:
//               this.bit24();
//               break;
//             default:
//               this.bit32();
//           }
//         }
//         bit1() {
//           let t = Math.ceil(this.width / 8),
//             e = t % 4,
//             i = 0 !== e ? 4 - e : 0;
//           this.scanImage(i, t, (t, e) => {
//             let i = this.buffer.readUInt8(this.pos++),
//               r = e * this.width * 4 + 8 * t * 4;
//             for (let e = 0; e < 8 && 8 * t + e < this.width; e++) {
//               let t = this.palette[(i >> (7 - e)) & 1];
//               (this.data[r + e * this.locAlpha] = 0),
//                 (this.data[r + 4 * e + this.locBlue] = t.blue),
//                 (this.data[r + 4 * e + this.locGreen] = t.green),
//                 (this.data[r + 4 * e + this.locRed] = t.red);
//             }
//           });
//         }
//         bit4() {
//           if (this.compression === BmpCompression.BI_RLE4) {
//             this.data.fill(0);
//             let t = !1,
//               e = this.bottomUp ? this.height - 1 : 0,
//               i = 0;
//             for (; i < this.data.length; ) {
//               let r = this.buffer.readUInt8(this.pos++),
//                 n = this.buffer.readUInt8(this.pos++);
//               if (0 === r) {
//                 if (0 === n) {
//                   (e += this.bottomUp ? -1 : 1),
//                     (i = e * this.width * 4),
//                     (t = !1);
//                   continue;
//                 }
//                 if (1 === n) break;
//                 if (2 === n) {
//                   let t = this.buffer.readUInt8(this.pos++),
//                     r = this.buffer.readUInt8(this.pos++);
//                   (e += this.bottomUp ? -r : r),
//                     (i += r * this.width * 4 + 4 * t);
//                 } else {
//                   let e = this.buffer.readUInt8(this.pos++);
//                   for (let r = 0; r < n; r++)
//                     (i = this.setPixelData(i, t ? 15 & e : (240 & e) >> 4)),
//                       1 & r &&
//                         r + 1 < n &&
//                         (e = this.buffer.readUInt8(this.pos++)),
//                       (t = !t);
//                   1 == (((n + 1) >> 1) & 1) && this.pos++;
//                 }
//               } else
//                 for (let e = 0; e < r; e++)
//                   (i = this.setPixelData(i, t ? 15 & n : (240 & n) >> 4)),
//                     (t = !t);
//             }
//           } else {
//             let t = Math.ceil(this.width / 2),
//               e = t % 4,
//               i = 0 !== e ? 4 - e : 0;
//             this.scanImage(i, t, (t, e) => {
//               let i = this.buffer.readUInt8(this.pos++),
//                 r = e * this.width * 4 + 2 * t * 4,
//                 n = i >> 4,
//                 a = this.palette[n];
//               if (
//                 ((this.data[r] = 0),
//                 (this.data[r + 1] = a.blue),
//                 (this.data[r + 2] = a.green),
//                 (this.data[r + 3] = a.red),
//                 2 * t + 1 >= this.width)
//               )
//                 return !1;
//               let s = 15 & i;
//               (a = this.palette[s]),
//                 (this.data[r + 4] = 0),
//                 (this.data[r + 4 + 1] = a.blue),
//                 (this.data[r + 4 + 2] = a.green),
//                 (this.data[r + 4 + 3] = a.red);
//             });
//           }
//         }
//         bit8() {
//           if (this.compression === BmpCompression.BI_RLE8) {
//             this.data.fill(0);
//             let t = this.bottomUp ? this.height - 1 : 0,
//               e = 0;
//             for (; e < this.data.length; ) {
//               let i = this.buffer.readUInt8(this.pos++),
//                 r = this.buffer.readUInt8(this.pos++);
//               if (0 === i) {
//                 if (0 === r) {
//                   (t += this.bottomUp ? -1 : 1), (e = t * this.width * 4);
//                   continue;
//                 }
//                 if (1 === r) break;
//                 if (2 === r) {
//                   let i = this.buffer.readUInt8(this.pos++),
//                     r = this.buffer.readUInt8(this.pos++);
//                   (t += this.bottomUp ? -r : r),
//                     (e += r * this.width * 4 + 4 * i);
//                 } else {
//                   for (let t = 0; t < r; t++) {
//                     let t = this.buffer.readUInt8(this.pos++);
//                     e = this.setPixelData(e, t);
//                   }
//                   !0 & r && this.pos++;
//                 }
//               } else for (let t = 0; t < i; t++) e = this.setPixelData(e, r);
//             }
//           } else {
//             let t = this.width % 4,
//               e = 0 !== t ? 4 - t : 0;
//             this.scanImage(e, this.width, (t, e) => {
//               let i = this.buffer.readUInt8(this.pos++),
//                 r = e * this.width * 4 + 4 * t;
//               if (i < this.palette.length) {
//                 let t = this.palette[i];
//                 (this.data[r] = 0),
//                   (this.data[r + 1] = t.blue),
//                   (this.data[r + 2] = t.green),
//                   (this.data[r + 3] = t.red);
//               } else
//                 (this.data[r] = 0),
//                   (this.data[r + 1] = 255),
//                   (this.data[r + 2] = 255),
//                   (this.data[r + 3] = 255);
//             });
//           }
//         }
//         bit16() {
//           let t = (this.width % 2) * 2;
//           this.scanImage(t, this.width, (t, e) => {
//             let i = e * this.width * 4 + 4 * t,
//               r = this.buffer.readUInt16LE(this.pos);
//             (this.pos += 2),
//               (this.data[i + this.locRed] = this.shiftRed(r)),
//               (this.data[i + this.locGreen] = this.shiftGreen(r)),
//               (this.data[i + this.locBlue] = this.shiftBlue(r)),
//               (this.data[i + this.locAlpha] = this.shiftAlpha(r));
//           });
//         }
//         bit24() {
//           let t = this.width % 4;
//           this.scanImage(t, this.width, (t, e) => {
//             let i = e * this.width * 4 + 4 * t,
//               r = this.buffer.readUInt8(this.pos++),
//               n = this.buffer.readUInt8(this.pos++),
//               a = this.buffer.readUInt8(this.pos++);
//             (this.data[i + this.locRed] = a),
//               (this.data[i + this.locGreen] = n),
//               (this.data[i + this.locBlue] = r),
//               (this.data[i + this.locAlpha] = 0);
//           });
//         }
//         bit32() {
//           this.scanImage(0, this.width, (t, e) => {
//             let i = e * this.width * 4 + 4 * t,
//               r = this.readUInt32LE();
//             (this.data[i + this.locRed] = this.shiftRed(r)),
//               (this.data[i + this.locGreen] = this.shiftGreen(r)),
//               (this.data[i + this.locBlue] = this.shiftBlue(r)),
//               (this.data[i + this.locAlpha] = this.shiftAlpha(r));
//           });
//         }
//         scanImage(t = 0, e = this.width, i) {
//           for (let r = this.height - 1; r >= 0; r--) {
//             let n = this.bottomUp ? r : this.height - 1 - r;
//             for (let t = 0; t < e; t++) if (!1 === i.call(this, t, n)) return;
//             this.pos += t;
//           }
//         }
//         readUInt32LE() {
//           let t = this.buffer.readUInt32LE(this.pos);
//           return (this.pos += 4), t;
//         }
//         setPixelData(t, e) {
//           let { blue: i, green: r, red: n } = this.palette[e];
//           return (
//             (this.data[t + this.locAlpha] = 0),
//             (this.data[t + 1 + this.locBlue] = i),
//             (this.data[t + 2 + this.locGreen] = r),
//             (this.data[t + 3 + this.locRed] = n),
//             t + 4
//           );
//         }
//       }
//       function createInteger(t) {
//         return t.reduce((t, e) => (t << 1) | e, 0);
//       }
//       function createColor(t) {
//         return (t.quad << 24) | (t.red << 16) | (t.green << 8) | t.blue;
//       }
//       class BmpEncoder {
//         fileSize;
//         reserved1;
//         reserved2;
//         offset;
//         width;
//         flag;
//         height;
//         planes;
//         bitPP;
//         compress;
//         hr;
//         vr;
//         colors;
//         importantColors;
//         rawSize;
//         headerSize;
//         data;
//         palette;
//         extraBytes;
//         buffer;
//         bytesInColor;
//         pos;
//         constructor(t) {
//           switch (
//             ((this.buffer = t.data),
//             (this.width = t.width),
//             (this.height = t.height),
//             (this.headerSize = HeaderTypes$1.BITMAP_INFO_HEADER),
//             (this.flag = "BM"),
//             (this.bitPP = t.bitPP || 24),
//             (this.offset = 54),
//             (this.reserved1 = t.reserved1 || 0),
//             (this.reserved2 = t.reserved2 || 0),
//             (this.planes = 1),
//             (this.compress = 0),
//             (this.hr = t.hr || 0),
//             (this.vr = t.vr || 0),
//             (this.importantColors = t.importantColors || 0),
//             (this.colors = Math.min(
//               2 ** (this.bitPP - 1 || 1),
//               t.colors || 1 / 0
//             )),
//             (this.palette = t.palette || []),
//             this.colors && this.bitPP < 16
//               ? (this.offset += 4 * this.colors)
//               : (this.colors = 0),
//             this.bitPP)
//           ) {
//             case 32:
//               this.bytesInColor = 4;
//               break;
//             case 16:
//               this.bytesInColor = 2;
//               break;
//             case 8:
//               this.bytesInColor = 1;
//               break;
//             case 4:
//               this.bytesInColor = 0.5;
//               break;
//             case 1:
//               this.bytesInColor = 1 / 8;
//               break;
//             default:
//               (this.bytesInColor = 3), (this.bitPP = 24);
//           }
//           let e = (this.width * this.bitPP) / 32,
//             i = Math.ceil(e);
//           (this.extraBytes = 4 * (i - e)),
//             (this.rawSize = this.height * i * 4 + 2),
//             (this.fileSize = this.rawSize + this.offset),
//             (this.data = Buffer.alloc(this.fileSize, 1)),
//             (this.pos = 0),
//             this.encode();
//         }
//         encode() {
//           switch (((this.pos = 0), this.writeHeader(), this.bitPP)) {
//             case 32:
//               this.bit32();
//               break;
//             case 16:
//               this.bit16();
//               break;
//             case 8:
//               this.bit8();
//               break;
//             case 4:
//               this.bit4();
//               break;
//             case 1:
//               this.bit1();
//               break;
//             default:
//               this.bit24();
//           }
//         }
//         writeHeader() {
//           this.data.write(this.flag, this.pos, 2),
//             (this.pos += 2),
//             this.writeUInt32LE(this.fileSize),
//             this.writeUInt32LE((this.reserved1 << 16) | this.reserved2),
//             this.writeUInt32LE(this.offset),
//             this.writeUInt32LE(this.headerSize),
//             this.writeUInt32LE(this.width),
//             this.writeUInt32LE(this.height),
//             this.data.writeUInt16LE(this.planes, this.pos),
//             (this.pos += 2),
//             this.data.writeUInt16LE(this.bitPP, this.pos),
//             (this.pos += 2),
//             this.writeUInt32LE(this.compress),
//             this.writeUInt32LE(this.rawSize),
//             this.writeUInt32LE(this.hr),
//             this.writeUInt32LE(this.vr),
//             this.writeUInt32LE(this.colors),
//             this.writeUInt32LE(this.importantColors);
//         }
//         bit1() {
//           this.palette.length && 2 === this.colors
//             ? this.initColors(1)
//             : (this.writeUInt32LE(16777215), this.writeUInt32LE(0)),
//             (this.pos += 1);
//           let t = [];
//           this.writeImage((e, i, r) => {
//             let n = i;
//             n++;
//             let a = this.buffer[n++],
//               s = this.buffer[n++],
//               o = 0.2126 * this.buffer[n++] + 0.7152 * s + 0.0722 * a;
//             return (
//               t.push(o > 127 ? 0 : 1),
//               (r + 1) % 8 == 0
//                 ? ((this.data[e - 1] = createInteger(t)), (t = []))
//                 : r === this.width - 1 &&
//                   t.length > 0 &&
//                   ((this.data[e - 1] = createInteger(t) << 4), (t = [])),
//               n
//             );
//           });
//         }
//         bit4() {
//           let t = this.initColors(4),
//             e = [];
//           this.writeImage((i, r, n) => {
//             let a = r,
//               s = createColor({
//                 quad: this.buffer[a++],
//                 blue: this.buffer[a++],
//                 green: this.buffer[a++],
//                 red: this.buffer[a++],
//               }),
//               o = t.findIndex((t) => t === s);
//             return (
//               -1 !== o ? e.push(o) : e.push(0),
//               (n + 1) % 2 == 0 &&
//                 ((this.data[i] = (e[0] << 4) | e[1]), (e = [])),
//               a
//             );
//           });
//         }
//         bit8() {
//           let t = this.initColors(8);
//           this.writeImage((e, i) => {
//             let r = i,
//               n = createColor({
//                 quad: this.buffer[r++],
//                 blue: this.buffer[r++],
//                 green: this.buffer[r++],
//                 red: this.buffer[r++],
//               }),
//               a = t.findIndex((t) => t === n);
//             return (this.data[e] = -1 !== a ? a : 0), r;
//           });
//         }
//         bit16() {
//           this.writeImage((t, e) => {
//             let i = e + 1,
//               r = this.buffer[i++] / 8,
//               n = this.buffer[i++] / 8,
//               a = ((this.buffer[i++] / 8) << 10) | (n << 5) | r;
//             return (
//               (this.data[t] = 255 & a), (this.data[t + 1] = (65280 & a) >> 8), i
//             );
//           });
//         }
//         bit24() {
//           this.writeImage((t, e) => {
//             let i = e + 1;
//             return (
//               (this.data[t] = this.buffer[i++]),
//               (this.data[t + 1] = this.buffer[i++]),
//               (this.data[t + 2] = this.buffer[i++]),
//               i
//             );
//           });
//         }
//         bit32() {
//           this.writeImage((t, e) => {
//             let i = e;
//             return (
//               (this.data[t + 3] = this.buffer[i++]),
//               (this.data[t] = this.buffer[i++]),
//               (this.data[t + 1] = this.buffer[i++]),
//               (this.data[t + 2] = this.buffer[i++]),
//               i
//             );
//           });
//         }
//         writeImage(t) {
//           let e = this.extraBytes + this.width * this.bytesInColor,
//             i = 0;
//           for (let r = 0; r < this.height; r++)
//             for (let n = 0; n < this.width; n++) {
//               let a = Math.floor(
//                 this.pos + (this.height - 1 - r) * e + n * this.bytesInColor
//               );
//               i = t.call(this, a, i, n, r);
//             }
//         }
//         initColors(t) {
//           let e = [];
//           if (!this.palette.length)
//             throw Error(
//               `To encode ${t}-bit BMPs a pallette is needed. Please choose up to ${this.colors} colors. Colors must be 32-bit integers.`
//             );
//           for (let t = 0; t < this.colors; t++) {
//             let i = createColor(this.palette[t]);
//             this.writeUInt32LE(i), e.push(i);
//           }
//           return e;
//         }
//         writeUInt32LE(t) {
//           this.data.writeUInt32LE(t, this.pos), (this.pos += 4);
//         }
//       }
//       function decode$2(t, e) {
//         return new BmpDecoder(t, e);
//       }
//       function encode$2(t) {
//         return new BmpEncoder(t);
//       }
//       function _typeof(t) {
//         return (_typeof =
//           "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
//             ? function (t) {
//                 return typeof t;
//               }
//             : function (t) {
//                 return t &&
//                   "function" == typeof Symbol &&
//                   t.constructor === Symbol &&
//                   t !== Symbol.prototype
//                   ? "symbol"
//                   : typeof t;
//               })(t);
//       }
//       var trimLeft = /^\s+/,
//         trimRight = /\s+$/;
//       function tinycolor(t, e) {
//         if (((e = e || {}), (t = t || "") instanceof tinycolor)) return t;
//         if (!(this instanceof tinycolor)) return new tinycolor(t, e);
//         var i = inputToRGB(t);
//         (this._originalInput = t),
//           (this._r = i.r),
//           (this._g = i.g),
//           (this._b = i.b),
//           (this._a = i.a),
//           (this._roundA = Math.round(100 * this._a) / 100),
//           (this._format = e.format || i.format),
//           (this._gradientType = e.gradientType),
//           this._r < 1 && (this._r = Math.round(this._r)),
//           this._g < 1 && (this._g = Math.round(this._g)),
//           this._b < 1 && (this._b = Math.round(this._b)),
//           (this._ok = i.ok);
//       }
//       function inputToRGB(t) {
//         var e = { r: 0, g: 0, b: 0 },
//           i = 1,
//           r = null,
//           n = null,
//           a = null,
//           s = !1,
//           o = !1;
//         return (
//           "string" == typeof t && (t = stringInputToObject(t)),
//           "object" == _typeof(t) &&
//             (isValidCSSUnit(t.r) && isValidCSSUnit(t.g) && isValidCSSUnit(t.b)
//               ? ((e = rgbToRgb(t.r, t.g, t.b)),
//                 (s = !0),
//                 (o = "%" === String(t.r).substr(-1) ? "prgb" : "rgb"))
//               : isValidCSSUnit(t.h) &&
//                 isValidCSSUnit(t.s) &&
//                 isValidCSSUnit(t.v)
//               ? ((r = convertToPercentage(t.s)),
//                 (n = convertToPercentage(t.v)),
//                 (e = hsvToRgb(t.h, r, n)),
//                 (s = !0),
//                 (o = "hsv"))
//               : isValidCSSUnit(t.h) &&
//                 isValidCSSUnit(t.s) &&
//                 isValidCSSUnit(t.l) &&
//                 ((r = convertToPercentage(t.s)),
//                 (a = convertToPercentage(t.l)),
//                 (e = hslToRgb(t.h, r, a)),
//                 (s = !0),
//                 (o = "hsl")),
//             t.hasOwnProperty("a") && (i = t.a)),
//           (i = boundAlpha(i)),
//           {
//             ok: s,
//             format: t.format || o,
//             r: Math.min(255, Math.max(e.r, 0)),
//             g: Math.min(255, Math.max(e.g, 0)),
//             b: Math.min(255, Math.max(e.b, 0)),
//             a: i,
//           }
//         );
//       }
//       function rgbToRgb(t, e, i) {
//         return {
//           r: 255 * bound01(t, 255),
//           g: 255 * bound01(e, 255),
//           b: 255 * bound01(i, 255),
//         };
//       }
//       function rgbToHsl(t, e, i) {
//         var r,
//           n,
//           a = Math.max(
//             (t = bound01(t, 255)),
//             (e = bound01(e, 255)),
//             (i = bound01(i, 255))
//           ),
//           s = Math.min(t, e, i),
//           o = (a + s) / 2;
//         if (a == s) r = n = 0;
//         else {
//           var l = a - s;
//           switch (((n = o > 0.5 ? l / (2 - a - s) : l / (a + s)), a)) {
//             case t:
//               r = (e - i) / l + (e < i ? 6 : 0);
//               break;
//             case e:
//               r = (i - t) / l + 2;
//               break;
//             case i:
//               r = (t - e) / l + 4;
//           }
//           r /= 6;
//         }
//         return { h: r, s: n, l: o };
//       }
//       function hslToRgb(t, e, i) {
//         var r, n, a;
//         function s(t, e, i) {
//           return (
//             i < 0 && (i += 1),
//             i > 1 && (i -= 1),
//             i < 1 / 6
//               ? t + 6 * (e - t) * i
//               : i < 0.5
//               ? e
//               : i < 2 / 3
//               ? t + (e - t) * (2 / 3 - i) * 6
//               : t
//           );
//         }
//         if (
//           ((t = bound01(t, 360)),
//           (e = bound01(e, 100)),
//           (i = bound01(i, 100)),
//           0 === e)
//         )
//           r = n = a = i;
//         else {
//           var o = i < 0.5 ? i * (1 + e) : i + e - i * e,
//             l = 2 * i - o;
//           (r = s(l, o, t + 1 / 3)), (n = s(l, o, t)), (a = s(l, o, t - 1 / 3));
//         }
//         return { r: 255 * r, g: 255 * n, b: 255 * a };
//       }
//       function rgbToHsv(t, e, i) {
//         var r,
//           n,
//           a = Math.max(
//             (t = bound01(t, 255)),
//             (e = bound01(e, 255)),
//             (i = bound01(i, 255))
//           ),
//           s = Math.min(t, e, i),
//           o = a,
//           l = a - s;
//         if (((n = 0 === a ? 0 : l / a), a == s)) r = 0;
//         else {
//           switch (a) {
//             case t:
//               r = (e - i) / l + (e < i ? 6 : 0);
//               break;
//             case e:
//               r = (i - t) / l + 2;
//               break;
//             case i:
//               r = (t - e) / l + 4;
//           }
//           r /= 6;
//         }
//         return { h: r, s: n, v: o };
//       }
//       function hsvToRgb(t, e, i) {
//         (t = 6 * bound01(t, 360)), (e = bound01(e, 100)), (i = bound01(i, 100));
//         var r = Math.floor(t),
//           n = t - r,
//           a = i * (1 - e),
//           s = i * (1 - n * e),
//           o = i * (1 - (1 - n) * e),
//           l = r % 6;
//         return {
//           r: 255 * [i, s, a, a, o, i][l],
//           g: 255 * [o, i, i, s, a, a][l],
//           b: 255 * [a, a, o, i, i, s][l],
//         };
//       }
//       function rgbToHex(t, e, i, r) {
//         var n = [
//           pad2(Math.round(t).toString(16)),
//           pad2(Math.round(e).toString(16)),
//           pad2(Math.round(i).toString(16)),
//         ];
//         return r &&
//           n[0].charAt(0) == n[0].charAt(1) &&
//           n[1].charAt(0) == n[1].charAt(1) &&
//           n[2].charAt(0) == n[2].charAt(1)
//           ? n[0].charAt(0) + n[1].charAt(0) + n[2].charAt(0)
//           : n.join("");
//       }
//       function rgbaToHex(t, e, i, r, n) {
//         var a = [
//           pad2(Math.round(t).toString(16)),
//           pad2(Math.round(e).toString(16)),
//           pad2(Math.round(i).toString(16)),
//           pad2(convertDecimalToHex(r)),
//         ];
//         return n &&
//           a[0].charAt(0) == a[0].charAt(1) &&
//           a[1].charAt(0) == a[1].charAt(1) &&
//           a[2].charAt(0) == a[2].charAt(1) &&
//           a[3].charAt(0) == a[3].charAt(1)
//           ? a[0].charAt(0) + a[1].charAt(0) + a[2].charAt(0) + a[3].charAt(0)
//           : a.join("");
//       }
//       function rgbaToArgbHex(t, e, i, r) {
//         return [
//           pad2(convertDecimalToHex(r)),
//           pad2(Math.round(t).toString(16)),
//           pad2(Math.round(e).toString(16)),
//           pad2(Math.round(i).toString(16)),
//         ].join("");
//       }
//       function _desaturate(t, e) {
//         e = 0 === e ? 0 : e || 10;
//         var i = tinycolor(t).toHsl();
//         return (i.s -= e / 100), (i.s = clamp01(i.s)), tinycolor(i);
//       }
//       function _saturate(t, e) {
//         e = 0 === e ? 0 : e || 10;
//         var i = tinycolor(t).toHsl();
//         return (i.s += e / 100), (i.s = clamp01(i.s)), tinycolor(i);
//       }
//       function _greyscale(t) {
//         return tinycolor(t).desaturate(100);
//       }
//       function _lighten(t, e) {
//         e = 0 === e ? 0 : e || 10;
//         var i = tinycolor(t).toHsl();
//         return (i.l += e / 100), (i.l = clamp01(i.l)), tinycolor(i);
//       }
//       function _brighten(t, e) {
//         e = 0 === e ? 0 : e || 10;
//         var i = tinycolor(t).toRgb();
//         return (
//           (i.r = Math.max(
//             0,
//             Math.min(255, i.r - Math.round((-e / 100) * 255))
//           )),
//           (i.g = Math.max(
//             0,
//             Math.min(255, i.g - Math.round((-e / 100) * 255))
//           )),
//           (i.b = Math.max(
//             0,
//             Math.min(255, i.b - Math.round((-e / 100) * 255))
//           )),
//           tinycolor(i)
//         );
//       }
//       function _darken(t, e) {
//         e = 0 === e ? 0 : e || 10;
//         var i = tinycolor(t).toHsl();
//         return (i.l -= e / 100), (i.l = clamp01(i.l)), tinycolor(i);
//       }
//       function _spin(t, e) {
//         var i = tinycolor(t).toHsl(),
//           r = (i.h + e) % 360;
//         return (i.h = r < 0 ? 360 + r : r), tinycolor(i);
//       }
//       function _complement(t) {
//         var e = tinycolor(t).toHsl();
//         return (e.h = (e.h + 180) % 360), tinycolor(e);
//       }
//       function polyad(t, e) {
//         if (isNaN(e) || e <= 0)
//           throw Error("Argument to polyad must be a positive number");
//         for (
//           var i = tinycolor(t).toHsl(), r = [tinycolor(t)], n = 360 / e, a = 1;
//           a < e;
//           a++
//         )
//           r.push(tinycolor({ h: (i.h + a * n) % 360, s: i.s, l: i.l }));
//         return r;
//       }
//       function _splitcomplement(t) {
//         var e = tinycolor(t).toHsl(),
//           i = e.h;
//         return [
//           tinycolor(t),
//           tinycolor({ h: (i + 72) % 360, s: e.s, l: e.l }),
//           tinycolor({ h: (i + 216) % 360, s: e.s, l: e.l }),
//         ];
//       }
//       function _analogous(t, e, i) {
//         (e = e || 6), (i = i || 30);
//         var r = tinycolor(t).toHsl(),
//           n = 360 / i,
//           a = [tinycolor(t)];
//         for (r.h = (r.h - ((n * e) >> 1) + 720) % 360; --e; )
//           (r.h = (r.h + n) % 360), a.push(tinycolor(r));
//         return a;
//       }
//       function _monochromatic(t, e) {
//         e = e || 6;
//         for (
//           var i = tinycolor(t).toHsv(),
//             r = i.h,
//             n = i.s,
//             a = i.v,
//             s = [],
//             o = 1 / e;
//           e--;

//         )
//           s.push(tinycolor({ h: r, s: n, v: a })), (a = (a + o) % 1);
//         return s;
//       }
//       (tinycolor.prototype = {
//         isDark: function () {
//           return 128 > this.getBrightness();
//         },
//         isLight: function () {
//           return !this.isDark();
//         },
//         isValid: function () {
//           return this._ok;
//         },
//         getOriginalInput: function () {
//           return this._originalInput;
//         },
//         getFormat: function () {
//           return this._format;
//         },
//         getAlpha: function () {
//           return this._a;
//         },
//         getBrightness: function () {
//           var t = this.toRgb();
//           return (299 * t.r + 587 * t.g + 114 * t.b) / 1e3;
//         },
//         getLuminance: function () {
//           var t,
//             e,
//             i,
//             r = this.toRgb();
//           return (
//             0.2126 *
//               ((t = r.r / 255) <= 0.03928
//                 ? t / 12.92
//                 : Math.pow((t + 0.055) / 1.055, 2.4)) +
//             0.7152 *
//               ((e = r.g / 255) <= 0.03928
//                 ? e / 12.92
//                 : Math.pow((e + 0.055) / 1.055, 2.4)) +
//             0.0722 *
//               ((i = r.b / 255) <= 0.03928
//                 ? i / 12.92
//                 : Math.pow((i + 0.055) / 1.055, 2.4))
//           );
//         },
//         setAlpha: function (t) {
//           return (
//             (this._a = boundAlpha(t)),
//             (this._roundA = Math.round(100 * this._a) / 100),
//             this
//           );
//         },
//         toHsv: function () {
//           var t = rgbToHsv(this._r, this._g, this._b);
//           return { h: 360 * t.h, s: t.s, v: t.v, a: this._a };
//         },
//         toHsvString: function () {
//           var t = rgbToHsv(this._r, this._g, this._b),
//             e = Math.round(360 * t.h),
//             i = Math.round(100 * t.s),
//             r = Math.round(100 * t.v);
//           return 1 == this._a
//             ? "hsv(" + e + ", " + i + "%, " + r + "%)"
//             : "hsva(" + e + ", " + i + "%, " + r + "%, " + this._roundA + ")";
//         },
//         toHsl: function () {
//           var t = rgbToHsl(this._r, this._g, this._b);
//           return { h: 360 * t.h, s: t.s, l: t.l, a: this._a };
//         },
//         toHslString: function () {
//           var t = rgbToHsl(this._r, this._g, this._b),
//             e = Math.round(360 * t.h),
//             i = Math.round(100 * t.s),
//             r = Math.round(100 * t.l);
//           return 1 == this._a
//             ? "hsl(" + e + ", " + i + "%, " + r + "%)"
//             : "hsla(" + e + ", " + i + "%, " + r + "%, " + this._roundA + ")";
//         },
//         toHex: function (t) {
//           return rgbToHex(this._r, this._g, this._b, t);
//         },
//         toHexString: function (t) {
//           return "#" + this.toHex(t);
//         },
//         toHex8: function (t) {
//           return rgbaToHex(this._r, this._g, this._b, this._a, t);
//         },
//         toHex8String: function (t) {
//           return "#" + this.toHex8(t);
//         },
//         toRgb: function () {
//           return {
//             r: Math.round(this._r),
//             g: Math.round(this._g),
//             b: Math.round(this._b),
//             a: this._a,
//           };
//         },
//         toRgbString: function () {
//           return 1 == this._a
//             ? "rgb(" +
//                 Math.round(this._r) +
//                 ", " +
//                 Math.round(this._g) +
//                 ", " +
//                 Math.round(this._b) +
//                 ")"
//             : "rgba(" +
//                 Math.round(this._r) +
//                 ", " +
//                 Math.round(this._g) +
//                 ", " +
//                 Math.round(this._b) +
//                 ", " +
//                 this._roundA +
//                 ")";
//         },
//         toPercentageRgb: function () {
//           return {
//             r: Math.round(100 * bound01(this._r, 255)) + "%",
//             g: Math.round(100 * bound01(this._g, 255)) + "%",
//             b: Math.round(100 * bound01(this._b, 255)) + "%",
//             a: this._a,
//           };
//         },
//         toPercentageRgbString: function () {
//           return 1 == this._a
//             ? "rgb(" +
//                 Math.round(100 * bound01(this._r, 255)) +
//                 "%, " +
//                 Math.round(100 * bound01(this._g, 255)) +
//                 "%, " +
//                 Math.round(100 * bound01(this._b, 255)) +
//                 "%)"
//             : "rgba(" +
//                 Math.round(100 * bound01(this._r, 255)) +
//                 "%, " +
//                 Math.round(100 * bound01(this._g, 255)) +
//                 "%, " +
//                 Math.round(100 * bound01(this._b, 255)) +
//                 "%, " +
//                 this._roundA +
//                 ")";
//         },
//         toName: function () {
//           return 0 === this._a
//             ? "transparent"
//             : !(this._a < 1) &&
//                 (hexNames[rgbToHex(this._r, this._g, this._b, !0)] || !1);
//         },
//         toFilter: function (t) {
//           var e = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a),
//             i = e,
//             r = this._gradientType ? "GradientType = 1, " : "";
//           if (t) {
//             var n = tinycolor(t);
//             i = "#" + rgbaToArgbHex(n._r, n._g, n._b, n._a);
//           }
//           return (
//             "progid:DXImageTransform.Microsoft.gradient(" +
//             r +
//             "startColorstr=" +
//             e +
//             ",endColorstr=" +
//             i +
//             ")"
//           );
//         },
//         toString: function (t) {
//           var e = !!t;
//           t = t || this._format;
//           var i = !1,
//             r = this._a < 1 && this._a >= 0;
//           return e ||
//             !r ||
//             ("hex" !== t &&
//               "hex6" !== t &&
//               "hex3" !== t &&
//               "hex4" !== t &&
//               "hex8" !== t &&
//               "name" !== t)
//             ? ("rgb" === t && (i = this.toRgbString()),
//               "prgb" === t && (i = this.toPercentageRgbString()),
//               ("hex" !== t && "hex6" !== t) || (i = this.toHexString()),
//               "hex3" === t && (i = this.toHexString(!0)),
//               "hex4" === t && (i = this.toHex8String(!0)),
//               "hex8" === t && (i = this.toHex8String()),
//               "name" === t && (i = this.toName()),
//               "hsl" === t && (i = this.toHslString()),
//               "hsv" === t && (i = this.toHsvString()),
//               i || this.toHexString())
//             : "name" === t && 0 === this._a
//             ? this.toName()
//             : this.toRgbString();
//         },
//         clone: function () {
//           return tinycolor(this.toString());
//         },
//         _applyModification: function (t, e) {
//           var i = t.apply(null, [this].concat([].slice.call(e)));
//           return (
//             (this._r = i._r),
//             (this._g = i._g),
//             (this._b = i._b),
//             this.setAlpha(i._a),
//             this
//           );
//         },
//         lighten: function () {
//           return this._applyModification(_lighten, arguments);
//         },
//         brighten: function () {
//           return this._applyModification(_brighten, arguments);
//         },
//         darken: function () {
//           return this._applyModification(_darken, arguments);
//         },
//         desaturate: function () {
//           return this._applyModification(_desaturate, arguments);
//         },
//         saturate: function () {
//           return this._applyModification(_saturate, arguments);
//         },
//         greyscale: function () {
//           return this._applyModification(_greyscale, arguments);
//         },
//         spin: function () {
//           return this._applyModification(_spin, arguments);
//         },
//         _applyCombination: function (t, e) {
//           return t.apply(null, [this].concat([].slice.call(e)));
//         },
//         analogous: function () {
//           return this._applyCombination(_analogous, arguments);
//         },
//         complement: function () {
//           return this._applyCombination(_complement, arguments);
//         },
//         monochromatic: function () {
//           return this._applyCombination(_monochromatic, arguments);
//         },
//         splitcomplement: function () {
//           return this._applyCombination(_splitcomplement, arguments);
//         },
//         triad: function () {
//           return this._applyCombination(polyad, [3]);
//         },
//         tetrad: function () {
//           return this._applyCombination(polyad, [4]);
//         },
//       }),
//         (tinycolor.fromRatio = function (t, e) {
//           if ("object" == _typeof(t)) {
//             var i = {};
//             for (var r in t)
//               t.hasOwnProperty(r) &&
//                 (i[r] = "a" === r ? t[r] : convertToPercentage(t[r]));
//             t = i;
//           }
//           return tinycolor(t, e);
//         }),
//         (tinycolor.equals = function (t, e) {
//           return (
//             !(!t || !e) &&
//             tinycolor(t).toRgbString() == tinycolor(e).toRgbString()
//           );
//         }),
//         (tinycolor.random = function () {
//           return tinycolor.fromRatio({
//             r: Math.random(),
//             g: Math.random(),
//             b: Math.random(),
//           });
//         }),
//         (tinycolor.mix = function (t, e, i) {
//           i = 0 === i ? 0 : i || 50;
//           var r = tinycolor(t).toRgb(),
//             n = tinycolor(e).toRgb(),
//             a = i / 100;
//           return tinycolor({
//             r: (n.r - r.r) * a + r.r,
//             g: (n.g - r.g) * a + r.g,
//             b: (n.b - r.b) * a + r.b,
//             a: (n.a - r.a) * a + r.a,
//           });
//         }),
//         (tinycolor.readability = function (t, e) {
//           var i = tinycolor(t),
//             r = tinycolor(e);
//           return (
//             (Math.max(i.getLuminance(), r.getLuminance()) + 0.05) /
//             (Math.min(i.getLuminance(), r.getLuminance()) + 0.05)
//           );
//         }),
//         (tinycolor.isReadable = function (t, e, i) {
//           var r,
//             n,
//             a = tinycolor.readability(t, e);
//           switch (((n = !1), (r = validateWCAG2Parms(i)).level + r.size)) {
//             case "AAsmall":
//             case "AAAlarge":
//               n = a >= 4.5;
//               break;
//             case "AAlarge":
//               n = a >= 3;
//               break;
//             case "AAAsmall":
//               n = a >= 7;
//           }
//           return n;
//         }),
//         (tinycolor.mostReadable = function (t, e, i) {
//           var r,
//             n,
//             a,
//             s,
//             o = null,
//             l = 0;
//           (n = (i = i || {}).includeFallbackColors),
//             (a = i.level),
//             (s = i.size);
//           for (var h = 0; h < e.length; h++)
//             (r = tinycolor.readability(t, e[h])) > l &&
//               ((l = r), (o = tinycolor(e[h])));
//           return tinycolor.isReadable(t, o, { level: a, size: s }) || !n
//             ? o
//             : ((i.includeFallbackColors = !1),
//               tinycolor.mostReadable(t, ["#fff", "#000"], i));
//         });
//       var names$1 = (tinycolor.names = {
//           aliceblue: "f0f8ff",
//           antiquewhite: "faebd7",
//           aqua: "0ff",
//           aquamarine: "7fffd4",
//           azure: "f0ffff",
//           beige: "f5f5dc",
//           bisque: "ffe4c4",
//           black: "000",
//           blanchedalmond: "ffebcd",
//           blue: "00f",
//           blueviolet: "8a2be2",
//           brown: "a52a2a",
//           burlywood: "deb887",
//           burntsienna: "ea7e5d",
//           cadetblue: "5f9ea0",
//           chartreuse: "7fff00",
//           chocolate: "d2691e",
//           coral: "ff7f50",
//           cornflowerblue: "6495ed",
//           cornsilk: "fff8dc",
//           crimson: "dc143c",
//           cyan: "0ff",
//           darkblue: "00008b",
//           darkcyan: "008b8b",
//           darkgoldenrod: "b8860b",
//           darkgray: "a9a9a9",
//           darkgreen: "006400",
//           darkgrey: "a9a9a9",
//           darkkhaki: "bdb76b",
//           darkmagenta: "8b008b",
//           darkolivegreen: "556b2f",
//           darkorange: "ff8c00",
//           darkorchid: "9932cc",
//           darkred: "8b0000",
//           darksalmon: "e9967a",
//           darkseagreen: "8fbc8f",
//           darkslateblue: "483d8b",
//           darkslategray: "2f4f4f",
//           darkslategrey: "2f4f4f",
//           darkturquoise: "00ced1",
//           darkviolet: "9400d3",
//           deeppink: "ff1493",
//           deepskyblue: "00bfff",
//           dimgray: "696969",
//           dimgrey: "696969",
//           dodgerblue: "1e90ff",
//           firebrick: "b22222",
//           floralwhite: "fffaf0",
//           forestgreen: "228b22",
//           fuchsia: "f0f",
//           gainsboro: "dcdcdc",
//           ghostwhite: "f8f8ff",
//           gold: "ffd700",
//           goldenrod: "daa520",
//           gray: "808080",
//           green: "008000",
//           greenyellow: "adff2f",
//           grey: "808080",
//           honeydew: "f0fff0",
//           hotpink: "ff69b4",
//           indianred: "cd5c5c",
//           indigo: "4b0082",
//           ivory: "fffff0",
//           khaki: "f0e68c",
//           lavender: "e6e6fa",
//           lavenderblush: "fff0f5",
//           lawngreen: "7cfc00",
//           lemonchiffon: "fffacd",
//           lightblue: "add8e6",
//           lightcoral: "f08080",
//           lightcyan: "e0ffff",
//           lightgoldenrodyellow: "fafad2",
//           lightgray: "d3d3d3",
//           lightgreen: "90ee90",
//           lightgrey: "d3d3d3",
//           lightpink: "ffb6c1",
//           lightsalmon: "ffa07a",
//           lightseagreen: "20b2aa",
//           lightskyblue: "87cefa",
//           lightslategray: "789",
//           lightslategrey: "789",
//           lightsteelblue: "b0c4de",
//           lightyellow: "ffffe0",
//           lime: "0f0",
//           limegreen: "32cd32",
//           linen: "faf0e6",
//           magenta: "f0f",
//           maroon: "800000",
//           mediumaquamarine: "66cdaa",
//           mediumblue: "0000cd",
//           mediumorchid: "ba55d3",
//           mediumpurple: "9370db",
//           mediumseagreen: "3cb371",
//           mediumslateblue: "7b68ee",
//           mediumspringgreen: "00fa9a",
//           mediumturquoise: "48d1cc",
//           mediumvioletred: "c71585",
//           midnightblue: "191970",
//           mintcream: "f5fffa",
//           mistyrose: "ffe4e1",
//           moccasin: "ffe4b5",
//           navajowhite: "ffdead",
//           navy: "000080",
//           oldlace: "fdf5e6",
//           olive: "808000",
//           olivedrab: "6b8e23",
//           orange: "ffa500",
//           orangered: "ff4500",
//           orchid: "da70d6",
//           palegoldenrod: "eee8aa",
//           palegreen: "98fb98",
//           paleturquoise: "afeeee",
//           palevioletred: "db7093",
//           papayawhip: "ffefd5",
//           peachpuff: "ffdab9",
//           peru: "cd853f",
//           pink: "ffc0cb",
//           plum: "dda0dd",
//           powderblue: "b0e0e6",
//           purple: "800080",
//           rebeccapurple: "663399",
//           red: "f00",
//           rosybrown: "bc8f8f",
//           royalblue: "4169e1",
//           saddlebrown: "8b4513",
//           salmon: "fa8072",
//           sandybrown: "f4a460",
//           seagreen: "2e8b57",
//           seashell: "fff5ee",
//           sienna: "a0522d",
//           silver: "c0c0c0",
//           skyblue: "87ceeb",
//           slateblue: "6a5acd",
//           slategray: "708090",
//           slategrey: "708090",
//           snow: "fffafa",
//           springgreen: "00ff7f",
//           steelblue: "4682b4",
//           tan: "d2b48c",
//           teal: "008080",
//           thistle: "d8bfd8",
//           tomato: "ff6347",
//           turquoise: "40e0d0",
//           violet: "ee82ee",
//           wheat: "f5deb3",
//           white: "fff",
//           whitesmoke: "f5f5f5",
//           yellow: "ff0",
//           yellowgreen: "9acd32",
//         }),
//         hexNames = (tinycolor.hexNames = flip(names$1));
//       function flip(t) {
//         var e = {};
//         for (var i in t) t.hasOwnProperty(i) && (e[t[i]] = i);
//         return e;
//       }
//       function boundAlpha(t) {
//         return (isNaN((t = parseFloat(t))) || t < 0 || t > 1) && (t = 1), t;
//       }
//       function bound01(t, e) {
//         isOnePointZero(t) && (t = "100%");
//         var i = isPercentage(t);
//         return (
//           (t = Math.min(e, Math.max(0, parseFloat(t)))),
//           i && (t = parseInt(t * e, 10) / 100),
//           1e-6 > Math.abs(t - e) ? 1 : (t % e) / parseFloat(e)
//         );
//       }
//       function clamp01(t) {
//         return Math.min(1, Math.max(0, t));
//       }
//       function parseIntFromHex(t) {
//         return parseInt(t, 16);
//       }
//       function isOnePointZero(t) {
//         return (
//           "string" == typeof t && -1 != t.indexOf(".") && 1 === parseFloat(t)
//         );
//       }
//       function isPercentage(t) {
//         return "string" == typeof t && -1 != t.indexOf("%");
//       }
//       function pad2(t) {
//         return 1 == t.length ? "0" + t : "" + t;
//       }
//       function convertToPercentage(t) {
//         return t <= 1 && (t = 100 * t + "%"), t;
//       }
//       function convertDecimalToHex(t) {
//         return Math.round(255 * parseFloat(t)).toString(16);
//       }
//       function convertHexToDecimal(t) {
//         return parseIntFromHex(t) / 255;
//       }
//       var CSS_UNIT,
//         PERMISSIVE_MATCH3,
//         PERMISSIVE_MATCH4,
//         matchers =
//           ((CSS_UNIT = "(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)"),
//           (PERMISSIVE_MATCH3 =
//             "[\\s|\\(]+(" +
//             CSS_UNIT +
//             ")[,|\\s]+(" +
//             CSS_UNIT +
//             ")[,|\\s]+(" +
//             CSS_UNIT +
//             ")\\s*\\)?"),
//           (PERMISSIVE_MATCH4 =
//             "[\\s|\\(]+(" +
//             CSS_UNIT +
//             ")[,|\\s]+(" +
//             CSS_UNIT +
//             ")[,|\\s]+(" +
//             CSS_UNIT +
//             ")[,|\\s]+(" +
//             CSS_UNIT +
//             ")\\s*\\)?"),
//           {
//             CSS_UNIT: new RegExp(CSS_UNIT),
//             rgb: RegExp("rgb" + PERMISSIVE_MATCH3),
//             rgba: RegExp("rgba" + PERMISSIVE_MATCH4),
//             hsl: RegExp("hsl" + PERMISSIVE_MATCH3),
//             hsla: RegExp("hsla" + PERMISSIVE_MATCH4),
//             hsv: RegExp("hsv" + PERMISSIVE_MATCH3),
//             hsva: RegExp("hsva" + PERMISSIVE_MATCH4),
//             hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
//             hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
//             hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
//             hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
//           });
//       function isValidCSSUnit(t) {
//         return !!matchers.CSS_UNIT.exec(t);
//       }
//       function stringInputToObject(t) {
//         t = t.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
//         var e,
//           i = !1;
//         if (names$1[t]) (t = names$1[t]), (i = !0);
//         else if ("transparent" == t)
//           return { r: 0, g: 0, b: 0, a: 0, format: "name" };
//         return (e = matchers.rgb.exec(t))
//           ? { r: e[1], g: e[2], b: e[3] }
//           : (e = matchers.rgba.exec(t))
//           ? { r: e[1], g: e[2], b: e[3], a: e[4] }
//           : (e = matchers.hsl.exec(t))
//           ? { h: e[1], s: e[2], l: e[3] }
//           : (e = matchers.hsla.exec(t))
//           ? { h: e[1], s: e[2], l: e[3], a: e[4] }
//           : (e = matchers.hsv.exec(t))
//           ? { h: e[1], s: e[2], v: e[3] }
//           : (e = matchers.hsva.exec(t))
//           ? { h: e[1], s: e[2], v: e[3], a: e[4] }
//           : (e = matchers.hex8.exec(t))
//           ? {
//               r: parseIntFromHex(e[1]),
//               g: parseIntFromHex(e[2]),
//               b: parseIntFromHex(e[3]),
//               a: convertHexToDecimal(e[4]),
//               format: i ? "name" : "hex8",
//             }
//           : (e = matchers.hex6.exec(t))
//           ? {
//               r: parseIntFromHex(e[1]),
//               g: parseIntFromHex(e[2]),
//               b: parseIntFromHex(e[3]),
//               format: i ? "name" : "hex",
//             }
//           : (e = matchers.hex4.exec(t))
//           ? {
//               r: parseIntFromHex(e[1] + "" + e[1]),
//               g: parseIntFromHex(e[2] + "" + e[2]),
//               b: parseIntFromHex(e[3] + "" + e[3]),
//               a: convertHexToDecimal(e[4] + "" + e[4]),
//               format: i ? "name" : "hex8",
//             }
//           : !!(e = matchers.hex3.exec(t)) && {
//               r: parseIntFromHex(e[1] + "" + e[1]),
//               g: parseIntFromHex(e[2] + "" + e[2]),
//               b: parseIntFromHex(e[3] + "" + e[3]),
//               format: i ? "name" : "hex",
//             };
//       }
//       function validateWCAG2Parms(t) {
//         var e, i;
//         return (
//           "AA" !==
//             (e = (
//               (t = t || { level: "AA", size: "small" }).level || "AA"
//             ).toUpperCase()) &&
//             "AAA" !== e &&
//             (e = "AA"),
//           "small" !== (i = (t.size || "small").toLowerCase()) &&
//             "large" !== i &&
//             (i = "small"),
//           { level: e, size: i }
//         );
//       }
//       function clone(t) {
//         let e = {
//           width: t.bitmap.width,
//           height: t.bitmap.height,
//           data: Buffer.from(t.bitmap.data),
//         };
//         return new t.constructor(e);
//       }
//       function scan(t, e, i, r, n, a) {
//         let s, o, l, h, u;
//         if ("function" == typeof e)
//           (u = e),
//             (s = 0),
//             (o = 0),
//             (l = t.bitmap.width),
//             (h = t.bitmap.height);
//         else {
//           if (((s = e), "number" != typeof i))
//             throw Error("y must be a number");
//           if (((o = i), "number" != typeof r))
//             throw Error("w must be a number");
//           if (((l = r), "number" != typeof n))
//             throw Error("h must be a number");
//           if (((h = n), "function" != typeof a))
//             throw Error("cb must be a function");
//           u = a;
//         }
//         (s = Math.round(s)),
//           (o = Math.round(o)),
//           (l = Math.round(l)),
//           (h = Math.round(h));
//         let f = u.bind(t);
//         for (let e = o; e < o + h; e++)
//           for (let i = s; i < s + l; i++)
//             f(i, e, (t.bitmap.width * e + i) << 2);
//         return t;
//       }
//       function* scanIterator(t, e, i, r, n) {
//         (e = Math.round(e)),
//           (i = Math.round(i)),
//           (r = Math.round(r)),
//           (n = Math.round(n));
//         for (let a = i; a < i + n; a++)
//           for (let i = e; i < e + r; i++) {
//             let e = (t.bitmap.width * a + i) << 2;
//             yield { x: i, y: a, idx: e, image: t };
//           }
//       }
//       function intToRGBA$1(t) {
//         if ("number" != typeof t) throw Error("i must be a number");
//         let e = { r: 0, g: 0, b: 0, a: 0 };
//         return (
//           (e.r = Math.floor(t / 16777216)),
//           (e.g = Math.floor((t - 16777216 * e.r) / 65536)),
//           (e.b = Math.floor((t - 16777216 * e.r - 65536 * e.g) / 256)),
//           (e.a = Math.floor(
//             (t - 16777216 * e.r - 65536 * e.g - 256 * e.b) / 1
//           )),
//           e
//         );
//       }
//       function rgbaToInt(t, e, i, r) {
//         if (
//           "number" != typeof t ||
//           "number" != typeof e ||
//           "number" != typeof i ||
//           "number" != typeof r
//         )
//           throw Error("r, g, b and a must be numbers");
//         if (t < 0 || t > 255) throw Error("r must be between 0 and 255");
//         if (e < 0 || e > 255) throw Error("g must be between 0 and 255");
//         if (i < 0 || i > 255) throw Error("b must be between 0 and 255");
//         if (r < 0 || r > 255) throw Error("a must be between 0 and 255");
//         let n = 255 & t;
//         return (
//           (n <<= 8),
//           (n |= 255 & e),
//           (n <<= 8),
//           (n |= 255 & i),
//           (n <<= 8),
//           (n |= 255 & r),
//           (n >>>= 0)
//         );
//       }
//       function colorDiff(t, e) {
//         let i = (t) => Math.pow(t, 2),
//           { max: r } = Math,
//           n = "a" in t ? t.a : 255,
//           a = "a" in e ? e.a : 255;
//         return (
//           (r(i(t.r - e.r), i(t.r - e.r - n + a)) +
//             r(i(t.g - e.g), i(t.g - e.g - n + a)) +
//             r(i(t.b - e.b), i(t.b - e.b - n + a))) /
//           195075
//         );
//       }
//       function limit255(t) {
//         return (t = Math.min((t = Math.max(t, 0)), 255));
//       }
//       function cssColorToHex(t) {
//         return "number" == typeof t ? t : parseInt(tinycolor(t).toHex8(), 16);
//       }
//       function encode$1(t, e = {}) {
//         return (
//           scan({ bitmap: t }, 0, 0, t.width, t.height, function (e, i, r) {
//             let n = t.data[r + 0],
//               a = t.data[r + 1],
//               s = t.data[r + 2],
//               o = t.data[r + 3];
//             (t.data[r + 0] = o),
//               (t.data[r + 1] = s),
//               (t.data[r + 2] = a),
//               (t.data[r + 3] = n);
//           }),
//           encode$2({ ...t, ...e }).data
//         );
//       }
//       function decode$1(t, e) {
//         let i = decode$2(t, e);
//         return (
//           scan({ bitmap: i }, 0, 0, i.width, i.height, function (t, e, r) {
//             let n = i.data[r + 1],
//               a = i.data[r + 2],
//               s = i.data[r + 3];
//             (i.data[r + 0] = s),
//               (i.data[r + 1] = a),
//               (i.data[r + 2] = n),
//               (i.data[r + 3] = 255);
//           }),
//           i
//         );
//       }
//       function msBmp() {
//         return { mime: "image/x-ms-bmp", encode: encode$1, decode: decode$1 };
//       }
//       function bmp() {
//         return { mime: "image/bmp", encode: encode$1, decode: decode$1 };
//       }
//       var GifReader_1,
//         GifWriter_1,
//         omggif = {};
//       function GifWriter(t, e, i, r) {
//         var n = 0,
//           a = void 0 === (r = void 0 === r ? {} : r).loop ? null : r.loop,
//           s = void 0 === r.palette ? null : r.palette;
//         if (e <= 0 || i <= 0 || e > 65535 || i > 65535)
//           throw Error("Width/Height invalid.");
//         function o(t) {
//           var e = t.length;
//           if (e < 2 || e > 256 || e & (e - 1))
//             throw Error(
//               "Invalid code/color length, must be power of 2 and 2 .. 256."
//             );
//           return e;
//         }
//         (t[n++] = 71),
//           (t[n++] = 73),
//           (t[n++] = 70),
//           (t[n++] = 56),
//           (t[n++] = 57),
//           (t[n++] = 97);
//         var l = 0,
//           h = 0;
//         if (null !== s) {
//           for (var u = o(s); (u >>= 1); ) ++l;
//           if (((u = 1 << l), --l, void 0 !== r.background)) {
//             if ((h = r.background) >= u)
//               throw Error("Background index out of range.");
//             if (0 === h)
//               throw Error("Background index explicitly passed as 0.");
//           }
//         }
//         if (
//           ((t[n++] = 255 & e),
//           (t[n++] = (e >> 8) & 255),
//           (t[n++] = 255 & i),
//           (t[n++] = (i >> 8) & 255),
//           (t[n++] = (null !== s ? 128 : 0) | l),
//           (t[n++] = h),
//           (t[n++] = 0),
//           null !== s)
//         )
//           for (var f = 0, c = s.length; f < c; ++f) {
//             var d = s[f];
//             (t[n++] = (d >> 16) & 255),
//               (t[n++] = (d >> 8) & 255),
//               (t[n++] = 255 & d);
//           }
//         if (null !== a) {
//           if (a < 0 || a > 65535) throw Error("Loop count invalid.");
//           (t[n++] = 33),
//             (t[n++] = 255),
//             (t[n++] = 11),
//             (t[n++] = 78),
//             (t[n++] = 69),
//             (t[n++] = 84),
//             (t[n++] = 83),
//             (t[n++] = 67),
//             (t[n++] = 65),
//             (t[n++] = 80),
//             (t[n++] = 69),
//             (t[n++] = 50),
//             (t[n++] = 46),
//             (t[n++] = 48),
//             (t[n++] = 3),
//             (t[n++] = 1),
//             (t[n++] = 255 & a),
//             (t[n++] = (a >> 8) & 255),
//             (t[n++] = 0);
//         }
//         var p = !1;
//         (this.addFrame = function (e, i, r, a, l, h) {
//           if (
//             (!0 === p && (--n, (p = !1)),
//             (h = void 0 === h ? {} : h),
//             e < 0 || i < 0 || e > 65535 || i > 65535)
//           )
//             throw Error("x/y invalid.");
//           if (r <= 0 || a <= 0 || r > 65535 || a > 65535)
//             throw Error("Width/Height invalid.");
//           if (l.length < r * a)
//             throw Error("Not enough pixels for the frame size.");
//           var u = !0,
//             f = h.palette;
//           if ((null == f && ((u = !1), (f = s)), null == f))
//             throw Error("Must supply either a local or global palette.");
//           for (var c = o(f), d = 0; (c >>= 1); ) ++d;
//           c = 1 << d;
//           var m = void 0 === h.delay ? 0 : h.delay,
//             g = void 0 === h.disposal ? 0 : h.disposal;
//           if (g < 0 || g > 3) throw Error("Disposal out of range.");
//           var _ = !1,
//             b = 0;
//           if (
//             void 0 !== h.transparent &&
//             null !== h.transparent &&
//             ((_ = !0), (b = h.transparent) < 0 || b >= c)
//           )
//             throw Error("Transparent color index.");
//           if (
//             ((0 !== g || _ || 0 !== m) &&
//               ((t[n++] = 33),
//               (t[n++] = 249),
//               (t[n++] = 4),
//               (t[n++] = (g << 2) | (!0 === _ ? 1 : 0)),
//               (t[n++] = 255 & m),
//               (t[n++] = (m >> 8) & 255),
//               (t[n++] = b),
//               (t[n++] = 0)),
//             (t[n++] = 44),
//             (t[n++] = 255 & e),
//             (t[n++] = (e >> 8) & 255),
//             (t[n++] = 255 & i),
//             (t[n++] = (i >> 8) & 255),
//             (t[n++] = 255 & r),
//             (t[n++] = (r >> 8) & 255),
//             (t[n++] = 255 & a),
//             (t[n++] = (a >> 8) & 255),
//             (t[n++] = !0 === u ? 128 | (d - 1) : 0),
//             !0 === u)
//           )
//             for (var y = 0, v = f.length; y < v; ++y) {
//               var w = f[y];
//               (t[n++] = (w >> 16) & 255),
//                 (t[n++] = (w >> 8) & 255),
//                 (t[n++] = 255 & w);
//             }
//           return (n = GifWriterOutputLZWCodeStream(t, n, d < 2 ? 2 : d, l));
//         }),
//           (this.end = function () {
//             return !1 === p && ((t[n++] = 59), (p = !0)), n;
//           }),
//           (this.getOutputBuffer = function () {
//             return t;
//           }),
//           (this.setOutputBuffer = function (e) {
//             t = e;
//           }),
//           (this.getOutputBufferPosition = function () {
//             return n;
//           }),
//           (this.setOutputBufferPosition = function (t) {
//             n = t;
//           });
//       }
//       function GifWriterOutputLZWCodeStream(t, e, i, r) {
//         t[e++] = i;
//         var n = e++,
//           a = 1 << i,
//           s = a - 1,
//           o = a + 1,
//           l = o + 1,
//           h = i + 1,
//           u = 0,
//           f = 0;
//         function c(i) {
//           for (; u >= i; )
//             (t[e++] = 255 & f),
//               (f >>= 8),
//               (u -= 8),
//               e === n + 256 && ((t[n] = 255), (n = e++));
//         }
//         function d(t) {
//           (f |= t << u), (u += h), c(8);
//         }
//         var p = r[0] & s,
//           m = {};
//         d(a);
//         for (var g = 1, _ = r.length; g < _; ++g) {
//           var b = r[g] & s,
//             y = (p << 8) | b,
//             v = m[y];
//           if (void 0 === v) {
//             for (f |= p << u, u += h; u >= 8; )
//               (t[e++] = 255 & f),
//                 (f >>= 8),
//                 (u -= 8),
//                 e === n + 256 && ((t[n] = 255), (n = e++));
//             4096 === l
//               ? (d(a), (l = o + 1), (h = i + 1), (m = {}))
//               : (l >= 1 << h && ++h, (m[y] = l++)),
//               (p = b);
//           } else p = v;
//         }
//         return (
//           d(p),
//           d(o),
//           c(1),
//           n + 1 === e ? (t[n] = 0) : ((t[n] = e - n - 1), (t[e++] = 0)),
//           e
//         );
//       }
//       function GifReader(t) {
//         var e = 0;
//         if (
//           71 !== t[e++] ||
//           73 !== t[e++] ||
//           70 !== t[e++] ||
//           56 !== t[e++] ||
//           56 != ((t[e++] + 1) & 253) ||
//           97 !== t[e++]
//         )
//           throw Error("Invalid GIF 87a/89a header.");
//         var i = t[e++] | (t[e++] << 8),
//           r = t[e++] | (t[e++] << 8),
//           n = t[e++],
//           a = n >> 7,
//           s = 1 << ((7 & n) + 1);
//         t[e++], t[e++];
//         var o = null,
//           l = null;
//         a && ((o = e), (l = s), (e += 3 * s));
//         var h = !0,
//           u = [],
//           f = 0,
//           c = null,
//           d = 0,
//           p = null;
//         for (this.width = i, this.height = r; h && e < t.length; )
//           switch (t[e++]) {
//             case 33:
//               switch (t[e++]) {
//                 case 255:
//                   if (
//                     11 !== t[e] ||
//                     (78 == t[e + 1] &&
//                       69 == t[e + 2] &&
//                       84 == t[e + 3] &&
//                       83 == t[e + 4] &&
//                       67 == t[e + 5] &&
//                       65 == t[e + 6] &&
//                       80 == t[e + 7] &&
//                       69 == t[e + 8] &&
//                       50 == t[e + 9] &&
//                       46 == t[e + 10] &&
//                       48 == t[e + 11] &&
//                       3 == t[e + 12] &&
//                       1 == t[e + 13] &&
//                       0 == t[e + 16])
//                   )
//                     (e += 14), (p = t[e++] | (t[e++] << 8)), e++;
//                   else
//                     for (e += 12; ; ) {
//                       if (!((g = t[e++]) >= 0))
//                         throw Error("Invalid block size");
//                       if (0 === g) break;
//                       e += g;
//                     }
//                   break;
//                 case 249:
//                   if (4 !== t[e++] || 0 !== t[e + 4])
//                     throw Error("Invalid graphics extension block.");
//                   var m = t[e++];
//                   (f = t[e++] | (t[e++] << 8)),
//                     (c = t[e++]),
//                     1 & m || (c = null),
//                     (d = (m >> 2) & 7),
//                     e++;
//                   break;
//                 case 254:
//                   for (;;) {
//                     if (!((g = t[e++]) >= 0)) throw Error("Invalid block size");
//                     if (0 === g) break;
//                     e += g;
//                   }
//                   break;
//                 default:
//                   throw Error(
//                     "Unknown graphic control label: 0x" + t[e - 1].toString(16)
//                   );
//               }
//               break;
//             case 44:
//               var g,
//                 _ = t[e++] | (t[e++] << 8),
//                 b = t[e++] | (t[e++] << 8),
//                 y = t[e++] | (t[e++] << 8),
//                 v = t[e++] | (t[e++] << 8),
//                 w = t[e++],
//                 x = (w >> 6) & 1,
//                 E = 1 << ((7 & w) + 1),
//                 k = o,
//                 M = l,
//                 S = !1;
//               w >> 7 && ((S = !0), (k = e), (M = E), (e += 3 * E));
//               var A = e;
//               for (e++; ; ) {
//                 if (!((g = t[e++]) >= 0)) throw Error("Invalid block size");
//                 if (0 === g) break;
//                 e += g;
//               }
//               u.push({
//                 x: _,
//                 y: b,
//                 width: y,
//                 height: v,
//                 has_local_palette: S,
//                 palette_offset: k,
//                 palette_size: M,
//                 data_offset: A,
//                 data_length: e - A,
//                 transparent_index: c,
//                 interlaced: !!x,
//                 delay: f,
//                 disposal: d,
//               });
//               break;
//             case 59:
//               h = !1;
//               break;
//             default:
//               throw Error("Unknown gif block: 0x" + t[e - 1].toString(16));
//           }
//         (this.numFrames = function () {
//           return u.length;
//         }),
//           (this.loopCount = function () {
//             return p;
//           }),
//           (this.frameInfo = function (t) {
//             if (t < 0 || t >= u.length)
//               throw Error("Frame index out of range.");
//             return u[t];
//           }),
//           (this.decodeAndBlitFrameBGRA = function (e, r) {
//             var n = this.frameInfo(e),
//               a = n.width * n.height,
//               s = new Uint8Array(a);
//             GifReaderLZWOutputIndexStream(t, n.data_offset, s, a);
//             var o = n.palette_offset,
//               l = n.transparent_index;
//             null === l && (l = 256);
//             var h = n.width,
//               u = i - h,
//               f = h,
//               c = 4 * (n.y * i + n.x),
//               d = 4 * ((n.y + n.height) * i + n.x),
//               p = c,
//               m = 4 * u;
//             !0 === n.interlaced && (m += 4 * i * 7);
//             for (var g = 8, _ = 0, b = s.length; _ < b; ++_) {
//               var y = s[_];
//               if (
//                 (0 === f &&
//                   ((f = h),
//                   (p += m) >= d &&
//                     ((m = 4 * u + 4 * i * (g - 1)),
//                     (p = c + (h + u) * (g << 1)),
//                     (g >>= 1))),
//                 y === l)
//               )
//                 p += 4;
//               else {
//                 var v = t[o + 3 * y],
//                   w = t[o + 3 * y + 1],
//                   x = t[o + 3 * y + 2];
//                 (r[p++] = x), (r[p++] = w), (r[p++] = v), (r[p++] = 255);
//               }
//               --f;
//             }
//           }),
//           (this.decodeAndBlitFrameRGBA = function (e, r) {
//             var n = this.frameInfo(e),
//               a = n.width * n.height,
//               s = new Uint8Array(a);
//             GifReaderLZWOutputIndexStream(t, n.data_offset, s, a);
//             var o = n.palette_offset,
//               l = n.transparent_index;
//             null === l && (l = 256);
//             var h = n.width,
//               u = i - h,
//               f = h,
//               c = 4 * (n.y * i + n.x),
//               d = 4 * ((n.y + n.height) * i + n.x),
//               p = c,
//               m = 4 * u;
//             !0 === n.interlaced && (m += 4 * i * 7);
//             for (var g = 8, _ = 0, b = s.length; _ < b; ++_) {
//               var y = s[_];
//               if (
//                 (0 === f &&
//                   ((f = h),
//                   (p += m) >= d &&
//                     ((m = 4 * u + 4 * i * (g - 1)),
//                     (p = c + (h + u) * (g << 1)),
//                     (g >>= 1))),
//                 y === l)
//               )
//                 p += 4;
//               else {
//                 var v = t[o + 3 * y],
//                   w = t[o + 3 * y + 1],
//                   x = t[o + 3 * y + 2];
//                 (r[p++] = v), (r[p++] = w), (r[p++] = x), (r[p++] = 255);
//               }
//               --f;
//             }
//           });
//       }
//       function GifReaderLZWOutputIndexStream(t, e, i, r) {
//         for (
//           var n = t[e++],
//             a = 1 << n,
//             s = a + 1,
//             o = s + 1,
//             l = n + 1,
//             h = (1 << l) - 1,
//             u = 0,
//             f = 0,
//             c = 0,
//             d = t[e++],
//             p = new Int32Array(4096),
//             m = null;
//           ;

//         ) {
//           for (; u < 16 && 0 !== d; )
//             (f |= t[e++] << u), (u += 8), 1 === d ? (d = t[e++]) : --d;
//           if (u < l) break;
//           var g = f & h;
//           if (((f >>= l), (u -= l), g !== a)) {
//             if (g === s) break;
//             for (var _ = g < o ? g : m, b = 0, y = _; y > a; )
//               (y = p[y] >> 8), ++b;
//             var v = y;
//             if (c + b + (_ !== g ? 1 : 0) > r)
//               return void console.log(
//                 "Warning, gif stream longer than expected."
//               );
//             i[c++] = v;
//             var w = (c += b);
//             for (_ !== g && (i[c++] = v), y = _; b--; )
//               (y = p[y]), (i[--w] = 255 & y), (y >>= 8);
//             null !== m &&
//               o < 4096 &&
//               ((p[o++] = (m << 8) | v),
//               o >= h + 1 && l < 12 && (++l, (h = (h << 1) | 1))),
//               (m = g);
//           } else (o = s + 1), (h = (1 << (l = n + 1)) - 1), (m = null);
//         }
//         return (
//           c !== r && console.log("Warning, gif stream shorter than expected."),
//           i
//         );
//       }
//       try {
//         (GifWriter_1 = omggif.GifWriter = GifWriter),
//           (GifReader_1 = omggif.GifReader = GifReader);
//       } catch (e) {}
//       let BitmapImage$2 = class e {
//         constructor(...t) {
//           if (0 === t.length) throw Error("constructor requires parameters");
//           let i = t[0];
//           if (null !== i && "object" == typeof i) {
//             if (i instanceof e) {
//               let t = i.bitmap;
//               (this.bitmap = {
//                 width: t.width,
//                 height: t.height,
//                 data: new Buffer(t.width * t.height * 4),
//               }),
//                 t.data.copy(this.bitmap.data);
//             } else {
//               if (!(i.width && i.height && i.data))
//                 throw Error("unrecognized constructor parameters");
//               this.bitmap = i;
//             }
//           } else {
//             if ("number" != typeof i || "number" != typeof t[1])
//               throw Error("unrecognized constructor parameters");
//             {
//               let r = i,
//                 n = t[1],
//                 a = t[2];
//               (this.bitmap = { width: r, height: n }),
//                 Buffer.isBuffer(a)
//                   ? (this.bitmap.data = a)
//                   : ((this.bitmap.data = new Buffer(r * n * 4)),
//                     "number" == typeof a && this.fillRGBA(a));
//             }
//           }
//         }
//         blit(t, e, i, r, n, a, s) {
//           if (r + a > this.bitmap.width)
//             throw Error("copy exceeds width of source bitmap");
//           if (e + a > t.bitmap.width)
//             throw Error("copy exceeds width of target bitmap");
//           if (n + s > this.bitmap.height)
//             throw Error("copy exceeds height of source bitmap");
//           if (i + s > t.bitmap.height)
//             throw new Erro("copy exceeds height of target bitmap");
//           let o = this.bitmap.data,
//             l = t.bitmap.data,
//             h = 4 * this.bitmap.width,
//             u = 4 * t.bitmap.width,
//             f = 4 * a,
//             c = n * h + 4 * r,
//             d = i * u + 4 * e;
//           for (; --s >= 0; ) o.copy(l, d, c, c + f), (c += h), (d += u);
//           return this;
//         }
//         fillRGBA(t) {
//           let e = this.bitmap.data,
//             i = 4 * this.bitmap.height,
//             r = 0;
//           for (; r < i; ) e.writeUInt32BE(t, r), (r += 4);
//           for (; r < e.length; ) e.copy(e, r, 0, i), (r += i);
//           return this;
//         }
//         getRGBA(t, e) {
//           let i = 4 * (e * this.bitmap.width + t);
//           return this.bitmap.data.readUInt32BE(i);
//         }
//         getRGBASet() {
//           let t = new Set(),
//             e = this.bitmap.data;
//           for (let i = 0; i < e.length; i += 4) t.add(e.readUInt32BE(i, !0));
//           return t;
//         }
//         greyscale() {
//           let t = this.bitmap.data;
//           return (
//             this.scan(
//               0,
//               0,
//               this.bitmap.width,
//               this.bitmap.height,
//               (e, i, r) => {
//                 let n = Math.round(
//                   0.299 * t[r] + 0.587 * t[r + 1] + 0.114 * t[r + 2]
//                 );
//                 (t[r] = n), (t[r + 1] = n), (t[r + 2] = n);
//               }
//             ),
//             this
//           );
//         }
//         reframe(t, i, r, n, a) {
//           let s;
//           let o = t < 0 ? 0 : t,
//             l = i < 0 ? 0 : i,
//             h = r + o > this.bitmap.width ? this.bitmap.width - o : r,
//             u = n + l > this.bitmap.height ? this.bitmap.height - l : n,
//             f = t < 0 ? -t : 0,
//             c = i < 0 ? -i : 0;
//           if (void 0 === a) {
//             if (o !== t || l != i || h !== r || u !== n)
//               throw new GifError("fillRGBA required for this reframing");
//             s = new e(r, n);
//           } else s = new e(r, n, a);
//           return this.blit(s, f, c, o, l, h, u), (this.bitmap = s.bitmap), this;
//         }
//         scale(t) {
//           if (1 === t) return;
//           if (!Number.isInteger(t) || t < 1)
//             throw Error("the scale must be an integer >= 1");
//           let e = this.bitmap.width,
//             i = this.bitmap.height,
//             r = e * t * 4,
//             n = this.bitmap.data,
//             a = new Buffer(i * r * t),
//             s,
//             o = 0,
//             l = 0;
//           for (let h = 0; h < i; ++h) {
//             s = l;
//             for (let i = 0; i < e; ++i) {
//               let e = n.readUInt32BE(o, !0);
//               for (let i = 0; i < t; ++i) a.writeUInt32BE(e, l), (l += 4);
//               o += 4;
//             }
//             for (let e = 1; e < t; ++e) a.copy(a, l, s, l), (l += r), (s += r);
//           }
//           return (this.bitmap = { width: e * t, height: i * t, data: a }), this;
//         }
//         scanAllCoords(t) {
//           let e = this.bitmap.width,
//             i = this.bitmap.data.length,
//             r = 0,
//             n = 0;
//           for (let a = 0; a < i; a += 4)
//             t(r, n, a), ++r === e && ((r = 0), ++n);
//         }
//         scanAllIndexes(t) {
//           let e = this.bitmap.data.length;
//           for (let i = 0; i < e; i += 4) t(i);
//         }
//       };
//       var bitmapimage = BitmapImage$2,
//         gif$1 = {};
//       let Gif$1 = class {
//         constructor(t, e, i) {
//           (this.width = i.width),
//             (this.height = i.height),
//             (this.loops = i.loops),
//             (this.usesTransparency = i.usesTransparency),
//             (this.colorScope = i.colorScope),
//             (this.frames = e),
//             (this.buffer = t);
//         }
//       };
//       (Gif$1.GlobalColorsPreferred = 0),
//         (Gif$1.GlobalColorsOnly = 1),
//         (Gif$1.LocalColorsOnly = 2);
//       let GifError$2 = class extends Error {
//         constructor(t) {
//           super(t), t instanceof Error && (this.stack = "Gif" + t.stack);
//         }
//       };
//       (gif$1.Gif = Gif$1), (gif$1.GifError = GifError$2);
//       var gifcodec = {},
//         gifutil = {},
//         _polyfillNode_fs = {},
//         _polyfillNode_fs$1 = Object.freeze({
//           __proto__: null,
//           default: _polyfillNode_fs,
//         }),
//         require$$0 = getAugmentedNamespace(_polyfillNode_fs$1),
//         __defProp$3 = Object.defineProperty,
//         __getOwnPropDesc = Object.getOwnPropertyDescriptor,
//         __getOwnPropNames = Object.getOwnPropertyNames,
//         __hasOwnProp = Object.prototype.hasOwnProperty,
//         __defNormalProp$3 = (t, e, i) =>
//           e in t
//             ? __defProp$3(t, e, {
//                 enumerable: !0,
//                 configurable: !0,
//                 writable: !0,
//                 value: i,
//               })
//             : (t[e] = i),
//         __markAsModule = (t) => __defProp$3(t, "__esModule", { value: !0 }),
//         __export$1 = (t, e) => {
//           for (var i in e) __defProp$3(t, i, { get: e[i], enumerable: !0 });
//         },
//         __reExport = (t, e, i, r) => {
//           if ((e && "object" == typeof e) || "function" == typeof e)
//             for (let n of __getOwnPropNames(e))
//               !__hasOwnProp.call(t, n) &&
//                 i &&
//                 __defProp$3(t, n, {
//                   get: () => e[n],
//                   enumerable: !(r = __getOwnPropDesc(e, n)) || r.enumerable,
//                 });
//           return t;
//         },
//         __toCommonJS =
//           ((e = "undefined" != typeof WeakMap ? new WeakMap() : 0),
//           (t, i) =>
//             (e && e.get(t)) ||
//             ((i = __reExport(__markAsModule({}), t, 1)), e && e.set(t, i), i)),
//         __publicField$3 = (t, e, i) => (
//           __defNormalProp$3(t, "symbol" != typeof e ? e + "" : e, i), i
//         ),
//         src_exports = {};
//       __export$1(src_exports, {
//         applyPalette: () => applyPalette,
//         applyPaletteSync: () => applyPaletteSync$1,
//         buildPalette: () => buildPalette,
//         buildPaletteSync: () => buildPaletteSync$1,
//         constants: () => constants_exports$1,
//         conversion: () => conversion_exports$1,
//         distance: () => distance_exports$1,
//         image: () => image_exports$1,
//         palette: () => palette_exports$1,
//         quality: () => quality_exports$1,
//         utils: () => utils_exports$1,
//       });
//       var constants_exports$1 = {};
//       __export$1(constants_exports$1, { bt709: () => bt709_exports$1 });
//       var bt709_exports$1 = {};
//       __export$1(bt709_exports$1, { Y: () => Y$1, x: () => x$2, y: () => y$2 });
//       var Y$1 =
//           ((e = Y$1 || {}),
//           (e[(e.RED = 0.2126)] = "RED"),
//           (e[(e.GREEN = 0.7152)] = "GREEN"),
//           (e[(e.BLUE = 0.0722)] = "BLUE"),
//           (e[(e.WHITE = 1)] = "WHITE"),
//           e),
//         x$2 =
//           ((e = x$2 || {}),
//           (e[(e.RED = 0.64)] = "RED"),
//           (e[(e.GREEN = 0.3)] = "GREEN"),
//           (e[(e.BLUE = 0.15)] = "BLUE"),
//           (e[(e.WHITE = 0.3127)] = "WHITE"),
//           e),
//         y$2 =
//           ((e = y$2 || {}),
//           (e[(e.RED = 0.33)] = "RED"),
//           (e[(e.GREEN = 0.6)] = "GREEN"),
//           (e[(e.BLUE = 0.06)] = "BLUE"),
//           (e[(e.WHITE = 0.329)] = "WHITE"),
//           e),
//         conversion_exports$1 = {};
//       function correctGamma$1(t) {
//         return t > 0.04045 ? ((t + 0.055) / 1.055) ** 2.4 : t / 12.92;
//       }
//       function rgb2xyz$1(t, e, i) {
//         return {
//           x:
//             0.4124 * (t = correctGamma$1(t / 255)) +
//             0.3576 * (e = correctGamma$1(e / 255)) +
//             0.1805 * (i = correctGamma$1(i / 255)),
//           y: 0.2126 * t + 0.7152 * e + 0.0722 * i,
//           z: 0.0193 * t + 0.1192 * e + 0.9505 * i,
//         };
//       }
//       __export$1(conversion_exports$1, {
//         lab2rgb: () => lab2rgb$1,
//         lab2xyz: () => lab2xyz$1,
//         rgb2hsl: () => rgb2hsl$1,
//         rgb2lab: () => rgb2lab$1,
//         rgb2xyz: () => rgb2xyz$1,
//         xyz2lab: () => xyz2lab$1,
//         xyz2rgb: () => xyz2rgb$1,
//       });
//       var arithmetic_exports$1 = {};
//       function degrees2radians$1(t) {
//         return (Math.PI / 180) * t;
//       }
//       function max3$1(t, e, i) {
//         let r = t;
//         return r < e && (r = e), r < i && (r = i), r;
//       }
//       function min3$1(t, e, i) {
//         let r = t;
//         return r > e && (r = e), r > i && (r = i), r;
//       }
//       function intInRange$1(t, e, i) {
//         return t > i && (t = i), t < e && (t = e), 0 | t;
//       }
//       function inRange0to255Rounded$1(t) {
//         return (t = Math.round(t)) > 255 ? (t = 255) : t < 0 && (t = 0), t;
//       }
//       function inRange0to255$1(t) {
//         return t > 255 ? (t = 255) : t < 0 && (t = 0), t;
//       }
//       function stableSort$1(t, e) {
//         let i;
//         let r = typeof t[0];
//         if ("number" === r || "string" === r) {
//           let r = Object.create(null);
//           for (let e = 0, i = t.length; e < i; e++) {
//             let i = t[e];
//             r[i] || 0 === r[i] || (r[i] = e);
//           }
//           i = t.sort((t, i) => e(t, i) || r[t] - r[i]);
//         } else {
//           let r = t.slice(0);
//           i = t.sort((t, i) => e(t, i) || r.indexOf(t) - r.indexOf(i));
//         }
//         return i;
//       }
//       function rgb2hsl$1(t, e, i) {
//         let r = min3$1(t, e, i),
//           n = max3$1(t, e, i),
//           a = n - r,
//           s = (r + n) / 510,
//           o = 0;
//         s > 0 && s < 1 && (o = a / (s < 0.5 ? n + r : 510 - n - r));
//         let l = 0;
//         return (
//           a > 0 &&
//             (l =
//               (n === t
//                 ? (e - i) / a
//                 : n === e
//                 ? 2 + (i - t) / a
//                 : 4 + (t - e) / a) * 60) < 0 &&
//             (l += 360),
//           { h: l, s: o, l: s }
//         );
//       }
//       __export$1(arithmetic_exports$1, {
//         degrees2radians: () => degrees2radians$1,
//         inRange0to255: () => inRange0to255$1,
//         inRange0to255Rounded: () => inRange0to255Rounded$1,
//         intInRange: () => intInRange$1,
//         max3: () => max3$1,
//         min3: () => min3$1,
//         stableSort: () => stableSort$1,
//       });
//       var refX$1 = 0.95047,
//         refY$1 = 1,
//         refZ$1 = 1.08883;
//       function pivot$1(t) {
//         return t > 0.008856 ? t ** (1 / 3) : 7.787 * t + 16 / 116;
//       }
//       function xyz2lab$1(t, e, i) {
//         if (
//           ((t = pivot$1(t / refX$1)),
//           (e = pivot$1(e / refY$1)),
//           (i = pivot$1(i / refZ$1)),
//           116 * e - 16 < 0)
//         )
//           throw Error("xxx");
//         return {
//           L: Math.max(0, 116 * e - 16),
//           a: 500 * (t - e),
//           b: 200 * (e - i),
//         };
//       }
//       function rgb2lab$1(t, e, i) {
//         let r = rgb2xyz$1(t, e, i);
//         return xyz2lab$1(r.x, r.y, r.z);
//       }
//       var refX2$1 = 0.95047,
//         refY2$1 = 1,
//         refZ2$1 = 1.08883;
//       function pivot2$1(t) {
//         return t > 0.206893034 ? t ** 3 : (t - 16 / 116) / 7.787;
//       }
//       function lab2xyz$1(t, e, i) {
//         let r = (t + 16) / 116,
//           n = r - i / 200;
//         return {
//           x: refX2$1 * pivot2$1(e / 500 + r),
//           y: refY2$1 * pivot2$1(r),
//           z: refZ2$1 * pivot2$1(n),
//         };
//       }
//       function correctGamma2$1(t) {
//         return t > 0.0031308 ? 1.055 * t ** (1 / 2.4) - 0.055 : 12.92 * t;
//       }
//       function xyz2rgb$1(t, e, i) {
//         let r = correctGamma2$1(3.2406 * t + -1.5372 * e + -0.4986 * i),
//           n = correctGamma2$1(-0.9689 * t + 1.8758 * e + 0.0415 * i),
//           a = correctGamma2$1(0.0557 * t + -0.204 * e + 1.057 * i);
//         return {
//           r: inRange0to255Rounded$1(255 * r),
//           g: inRange0to255Rounded$1(255 * n),
//           b: inRange0to255Rounded$1(255 * a),
//         };
//       }
//       function lab2rgb$1(t, e, i) {
//         let r = lab2xyz$1(t, e, i);
//         return xyz2rgb$1(r.x, r.y, r.z);
//       }
//       var distance_exports$1 = {};
//       __export$1(distance_exports$1, {
//         AbstractDistanceCalculator: () => AbstractDistanceCalculator$1,
//         AbstractEuclidean: () => AbstractEuclidean$1,
//         AbstractManhattan: () => AbstractManhattan$1,
//         CIE94GraphicArts: () => CIE94GraphicArts$1,
//         CIE94Textiles: () => CIE94Textiles$1,
//         CIEDE2000: () => CIEDE2000$1,
//         CMetric: () => CMetric$1,
//         Euclidean: () => Euclidean$1,
//         EuclideanBT709: () => EuclideanBT709$1,
//         EuclideanBT709NoAlpha: () => EuclideanBT709NoAlpha$1,
//         Manhattan: () => Manhattan$1,
//         ManhattanBT709: () => ManhattanBT709$1,
//         ManhattanNommyde: () => ManhattanNommyde$1,
//         PNGQuant: () => PNGQuant$1,
//       });
//       var AbstractDistanceCalculator$1 = class {
//           constructor() {
//             __publicField$3(this, "_maxDistance"),
//               __publicField$3(this, "_whitePoint"),
//               this._setDefaults(),
//               this.setWhitePoint(255, 255, 255, 255);
//           }
//           setWhitePoint(t, e, i, r) {
//             (this._whitePoint = {
//               r: t > 0 ? 255 / t : 0,
//               g: e > 0 ? 255 / e : 0,
//               b: i > 0 ? 255 / i : 0,
//               a: r > 0 ? 255 / r : 0,
//             }),
//               (this._maxDistance = this.calculateRaw(t, e, i, r, 0, 0, 0, 0));
//           }
//           calculateNormalized(t, e) {
//             return (
//               this.calculateRaw(t.r, t.g, t.b, t.a, e.r, e.g, e.b, e.a) /
//               this._maxDistance
//             );
//           }
//         },
//         AbstractCIE94$1 = class extends AbstractDistanceCalculator$1 {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = rgb2lab$1(
//                 inRange0to255$1(t * this._whitePoint.r),
//                 inRange0to255$1(e * this._whitePoint.g),
//                 inRange0to255$1(i * this._whitePoint.b)
//               ),
//               h = rgb2lab$1(
//                 inRange0to255$1(n * this._whitePoint.r),
//                 inRange0to255$1(a * this._whitePoint.g),
//                 inRange0to255$1(s * this._whitePoint.b)
//               ),
//               u = l.L - h.L,
//               f = l.a - h.a,
//               c = l.b - h.b,
//               d = Math.sqrt(l.a * l.a + l.b * l.b),
//               p = d - Math.sqrt(h.a * h.a + h.b * h.b),
//               m = f * f + c * c - p * p;
//             m = m < 0 ? 0 : Math.sqrt(m);
//             let g = (o - r) * this._whitePoint.a * this._kA;
//             return Math.sqrt(
//               (u / this._Kl) ** 2 +
//                 (p / (1 + this._K1 * d)) ** 2 +
//                 (m / (1 + this._K2 * d)) ** 2 +
//                 g ** 2
//             );
//           }
//         },
//         CIE94Textiles$1 = class extends AbstractCIE94$1 {
//           _setDefaults() {
//             (this._Kl = 2),
//               (this._K1 = 0.048),
//               (this._K2 = 0.014),
//               (this._kA = 12.5 / 255);
//           }
//         },
//         CIE94GraphicArts$1 = class extends AbstractCIE94$1 {
//           _setDefaults() {
//             (this._Kl = 1),
//               (this._K1 = 0.045),
//               (this._K2 = 0.015),
//               (this._kA = 25 / 255);
//           }
//         },
//         _CIEDE2000$1 = class extends AbstractDistanceCalculator$1 {
//           _setDefaults() {}
//           static _calculatehp(t, e) {
//             let i = Math.atan2(t, e);
//             return i >= 0 ? i : i + _CIEDE2000$1._deg360InRad;
//           }
//           static _calculateRT(t, e) {
//             let i = e ** 7,
//               r = 2 * Math.sqrt(i / (i + _CIEDE2000$1._pow25to7));
//             return (
//               -Math.sin(
//                 _CIEDE2000$1._deg30InRad *
//                   Math.exp(
//                     -(
//                       ((t - _CIEDE2000$1._deg275InRad) /
//                         _CIEDE2000$1._deg25InRad) **
//                       2
//                     )
//                   ) *
//                   2
//               ) * r
//             );
//           }
//           static _calculateT(t) {
//             return (
//               1 -
//               0.17 * Math.cos(t - _CIEDE2000$1._deg30InRad) +
//               0.24 * Math.cos(2 * t) +
//               0.32 * Math.cos(3 * t + _CIEDE2000$1._deg6InRad) -
//               0.2 * Math.cos(4 * t - _CIEDE2000$1._deg63InRad)
//             );
//           }
//           static _calculate_ahp(t, e, i, r) {
//             let n = i + r;
//             return 0 === t
//               ? n
//               : e <= _CIEDE2000$1._deg180InRad
//               ? n / 2
//               : n < _CIEDE2000$1._deg360InRad
//               ? (n + _CIEDE2000$1._deg360InRad) / 2
//               : (n - _CIEDE2000$1._deg360InRad) / 2;
//           }
//           static _calculate_dHp(t, e, i, r) {
//             let n;
//             return (
//               (n =
//                 0 === t
//                   ? 0
//                   : e <= _CIEDE2000$1._deg180InRad
//                   ? i - r
//                   : i <= r
//                   ? i - r + _CIEDE2000$1._deg360InRad
//                   : i - r - _CIEDE2000$1._deg360InRad),
//               2 * Math.sqrt(t) * Math.sin(n / 2)
//             );
//           }
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = rgb2lab$1(
//                 inRange0to255$1(t * this._whitePoint.r),
//                 inRange0to255$1(e * this._whitePoint.g),
//                 inRange0to255$1(i * this._whitePoint.b)
//               ),
//               h = rgb2lab$1(
//                 inRange0to255$1(n * this._whitePoint.r),
//                 inRange0to255$1(a * this._whitePoint.g),
//                 inRange0to255$1(s * this._whitePoint.b)
//               ),
//               u = (o - r) * this._whitePoint.a * _CIEDE2000$1._kA;
//             return Math.sqrt(this.calculateRawInLab(l, h) + u * u);
//           }
//           calculateRawInLab(t, e) {
//             let i = t.L,
//               r = t.a,
//               n = t.b,
//               a = e.L,
//               s = e.a,
//               o = e.b,
//               l =
//                 ((Math.sqrt(r * r + n * n) + Math.sqrt(s * s + o * o)) / 2) **
//                 7,
//               h = 0.5 * (1 - Math.sqrt(l / (l + _CIEDE2000$1._pow25to7))),
//               u = (1 + h) * r,
//               f = (1 + h) * s,
//               c = Math.sqrt(u * u + n * n),
//               d = Math.sqrt(f * f + o * o),
//               p = c * d,
//               m = _CIEDE2000$1._calculatehp(n, u),
//               g = _CIEDE2000$1._calculatehp(o, f),
//               _ = Math.abs(m - g),
//               b = a - i,
//               y = d - c,
//               v = _CIEDE2000$1._calculate_dHp(p, _, g, m),
//               w = _CIEDE2000$1._calculate_ahp(p, _, m, g),
//               x = (c + d) / 2,
//               E = ((i + a) / 2 - 50) ** 2,
//               k = y / (1 + 0.045 * x),
//               M = v / (1 + 0.015 * _CIEDE2000$1._calculateT(w) * x);
//             return (
//               (b / (1 + (0.015 * E) / Math.sqrt(20 + E))) ** 2 +
//               k ** 2 +
//               M ** 2 +
//               _CIEDE2000$1._calculateRT(w, x) * k * M
//             );
//           }
//         },
//         CIEDE2000$1 = _CIEDE2000$1;
//       __publicField$3(CIEDE2000$1, "_kA", 25 / 255),
//         __publicField$3(CIEDE2000$1, "_pow25to7", 6103515625),
//         __publicField$3(CIEDE2000$1, "_deg360InRad", degrees2radians$1(360)),
//         __publicField$3(CIEDE2000$1, "_deg180InRad", degrees2radians$1(180)),
//         __publicField$3(CIEDE2000$1, "_deg30InRad", degrees2radians$1(30)),
//         __publicField$3(CIEDE2000$1, "_deg6InRad", degrees2radians$1(6)),
//         __publicField$3(CIEDE2000$1, "_deg63InRad", degrees2radians$1(63)),
//         __publicField$3(CIEDE2000$1, "_deg275InRad", degrees2radians$1(275)),
//         __publicField$3(CIEDE2000$1, "_deg25InRad", degrees2radians$1(25));
//       var CMetric$1 = class extends AbstractDistanceCalculator$1 {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = ((t + n) / 2) * this._whitePoint.r,
//               h = (t - n) * this._whitePoint.r,
//               u = (e - a) * this._whitePoint.g,
//               f = (i - s) * this._whitePoint.b,
//               c =
//                 (((512 + l) * h * h) >> 8) +
//                 4 * u * u +
//                 (((767 - l) * f * f) >> 8),
//               d = (o - r) * this._whitePoint.a;
//             return Math.sqrt(c + d * d);
//           }
//           _setDefaults() {}
//         },
//         AbstractEuclidean$1 = class extends AbstractDistanceCalculator$1 {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = n - t,
//               h = a - e,
//               u = s - i,
//               f = o - r;
//             return Math.sqrt(
//               this._kR * l * l +
//                 this._kG * h * h +
//                 this._kB * u * u +
//                 this._kA * f * f
//             );
//           }
//         },
//         Euclidean$1 = class extends AbstractEuclidean$1 {
//           _setDefaults() {
//             (this._kR = 1), (this._kG = 1), (this._kB = 1), (this._kA = 1);
//           }
//         },
//         EuclideanBT709$1 = class extends AbstractEuclidean$1 {
//           _setDefaults() {
//             (this._kR = 0.2126),
//               (this._kG = 0.7152),
//               (this._kB = 0.0722),
//               (this._kA = 1);
//           }
//         },
//         EuclideanBT709NoAlpha$1 = class extends AbstractEuclidean$1 {
//           _setDefaults() {
//             (this._kR = 0.2126),
//               (this._kG = 0.7152),
//               (this._kB = 0.0722),
//               (this._kA = 0);
//           }
//         },
//         AbstractManhattan$1 = class extends AbstractDistanceCalculator$1 {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = n - t,
//               h = a - e,
//               u = s - i,
//               f = o - r;
//             return (
//               l < 0 && (l = 0 - l),
//               h < 0 && (h = 0 - h),
//               u < 0 && (u = 0 - u),
//               f < 0 && (f = 0 - f),
//               this._kR * l + this._kG * h + this._kB * u + this._kA * f
//             );
//           }
//         },
//         Manhattan$1 = class extends AbstractManhattan$1 {
//           _setDefaults() {
//             (this._kR = 1), (this._kG = 1), (this._kB = 1), (this._kA = 1);
//           }
//         },
//         ManhattanNommyde$1 = class extends AbstractManhattan$1 {
//           _setDefaults() {
//             (this._kR = 0.4984),
//               (this._kG = 0.8625),
//               (this._kB = 0.2979),
//               (this._kA = 1);
//           }
//         },
//         ManhattanBT709$1 = class extends AbstractManhattan$1 {
//           _setDefaults() {
//             (this._kR = 0.2126),
//               (this._kG = 0.7152),
//               (this._kB = 0.0722),
//               (this._kA = 1);
//           }
//         },
//         PNGQuant$1 = class extends AbstractDistanceCalculator$1 {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = (o - r) * this._whitePoint.a;
//             return (
//               this._colordifferenceCh(
//                 t * this._whitePoint.r,
//                 n * this._whitePoint.r,
//                 l
//               ) +
//               this._colordifferenceCh(
//                 e * this._whitePoint.g,
//                 a * this._whitePoint.g,
//                 l
//               ) +
//               this._colordifferenceCh(
//                 i * this._whitePoint.b,
//                 s * this._whitePoint.b,
//                 l
//               )
//             );
//           }
//           _colordifferenceCh(t, e, i) {
//             let r = t - e,
//               n = r + i;
//             return r * r + n * n;
//           }
//           _setDefaults() {}
//         },
//         palette_exports$1 = {};
//       __export$1(palette_exports$1, {
//         AbstractPaletteQuantizer: () => AbstractPaletteQuantizer$1,
//         ColorHistogram: () => ColorHistogram$1,
//         NeuQuant: () => NeuQuant$1,
//         NeuQuantFloat: () => NeuQuantFloat$1,
//         RGBQuant: () => RGBQuant$1,
//         WuColorCube: () => WuColorCube$1,
//         WuQuant: () => WuQuant$1,
//       });
//       var AbstractPaletteQuantizer$1 = class {
//           quantizeSync() {
//             for (let t of this.quantize()) if (t.palette) return t.palette;
//             throw Error("unreachable");
//           }
//         },
//         Point$1 = class {
//           constructor() {
//             __publicField$3(this, "r"),
//               __publicField$3(this, "g"),
//               __publicField$3(this, "b"),
//               __publicField$3(this, "a"),
//               __publicField$3(this, "uint32"),
//               __publicField$3(this, "rgba"),
//               (this.uint32 = 4294967295),
//               (this.r = this.g = this.b = this.a = 0),
//               (this.rgba = [, , , ,]),
//               (this.rgba[0] = 0),
//               (this.rgba[1] = 0),
//               (this.rgba[2] = 0),
//               (this.rgba[3] = 0);
//           }
//           static createByQuadruplet(t) {
//             let e = new Point$1();
//             return (
//               (e.r = 0 | t[0]),
//               (e.g = 0 | t[1]),
//               (e.b = 0 | t[2]),
//               (e.a = 0 | t[3]),
//               e._loadUINT32(),
//               e._loadQuadruplet(),
//               e
//             );
//           }
//           static createByRGBA(t, e, i, r) {
//             let n = new Point$1();
//             return (
//               (n.r = 0 | t),
//               (n.g = 0 | e),
//               (n.b = 0 | i),
//               (n.a = 0 | r),
//               n._loadUINT32(),
//               n._loadQuadruplet(),
//               n
//             );
//           }
//           static createByUint32(t) {
//             let e = new Point$1();
//             return (e.uint32 = t >>> 0), e._loadRGBA(), e._loadQuadruplet(), e;
//           }
//           from(t) {
//             (this.r = t.r),
//               (this.g = t.g),
//               (this.b = t.b),
//               (this.a = t.a),
//               (this.uint32 = t.uint32),
//               (this.rgba[0] = t.r),
//               (this.rgba[1] = t.g),
//               (this.rgba[2] = t.b),
//               (this.rgba[3] = t.a);
//           }
//           getLuminosity(t) {
//             let e = this.r,
//               i = this.g,
//               r = this.b;
//             return (
//               t &&
//                 ((e = Math.min(255, 255 - this.a + (this.a * e) / 255)),
//                 (i = Math.min(255, 255 - this.a + (this.a * i) / 255)),
//                 (r = Math.min(255, 255 - this.a + (this.a * r) / 255))),
//               0.2126 * e + 0.7152 * i + 0.0722 * r
//             );
//           }
//           _loadUINT32() {
//             this.uint32 =
//               ((this.a << 24) | (this.b << 16) | (this.g << 8) | this.r) >>> 0;
//           }
//           _loadRGBA() {
//             (this.r = 255 & this.uint32),
//               (this.g = (this.uint32 >>> 8) & 255),
//               (this.b = (this.uint32 >>> 16) & 255),
//               (this.a = (this.uint32 >>> 24) & 255);
//           }
//           _loadQuadruplet() {
//             (this.rgba[0] = this.r),
//               (this.rgba[1] = this.g),
//               (this.rgba[2] = this.b),
//               (this.rgba[3] = this.a);
//           }
//         },
//         PointContainer$1 = class {
//           constructor() {
//             __publicField$3(this, "_pointArray"),
//               __publicField$3(this, "_width"),
//               __publicField$3(this, "_height"),
//               (this._width = 0),
//               (this._height = 0),
//               (this._pointArray = []);
//           }
//           getWidth() {
//             return this._width;
//           }
//           getHeight() {
//             return this._height;
//           }
//           setWidth(t) {
//             this._width = t;
//           }
//           setHeight(t) {
//             this._height = t;
//           }
//           getPointArray() {
//             return this._pointArray;
//           }
//           clone() {
//             let t = new PointContainer$1();
//             (t._width = this._width), (t._height = this._height);
//             for (let e = 0, i = this._pointArray.length; e < i; e++)
//               t._pointArray[e] = Point$1.createByUint32(
//                 0 | this._pointArray[e].uint32
//               );
//             return t;
//           }
//           toUint32Array() {
//             let t = this._pointArray.length,
//               e = new Uint32Array(t);
//             for (let i = 0; i < t; i++) e[i] = this._pointArray[i].uint32;
//             return e;
//           }
//           toUint8Array() {
//             return new Uint8Array(this.toUint32Array().buffer);
//           }
//           static fromHTMLImageElement(t) {
//             let e = t.naturalWidth,
//               i = t.naturalHeight,
//               r = document.createElement("canvas");
//             return (
//               (r.width = e),
//               (r.height = i),
//               r.getContext("2d").drawImage(t, 0, 0, e, i, 0, 0, e, i),
//               PointContainer$1.fromHTMLCanvasElement(r)
//             );
//           }
//           static fromHTMLCanvasElement(t) {
//             let e = t.width,
//               i = t.height,
//               r = t.getContext("2d").getImageData(0, 0, e, i);
//             return PointContainer$1.fromImageData(r);
//           }
//           static fromImageData(t) {
//             let e = t.width,
//               i = t.height;
//             return PointContainer$1.fromUint8Array(t.data, e, i);
//           }
//           static fromUint8Array(t, e, i) {
//             switch (Object.prototype.toString.call(t)) {
//               case "[object Uint8ClampedArray]":
//               case "[object Uint8Array]":
//                 break;
//               default:
//                 t = new Uint8Array(t);
//             }
//             let r = new Uint32Array(t.buffer);
//             return PointContainer$1.fromUint32Array(r, e, i);
//           }
//           static fromUint32Array(t, e, i) {
//             let r = new PointContainer$1();
//             (r._width = e), (r._height = i);
//             for (let e = 0, i = t.length; e < i; e++)
//               r._pointArray[e] = Point$1.createByUint32(0 | t[e]);
//             return r;
//           }
//           static fromBuffer(t, e, i) {
//             let r = new Uint32Array(
//               t.buffer,
//               t.byteOffset,
//               t.byteLength / Uint32Array.BYTES_PER_ELEMENT
//             );
//             return PointContainer$1.fromUint32Array(r, e, i);
//           }
//         },
//         hueGroups$1 = 10;
//       function hueGroup$1(t, e) {
//         let i = 360 / e;
//         for (let r = 1, n = i - i / 2; r < e; r++, n += i)
//           if (t >= n && t < n + i) return r;
//         return 0;
//       }
//       var Palette$1 = class {
//           constructor() {
//             __publicField$3(this, "_pointContainer"),
//               __publicField$3(this, "_pointArray", []),
//               __publicField$3(this, "_i32idx", {}),
//               (this._pointContainer = new PointContainer$1()),
//               this._pointContainer.setHeight(1),
//               (this._pointArray = this._pointContainer.getPointArray());
//           }
//           add(t) {
//             this._pointArray.push(t),
//               this._pointContainer.setWidth(this._pointArray.length);
//           }
//           has(t) {
//             for (let e = this._pointArray.length - 1; e >= 0; e--)
//               if (t.uint32 === this._pointArray[e].uint32) return !0;
//             return !1;
//           }
//           getNearestColor(t, e) {
//             return this._pointArray[0 | this._getNearestIndex(t, e)];
//           }
//           getPointContainer() {
//             return this._pointContainer;
//           }
//           _nearestPointFromCache(t) {
//             return "number" == typeof this._i32idx[t] ? this._i32idx[t] : -1;
//           }
//           _getNearestIndex(t, e) {
//             let i = this._nearestPointFromCache("" + e.uint32);
//             if (i >= 0) return i;
//             let r = Number.MAX_VALUE;
//             i = 0;
//             for (let n = 0, a = this._pointArray.length; n < a; n++) {
//               let a = this._pointArray[n],
//                 s = t.calculateRaw(e.r, e.g, e.b, e.a, a.r, a.g, a.b, a.a);
//               s < r && ((r = s), (i = n));
//             }
//             return (this._i32idx[e.uint32] = i), i;
//           }
//           sort() {
//             (this._i32idx = {}),
//               this._pointArray.sort((t, e) => {
//                 let i = rgb2hsl$1(t.r, t.g, t.b),
//                   r = rgb2hsl$1(e.r, e.g, e.b),
//                   n =
//                     t.r === t.g && t.g === t.b
//                       ? 0
//                       : 1 + hueGroup$1(i.h, hueGroups$1),
//                   a =
//                     (e.r === e.g && e.g === e.b
//                       ? 0
//                       : 1 + hueGroup$1(r.h, hueGroups$1)) - n;
//                 if (a) return -a;
//                 let s = t.getLuminosity(!0),
//                   o = e.getLuminosity(!0);
//                 if (o - s != 0) return o - s;
//                 let l = ((100 * r.s) | 0) - ((100 * i.s) | 0);
//                 return l ? -l : 0;
//               });
//           }
//         },
//         utils_exports$1 = {};
//       __export$1(utils_exports$1, {
//         HueStatistics: () => HueStatistics$1,
//         Palette: () => Palette$1,
//         Point: () => Point$1,
//         PointContainer: () => PointContainer$1,
//         ProgressTracker: () => ProgressTracker$1,
//         arithmetic: () => arithmetic_exports$1,
//       });
//       var HueGroup$1 = class {
//           constructor() {
//             __publicField$3(this, "num", 0), __publicField$3(this, "cols", []);
//           }
//         },
//         HueStatistics$1 = class {
//           constructor(t, e) {
//             __publicField$3(this, "_numGroups"),
//               __publicField$3(this, "_minCols"),
//               __publicField$3(this, "_stats"),
//               __publicField$3(this, "_groupsFull"),
//               (this._numGroups = t),
//               (this._minCols = e),
//               (this._stats = []);
//             for (let e = 0; e <= t; e++) this._stats[e] = new HueGroup$1();
//             this._groupsFull = 0;
//           }
//           check(t) {
//             this._groupsFull === this._numGroups + 1 && (this.check = () => {});
//             let e = 255 & t,
//               i = (t >>> 8) & 255,
//               r = (t >>> 16) & 255,
//               n =
//                 e === i && i === r
//                   ? 0
//                   : 1 + hueGroup$1(rgb2hsl$1(e, i, r).h, this._numGroups),
//               a = this._stats[n],
//               s = this._minCols;
//             a.num++,
//               a.num > s ||
//                 (a.num === s && this._groupsFull++,
//                 a.num <= s && this._stats[n].cols.push(t));
//           }
//           injectIntoDictionary(t) {
//             for (let e = 0; e <= this._numGroups; e++)
//               this._stats[e].num <= this._minCols &&
//                 this._stats[e].cols.forEach((e) => {
//                   t[e] ? t[e]++ : (t[e] = 1);
//                 });
//           }
//           injectIntoArray(t) {
//             for (let e = 0; e <= this._numGroups; e++)
//               this._stats[e].num <= this._minCols &&
//                 this._stats[e].cols.forEach((e) => {
//                   -1 === t.indexOf(e) && t.push(e);
//                 });
//           }
//         },
//         _ProgressTracker$1 = class {
//           constructor(t, e) {
//             __publicField$3(this, "progress"),
//               __publicField$3(this, "_step"),
//               __publicField$3(this, "_range"),
//               __publicField$3(this, "_last"),
//               __publicField$3(this, "_progressRange"),
//               (this._range = t),
//               (this._progressRange = e),
//               (this._step = Math.max(
//                 1,
//                 (this._range / (_ProgressTracker$1.steps + 1)) | 0
//               )),
//               (this._last = -this._step),
//               (this.progress = 0);
//           }
//           shouldNotify(t) {
//             return (
//               t - this._last >= this._step &&
//               ((this._last = t),
//               (this.progress = Math.min(
//                 (this._progressRange * this._last) / this._range,
//                 this._progressRange
//               )),
//               !0)
//             );
//           }
//         },
//         ProgressTracker$1 = _ProgressTracker$1;
//       __publicField$3(ProgressTracker$1, "steps", 100);
//       var networkBiasShift$1 = 3,
//         Neuron$1 = class {
//           constructor(t) {
//             __publicField$3(this, "r"),
//               __publicField$3(this, "g"),
//               __publicField$3(this, "b"),
//               __publicField$3(this, "a"),
//               (this.r = this.g = this.b = this.a = t);
//           }
//           toPoint() {
//             return Point$1.createByRGBA(
//               this.r >> networkBiasShift$1,
//               this.g >> networkBiasShift$1,
//               this.b >> networkBiasShift$1,
//               this.a >> networkBiasShift$1
//             );
//           }
//           subtract(t, e, i, r) {
//             (this.r -= 0 | t),
//               (this.g -= 0 | e),
//               (this.b -= 0 | i),
//               (this.a -= 0 | r);
//           }
//         },
//         _NeuQuant$1 = class extends AbstractPaletteQuantizer$1 {
//           constructor(t, e = 256) {
//             super(),
//               __publicField$3(this, "_pointArray"),
//               __publicField$3(this, "_networkSize"),
//               __publicField$3(this, "_network"),
//               __publicField$3(this, "_sampleFactor"),
//               __publicField$3(this, "_radPower"),
//               __publicField$3(this, "_freq"),
//               __publicField$3(this, "_bias"),
//               __publicField$3(this, "_distance"),
//               (this._distance = t),
//               (this._pointArray = []),
//               (this._sampleFactor = 1),
//               (this._networkSize = e),
//               this._distance.setWhitePoint(
//                 255 << networkBiasShift$1,
//                 255 << networkBiasShift$1,
//                 255 << networkBiasShift$1,
//                 255 << networkBiasShift$1
//               );
//           }
//           sample(t) {
//             this._pointArray = this._pointArray.concat(t.getPointArray());
//           }
//           *quantize() {
//             this._init(),
//               yield* this._learn(),
//               yield { palette: this._buildPalette(), progress: 100 };
//           }
//           _init() {
//             (this._freq = []),
//               (this._bias = []),
//               (this._radPower = []),
//               (this._network = []);
//             for (let t = 0; t < this._networkSize; t++)
//               (this._network[t] = new Neuron$1(
//                 ((t << (networkBiasShift$1 + 8)) / this._networkSize) | 0
//               )),
//                 (this._freq[t] =
//                   (_NeuQuant$1._initialBias / this._networkSize) | 0),
//                 (this._bias[t] = 0);
//           }
//           *_learn() {
//             let t = this._sampleFactor,
//               e = this._pointArray.length;
//             e < _NeuQuant$1._minpicturebytes && (t = 1);
//             let i = (30 + (t - 1) / 3) | 0,
//               r = (e / t) | 0,
//               n,
//               a = (r / _NeuQuant$1._nCycles) | 0,
//               s = _NeuQuant$1._initAlpha,
//               o = (this._networkSize >> 3) * _NeuQuant$1._radiusBias,
//               l = o >> _NeuQuant$1._radiusBiasShift;
//             l <= 1 && (l = 0);
//             for (let t = 0; t < l; t++)
//               this._radPower[t] =
//                 ((((l * l - t * t) * _NeuQuant$1._radBias) / (l * l)) * s) >>>
//                 0;
//             n =
//               e < _NeuQuant$1._minpicturebytes
//                 ? 1
//                 : e % _NeuQuant$1._prime1 != 0
//                 ? _NeuQuant$1._prime1
//                 : e % _NeuQuant$1._prime2 != 0
//                 ? _NeuQuant$1._prime2
//                 : e % _NeuQuant$1._prime3 != 0
//                 ? _NeuQuant$1._prime3
//                 : _NeuQuant$1._prime4;
//             let h = new ProgressTracker$1(r, 99);
//             for (let t = 0, u = 0; t < r; ) {
//               h.shouldNotify(t) && (yield { progress: h.progress });
//               let r = this._pointArray[u],
//                 f = r.b << networkBiasShift$1,
//                 c = r.g << networkBiasShift$1,
//                 d = r.r << networkBiasShift$1,
//                 p = r.a << networkBiasShift$1,
//                 m = this._contest(f, c, d, p);
//               if (
//                 (this._alterSingle(s, m, f, c, d, p),
//                 0 !== l && this._alterNeighbour(l, m, f, c, d, p),
//                 (u += n) >= e && (u -= e),
//                 0 === a && (a = 1),
//                 ++t % a == 0)
//               ) {
//                 (s -= (s / i) | 0),
//                   (o -= (o / _NeuQuant$1._radiusDecrease) | 0),
//                   (l = o >> _NeuQuant$1._radiusBiasShift),
//                   l <= 1 && (l = 0);
//                 for (let t = 0; t < l; t++)
//                   this._radPower[t] =
//                     ((((l * l - t * t) * _NeuQuant$1._radBias) / (l * l)) *
//                       s) >>>
//                     0;
//               }
//             }
//           }
//           _buildPalette() {
//             let t = new Palette$1();
//             return (
//               this._network.forEach((e) => {
//                 t.add(e.toPoint());
//               }),
//               t.sort(),
//               t
//             );
//           }
//           _alterNeighbour(t, e, i, r, n, a) {
//             let s = e - t;
//             s < -1 && (s = -1);
//             let o = e + t;
//             o > this._networkSize && (o = this._networkSize);
//             let l = e + 1,
//               h = e - 1,
//               u = 1;
//             for (; l < o || h > s; ) {
//               let t = this._radPower[u++] / _NeuQuant$1._alphaRadBias;
//               if (l < o) {
//                 let e = this._network[l++];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//               if (h > s) {
//                 let e = this._network[h--];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//             }
//           }
//           _alterSingle(t, e, i, r, n, a) {
//             t /= _NeuQuant$1._initAlpha;
//             let s = this._network[e];
//             s.subtract(
//               t * (s.r - n),
//               t * (s.g - r),
//               t * (s.b - i),
//               t * (s.a - a)
//             );
//           }
//           _contest(t, e, i, r) {
//             let n = 1020 << networkBiasShift$1,
//               a = 2147483647,
//               s = 2147483647,
//               o = -1,
//               l = -1;
//             for (let h = 0; h < this._networkSize; h++) {
//               let u = this._network[h],
//                 f =
//                   (this._distance.calculateNormalized(u, {
//                     r: i,
//                     g: e,
//                     b: t,
//                     a: r,
//                   }) *
//                     n) |
//                   0;
//               f < a && ((a = f), (o = h));
//               let c =
//                 f -
//                 (this._bias[h] >>
//                   (_NeuQuant$1._initialBiasShift - networkBiasShift$1));
//               c < s && ((s = c), (l = h));
//               let d = this._freq[h] >> _NeuQuant$1._betaShift;
//               (this._freq[h] -= d),
//                 (this._bias[h] += d << _NeuQuant$1._gammaShift);
//             }
//             return (
//               (this._freq[o] += _NeuQuant$1._beta),
//               (this._bias[o] -= _NeuQuant$1._betaGamma),
//               l
//             );
//           }
//         },
//         NeuQuant$1 = _NeuQuant$1;
//       __publicField$3(NeuQuant$1, "_prime1", 499),
//         __publicField$3(NeuQuant$1, "_prime2", 491),
//         __publicField$3(NeuQuant$1, "_prime3", 487),
//         __publicField$3(NeuQuant$1, "_prime4", 503),
//         __publicField$3(NeuQuant$1, "_minpicturebytes", _NeuQuant$1._prime4),
//         __publicField$3(NeuQuant$1, "_nCycles", 100),
//         __publicField$3(NeuQuant$1, "_initialBiasShift", 16),
//         __publicField$3(
//           NeuQuant$1,
//           "_initialBias",
//           1 << _NeuQuant$1._initialBiasShift
//         ),
//         __publicField$3(NeuQuant$1, "_gammaShift", 10),
//         __publicField$3(NeuQuant$1, "_betaShift", 10),
//         __publicField$3(
//           NeuQuant$1,
//           "_beta",
//           _NeuQuant$1._initialBias >> _NeuQuant$1._betaShift
//         ),
//         __publicField$3(
//           NeuQuant$1,
//           "_betaGamma",
//           _NeuQuant$1._initialBias <<
//             (_NeuQuant$1._gammaShift - _NeuQuant$1._betaShift)
//         ),
//         __publicField$3(NeuQuant$1, "_radiusBiasShift", 6),
//         __publicField$3(
//           NeuQuant$1,
//           "_radiusBias",
//           1 << _NeuQuant$1._radiusBiasShift
//         ),
//         __publicField$3(NeuQuant$1, "_radiusDecrease", 30),
//         __publicField$3(NeuQuant$1, "_alphaBiasShift", 10),
//         __publicField$3(
//           NeuQuant$1,
//           "_initAlpha",
//           1 << _NeuQuant$1._alphaBiasShift
//         ),
//         __publicField$3(NeuQuant$1, "_radBiasShift", 8),
//         __publicField$3(NeuQuant$1, "_radBias", 1 << _NeuQuant$1._radBiasShift),
//         __publicField$3(
//           NeuQuant$1,
//           "_alphaRadBiasShift",
//           _NeuQuant$1._alphaBiasShift + _NeuQuant$1._radBiasShift
//         ),
//         __publicField$3(
//           NeuQuant$1,
//           "_alphaRadBias",
//           1 << _NeuQuant$1._alphaRadBiasShift
//         );
//       var networkBiasShift2$1 = 3,
//         NeuronFloat$1 = class {
//           constructor(t) {
//             __publicField$3(this, "r"),
//               __publicField$3(this, "g"),
//               __publicField$3(this, "b"),
//               __publicField$3(this, "a"),
//               (this.r = this.g = this.b = this.a = t);
//           }
//           toPoint() {
//             return Point$1.createByRGBA(
//               this.r >> networkBiasShift2$1,
//               this.g >> networkBiasShift2$1,
//               this.b >> networkBiasShift2$1,
//               this.a >> networkBiasShift2$1
//             );
//           }
//           subtract(t, e, i, r) {
//             (this.r -= t), (this.g -= e), (this.b -= i), (this.a -= r);
//           }
//         },
//         _NeuQuantFloat$1 = class extends AbstractPaletteQuantizer$1 {
//           constructor(t, e = 256) {
//             super(),
//               __publicField$3(this, "_pointArray"),
//               __publicField$3(this, "_networkSize"),
//               __publicField$3(this, "_network"),
//               __publicField$3(this, "_sampleFactor"),
//               __publicField$3(this, "_radPower"),
//               __publicField$3(this, "_freq"),
//               __publicField$3(this, "_bias"),
//               __publicField$3(this, "_distance"),
//               (this._distance = t),
//               (this._pointArray = []),
//               (this._sampleFactor = 1),
//               (this._networkSize = e),
//               this._distance.setWhitePoint(
//                 255 << networkBiasShift2$1,
//                 255 << networkBiasShift2$1,
//                 255 << networkBiasShift2$1,
//                 255 << networkBiasShift2$1
//               );
//           }
//           sample(t) {
//             this._pointArray = this._pointArray.concat(t.getPointArray());
//           }
//           *quantize() {
//             this._init(),
//               yield* this._learn(),
//               yield { palette: this._buildPalette(), progress: 100 };
//           }
//           _init() {
//             (this._freq = []),
//               (this._bias = []),
//               (this._radPower = []),
//               (this._network = []);
//             for (let t = 0; t < this._networkSize; t++)
//               (this._network[t] = new NeuronFloat$1(
//                 (t << (networkBiasShift2$1 + 8)) / this._networkSize
//               )),
//                 (this._freq[t] =
//                   _NeuQuantFloat$1._initialBias / this._networkSize),
//                 (this._bias[t] = 0);
//           }
//           *_learn() {
//             let t = this._sampleFactor,
//               e = this._pointArray.length;
//             e < _NeuQuantFloat$1._minpicturebytes && (t = 1);
//             let i = 30 + (t - 1) / 3,
//               r = e / t,
//               n,
//               a = (r / _NeuQuantFloat$1._nCycles) | 0,
//               s = _NeuQuantFloat$1._initAlpha,
//               o = (this._networkSize >> 3) * _NeuQuantFloat$1._radiusBias,
//               l = o >> _NeuQuantFloat$1._radiusBiasShift;
//             l <= 1 && (l = 0);
//             for (let t = 0; t < l; t++)
//               this._radPower[t] =
//                 (((l * l - t * t) * _NeuQuantFloat$1._radBias) / (l * l)) * s;
//             n =
//               e < _NeuQuantFloat$1._minpicturebytes
//                 ? 1
//                 : e % _NeuQuantFloat$1._prime1 != 0
//                 ? _NeuQuantFloat$1._prime1
//                 : e % _NeuQuantFloat$1._prime2 != 0
//                 ? _NeuQuantFloat$1._prime2
//                 : e % _NeuQuantFloat$1._prime3 != 0
//                 ? _NeuQuantFloat$1._prime3
//                 : _NeuQuantFloat$1._prime4;
//             let h = new ProgressTracker$1(r, 99);
//             for (let t = 0, u = 0; t < r; ) {
//               h.shouldNotify(t) && (yield { progress: h.progress });
//               let r = this._pointArray[u],
//                 f = r.b << networkBiasShift2$1,
//                 c = r.g << networkBiasShift2$1,
//                 d = r.r << networkBiasShift2$1,
//                 p = r.a << networkBiasShift2$1,
//                 m = this._contest(f, c, d, p);
//               if (
//                 (this._alterSingle(s, m, f, c, d, p),
//                 0 !== l && this._alterNeighbour(l, m, f, c, d, p),
//                 (u += n) >= e && (u -= e),
//                 0 === a && (a = 1),
//                 ++t % a == 0)
//               ) {
//                 (s -= s / i),
//                   (o -= o / _NeuQuantFloat$1._radiusDecrease),
//                   (l = o >> _NeuQuantFloat$1._radiusBiasShift),
//                   l <= 1 && (l = 0);
//                 for (let t = 0; t < l; t++)
//                   this._radPower[t] =
//                     (((l * l - t * t) * _NeuQuantFloat$1._radBias) / (l * l)) *
//                     s;
//               }
//             }
//           }
//           _buildPalette() {
//             let t = new Palette$1();
//             return (
//               this._network.forEach((e) => {
//                 t.add(e.toPoint());
//               }),
//               t.sort(),
//               t
//             );
//           }
//           _alterNeighbour(t, e, i, r, n, a) {
//             let s = e - t;
//             s < -1 && (s = -1);
//             let o = e + t;
//             o > this._networkSize && (o = this._networkSize);
//             let l = e + 1,
//               h = e - 1,
//               u = 1;
//             for (; l < o || h > s; ) {
//               let t = this._radPower[u++] / _NeuQuantFloat$1._alphaRadBias;
//               if (l < o) {
//                 let e = this._network[l++];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//               if (h > s) {
//                 let e = this._network[h--];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//             }
//           }
//           _alterSingle(t, e, i, r, n, a) {
//             t /= _NeuQuantFloat$1._initAlpha;
//             let s = this._network[e];
//             s.subtract(
//               t * (s.r - n),
//               t * (s.g - r),
//               t * (s.b - i),
//               t * (s.a - a)
//             );
//           }
//           _contest(t, e, i, r) {
//             let n = 1020 << networkBiasShift2$1,
//               a = 2147483647,
//               s = 2147483647,
//               o = -1,
//               l = -1;
//             for (let h = 0; h < this._networkSize; h++) {
//               let u = this._network[h],
//                 f =
//                   this._distance.calculateNormalized(u, {
//                     r: i,
//                     g: e,
//                     b: t,
//                     a: r,
//                   }) * n;
//               f < a && ((a = f), (o = h));
//               let c =
//                 f -
//                 (this._bias[h] >>
//                   (_NeuQuantFloat$1._initialBiasShift - networkBiasShift2$1));
//               c < s && ((s = c), (l = h));
//               let d = this._freq[h] >> _NeuQuantFloat$1._betaShift;
//               (this._freq[h] -= d),
//                 (this._bias[h] += d << _NeuQuantFloat$1._gammaShift);
//             }
//             return (
//               (this._freq[o] += _NeuQuantFloat$1._beta),
//               (this._bias[o] -= _NeuQuantFloat$1._betaGamma),
//               l
//             );
//           }
//         },
//         NeuQuantFloat$1 = _NeuQuantFloat$1;
//       __publicField$3(NeuQuantFloat$1, "_prime1", 499),
//         __publicField$3(NeuQuantFloat$1, "_prime2", 491),
//         __publicField$3(NeuQuantFloat$1, "_prime3", 487),
//         __publicField$3(NeuQuantFloat$1, "_prime4", 503),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_minpicturebytes",
//           _NeuQuantFloat$1._prime4
//         ),
//         __publicField$3(NeuQuantFloat$1, "_nCycles", 100),
//         __publicField$3(NeuQuantFloat$1, "_initialBiasShift", 16),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_initialBias",
//           1 << _NeuQuantFloat$1._initialBiasShift
//         ),
//         __publicField$3(NeuQuantFloat$1, "_gammaShift", 10),
//         __publicField$3(NeuQuantFloat$1, "_betaShift", 10),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_beta",
//           _NeuQuantFloat$1._initialBias >> _NeuQuantFloat$1._betaShift
//         ),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_betaGamma",
//           _NeuQuantFloat$1._initialBias <<
//             (_NeuQuantFloat$1._gammaShift - _NeuQuantFloat$1._betaShift)
//         ),
//         __publicField$3(NeuQuantFloat$1, "_radiusBiasShift", 6),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_radiusBias",
//           1 << _NeuQuantFloat$1._radiusBiasShift
//         ),
//         __publicField$3(NeuQuantFloat$1, "_radiusDecrease", 30),
//         __publicField$3(NeuQuantFloat$1, "_alphaBiasShift", 10),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_initAlpha",
//           1 << _NeuQuantFloat$1._alphaBiasShift
//         ),
//         __publicField$3(NeuQuantFloat$1, "_radBiasShift", 8),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_radBias",
//           1 << _NeuQuantFloat$1._radBiasShift
//         ),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_alphaRadBiasShift",
//           _NeuQuantFloat$1._alphaBiasShift + _NeuQuantFloat$1._radBiasShift
//         ),
//         __publicField$3(
//           NeuQuantFloat$1,
//           "_alphaRadBias",
//           1 << _NeuQuantFloat$1._alphaRadBiasShift
//         );
//       var _ColorHistogram$1 = class {
//           constructor(t, e) {
//             __publicField$3(this, "_method"),
//               __publicField$3(this, "_hueStats"),
//               __publicField$3(this, "_histogram"),
//               __publicField$3(this, "_initColors"),
//               __publicField$3(this, "_minHueCols"),
//               (this._method = t),
//               (this._minHueCols = e << 2),
//               (this._initColors = e << 2),
//               (this._hueStats = new HueStatistics$1(
//                 _ColorHistogram$1._hueGroups,
//                 this._minHueCols
//               )),
//               (this._histogram = Object.create(null));
//           }
//           sample(t) {
//             switch (this._method) {
//               case 1:
//                 this._colorStats1D(t);
//                 break;
//               case 2:
//                 this._colorStats2D(t);
//             }
//           }
//           getImportanceSortedColorsIDXI32() {
//             let t;
//             let e = stableSort$1(
//               Object.keys(this._histogram),
//               (t, e) => this._histogram[e] - this._histogram[t]
//             );
//             if (0 === e.length) return [];
//             switch (this._method) {
//               case 1:
//                 let i = Math.min(e.length, this._initColors),
//                   r = e[i - 1],
//                   n = this._histogram[r];
//                 t = e.slice(0, i);
//                 let a = i,
//                   s = e.length;
//                 for (; a < s && this._histogram[e[a]] === n; ) t.push(e[a++]);
//                 this._hueStats.injectIntoArray(t);
//                 break;
//               case 2:
//                 t = e;
//                 break;
//               default:
//                 throw Error("Incorrect method");
//             }
//             return t.map((t) => +t);
//           }
//           _colorStats1D(t) {
//             let e = this._histogram,
//               i = t.getPointArray(),
//               r = i.length;
//             for (let t = 0; t < r; t++) {
//               let r = i[t].uint32;
//               this._hueStats.check(r), r in e ? e[r]++ : (e[r] = 1);
//             }
//           }
//           _colorStats2D(t) {
//             let e = t.getWidth(),
//               i = t.getHeight(),
//               r = t.getPointArray(),
//               n = _ColorHistogram$1._boxSize[0],
//               a = _ColorHistogram$1._boxSize[1],
//               s = n * a,
//               o = this._makeBoxes(e, i, n, a),
//               l = this._histogram;
//             o.forEach((t) => {
//               let i =
//                 Math.round((t.w * t.h) / s) * _ColorHistogram$1._boxPixels;
//               i < 2 && (i = 2);
//               let n = {};
//               this._iterateBox(t, e, (t) => {
//                 let e = r[t].uint32;
//                 this._hueStats.check(e),
//                   e in l
//                     ? l[e]++
//                     : e in n
//                     ? ++n[e] >= i && (l[e] = n[e])
//                     : (n[e] = 1);
//               });
//             }),
//               this._hueStats.injectIntoDictionary(l);
//           }
//           _iterateBox(t, e, i) {
//             let r = t,
//               n = r.y * e + r.x,
//               a = (r.y + r.h - 1) * e + (r.x + r.w - 1),
//               s = e - r.w + 1,
//               o = 0,
//               l = n;
//             do i.call(this, l), (l += ++o % r.w == 0 ? s : 1);
//             while (l <= a);
//           }
//           _makeBoxes(t, e, i, r) {
//             let n = t % i,
//               a = e % r,
//               s = t - n,
//               o = e - a,
//               l = [];
//             for (let h = 0; h < e; h += r)
//               for (let e = 0; e < t; e += i)
//                 l.push({ x: e, y: h, w: e === s ? n : i, h: h === o ? a : r });
//             return l;
//           }
//         },
//         ColorHistogram$1 = _ColorHistogram$1;
//       __publicField$3(ColorHistogram$1, "_boxSize", [64, 64]),
//         __publicField$3(ColorHistogram$1, "_boxPixels", 2),
//         __publicField$3(ColorHistogram$1, "_hueGroups", 10);
//       var RemovedColor$1 = class {
//           constructor(t, e, i) {
//             __publicField$3(this, "index"),
//               __publicField$3(this, "color"),
//               __publicField$3(this, "distance"),
//               (this.index = t),
//               (this.color = e),
//               (this.distance = i);
//           }
//         },
//         RGBQuant$1 = class extends AbstractPaletteQuantizer$1 {
//           constructor(t, e = 256, i = 2) {
//             super(),
//               __publicField$3(this, "_colors"),
//               __publicField$3(this, "_initialDistance"),
//               __publicField$3(this, "_distanceIncrement"),
//               __publicField$3(this, "_histogram"),
//               __publicField$3(this, "_distance"),
//               (this._distance = t),
//               (this._colors = e),
//               (this._histogram = new ColorHistogram$1(i, e)),
//               (this._initialDistance = 0.01),
//               (this._distanceIncrement = 0.005);
//           }
//           sample(t) {
//             this._histogram.sample(t);
//           }
//           *quantize() {
//             let t = this._histogram.getImportanceSortedColorsIDXI32();
//             if (0 === t.length) throw Error("No colors in image");
//             yield* this._buildPalette(t);
//           }
//           *_buildPalette(t) {
//             let e = new Palette$1(),
//               i = e.getPointContainer().getPointArray(),
//               r = Array(t.length);
//             for (let e = 0; e < t.length; e++)
//               i.push(Point$1.createByUint32(t[e])), (r[e] = 1);
//             let n = i.length,
//               a = [],
//               s = n,
//               o = this._initialDistance,
//               l = new ProgressTracker$1(s - this._colors, 99);
//             for (; s > this._colors; ) {
//               a.length = 0;
//               for (let t = 0; t < n; t++) {
//                 if (
//                   (l.shouldNotify(n - s) && (yield { progress: l.progress }),
//                   0 === r[t])
//                 )
//                   continue;
//                 let e = i[t];
//                 for (let l = t + 1; l < n; l++) {
//                   if (0 === r[l]) continue;
//                   let t = i[l],
//                     n = this._distance.calculateNormalized(e, t);
//                   n < o &&
//                     (a.push(new RemovedColor$1(l, t, n)), (r[l] = 0), s--);
//                 }
//               }
//               o +=
//                 s > 3 * this._colors
//                   ? this._initialDistance
//                   : this._distanceIncrement;
//             }
//             if (s < this._colors) {
//               stableSort$1(a, (t, e) => e.distance - t.distance);
//               let t = 0;
//               for (; s < this._colors && t < a.length; )
//                 (r[a[t].index] = 1), s++, t++;
//             }
//             let h = i.length;
//             for (let t = h - 1; t >= 0; t--)
//               0 === r[t] && (t !== h - 1 && (i[t] = i[h - 1]), --h);
//             (i.length = h), e.sort(), yield { palette: e, progress: 100 };
//           }
//         };
//       function createArray1D$1(t) {
//         let e = [];
//         for (let i = 0; i < t; i++) e[i] = 0;
//         return e;
//       }
//       function createArray4D$1(t, e, i, r) {
//         let n = Array(t);
//         for (let a = 0; a < t; a++) {
//           n[a] = Array(e);
//           for (let t = 0; t < e; t++) {
//             n[a][t] = Array(i);
//             for (let e = 0; e < i; e++) {
//               n[a][t][e] = Array(r);
//               for (let i = 0; i < r; i++) n[a][t][e][i] = 0;
//             }
//           }
//         }
//         return n;
//       }
//       function createArray3D$1(t, e, i) {
//         let r = Array(t);
//         for (let n = 0; n < t; n++) {
//           r[n] = Array(e);
//           for (let t = 0; t < e; t++) {
//             r[n][t] = Array(i);
//             for (let e = 0; e < i; e++) r[n][t][e] = 0;
//           }
//         }
//         return r;
//       }
//       function fillArray3D$1(t, e, i, r, n) {
//         for (let a = 0; a < e; a++) {
//           t[a] = [];
//           for (let e = 0; e < i; e++) {
//             t[a][e] = [];
//             for (let i = 0; i < r; i++) t[a][e][i] = n;
//           }
//         }
//       }
//       function fillArray1D$1(t, e, i) {
//         for (let r = 0; r < e; r++) t[r] = i;
//       }
//       var WuColorCube$1 = class {
//           constructor() {
//             __publicField$3(this, "redMinimum"),
//               __publicField$3(this, "redMaximum"),
//               __publicField$3(this, "greenMinimum"),
//               __publicField$3(this, "greenMaximum"),
//               __publicField$3(this, "blueMinimum"),
//               __publicField$3(this, "blueMaximum"),
//               __publicField$3(this, "volume"),
//               __publicField$3(this, "alphaMinimum"),
//               __publicField$3(this, "alphaMaximum");
//           }
//         },
//         _WuQuant$1 = class extends AbstractPaletteQuantizer$1 {
//           constructor(t, e = 256, i = 5) {
//             super(),
//               __publicField$3(this, "_reds"),
//               __publicField$3(this, "_greens"),
//               __publicField$3(this, "_blues"),
//               __publicField$3(this, "_alphas"),
//               __publicField$3(this, "_sums"),
//               __publicField$3(this, "_weights"),
//               __publicField$3(this, "_momentsRed"),
//               __publicField$3(this, "_momentsGreen"),
//               __publicField$3(this, "_momentsBlue"),
//               __publicField$3(this, "_momentsAlpha"),
//               __publicField$3(this, "_moments"),
//               __publicField$3(this, "_table"),
//               __publicField$3(this, "_pixels"),
//               __publicField$3(this, "_cubes"),
//               __publicField$3(this, "_colors"),
//               __publicField$3(this, "_significantBitsPerChannel"),
//               __publicField$3(this, "_maxSideIndex"),
//               __publicField$3(this, "_alphaMaxSideIndex"),
//               __publicField$3(this, "_sideSize"),
//               __publicField$3(this, "_alphaSideSize"),
//               __publicField$3(this, "_distance"),
//               (this._distance = t),
//               this._setQuality(i),
//               this._initialize(e);
//           }
//           sample(t) {
//             let e = t.getPointArray();
//             for (let t = 0, i = e.length; t < i; t++) this._addColor(e[t]);
//             this._pixels = this._pixels.concat(e);
//           }
//           *quantize() {
//             yield* this._preparePalette();
//             let t = new Palette$1();
//             for (let e = 0; e < this._colors; e++)
//               if (this._sums[e] > 0) {
//                 let i = this._sums[e],
//                   r = this._reds[e] / i,
//                   n = this._greens[e] / i,
//                   a = this._blues[e] / i,
//                   s = this._alphas[e] / i,
//                   o = Point$1.createByRGBA(0 | r, 0 | n, 0 | a, 0 | s);
//                 t.add(o);
//               }
//             t.sort(), yield { palette: t, progress: 100 };
//           }
//           *_preparePalette() {
//             yield* this._calculateMoments();
//             let t = 0,
//               e = createArray1D$1(this._colors);
//             for (let i = 1; i < this._colors; ++i) {
//               this._cut(this._cubes[t], this._cubes[i])
//                 ? ((e[t] =
//                     this._cubes[t].volume > 1
//                       ? this._calculateVariance(this._cubes[t])
//                       : 0),
//                   (e[i] =
//                     this._cubes[i].volume > 1
//                       ? this._calculateVariance(this._cubes[i])
//                       : 0))
//                 : ((e[t] = 0), i--),
//                 (t = 0);
//               let r = e[0];
//               for (let n = 1; n <= i; ++n) e[n] > r && ((r = e[n]), (t = n));
//               if (r <= 0) {
//                 this._colors = i + 1;
//                 break;
//               }
//             }
//             let i = [],
//               r = [],
//               n = [],
//               a = [];
//             for (let t = 0; t < this._colors; ++t) {
//               let e = _WuQuant$1._volume(this._cubes[t], this._weights);
//               e > 0
//                 ? ((i[t] =
//                     (_WuQuant$1._volume(this._cubes[t], this._momentsRed) / e) |
//                     0),
//                   (r[t] =
//                     (_WuQuant$1._volume(this._cubes[t], this._momentsGreen) /
//                       e) |
//                     0),
//                   (n[t] =
//                     (_WuQuant$1._volume(this._cubes[t], this._momentsBlue) /
//                       e) |
//                     0),
//                   (a[t] =
//                     (_WuQuant$1._volume(this._cubes[t], this._momentsAlpha) /
//                       e) |
//                     0))
//                 : ((i[t] = 0), (r[t] = 0), (n[t] = 0), (a[t] = 0));
//             }
//             (this._reds = createArray1D$1(this._colors + 1)),
//               (this._greens = createArray1D$1(this._colors + 1)),
//               (this._blues = createArray1D$1(this._colors + 1)),
//               (this._alphas = createArray1D$1(this._colors + 1)),
//               (this._sums = createArray1D$1(this._colors + 1));
//             for (let t = 0, e = this._pixels.length; t < e; t++) {
//               let e = this._pixels[t],
//                 s = -1,
//                 o = Number.MAX_VALUE;
//               for (let t = 0; t < this._colors; t++) {
//                 let l = i[t],
//                   h = r[t],
//                   u = n[t],
//                   f = a[t],
//                   c = this._distance.calculateRaw(
//                     l,
//                     h,
//                     u,
//                     f,
//                     e.r,
//                     e.g,
//                     e.b,
//                     e.a
//                   );
//                 c < o && ((o = c), (s = t));
//               }
//               (this._reds[s] += e.r),
//                 (this._greens[s] += e.g),
//                 (this._blues[s] += e.b),
//                 (this._alphas[s] += e.a),
//                 this._sums[s]++;
//             }
//           }
//           _addColor(t) {
//             let e = 8 - this._significantBitsPerChannel,
//               i = 1 + (t.r >> e),
//               r = 1 + (t.g >> e),
//               n = 1 + (t.b >> e),
//               a = 1 + (t.a >> e);
//             this._weights[a][i][r][n]++,
//               (this._momentsRed[a][i][r][n] += t.r),
//               (this._momentsGreen[a][i][r][n] += t.g),
//               (this._momentsBlue[a][i][r][n] += t.b),
//               (this._momentsAlpha[a][i][r][n] += t.a),
//               (this._moments[a][i][r][n] +=
//                 this._table[t.r] +
//                 this._table[t.g] +
//                 this._table[t.b] +
//                 this._table[t.a]);
//           }
//           *_calculateMoments() {
//             let t = [],
//               e = [],
//               i = [],
//               r = [],
//               n = [],
//               a = [],
//               s = createArray3D$1(
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               ),
//               o = createArray3D$1(
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               ),
//               l = createArray3D$1(
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               ),
//               h = createArray3D$1(
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               ),
//               u = createArray3D$1(
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               ),
//               f = createArray3D$1(
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               ),
//               c = 0,
//               d = new ProgressTracker$1(
//                 this._alphaMaxSideIndex * this._maxSideIndex,
//                 99
//               );
//             for (let p = 1; p <= this._alphaMaxSideIndex; ++p) {
//               fillArray3D$1(
//                 s,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 0
//               ),
//                 fillArray3D$1(
//                   o,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D$1(
//                   l,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D$1(
//                   h,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D$1(
//                   u,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D$1(
//                   f,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 );
//               for (let m = 1; m <= this._maxSideIndex; ++m, ++c) {
//                 d.shouldNotify(c) && (yield { progress: d.progress }),
//                   fillArray1D$1(t, this._sideSize, 0),
//                   fillArray1D$1(e, this._sideSize, 0),
//                   fillArray1D$1(i, this._sideSize, 0),
//                   fillArray1D$1(r, this._sideSize, 0),
//                   fillArray1D$1(n, this._sideSize, 0),
//                   fillArray1D$1(a, this._sideSize, 0);
//                 for (let c = 1; c <= this._maxSideIndex; ++c) {
//                   let d = 0,
//                     g = 0,
//                     _ = 0,
//                     b = 0,
//                     y = 0,
//                     v = 0;
//                   for (let w = 1; w <= this._maxSideIndex; ++w)
//                     (d += this._weights[p][m][c][w]),
//                       (g += this._momentsRed[p][m][c][w]),
//                       (_ += this._momentsGreen[p][m][c][w]),
//                       (b += this._momentsBlue[p][m][c][w]),
//                       (y += this._momentsAlpha[p][m][c][w]),
//                       (v += this._moments[p][m][c][w]),
//                       (t[w] += d),
//                       (e[w] += g),
//                       (i[w] += _),
//                       (r[w] += b),
//                       (n[w] += y),
//                       (a[w] += v),
//                       (s[m][c][w] = s[m - 1][c][w] + t[w]),
//                       (o[m][c][w] = o[m - 1][c][w] + e[w]),
//                       (l[m][c][w] = l[m - 1][c][w] + i[w]),
//                       (h[m][c][w] = h[m - 1][c][w] + r[w]),
//                       (u[m][c][w] = u[m - 1][c][w] + n[w]),
//                       (f[m][c][w] = f[m - 1][c][w] + a[w]),
//                       (this._weights[p][m][c][w] =
//                         this._weights[p - 1][m][c][w] + s[m][c][w]),
//                       (this._momentsRed[p][m][c][w] =
//                         this._momentsRed[p - 1][m][c][w] + o[m][c][w]),
//                       (this._momentsGreen[p][m][c][w] =
//                         this._momentsGreen[p - 1][m][c][w] + l[m][c][w]),
//                       (this._momentsBlue[p][m][c][w] =
//                         this._momentsBlue[p - 1][m][c][w] + h[m][c][w]),
//                       (this._momentsAlpha[p][m][c][w] =
//                         this._momentsAlpha[p - 1][m][c][w] + u[m][c][w]),
//                       (this._moments[p][m][c][w] =
//                         this._moments[p - 1][m][c][w] + f[m][c][w]);
//                 }
//               }
//             }
//           }
//           static _volumeFloat(t, e) {
//             return (
//               e[t.alphaMaximum][t.redMaximum][t.greenMaximum][t.blueMaximum] -
//               e[t.alphaMaximum][t.redMaximum][t.greenMinimum][t.blueMaximum] -
//               e[t.alphaMaximum][t.redMinimum][t.greenMaximum][t.blueMaximum] +
//               e[t.alphaMaximum][t.redMinimum][t.greenMinimum][t.blueMaximum] -
//               e[t.alphaMinimum][t.redMaximum][t.greenMaximum][t.blueMaximum] +
//               e[t.alphaMinimum][t.redMaximum][t.greenMinimum][t.blueMaximum] +
//               e[t.alphaMinimum][t.redMinimum][t.greenMaximum][t.blueMaximum] -
//               e[t.alphaMinimum][t.redMinimum][t.greenMinimum][t.blueMaximum] -
//               (e[t.alphaMaximum][t.redMaximum][t.greenMaximum][t.blueMinimum] -
//                 e[t.alphaMinimum][t.redMaximum][t.greenMaximum][t.blueMinimum] -
//                 e[t.alphaMaximum][t.redMaximum][t.greenMinimum][t.blueMinimum] +
//                 e[t.alphaMinimum][t.redMaximum][t.greenMinimum][t.blueMinimum] -
//                 e[t.alphaMaximum][t.redMinimum][t.greenMaximum][t.blueMinimum] +
//                 e[t.alphaMinimum][t.redMinimum][t.greenMaximum][t.blueMinimum] +
//                 e[t.alphaMaximum][t.redMinimum][t.greenMinimum][t.blueMinimum] -
//                 e[t.alphaMinimum][t.redMinimum][t.greenMinimum][t.blueMinimum])
//             );
//           }
//           static _volume(t, e) {
//             return 0 | _WuQuant$1._volumeFloat(t, e);
//           }
//           static _top(t, e, i, r) {
//             let n;
//             switch (e) {
//               case _WuQuant$1._alpha:
//                 n =
//                   r[i][t.redMaximum][t.greenMaximum][t.blueMaximum] -
//                   r[i][t.redMaximum][t.greenMinimum][t.blueMaximum] -
//                   r[i][t.redMinimum][t.greenMaximum][t.blueMaximum] +
//                   r[i][t.redMinimum][t.greenMinimum][t.blueMaximum] -
//                   (r[i][t.redMaximum][t.greenMaximum][t.blueMinimum] -
//                     r[i][t.redMaximum][t.greenMinimum][t.blueMinimum] -
//                     r[i][t.redMinimum][t.greenMaximum][t.blueMinimum] +
//                     r[i][t.redMinimum][t.greenMinimum][t.blueMinimum]);
//                 break;
//               case _WuQuant$1._red:
//                 n =
//                   r[t.alphaMaximum][i][t.greenMaximum][t.blueMaximum] -
//                   r[t.alphaMaximum][i][t.greenMinimum][t.blueMaximum] -
//                   r[t.alphaMinimum][i][t.greenMaximum][t.blueMaximum] +
//                   r[t.alphaMinimum][i][t.greenMinimum][t.blueMaximum] -
//                   (r[t.alphaMaximum][i][t.greenMaximum][t.blueMinimum] -
//                     r[t.alphaMaximum][i][t.greenMinimum][t.blueMinimum] -
//                     r[t.alphaMinimum][i][t.greenMaximum][t.blueMinimum] +
//                     r[t.alphaMinimum][i][t.greenMinimum][t.blueMinimum]);
//                 break;
//               case _WuQuant$1._green:
//                 n =
//                   r[t.alphaMaximum][t.redMaximum][i][t.blueMaximum] -
//                   r[t.alphaMaximum][t.redMinimum][i][t.blueMaximum] -
//                   r[t.alphaMinimum][t.redMaximum][i][t.blueMaximum] +
//                   r[t.alphaMinimum][t.redMinimum][i][t.blueMaximum] -
//                   (r[t.alphaMaximum][t.redMaximum][i][t.blueMinimum] -
//                     r[t.alphaMaximum][t.redMinimum][i][t.blueMinimum] -
//                     r[t.alphaMinimum][t.redMaximum][i][t.blueMinimum] +
//                     r[t.alphaMinimum][t.redMinimum][i][t.blueMinimum]);
//                 break;
//               case _WuQuant$1._blue:
//                 n =
//                   r[t.alphaMaximum][t.redMaximum][t.greenMaximum][i] -
//                   r[t.alphaMaximum][t.redMaximum][t.greenMinimum][i] -
//                   r[t.alphaMaximum][t.redMinimum][t.greenMaximum][i] +
//                   r[t.alphaMaximum][t.redMinimum][t.greenMinimum][i] -
//                   (r[t.alphaMinimum][t.redMaximum][t.greenMaximum][i] -
//                     r[t.alphaMinimum][t.redMaximum][t.greenMinimum][i] -
//                     r[t.alphaMinimum][t.redMinimum][t.greenMaximum][i] +
//                     r[t.alphaMinimum][t.redMinimum][t.greenMinimum][i]);
//                 break;
//               default:
//                 throw Error("impossible");
//             }
//             return 0 | n;
//           }
//           static _bottom(t, e, i) {
//             switch (e) {
//               case _WuQuant$1._alpha:
//                 return (
//                   -i[t.alphaMinimum][t.redMaximum][t.greenMaximum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                     t.blueMaximum
//                   ] -
//                   i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   (-i[t.alphaMinimum][t.redMaximum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               case _WuQuant$1._red:
//                 return (
//                   -i[t.alphaMaximum][t.redMinimum][t.greenMaximum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                     t.blueMaximum
//                   ] -
//                   i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   (-i[t.alphaMaximum][t.redMinimum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               case _WuQuant$1._green:
//                 return (
//                   -i[t.alphaMaximum][t.redMaximum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   (-i[t.alphaMaximum][t.redMaximum][t.greenMinimum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               case _WuQuant$1._blue:
//                 return (
//                   -i[t.alphaMaximum][t.redMaximum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                   i[t.alphaMaximum][t.redMaximum][t.greenMinimum][
//                     t.blueMinimum
//                   ] +
//                   i[t.alphaMaximum][t.redMinimum][t.greenMaximum][
//                     t.blueMinimum
//                   ] -
//                   i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                     t.blueMinimum
//                   ] -
//                   (-i[t.alphaMinimum][t.redMaximum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               default:
//                 return 0;
//             }
//           }
//           _calculateVariance(t) {
//             let e = _WuQuant$1._volume(t, this._momentsRed),
//               i = _WuQuant$1._volume(t, this._momentsGreen),
//               r = _WuQuant$1._volume(t, this._momentsBlue),
//               n = _WuQuant$1._volume(t, this._momentsAlpha);
//             return (
//               _WuQuant$1._volumeFloat(t, this._moments) -
//               (e * e + i * i + r * r + n * n) /
//                 _WuQuant$1._volume(t, this._weights)
//             );
//           }
//           _maximize(t, e, i, r, n, a, s, o, l) {
//             let h = 0 | _WuQuant$1._bottom(t, e, this._momentsRed),
//               u = 0 | _WuQuant$1._bottom(t, e, this._momentsGreen),
//               f = 0 | _WuQuant$1._bottom(t, e, this._momentsBlue),
//               c = 0 | _WuQuant$1._bottom(t, e, this._momentsAlpha),
//               d = 0 | _WuQuant$1._bottom(t, e, this._weights),
//               p = 0,
//               m = -1;
//             for (let g = i; g < r; ++g) {
//               let i = h + _WuQuant$1._top(t, e, g, this._momentsRed),
//                 r = u + _WuQuant$1._top(t, e, g, this._momentsGreen),
//                 _ = f + _WuQuant$1._top(t, e, g, this._momentsBlue),
//                 b = c + _WuQuant$1._top(t, e, g, this._momentsAlpha),
//                 y = d + _WuQuant$1._top(t, e, g, this._weights);
//               if (0 !== y) {
//                 let t = i * i + r * r + _ * _ + b * b,
//                   e = t / y;
//                 (i = n - i),
//                   (r = a - r),
//                   (_ = s - _),
//                   (b = o - b),
//                   0 != (y = l - y) &&
//                     (e += (t = i * i + r * r + _ * _ + b * b) / y) > p &&
//                     ((p = e), (m = g));
//               }
//             }
//             return { max: p, position: m };
//           }
//           _cut(t, e) {
//             let i;
//             let r = _WuQuant$1._volume(t, this._momentsRed),
//               n = _WuQuant$1._volume(t, this._momentsGreen),
//               a = _WuQuant$1._volume(t, this._momentsBlue),
//               s = _WuQuant$1._volume(t, this._momentsAlpha),
//               o = _WuQuant$1._volume(t, this._weights),
//               l = this._maximize(
//                 t,
//                 _WuQuant$1._red,
//                 t.redMinimum + 1,
//                 t.redMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               ),
//               h = this._maximize(
//                 t,
//                 _WuQuant$1._green,
//                 t.greenMinimum + 1,
//                 t.greenMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               ),
//               u = this._maximize(
//                 t,
//                 _WuQuant$1._blue,
//                 t.blueMinimum + 1,
//                 t.blueMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               ),
//               f = this._maximize(
//                 t,
//                 _WuQuant$1._alpha,
//                 t.alphaMinimum + 1,
//                 t.alphaMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               );
//             if (f.max >= l.max && f.max >= h.max && f.max >= u.max) {
//               if (((i = _WuQuant$1._alpha), f.position < 0)) return !1;
//             } else
//               i =
//                 l.max >= f.max && l.max >= h.max && l.max >= u.max
//                   ? _WuQuant$1._red
//                   : h.max >= f.max && h.max >= l.max && h.max >= u.max
//                   ? _WuQuant$1._green
//                   : _WuQuant$1._blue;
//             switch (
//               ((e.redMaximum = t.redMaximum),
//               (e.greenMaximum = t.greenMaximum),
//               (e.blueMaximum = t.blueMaximum),
//               (e.alphaMaximum = t.alphaMaximum),
//               i)
//             ) {
//               case _WuQuant$1._red:
//                 (e.redMinimum = t.redMaximum = l.position),
//                   (e.greenMinimum = t.greenMinimum),
//                   (e.blueMinimum = t.blueMinimum),
//                   (e.alphaMinimum = t.alphaMinimum);
//                 break;
//               case _WuQuant$1._green:
//                 (e.greenMinimum = t.greenMaximum = h.position),
//                   (e.redMinimum = t.redMinimum),
//                   (e.blueMinimum = t.blueMinimum),
//                   (e.alphaMinimum = t.alphaMinimum);
//                 break;
//               case _WuQuant$1._blue:
//                 (e.blueMinimum = t.blueMaximum = u.position),
//                   (e.redMinimum = t.redMinimum),
//                   (e.greenMinimum = t.greenMinimum),
//                   (e.alphaMinimum = t.alphaMinimum);
//                 break;
//               case _WuQuant$1._alpha:
//                 (e.alphaMinimum = t.alphaMaximum = f.position),
//                   (e.blueMinimum = t.blueMinimum),
//                   (e.redMinimum = t.redMinimum),
//                   (e.greenMinimum = t.greenMinimum);
//             }
//             return (
//               (t.volume =
//                 (t.redMaximum - t.redMinimum) *
//                 (t.greenMaximum - t.greenMinimum) *
//                 (t.blueMaximum - t.blueMinimum) *
//                 (t.alphaMaximum - t.alphaMinimum)),
//               (e.volume =
//                 (e.redMaximum - e.redMinimum) *
//                 (e.greenMaximum - e.greenMinimum) *
//                 (e.blueMaximum - e.blueMinimum) *
//                 (e.alphaMaximum - e.alphaMinimum)),
//               !0
//             );
//           }
//           _initialize(t) {
//             (this._colors = t), (this._cubes = []);
//             for (let e = 0; e < t; e++) this._cubes[e] = new WuColorCube$1();
//             (this._cubes[0].redMinimum = 0),
//               (this._cubes[0].greenMinimum = 0),
//               (this._cubes[0].blueMinimum = 0),
//               (this._cubes[0].alphaMinimum = 0),
//               (this._cubes[0].redMaximum = this._maxSideIndex),
//               (this._cubes[0].greenMaximum = this._maxSideIndex),
//               (this._cubes[0].blueMaximum = this._maxSideIndex),
//               (this._cubes[0].alphaMaximum = this._alphaMaxSideIndex),
//               (this._weights = createArray4D$1(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsRed = createArray4D$1(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsGreen = createArray4D$1(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsBlue = createArray4D$1(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsAlpha = createArray4D$1(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._moments = createArray4D$1(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._table = []);
//             for (let t = 0; t < 256; ++t) this._table[t] = t * t;
//             this._pixels = [];
//           }
//           _setQuality(t = 5) {
//             (this._significantBitsPerChannel = t),
//               (this._maxSideIndex = 1 << this._significantBitsPerChannel),
//               (this._alphaMaxSideIndex = this._maxSideIndex),
//               (this._sideSize = this._maxSideIndex + 1),
//               (this._alphaSideSize = this._alphaMaxSideIndex + 1);
//           }
//         },
//         WuQuant$1 = _WuQuant$1;
//       __publicField$3(WuQuant$1, "_alpha", 3),
//         __publicField$3(WuQuant$1, "_red", 2),
//         __publicField$3(WuQuant$1, "_green", 1),
//         __publicField$3(WuQuant$1, "_blue", 0);
//       var image_exports$1 = {};
//       __export$1(image_exports$1, {
//         AbstractImageQuantizer: () => AbstractImageQuantizer$1,
//         ErrorDiffusionArray: () => ErrorDiffusionArray$1,
//         ErrorDiffusionArrayKernel: () => ErrorDiffusionArrayKernel$1,
//         ErrorDiffusionRiemersma: () => ErrorDiffusionRiemersma$1,
//         NearestColor: () => NearestColor$1,
//       });
//       var AbstractImageQuantizer$1 = class {
//           quantizeSync(t, e) {
//             for (let i of this.quantize(t, e))
//               if (i.pointContainer) return i.pointContainer;
//             throw Error("unreachable");
//           }
//         },
//         NearestColor$1 = class extends AbstractImageQuantizer$1 {
//           constructor(t) {
//             super(), __publicField$3(this, "_distance"), (this._distance = t);
//           }
//           *quantize(t, e) {
//             let i = t.getPointArray(),
//               r = t.getWidth(),
//               n = t.getHeight(),
//               a = new ProgressTracker$1(n, 99);
//             for (let t = 0; t < n; t++) {
//               a.shouldNotify(t) && (yield { progress: a.progress });
//               for (let n = 0, a = t * r; n < r; n++, a++) {
//                 let t = i[a];
//                 t.from(e.getNearestColor(this._distance, t));
//               }
//             }
//             yield { pointContainer: t, progress: 100 };
//           }
//         },
//         ErrorDiffusionArrayKernel$1 =
//           ((e = ErrorDiffusionArrayKernel$1 || {}),
//           (e[(e.FloydSteinberg = 0)] = "FloydSteinberg"),
//           (e[(e.FalseFloydSteinberg = 1)] = "FalseFloydSteinberg"),
//           (e[(e.Stucki = 2)] = "Stucki"),
//           (e[(e.Atkinson = 3)] = "Atkinson"),
//           (e[(e.Jarvis = 4)] = "Jarvis"),
//           (e[(e.Burkes = 5)] = "Burkes"),
//           (e[(e.Sierra = 6)] = "Sierra"),
//           (e[(e.TwoSierra = 7)] = "TwoSierra"),
//           (e[(e.SierraLite = 8)] = "SierraLite"),
//           e),
//         ErrorDiffusionArray$1 = class extends AbstractImageQuantizer$1 {
//           constructor(t, e, i = !0, r = 0, n = !1) {
//             super(),
//               __publicField$3(this, "_minColorDistance"),
//               __publicField$3(this, "_serpentine"),
//               __publicField$3(this, "_kernel"),
//               __publicField$3(this, "_calculateErrorLikeGIMP"),
//               __publicField$3(this, "_distance"),
//               this._setKernel(e),
//               (this._distance = t),
//               (this._minColorDistance = r),
//               (this._serpentine = i),
//               (this._calculateErrorLikeGIMP = n);
//           }
//           *quantize(t, e) {
//             let i = t.getPointArray(),
//               r = new Point$1(),
//               n = t.getWidth(),
//               a = t.getHeight(),
//               s = [],
//               o = 1,
//               l = 1;
//             for (let t of this._kernel) {
//               let e = t[2] + 1;
//               l < e && (l = e);
//             }
//             for (let t = 0; t < l; t++) this._fillErrorLine((s[t] = []), n);
//             let h = new ProgressTracker$1(a, 99);
//             for (let t = 0; t < a; t++) {
//               h.shouldNotify(t) && (yield { progress: h.progress }),
//                 this._serpentine && (o *= -1);
//               let l = t * n,
//                 u = 1 === o ? 0 : n - 1,
//                 f = 1 === o ? n : -1;
//               this._fillErrorLine(s[0], n), s.push(s.shift());
//               let c = s[0];
//               for (let h = u, d = l + u; h !== f; h += o, d += o) {
//                 let l, u, f, p;
//                 let m = i[d],
//                   g = c[h];
//                 r.from(m);
//                 let _ = Point$1.createByRGBA(
//                     inRange0to255Rounded$1(m.r + g[0]),
//                     inRange0to255Rounded$1(m.g + g[1]),
//                     inRange0to255Rounded$1(m.b + g[2]),
//                     inRange0to255Rounded$1(m.a + g[3])
//                   ),
//                   b = e.getNearestColor(this._distance, _);
//                 if (
//                   (m.from(b),
//                   this._minColorDistance &&
//                     this._distance.calculateNormalized(r, b) <
//                       this._minColorDistance)
//                 )
//                   continue;
//                 this._calculateErrorLikeGIMP
//                   ? ((l = _.r - b.r),
//                     (u = _.g - b.g),
//                     (f = _.b - b.b),
//                     (p = _.a - b.a))
//                   : ((l = r.r - b.r),
//                     (u = r.g - b.g),
//                     (f = r.b - b.b),
//                     (p = r.a - b.a));
//                 let y = 1 === o ? 0 : this._kernel.length - 1,
//                   v = 1 === o ? this._kernel.length : -1;
//                 for (let e = y; e !== v; e += o) {
//                   let i = this._kernel[e][1] * o,
//                     r = this._kernel[e][2];
//                   if (i + h >= 0 && i + h < n && r + t >= 0 && r + t < a) {
//                     let t = this._kernel[e][0],
//                       n = s[r][i + h];
//                     (n[0] += l * t),
//                       (n[1] += u * t),
//                       (n[2] += f * t),
//                       (n[3] += p * t);
//                   }
//                 }
//               }
//             }
//             yield { pointContainer: t, progress: 100 };
//           }
//           _fillErrorLine(t, e) {
//             t.length > e && (t.length = e);
//             let i = t.length;
//             for (let e = 0; e < i; e++) {
//               let i = t[e];
//               i[0] = i[1] = i[2] = i[3] = 0;
//             }
//             for (let r = i; r < e; r++) t[r] = [0, 0, 0, 0];
//           }
//           _setKernel(t) {
//             switch (t) {
//               case 0:
//                 this._kernel = [
//                   [7 / 16, 1, 0],
//                   [3 / 16, -1, 1],
//                   [5 / 16, 0, 1],
//                   [1 / 16, 1, 1],
//                 ];
//                 break;
//               case 1:
//                 this._kernel = [
//                   [3 / 8, 1, 0],
//                   [3 / 8, 0, 1],
//                   [2 / 8, 1, 1],
//                 ];
//                 break;
//               case 2:
//                 this._kernel = [
//                   [8 / 42, 1, 0],
//                   [4 / 42, 2, 0],
//                   [2 / 42, -2, 1],
//                   [4 / 42, -1, 1],
//                   [8 / 42, 0, 1],
//                   [4 / 42, 1, 1],
//                   [2 / 42, 2, 1],
//                   [1 / 42, -2, 2],
//                   [2 / 42, -1, 2],
//                   [4 / 42, 0, 2],
//                   [2 / 42, 1, 2],
//                   [1 / 42, 2, 2],
//                 ];
//                 break;
//               case 3:
//                 this._kernel = [
//                   [1 / 8, 1, 0],
//                   [1 / 8, 2, 0],
//                   [1 / 8, -1, 1],
//                   [1 / 8, 0, 1],
//                   [1 / 8, 1, 1],
//                   [1 / 8, 0, 2],
//                 ];
//                 break;
//               case 4:
//                 this._kernel = [
//                   [7 / 48, 1, 0],
//                   [5 / 48, 2, 0],
//                   [3 / 48, -2, 1],
//                   [5 / 48, -1, 1],
//                   [7 / 48, 0, 1],
//                   [5 / 48, 1, 1],
//                   [3 / 48, 2, 1],
//                   [1 / 48, -2, 2],
//                   [3 / 48, -1, 2],
//                   [5 / 48, 0, 2],
//                   [3 / 48, 1, 2],
//                   [1 / 48, 2, 2],
//                 ];
//                 break;
//               case 5:
//                 this._kernel = [
//                   [0.25, 1, 0],
//                   [4 / 32, 2, 0],
//                   [2 / 32, -2, 1],
//                   [4 / 32, -1, 1],
//                   [0.25, 0, 1],
//                   [4 / 32, 1, 1],
//                   [2 / 32, 2, 1],
//                 ];
//                 break;
//               case 6:
//                 this._kernel = [
//                   [5 / 32, 1, 0],
//                   [3 / 32, 2, 0],
//                   [2 / 32, -2, 1],
//                   [4 / 32, -1, 1],
//                   [5 / 32, 0, 1],
//                   [4 / 32, 1, 1],
//                   [2 / 32, 2, 1],
//                   [2 / 32, -1, 2],
//                   [3 / 32, 0, 2],
//                   [2 / 32, 1, 2],
//                 ];
//                 break;
//               case 7:
//                 this._kernel = [
//                   [0.25, 1, 0],
//                   [3 / 16, 2, 0],
//                   [1 / 16, -2, 1],
//                   [2 / 16, -1, 1],
//                   [3 / 16, 0, 1],
//                   [2 / 16, 1, 1],
//                   [1 / 16, 2, 1],
//                 ];
//                 break;
//               case 8:
//                 this._kernel = [
//                   [0.5, 1, 0],
//                   [1 / 4, -1, 1],
//                   [1 / 4, 0, 1],
//                 ];
//                 break;
//               default:
//                 throw Error(`ErrorDiffusionArray: unknown kernel = ${t}`);
//             }
//           }
//         };
//       function* hilbertCurve$1(t, e, i) {
//         let r = Math.max(t, e),
//           n = {
//             width: t,
//             height: e,
//             level: Math.floor(Math.log(r) / Math.log(2) + 1),
//             callback: i,
//             tracker: new ProgressTracker$1(t * e, 99),
//             index: 0,
//             x: 0,
//             y: 0,
//           };
//         yield* walkHilbert$1(n, 1), visit$1(n, 0);
//       }
//       function* walkHilbert$1(t, e) {
//         if (!(t.level < 1)) {
//           switch (
//             (t.tracker.shouldNotify(t.index) &&
//               (yield { progress: t.tracker.progress }),
//             t.level--,
//             e)
//           ) {
//             case 2:
//               yield* walkHilbert$1(t, 1),
//                 visit$1(t, 3),
//                 yield* walkHilbert$1(t, 2),
//                 visit$1(t, 4),
//                 yield* walkHilbert$1(t, 2),
//                 visit$1(t, 2),
//                 yield* walkHilbert$1(t, 4);
//               break;
//             case 3:
//               yield* walkHilbert$1(t, 4),
//                 visit$1(t, 2),
//                 yield* walkHilbert$1(t, 3),
//                 visit$1(t, 1),
//                 yield* walkHilbert$1(t, 3),
//                 visit$1(t, 3),
//                 yield* walkHilbert$1(t, 1);
//               break;
//             case 1:
//               yield* walkHilbert$1(t, 2),
//                 visit$1(t, 4),
//                 yield* walkHilbert$1(t, 1),
//                 visit$1(t, 3),
//                 yield* walkHilbert$1(t, 1),
//                 visit$1(t, 1),
//                 yield* walkHilbert$1(t, 3);
//               break;
//             case 4:
//               yield* walkHilbert$1(t, 3),
//                 visit$1(t, 1),
//                 yield* walkHilbert$1(t, 4),
//                 visit$1(t, 2),
//                 yield* walkHilbert$1(t, 4),
//                 visit$1(t, 4),
//                 yield* walkHilbert$1(t, 2);
//           }
//           t.level++;
//         }
//       }
//       function visit$1(t, e) {
//         switch (
//           (t.x >= 0 &&
//             t.x < t.width &&
//             t.y >= 0 &&
//             t.y < t.height &&
//             (t.callback(t.x, t.y), t.index++),
//           e)
//         ) {
//           case 2:
//             t.x--;
//             break;
//           case 3:
//             t.x++;
//             break;
//           case 1:
//             t.y--;
//             break;
//           case 4:
//             t.y++;
//         }
//       }
//       var ErrorDiffusionRiemersma$1 = class extends AbstractImageQuantizer$1 {
//           constructor(t, e = 16, i = 1) {
//             super(),
//               __publicField$3(this, "_distance"),
//               __publicField$3(this, "_weights"),
//               __publicField$3(this, "_errorQueueSize"),
//               (this._distance = t),
//               (this._errorQueueSize = e),
//               (this._weights = ErrorDiffusionRiemersma$1._createWeights(i, e));
//           }
//           *quantize(t, e) {
//             let i = t.getPointArray(),
//               r = t.getWidth(),
//               n = t.getHeight(),
//               a = [],
//               s = 0;
//             for (let t = 0; t < this._errorQueueSize; t++)
//               a[t] = { r: 0, g: 0, b: 0, a: 0 };
//             yield* hilbertCurve$1(r, n, (t, n) => {
//               let o = i[t + n * r],
//                 { r: l, g: h, b: u, a: f } = o;
//               for (let t = 0; t < this._errorQueueSize; t++) {
//                 let e = this._weights[t],
//                   i = a[(t + s) % this._errorQueueSize];
//                 (l += i.r * e), (h += i.g * e), (u += i.b * e), (f += i.a * e);
//               }
//               let c = Point$1.createByRGBA(
//                   inRange0to255Rounded$1(l),
//                   inRange0to255Rounded$1(h),
//                   inRange0to255Rounded$1(u),
//                   inRange0to255Rounded$1(f)
//                 ),
//                 d = e.getNearestColor(this._distance, c),
//                 p =
//                   ((s = (s + 1) % this._errorQueueSize) +
//                     this._errorQueueSize -
//                     1) %
//                   this._errorQueueSize;
//               (a[p].r = o.r - d.r),
//                 (a[p].g = o.g - d.g),
//                 (a[p].b = o.b - d.b),
//                 (a[p].a = o.a - d.a),
//                 o.from(d);
//             }),
//               yield { pointContainer: t, progress: 100 };
//           }
//           static _createWeights(t, e) {
//             let i = [],
//               r = Math.exp(Math.log(e) / (e - 1));
//             for (let n = 0, a = 1; n < e; n++)
//               (i[n] = (((a + 0.5) | 0) / e) * t), (a *= r);
//             return i;
//           }
//         },
//         quality_exports$1 = {};
//       __export$1(quality_exports$1, { ssim: () => ssim$1 });
//       var K1$1 = 0.01,
//         K2$1 = 0.03;
//       function ssim$1(t, e) {
//         if (t.getHeight() !== e.getHeight() || t.getWidth() !== e.getWidth())
//           throw Error("Images have different sizes!");
//         let i = (255 * K1$1) ** 2,
//           r = (255 * K2$1) ** 2,
//           n = 0,
//           a = 0;
//         return (
//           iterate$1(t, e, (t, e, s, o) => {
//             let l = 0,
//               h = 0,
//               u = 0;
//             for (let i = 0; i < t.length; i++)
//               (h += (t[i] - s) ** 2),
//                 (u += (e[i] - o) ** 2),
//                 (l += (t[i] - s) * (e[i] - o));
//             let f = t.length - 1;
//             (h /= f),
//               (u /= f),
//               (l /= f),
//               (a +=
//                 ((2 * s * o + i) * (2 * l + r)) /
//                 ((s ** 2 + o ** 2 + i) * (h + u + r))),
//               n++;
//           }),
//           a / n
//         );
//       }
//       function iterate$1(t, e, i) {
//         let r = t.getWidth(),
//           n = t.getHeight();
//         for (let a = 0; a < n; a += 8)
//           for (let s = 0; s < r; s += 8) {
//             let o = Math.min(8, r - s),
//               l = Math.min(8, n - a),
//               h = calculateLumaValuesForWindow$1(t, s, a, o, l),
//               u = calculateLumaValuesForWindow$1(e, s, a, o, l);
//             i(h, u, calculateAverageLuma$1(h), calculateAverageLuma$1(u));
//           }
//       }
//       function calculateLumaValuesForWindow$1(t, e, i, r, n) {
//         let a = t.getPointArray(),
//           s = [],
//           o = 0;
//         for (let l = i; l < i + n; l++) {
//           let i = l * t.getWidth();
//           for (let t = e; t < e + r; t++) {
//             let e = a[i + t];
//             (s[o] = 0.2126 * e.r + 0.7152 * e.g + 0.0722 * e.b), o++;
//           }
//         }
//         return s;
//       }
//       function calculateAverageLuma$1(t) {
//         let e = 0;
//         for (let i of t) e += i;
//         return e / t.length;
//       }
//       var setImmediateImpl =
//         "function" == typeof setImmediate
//           ? setImmediate
//           : void 0 !== process &&
//             "function" == typeof (null == process ? void 0 : process.nextTick)
//           ? (t) => process.nextTick(t)
//           : (t) => setTimeout(t, 0);
//       function buildPaletteSync$1(
//         t,
//         { colorDistanceFormula: e, paletteQuantization: i, colors: r } = {}
//       ) {
//         let n = paletteQuantizationToPaletteQuantizer$1(
//           colorDistanceFormulaToColorDistance$1(e),
//           i,
//           r
//         );
//         return t.forEach((t) => n.sample(t)), n.quantizeSync();
//       }
//       async function buildPalette(
//         t,
//         {
//           colorDistanceFormula: e,
//           paletteQuantization: i,
//           colors: r,
//           onProgress: n,
//         } = {}
//       ) {
//         return new Promise((a, s) => {
//           let o;
//           let l = paletteQuantizationToPaletteQuantizer$1(
//             colorDistanceFormulaToColorDistance$1(e),
//             i,
//             r
//           );
//           t.forEach((t) => l.sample(t));
//           let h = l.quantize(),
//             u = () => {
//               try {
//                 let t = h.next();
//                 t.done
//                   ? a(o)
//                   : (t.value.palette && (o = t.value.palette),
//                     n && n(t.value.progress),
//                     setImmediateImpl(u));
//               } catch (t) {
//                 s(t);
//               }
//             };
//           setImmediateImpl(u);
//         });
//       }
//       function applyPaletteSync$1(
//         t,
//         e,
//         { colorDistanceFormula: i, imageQuantization: r } = {}
//       ) {
//         return imageQuantizationToImageQuantizer$1(
//           colorDistanceFormulaToColorDistance$1(i),
//           r
//         ).quantizeSync(t, e);
//       }
//       async function applyPalette(
//         t,
//         e,
//         { colorDistanceFormula: i, imageQuantization: r, onProgress: n } = {}
//       ) {
//         return new Promise((a, s) => {
//           let o;
//           let l = imageQuantizationToImageQuantizer$1(
//               colorDistanceFormulaToColorDistance$1(i),
//               r
//             ).quantize(t, e),
//             h = () => {
//               try {
//                 let t = l.next();
//                 t.done
//                   ? a(o)
//                   : (t.value.pointContainer && (o = t.value.pointContainer),
//                     n && n(t.value.progress),
//                     setImmediateImpl(h));
//               } catch (t) {
//                 s(t);
//               }
//             };
//           setImmediateImpl(h);
//         });
//       }
//       function colorDistanceFormulaToColorDistance$1(t = "euclidean-bt709") {
//         switch (t) {
//           case "cie94-graphic-arts":
//             return new CIE94GraphicArts$1();
//           case "cie94-textiles":
//             return new CIE94Textiles$1();
//           case "ciede2000":
//             return new CIEDE2000$1();
//           case "color-metric":
//             return new CMetric$1();
//           case "euclidean":
//             return new Euclidean$1();
//           case "euclidean-bt709":
//             return new EuclideanBT709$1();
//           case "euclidean-bt709-noalpha":
//             return new EuclideanBT709NoAlpha$1();
//           case "manhattan":
//             return new Manhattan$1();
//           case "manhattan-bt709":
//             return new ManhattanBT709$1();
//           case "manhattan-nommyde":
//             return new ManhattanNommyde$1();
//           case "pngquant":
//             return new PNGQuant$1();
//           default:
//             throw Error(`Unknown colorDistanceFormula ${t}`);
//         }
//       }
//       function imageQuantizationToImageQuantizer$1(t, e = "floyd-steinberg") {
//         switch (e) {
//           case "nearest":
//             return new NearestColor$1(t);
//           case "riemersma":
//             return new ErrorDiffusionRiemersma$1(t);
//           case "floyd-steinberg":
//             return new ErrorDiffusionArray$1(t, 0);
//           case "false-floyd-steinberg":
//             return new ErrorDiffusionArray$1(t, 1);
//           case "stucki":
//             return new ErrorDiffusionArray$1(t, 2);
//           case "atkinson":
//             return new ErrorDiffusionArray$1(t, 3);
//           case "jarvis":
//             return new ErrorDiffusionArray$1(t, 4);
//           case "burkes":
//             return new ErrorDiffusionArray$1(t, 5);
//           case "sierra":
//             return new ErrorDiffusionArray$1(t, 6);
//           case "two-sierra":
//             return new ErrorDiffusionArray$1(t, 7);
//           case "sierra-lite":
//             return new ErrorDiffusionArray$1(t, 8);
//           default:
//             throw Error(`Unknown imageQuantization ${e}`);
//         }
//       }
//       function paletteQuantizationToPaletteQuantizer$1(
//         t,
//         e = "wuquant",
//         i = 256
//       ) {
//         switch (e) {
//           case "neuquant":
//             return new NeuQuant$1(t, i);
//           case "rgbquant":
//             return new RGBQuant$1(t, i);
//           case "wuquant":
//             return new WuQuant$1(t, i);
//           case "neuquant-float":
//             return new NeuQuantFloat$1(t, i);
//           default:
//             throw Error(`Unknown paletteQuantization ${e}`);
//         }
//       }
//       var imageQ = __toCommonJS(src_exports),
//         gifframe = {};
//       let BitmapImage$1 = bitmapimage,
//         GifFrame$1 = class e extends BitmapImage$1 {
//           constructor(...t) {
//             if ((super(...t), t[0] instanceof e)) {
//               let i = t[0];
//               (this.xOffset = i.xOffset),
//                 (this.yOffset = i.yOffset),
//                 (this.disposalMethod = i.disposalMethod),
//                 (this.delayCentisecs = i.delayCentisecs),
//                 (this.interlaced = i.interlaced);
//             } else {
//               let i = t[t.length - 1],
//                 r = {};
//               "object" != typeof i || i instanceof BitmapImage$1 || (r = i),
//                 (this.xOffset = r.xOffset || 0),
//                 (this.yOffset = r.yOffset || 0),
//                 (this.disposalMethod =
//                   void 0 !== r.disposalMethod
//                     ? r.disposalMethod
//                     : e.DisposeToBackgroundColor),
//                 (this.delayCentisecs = r.delayCentisecs || 8),
//                 (this.interlaced = r.interlaced || !1);
//             }
//           }
//           getPalette() {
//             let t = new Set(),
//               e = this.bitmap.data,
//               i = 0,
//               r = !1;
//             for (; i < e.length; ) {
//               if (0 === e[i + 3]) r = !0;
//               else {
//                 let r = (e.readUInt32BE(i, !0) >> 8) & 16777215;
//                 t.add(r);
//               }
//               i += 4;
//             }
//             let n = Array(t.size),
//               a = t.values();
//             for (i = 0; i < n.length; ++i) n[i] = a.next().value;
//             n.sort((t, e) => t - e);
//             let s = n.length;
//             return r && ++s, { colors: n, usesTransparency: r, indexCount: s };
//           }
//         };
//       function requireGifutil() {
//         return (
//           hasRequiredGifutil ||
//             ((hasRequiredGifutil = 1),
//             (function (t) {
//               let e = require$$0,
//                 i = imageQ,
//                 r = bitmapimage,
//                 { GifFrame: n } = gifframe,
//                 { GifError: a } = gif$1,
//                 { GifCodec: s } = requireGifcodec(),
//                 o = [".jpg", ".jpeg", ".png", ".bmp"],
//                 l = new s();
//               function h(t, e, r, n, a) {
//                 let s;
//                 let o = Array.isArray(t) ? t : [t];
//                 if (a) {
//                   if (
//                     0 >
//                     [
//                       "FloydSteinberg",
//                       "FalseFloydSteinberg",
//                       "Stucki",
//                       "Atkinson",
//                       "Jarvis",
//                       "Burkes",
//                       "Sierra",
//                       "TwoSierra",
//                       "SierraLite",
//                     ].indexOf(a.ditherAlgorithm)
//                   )
//                     throw Error(
//                       `Invalid ditherAlgorithm '${a.ditherAlgorithm}'`
//                     );
//                   void 0 === a.serpentine && (a.serpentine = !0),
//                     void 0 === a.minimumColorDistanceToDither &&
//                       (a.minimumColorDistanceToDither = 0),
//                     void 0 === a.calculateErrorLikeGIMP &&
//                       (a.calculateErrorLikeGIMP = !1);
//                 }
//                 let l = new i.distance.Euclidean(),
//                   h = new i.palette[e](l, r, n);
//                 s = a
//                   ? new i.image.ErrorDiffusionArray(
//                       l,
//                       i.image.ErrorDiffusionArrayKernel[a.ditherAlgorithm],
//                       a.serpentine,
//                       a.minimumColorDistanceToDither,
//                       a.calculateErrorLikeGIMP
//                     )
//                   : new i.image.NearestColor(l);
//                 let u = [];
//                 o.forEach((t) => {
//                   let e = t.bitmap.data,
//                     r = new Uint32Array(new ArrayBuffer(e.length));
//                   for (let t = 0, i = 0; t < e.length; t += 4, ++i)
//                     r[i] = e.readUInt32LE(t, !0);
//                   let n = i.utils.PointContainer.fromUint32Array(
//                     r,
//                     t.bitmap.width,
//                     t.bitmap.height
//                   );
//                   h.sample(n), u.push(n);
//                 });
//                 let f = h.quantizeSync();
//                 for (let t = 0; t < o.length; ++t) {
//                   let e = o[t].bitmap.data,
//                     i = s.quantizeSync(u[t], f).toUint32Array();
//                   for (let t = 0, r = 0; t < e.length; t += 4, ++r)
//                     e.writeUInt32LE(i[r], t);
//                 }
//               }
//               (t.cloneFrames = function (t) {
//                 let e = [];
//                 return (
//                   t.forEach((t) => {
//                     e.push(new n(t));
//                   }),
//                   e
//                 );
//               }),
//                 (t.getColorInfo = function (t, e) {
//                   let i = !1,
//                     r = [];
//                   for (let e = 0; e < t.length; ++e) {
//                     let n = t[e].getPalette();
//                     if ((n.usesTransparency && (i = !0), n.indexCount > 256))
//                       throw new a(
//                         `Frame ${e} uses more than 256 color indexes`
//                       );
//                     r.push(n);
//                   }
//                   if (0 === e) return { usesTransparency: i, palettes: r };
//                   let n = new Set();
//                   r.forEach((t) => {
//                     t.colors.forEach((t) => {
//                       n.add(t);
//                     });
//                   });
//                   let s = n.size;
//                   if ((i && ++s, e && s > e))
//                     return { usesTransparency: i, palettes: r };
//                   let o = Array(n.size),
//                     l = n.values();
//                   for (let t = 0; t < o.length; ++t) o[t] = l.next().value;
//                   return (
//                     o.sort((t, e) => t - e),
//                     {
//                       colors: o,
//                       indexCount: s,
//                       usesTransparency: i,
//                       palettes: r,
//                     }
//                   );
//                 }),
//                 (t.copyAsJimp = function (e, i) {
//                   return t.shareAsJimp(e, new r(i));
//                 }),
//                 (t.getMaxDimensions = function (t) {
//                   let e = 0,
//                     i = 0;
//                   return (
//                     t.forEach((t) => {
//                       let r = t.xOffset + t.bitmap.width;
//                       r > e && (e = r);
//                       let n = t.yOffset + t.bitmap.height;
//                       n > i && (i = n);
//                     }),
//                     { maxWidth: e, maxHeight: i }
//                   );
//                 }),
//                 (t.quantizeDekker = function (t, e, i) {
//                   h(t, "NeuQuantFloat", (e = e || 256), 0, i);
//                 }),
//                 (t.quantizeSorokin = function (t, e, i, r) {
//                   let n;
//                   switch (((e = e || 256), (i = i || "min-pop"))) {
//                     case "min-pop":
//                       n = 2;
//                       break;
//                     case "top-pop":
//                       n = 1;
//                       break;
//                     default:
//                       throw Error(`Invalid quantizeSorokin histogram '${i}'`);
//                   }
//                   h(t, "RGBQuant", e, n, r);
//                 }),
//                 (t.quantizeWu = function (t, e, i, r) {
//                   if (((e = e || 256), (i = i || 5) < 1 || i > 8))
//                     throw Error("Invalid quantization quality");
//                   h(t, "WuQuant", e, i, r);
//                 }),
//                 (t.read = function (t, i) {
//                   return (
//                     (i = i || l),
//                     Buffer.isBuffer(t)
//                       ? i.decodeGif(t)
//                       : (function (t) {
//                           return new Promise((i, r) => {
//                             e.readFile(t, (t, e) => (t ? r(t) : i(e)));
//                           });
//                         })(t).then((t) => i.decodeGif(t))
//                   );
//                 }),
//                 (t.shareAsJimp = function (t, e) {
//                   let i = new t(e.bitmap.width, e.bitmap.height, 0);
//                   return (i.bitmap.data = e.bitmap.data), i;
//                 }),
//                 (t.write = function (t, i, r, n) {
//                   n = n || l;
//                   let a = t.match(/\.[a-zA-Z]+$/);
//                   if (null !== a && o.includes(a[0].toLowerCase()))
//                     throw Error(`GIF '${t}' has an unexpected suffix`);
//                   return n.encodeGif(i, r).then((i) =>
//                     (function (t, i) {
//                       return new Promise((r, n) => {
//                         e.writeFile(t, i, (t) => (t ? n(t) : r()));
//                       });
//                     })(t, i.buffer).then(() => i)
//                   );
//                 });
//             })(gifutil)),
//           gifutil
//         );
//       }
//       function requireGifcodec() {
//         if (hasRequiredGifcodec) return gifcodec;
//         hasRequiredGifcodec = 1;
//         let t = omggif,
//           { Gif: e, GifError: i } = gif$1;
//         function r() {
//           let t = requireGifutil();
//           return (
//             (r = function () {
//               return t;
//             }),
//             t
//           );
//         }
//         let { GifFrame: n } = gifframe;
//         function a(t, e) {
//           let i = t.indexOf(e);
//           return -1 === i ? null : i;
//         }
//         function s(t, e) {
//           for (var i, r = 0, n = t.length - 1; r <= n; )
//             if (t[(i = Math.floor((r + n) / 2))] > e) n = i - 1;
//             else {
//               if (!(t[i] < e)) return i;
//               r = i + 1;
//             }
//           return null;
//         }
//         function o(t) {
//           let e = t.colors;
//           t.usesTransparency && e.push(0);
//           let i = e.length,
//             r = 2;
//           for (; i > r; ) r <<= 1;
//           (e.length = r), e.fill(0, i);
//         }
//         function l(t, e) {
//           let i = t.bitmap.width * t.bitmap.height;
//           return (
//             (i = Math.ceil((i * e) / 8)), 100 + (i += Math.ceil(i / 255)) + 768
//           );
//         }
//         function h(t) {
//           let e = t.indexCount,
//             i = 0;
//           for (--e; e; ) ++i, (e >>= 1);
//           return i > 0 ? i : 1;
//         }
//         function u(t, e, r, n, l) {
//           if (r.interlaced)
//             throw new i("writing interlaced GIFs is not supported");
//           let h = (function (t, e, r) {
//               let n = r.colors,
//                 o = n.length <= 8 ? a : s,
//                 l = e.bitmap.data,
//                 h = new Buffer(l.length / 4),
//                 u = n.length,
//                 f = 0,
//                 c = 0;
//               for (; f < l.length; ) {
//                 if (0 !== l[f + 3]) {
//                   let t = (l.readUInt32BE(f, !0) >> 8) & 16777215;
//                   h[c] = o(n, t);
//                 } else h[c] = u;
//                 (f += 4), ++c;
//               }
//               if (r.usesTransparency) {
//                 if (256 === u)
//                   throw new i(
//                     `Frame ${t} already has 256 colorsand so can't use transparency`
//                   );
//               } else u = null;
//               return { buffer: h, transparentIndex: u };
//             })(e, r, n),
//             u = {
//               delay: r.delayCentisecs,
//               disposal: r.disposalMethod,
//               transparent: h.transparentIndex,
//             };
//           l && (o(n), (u.palette = n.colors));
//           try {
//             let e,
//               i = t.getOutputBuffer(),
//               n = t.getOutputBufferPosition(),
//               a = !0;
//             for (; a; )
//               if (
//                 ((e = t.addFrame(
//                   r.xOffset,
//                   r.yOffset,
//                   r.bitmap.width,
//                   r.bitmap.height,
//                   h.buffer,
//                   u
//                 )),
//                 (a = !1),
//                 e >= i.length - 1)
//               ) {
//                 let e = new Buffer(1.5 * i.length);
//                 i.copy(e),
//                   t.setOutputBuffer(e),
//                   t.setOutputBufferPosition(n),
//                   (i = e),
//                   (a = !0);
//               }
//             return i;
//           } catch (t) {
//             throw new i(t);
//           }
//         }
//         return (
//           (gifcodec.GifCodec = class {
//             constructor(t = {}) {
//               (this._transparentRGB = null),
//                 "number" == typeof t.transparentRGB &&
//                   0 !== t.transparentRGB &&
//                   (this._transparentRGBA = 256 * t.transparentRGB),
//                 (this._testInitialBufferSize = 0);
//             }
//             decodeGif(r) {
//               try {
//                 let n;
//                 try {
//                   n = new t.GifReader(r);
//                 } catch (t) {
//                   throw new i(t);
//                 }
//                 let a = n.numFrames(),
//                   s = [],
//                   o = {
//                     width: n.width,
//                     height: n.height,
//                     loops: n.loopCount(),
//                     usesTransparency: !1,
//                   };
//                 for (let t = 0; t < a; ++t) {
//                   let e = this._decodeFrame(n, t, o.usesTransparency);
//                   s.push(e.frame),
//                     e.usesTransparency && (o.usesTransparency = !0);
//                 }
//                 return Promise.resolve(new e(r, s, o));
//               } catch (t) {
//                 return Promise.reject(t);
//               }
//             }
//             encodeGif(t, n = {}) {
//               try {
//                 if (null === t || 0 === t.length)
//                   throw new i("there are no frames");
//                 let a = r().getMaxDimensions(t);
//                 return (
//                   ((n = Object.assign({}, n)).width = a.maxWidth),
//                   (n.height = a.maxHeight),
//                   void 0 === n.loops && (n.loops = 0),
//                   (n.colorScope = n.colorScope || e.GlobalColorsPreferred),
//                   Promise.resolve(this._encodeGif(t, n))
//                 );
//               } catch (t) {
//                 return Promise.reject(t);
//               }
//             }
//             _decodeFrame(t, e, r) {
//               let a, s;
//               try {
//                 if (
//                   ((a = t.frameInfo(e)),
//                   (s = new Buffer(t.width * t.height * 4)),
//                   t.decodeAndBlitFrameRGBA(e, s),
//                   a.width !== t.width || a.height !== t.height)
//                 ) {
//                   if (
//                     (a.y && (s = s.slice(a.y * t.width * 4)), t.width > a.width)
//                   )
//                     for (let e = 0; e < a.height; ++e)
//                       s.copy(
//                         s,
//                         e * a.width * 4,
//                         4 * (a.x + e * t.width),
//                         4 * (a.x + e * t.width) + 4 * a.width
//                       );
//                   s = s.slice(0, a.width * a.height * 4);
//                 }
//               } catch (t) {
//                 throw new i(t);
//               }
//               let o = !1;
//               if (null === this._transparentRGBA) {
//                 if (!r)
//                   for (let t = 3; t < s.length; t += 4)
//                     0 === s[t] && ((o = !0), (t = s.length));
//               } else
//                 for (let t = 3; t < s.length; t += 4)
//                   0 === s[t] &&
//                     (s.writeUInt32BE(this._transparentRGBA, t - 3), (o = !0));
//               return {
//                 frame: new n(a.width, a.height, s, {
//                   xOffset: a.x,
//                   yOffset: a.y,
//                   disposalMethod: a.disposal,
//                   interlaced: a.interlaced,
//                   delayCentisecs: a.delay,
//                 }),
//                 usesTransparency: o,
//               };
//             }
//             _encodeGif(n, a) {
//               let s;
//               if (a.colorScope === e.LocalColorsOnly)
//                 s = r().getColorInfo(n, 0);
//               else if (!(s = r().getColorInfo(n, 256)).colors) {
//                 if (a.colorScope === e.GlobalColorsOnly)
//                   throw new i("Too many color indexes for global color table");
//                 a.colorScope = e.LocalColorsOnly;
//               }
//               a.usesTransparency = s.usesTransparency;
//               let l = s.palettes;
//               return a.colorScope === e.LocalColorsOnly
//                 ? (function (r, n, a, s) {
//                     let o = { loop: n.loops },
//                       l,
//                       h = new Buffer(2e3);
//                     try {
//                       l = new t.GifWriter(h, n.width, n.height, o);
//                     } catch (t) {
//                       throw new i(t);
//                     }
//                     for (let t = 0; t < r.length; ++t)
//                       h = u(l, t, r[t], s[t], !0);
//                     return new e(h.slice(0, l.end()), r, n);
//                   })(n, a, 0, l)
//                 : (function (r, n, a, s) {
//                     let l = {
//                       colors: s.colors.slice(),
//                       usesTransparency: s.usesTransparency,
//                     };
//                     o(l);
//                     let h = { palette: l.colors, loop: n.loops },
//                       f,
//                       c = new Buffer(2e3);
//                     try {
//                       f = new t.GifWriter(c, n.width, n.height, h);
//                     } catch (t) {
//                       throw new i(t);
//                     }
//                     for (let t = 0; t < r.length; ++t) c = u(f, t, r[t], s, !1);
//                     return new e(c.slice(0, f.end()), r, n);
//                   })(n, a, 0, s);
//             }
//             _getSizeEstimateGlobal(t, e) {
//               if (this._testInitialBufferSize > 0)
//                 return this._testInitialBufferSize;
//               let i = 968,
//                 r = h(t);
//               return (
//                 e.forEach((t) => {
//                   i += l(t, r);
//                 }),
//                 i
//               );
//             }
//             _getSizeEstimateLocal(t, e) {
//               if (this._testInitialBufferSize > 0)
//                 return this._testInitialBufferSize;
//               let i = 200;
//               for (let r = 0; r < e.length; ++r) {
//                 let n = h(t[r]);
//                 i += l(e[r], n);
//               }
//               return i;
//             }
//           }),
//           gifcodec
//         );
//       }
//       (GifFrame$1.DisposeToAnything = 0),
//         (GifFrame$1.DisposeNothing = 1),
//         (GifFrame$1.DisposeToBackgroundColor = 2),
//         (GifFrame$1.DisposeToPrevious = 3),
//         (gifframe.GifFrame = GifFrame$1);
//       let BitmapImage = bitmapimage,
//         { Gif: Gif, GifError: GifError$1 } = gif$1,
//         { GifCodec: GifCodec } = requireGifcodec(),
//         { GifFrame: GifFrame } = gifframe,
//         GifUtil = requireGifutil();
//       var t = BitmapImage,
//         e = GifCodec,
//         i = GifFrame,
//         r = GifUtil;
//       function gif() {
//         return {
//           mime: "image/gif",
//           encode: async (t) => {
//             let e = new t(t);
//             r.quantizeDekker(e, 256);
//             let i = new i(t),
//               r = new e();
//             return (await r.encodeGif([i], {})).buffer;
//           },
//           decode: (t) => {
//             let e = new omggif.GifReader(t),
//               i = Buffer.alloc(e.width * e.height * 4);
//             return (
//               e.decodeAndBlitFrameRGBA(0, i),
//               { data: i, width: e.width, height: e.height }
//             );
//           },
//         };
//       }
//       var encoder = { exports: {} };
//       !(function (t) {
//         function e(t) {
//           var e,
//             i,
//             r,
//             n,
//             a,
//             s = Math.floor,
//             o = Array(64),
//             l = Array(64),
//             h = Array(64),
//             u = Array(64),
//             f = Array(65535),
//             c = Array(65535),
//             d = Array(64),
//             p = Array(64),
//             m = [],
//             g = 0,
//             _ = 7,
//             b = Array(64),
//             y = Array(64),
//             v = Array(64),
//             w = Array(256),
//             x = Array(2048),
//             E = [
//               0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12,
//               17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32,
//               39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47,
//               50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63,
//             ],
//             k = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
//             M = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
//             S = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125],
//             A = [
//               1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113,
//               20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36,
//               51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41,
//               42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74,
//               83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105,
//               106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134,
//               135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154,
//               162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181,
//               182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201,
//               202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227,
//               228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246,
//               247, 248, 249, 250,
//             ],
//             I = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
//             T = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
//             B = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119],
//             R = [
//               0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34,
//               50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21,
//               98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38,
//               39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72,
//               73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103,
//               104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131,
//               132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151,
//               152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178,
//               179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198,
//               199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218,
//               226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245,
//               246, 247, 248, 249, 250,
//             ];
//           function P(t, e) {
//             for (var i = 0, r = 0, n = [], a = 1; a <= 16; a++) {
//               for (var s = 1; s <= t[a]; s++)
//                 (n[e[r]] = []), (n[e[r]][0] = i), (n[e[r]][1] = a), r++, i++;
//               i *= 2;
//             }
//             return n;
//           }
//           function O(t) {
//             for (var e = t[0], i = t[1] - 1; i >= 0; )
//               e & (1 << i) && (g |= 1 << _),
//                 i--,
//                 --_ < 0 && (255 == g ? (C(255), C(0)) : C(g), (_ = 7), (g = 0));
//           }
//           function C(t) {
//             m.push(t);
//           }
//           function z(t) {
//             C((t >> 8) & 255), C(255 & t);
//           }
//           function L(t, e, i, r, n) {
//             for (
//               var a,
//                 s = n[0],
//                 o = n[240],
//                 l = (function (t, e) {
//                   var i,
//                     r,
//                     n,
//                     a,
//                     s,
//                     o,
//                     l,
//                     h,
//                     u,
//                     f,
//                     c = 0;
//                   for (u = 0; u < 8; ++u) {
//                     (i = t[c]),
//                       (r = t[c + 1]),
//                       (n = t[c + 2]),
//                       (a = t[c + 3]),
//                       (s = t[c + 4]),
//                       (o = t[c + 5]),
//                       (l = t[c + 6]);
//                     var p = i + (h = t[c + 7]),
//                       m = i - h,
//                       g = r + l,
//                       _ = r - l,
//                       b = n + o,
//                       y = n - o,
//                       v = a + s,
//                       w = a - s,
//                       x = p + v,
//                       E = p - v,
//                       k = g + b,
//                       M = g - b;
//                     (t[c] = x + k), (t[c + 4] = x - k);
//                     var S = 0.707106781 * (M + E);
//                     (t[c + 2] = E + S), (t[c + 6] = E - S);
//                     var A = 0.382683433 * ((x = w + y) - (M = _ + m)),
//                       I = 0.5411961 * x + A,
//                       T = 1.306562965 * M + A,
//                       B = 0.707106781 * (k = y + _),
//                       R = m + B,
//                       P = m - B;
//                     (t[c + 5] = P + I),
//                       (t[c + 3] = P - I),
//                       (t[c + 1] = R + T),
//                       (t[c + 7] = R - T),
//                       (c += 8);
//                   }
//                   for (c = 0, u = 0; u < 8; ++u) {
//                     (i = t[c]),
//                       (r = t[c + 8]),
//                       (n = t[c + 16]),
//                       (a = t[c + 24]),
//                       (s = t[c + 32]),
//                       (o = t[c + 40]),
//                       (l = t[c + 48]);
//                     var O = i + (h = t[c + 56]),
//                       C = i - h,
//                       z = r + l,
//                       L = r - l,
//                       U = n + o,
//                       D = n - o,
//                       N = a + s,
//                       j = a - s,
//                       F = O + N,
//                       G = O - N,
//                       Z = z + U,
//                       H = z - U;
//                     (t[c] = F + Z), (t[c + 32] = F - Z);
//                     var W = 0.707106781 * (H + G);
//                     (t[c + 16] = G + W), (t[c + 48] = G - W);
//                     var q = 0.382683433 * ((F = j + D) - (H = L + C)),
//                       Y = 0.5411961 * F + q,
//                       V = 1.306562965 * H + q,
//                       $ = 0.707106781 * (Z = D + L),
//                       K = C + $,
//                       X = C - $;
//                     (t[c + 40] = X + Y),
//                       (t[c + 24] = X - Y),
//                       (t[c + 8] = K + V),
//                       (t[c + 56] = K - V),
//                       c++;
//                   }
//                   for (u = 0; u < 64; ++u)
//                     (f = t[u] * e[u]),
//                       (d[u] = f > 0 ? (f + 0.5) | 0 : (f - 0.5) | 0);
//                   return d;
//                 })(t, e),
//                 h = 0;
//               h < 64;
//               ++h
//             )
//               p[E[h]] = l[h];
//             var u = p[0] - i;
//             (i = p[0]), 0 == u ? O(r[0]) : (O(r[c[(a = 32767 + u)]]), O(f[a]));
//             for (var m = 63; m > 0 && 0 == p[m]; m--);
//             if (0 == m) return O(s), i;
//             for (var g, _ = 1; _ <= m; ) {
//               for (var b = _; 0 == p[_] && _ <= m; ++_);
//               var y = _ - b;
//               if (y >= 16) {
//                 g = y >> 4;
//                 for (var v = 1; v <= g; ++v) O(o);
//                 y &= 15;
//               }
//               O(n[(y << 4) + c[(a = 32767 + p[_])]]), O(f[a]), _++;
//             }
//             return 63 != m && O(s), i;
//           }
//           function U(t) {
//             t <= 0 && (t = 1),
//               t > 100 && (t = 100),
//               a != t &&
//                 ((function (t) {
//                   for (
//                     var e = [
//                         16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58,
//                         60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29,
//                         51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24,
//                         35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121,
//                         120, 101, 72, 92, 95, 98, 112, 100, 103, 99,
//                       ],
//                       i = 0;
//                     i < 64;
//                     i++
//                   ) {
//                     var r = s((e[i] * t + 50) / 100);
//                     r < 1 ? (r = 1) : r > 255 && (r = 255), (o[E[i]] = r);
//                   }
//                   for (
//                     var n = [
//                         17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99,
//                         99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99,
//                         99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
//                         99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
//                         99, 99, 99, 99, 99, 99, 99, 99,
//                       ],
//                       a = 0;
//                     a < 64;
//                     a++
//                   ) {
//                     var f = s((n[a] * t + 50) / 100);
//                     f < 1 ? (f = 1) : f > 255 && (f = 255), (l[E[a]] = f);
//                   }
//                   for (
//                     var c = [
//                         1, 1.387039845, 1.306562965, 1.175875602, 1,
//                         0.785694958, 0.5411961, 0.275899379,
//                       ],
//                       d = 0,
//                       p = 0;
//                     p < 8;
//                     p++
//                   )
//                     for (var m = 0; m < 8; m++)
//                       (h[d] = 1 / (o[E[d]] * c[p] * c[m] * 8)),
//                         (u[d] = 1 / (l[E[d]] * c[p] * c[m] * 8)),
//                         d++;
//                 })(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)),
//                 (a = t));
//           }
//           (this.encode = function (t, a) {
//             new Date().getTime(),
//               a && U(a),
//               (m = []),
//               (g = 0),
//               (_ = 7),
//               z(65496),
//               z(65504),
//               z(16),
//               C(74),
//               C(70),
//               C(73),
//               C(70),
//               C(0),
//               C(1),
//               C(1),
//               C(0),
//               z(1),
//               z(1),
//               C(0),
//               C(0),
//               void 0 !== (d = t.comments) &&
//                 d.constructor === Array &&
//                 d.forEach((t) => {
//                   if ("string" == typeof t) {
//                     z(65534);
//                     var e,
//                       i = t.length;
//                     for (z(i + 2), e = 0; e < i; e++) C(t.charCodeAt(e));
//                   }
//                 }),
//               (function (t) {
//                 if (t) {
//                   z(65505),
//                     69 === t[0] && 120 === t[1] && 105 === t[2] && 102 === t[3]
//                       ? z(t.length + 2)
//                       : (z(t.length + 5 + 2),
//                         C(69),
//                         C(120),
//                         C(105),
//                         C(102),
//                         C(0));
//                   for (var e = 0; e < t.length; e++) C(t[e]);
//                 }
//               })(t.exifBuffer),
//               (function () {
//                 z(65499), z(132), C(0);
//                 for (var t = 0; t < 64; t++) C(o[t]);
//                 C(1);
//                 for (var e = 0; e < 64; e++) C(l[e]);
//               })(),
//               (function (t, e) {
//                 z(65472),
//                   z(17),
//                   C(8),
//                   z(e),
//                   z(t),
//                   C(3),
//                   C(1),
//                   C(17),
//                   C(0),
//                   C(2),
//                   C(17),
//                   C(1),
//                   C(3),
//                   C(17),
//                   C(1);
//               })(t.width, t.height),
//               (function () {
//                 z(65476), z(418), C(0);
//                 for (var t = 0; t < 16; t++) C(k[t + 1]);
//                 for (var e = 0; e <= 11; e++) C(M[e]);
//                 C(16);
//                 for (var i = 0; i < 16; i++) C(S[i + 1]);
//                 for (var r = 0; r <= 161; r++) C(A[r]);
//                 C(1);
//                 for (var n = 0; n < 16; n++) C(I[n + 1]);
//                 for (var a = 0; a <= 11; a++) C(T[a]);
//                 C(17);
//                 for (var s = 0; s < 16; s++) C(B[s + 1]);
//                 for (var o = 0; o <= 161; o++) C(R[o]);
//               })(),
//               z(65498),
//               z(12),
//               C(3),
//               C(1),
//               C(0),
//               C(2),
//               C(17),
//               C(3),
//               C(17),
//               C(0),
//               C(63),
//               C(0);
//             var s = 0,
//               f = 0,
//               c = 0;
//             (g = 0), (_ = 7), (this.encode.displayName = "_encode_");
//             for (
//               var d,
//                 p,
//                 w,
//                 E,
//                 P,
//                 D,
//                 N,
//                 j,
//                 F,
//                 G,
//                 Z = t.data,
//                 H = t.width,
//                 W = t.height,
//                 q = 4 * H,
//                 Y = 0;
//               Y < W;

//             ) {
//               for (p = 0; p < q; ) {
//                 for (N = D = q * Y + p, j = -1, F = 0, G = 0; G < 64; G++)
//                   (N = D + (F = G >> 3) * q + (j = 4 * (7 & G))),
//                     Y + F >= W && (N -= q * (Y + 1 + F - W)),
//                     p + j >= q && (N -= p + j - q + 4),
//                     (w = Z[N++]),
//                     (E = Z[N++]),
//                     (P = Z[N++]),
//                     (b[G] =
//                       ((x[w] + x[(E + 256) | 0] + x[(P + 512) | 0]) >> 16) -
//                       128),
//                     (y[G] =
//                       ((x[(w + 768) | 0] +
//                         x[(E + 1024) | 0] +
//                         x[(P + 1280) | 0]) >>
//                         16) -
//                       128),
//                     (v[G] =
//                       ((x[(w + 1280) | 0] +
//                         x[(E + 1536) | 0] +
//                         x[(P + 1792) | 0]) >>
//                         16) -
//                       128);
//                 (s = L(b, h, s, e, r)),
//                   (f = L(y, u, f, i, n)),
//                   (c = L(v, u, c, i, n)),
//                   (p += 32);
//               }
//               Y += 8;
//             }
//             if (_ >= 0) {
//               var V = [];
//               (V[1] = _ + 1), (V[0] = (1 << (_ + 1)) - 1), O(V);
//             }
//             return z(65497), Buffer.from(m);
//           }),
//             new Date().getTime(),
//             t || (t = 50),
//             (function () {
//               for (var t = String.fromCharCode, e = 0; e < 256; e++)
//                 w[e] = t(e);
//             })(),
//             (e = P(k, M)),
//             (i = P(I, T)),
//             (r = P(S, A)),
//             (n = P(B, R)),
//             (function () {
//               for (var t = 1, e = 2, i = 1; i <= 15; i++) {
//                 for (var r = t; r < e; r++)
//                   (c[32767 + r] = i),
//                     (f[32767 + r] = []),
//                     (f[32767 + r][1] = i),
//                     (f[32767 + r][0] = r);
//                 for (var n = -(e - 1); n <= -t; n++)
//                   (c[32767 + n] = i),
//                     (f[32767 + n] = []),
//                     (f[32767 + n][1] = i),
//                     (f[32767 + n][0] = e - 1 + n);
//                 (t <<= 1), (e <<= 1);
//               }
//             })(),
//             (function () {
//               for (var t = 0; t < 256; t++)
//                 (x[t] = 19595 * t),
//                   (x[(t + 256) | 0] = 38470 * t),
//                   (x[(t + 512) | 0] = 7471 * t + 32768),
//                   (x[(t + 768) | 0] = -11059 * t),
//                   (x[(t + 1024) | 0] = -21709 * t),
//                   (x[(t + 1280) | 0] = 32768 * t + 8421375),
//                   (x[(t + 1536) | 0] = -27439 * t),
//                   (x[(t + 1792) | 0] = -5329 * t);
//             })(),
//             U(t),
//             new Date().getTime();
//         }
//         encoder.exports = function (t, i) {
//           return (
//             void 0 === i && (i = 50),
//             { data: new e(i).encode(t, i), width: t.width, height: t.height }
//           );
//         };
//       })();
//       var hasRequiredGifutil,
//         hasRequiredGifcodec,
//         module,
//         JpegImage,
//         encoderExports = encoder.exports,
//         decoder = { exports: {} };
//       (module = decoder),
//         (JpegImage = (function () {
//           var t = new Int32Array([
//               0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19,
//               26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49,
//               56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52,
//               45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63,
//             ]),
//             e = 4017,
//             i = 799,
//             r = 3406,
//             n = 2276,
//             a = 1567,
//             s = 3784,
//             o = 5793,
//             l = 2896;
//           function h() {}
//           function u(t, e) {
//             for (var i, r, n = 0, a = [], s = 16; s > 0 && !t[s - 1]; ) s--;
//             a.push({ children: [], index: 0 });
//             var o,
//               l = a[0];
//             for (i = 0; i < s; i++) {
//               for (r = 0; r < t[i]; r++) {
//                 for ((l = a.pop()).children[l.index] = e[n]; l.index > 0; ) {
//                   if (0 === a.length)
//                     throw Error("Could not recreate Huffman Table");
//                   l = a.pop();
//                 }
//                 for (l.index++, a.push(l); a.length <= i; )
//                   a.push((o = { children: [], index: 0 })),
//                     (l.children[l.index] = o.children),
//                     (l = o);
//                 n++;
//               }
//               i + 1 < s &&
//                 (a.push((o = { children: [], index: 0 })),
//                 (l.children[l.index] = o.children),
//                 (l = o));
//             }
//             return a[0].children;
//           }
//           function f(e, i, r, n, a, s, o, l, h, u) {
//             r.precision, r.samplesPerLine, r.scanLines;
//             var f = r.mcusPerLine,
//               c = r.progressive;
//             r.maxH, r.maxV;
//             var d = i,
//               p = 0,
//               m = 0;
//             function g() {
//               if (m > 0) return m--, (p >> m) & 1;
//               if (255 == (p = e[i++])) {
//                 var t = e[i++];
//                 if (t)
//                   throw Error(
//                     "unexpected marker: " + ((p << 8) | t).toString(16)
//                   );
//               }
//               return (m = 7), p >>> 7;
//             }
//             function _(t) {
//               for (var e, i = t; null !== (e = g()); ) {
//                 if ("number" == typeof (i = i[e])) return i;
//                 if ("object" != typeof i)
//                   throw Error("invalid huffman sequence");
//               }
//               return null;
//             }
//             function b(t) {
//               for (var e = 0; t > 0; ) {
//                 var i = g();
//                 if (null === i) return;
//                 (e = (e << 1) | i), t--;
//               }
//               return e;
//             }
//             function y(t) {
//               var e = b(t);
//               return e >= 1 << (t - 1) ? e : e + (-1 << t) + 1;
//             }
//             var v,
//               w = 0,
//               x = 0;
//             function E(t, e, i, r, n) {
//               var a = i % f,
//                 s = ((i / f) | 0) * t.v + r,
//                 o = a * t.h + n;
//               (void 0 === t.blocks[s] && u.tolerantDecoding) ||
//                 e(t, t.blocks[s][o]);
//             }
//             function k(t, e, i) {
//               var r = (i / t.blocksPerLine) | 0,
//                 n = i % t.blocksPerLine;
//               (void 0 === t.blocks[r] && u.tolerantDecoding) ||
//                 e(t, t.blocks[r][n]);
//             }
//             var M,
//               S,
//               A,
//               I,
//               T,
//               B,
//               R = n.length;
//             B = c
//               ? 0 === s
//                 ? 0 === l
//                   ? function (t, e) {
//                       var i = _(t.huffmanTableDC),
//                         r = 0 === i ? 0 : y(i) << h;
//                       e[0] = t.pred += r;
//                     }
//                   : function (t, e) {
//                       e[0] |= g() << h;
//                     }
//                 : 0 === l
//                 ? function (e, i) {
//                     if (w > 0) w--;
//                     else
//                       for (var r = s, n = o; r <= n; ) {
//                         var a = _(e.huffmanTableAC),
//                           l = 15 & a,
//                           u = a >> 4;
//                         if (0 !== l) (i[t[(r += u)]] = y(l) * (1 << h)), r++;
//                         else {
//                           if (u < 15) {
//                             w = b(u) + (1 << u) - 1;
//                             break;
//                           }
//                           r += 16;
//                         }
//                       }
//                   }
//                 : function (e, i) {
//                     for (var r = s, n = o, a = 0; r <= n; ) {
//                       var l = t[r],
//                         u = i[l] < 0 ? -1 : 1;
//                       switch (x) {
//                         case 0:
//                           var f = _(e.huffmanTableAC),
//                             c = 15 & f;
//                           if (((a = f >> 4), 0 === c))
//                             a < 15
//                               ? ((w = b(a) + (1 << a)), (x = 4))
//                               : ((a = 16), (x = 1));
//                           else {
//                             if (1 !== c) throw Error("invalid ACn encoding");
//                             (v = y(c)), (x = a ? 2 : 3);
//                           }
//                           continue;
//                         case 1:
//                         case 2:
//                           i[l]
//                             ? (i[l] += (g() << h) * u)
//                             : 0 == --a && (x = 2 == x ? 3 : 0);
//                           break;
//                         case 3:
//                           i[l]
//                             ? (i[l] += (g() << h) * u)
//                             : ((i[l] = v << h), (x = 0));
//                           break;
//                         case 4:
//                           i[l] && (i[l] += (g() << h) * u);
//                       }
//                       r++;
//                     }
//                     4 === x && 0 == --w && (x = 0);
//                   }
//               : function (e, i) {
//                   var r = _(e.huffmanTableDC),
//                     n = 0 === r ? 0 : y(r);
//                   i[0] = e.pred += n;
//                   for (var a = 1; a < 64; ) {
//                     var s = _(e.huffmanTableAC),
//                       o = 15 & s,
//                       l = s >> 4;
//                     if (0 !== o) (i[t[(a += l)]] = y(o)), a++;
//                     else {
//                       if (l < 15) break;
//                       a += 16;
//                     }
//                   }
//                 };
//             var P,
//               O,
//               C,
//               z,
//               L = 0;
//             for (
//               O =
//                 1 == R
//                   ? n[0].blocksPerLine * n[0].blocksPerColumn
//                   : f * r.mcusPerColumn,
//                 a || (a = O);
//               L < O;

//             ) {
//               for (S = 0; S < R; S++) n[S].pred = 0;
//               if (((w = 0), 1 == R))
//                 for (M = n[0], T = 0; T < a; T++) k(M, B, L), L++;
//               else
//                 for (T = 0; T < a; T++) {
//                   for (S = 0; S < R; S++)
//                     for (C = (M = n[S]).h, z = M.v, A = 0; A < z; A++)
//                       for (I = 0; I < C; I++) E(M, B, L, A, I);
//                   if (++L === O) break;
//                 }
//               if (L === O)
//                 do {
//                   if (255 === e[i] && 0 !== e[i + 1]) break;
//                   i += 1;
//                 } while (i < e.length - 2);
//               if (((m = 0), (P = (e[i] << 8) | e[i + 1]) < 65280))
//                 throw Error("marker was not found");
//               if (!(P >= 65488 && P <= 65495)) break;
//               i += 2;
//             }
//             return i - d;
//           }
//           function c(t, h) {
//             var u,
//               f,
//               c = [],
//               d = h.blocksPerLine,
//               p = h.blocksPerColumn,
//               m = d << 3,
//               _ = new Int32Array(64),
//               b = new Uint8Array(64);
//             function y(t, u, f) {
//               var c,
//                 d,
//                 p,
//                 m,
//                 g,
//                 _,
//                 b,
//                 y,
//                 v,
//                 w,
//                 x = h.quantizationTable,
//                 E = f;
//               for (w = 0; w < 64; w++) E[w] = t[w] * x[w];
//               for (w = 0; w < 8; ++w) {
//                 var k = 8 * w;
//                 0 != E[1 + k] ||
//                 0 != E[2 + k] ||
//                 0 != E[3 + k] ||
//                 0 != E[4 + k] ||
//                 0 != E[5 + k] ||
//                 0 != E[6 + k] ||
//                 0 != E[7 + k]
//                   ? ((c = (o * E[0 + k] + 128) >> 8),
//                     (d = (o * E[4 + k] + 128) >> 8),
//                     (p = E[2 + k]),
//                     (m = E[6 + k]),
//                     (g = (l * (E[1 + k] - E[7 + k]) + 128) >> 8),
//                     (y = (l * (E[1 + k] + E[7 + k]) + 128) >> 8),
//                     (_ = E[3 + k] << 4),
//                     (b = E[5 + k] << 4),
//                     (v = (c - d + 1) >> 1),
//                     (c = (c + d + 1) >> 1),
//                     (d = v),
//                     (v = (p * s + m * a + 128) >> 8),
//                     (p = (p * a - m * s + 128) >> 8),
//                     (m = v),
//                     (v = (g - b + 1) >> 1),
//                     (g = (g + b + 1) >> 1),
//                     (b = v),
//                     (v = (y + _ + 1) >> 1),
//                     (_ = (y - _ + 1) >> 1),
//                     (y = v),
//                     (v = (c - m + 1) >> 1),
//                     (c = (c + m + 1) >> 1),
//                     (m = v),
//                     (v = (d - p + 1) >> 1),
//                     (d = (d + p + 1) >> 1),
//                     (p = v),
//                     (v = (g * n + y * r + 2048) >> 12),
//                     (g = (g * r - y * n + 2048) >> 12),
//                     (y = v),
//                     (v = (_ * i + b * e + 2048) >> 12),
//                     (_ = (_ * e - b * i + 2048) >> 12),
//                     (b = v),
//                     (E[0 + k] = c + y),
//                     (E[7 + k] = c - y),
//                     (E[1 + k] = d + b),
//                     (E[6 + k] = d - b),
//                     (E[2 + k] = p + _),
//                     (E[5 + k] = p - _),
//                     (E[3 + k] = m + g),
//                     (E[4 + k] = m - g))
//                   : ((v = (o * E[0 + k] + 512) >> 10),
//                     (E[0 + k] = v),
//                     (E[1 + k] = v),
//                     (E[2 + k] = v),
//                     (E[3 + k] = v),
//                     (E[4 + k] = v),
//                     (E[5 + k] = v),
//                     (E[6 + k] = v),
//                     (E[7 + k] = v));
//               }
//               for (w = 0; w < 8; ++w) {
//                 var M = w;
//                 0 != E[8 + M] ||
//                 0 != E[16 + M] ||
//                 0 != E[24 + M] ||
//                 0 != E[32 + M] ||
//                 0 != E[40 + M] ||
//                 0 != E[48 + M] ||
//                 0 != E[56 + M]
//                   ? ((c = (o * E[0 + M] + 2048) >> 12),
//                     (d = (o * E[32 + M] + 2048) >> 12),
//                     (p = E[16 + M]),
//                     (m = E[48 + M]),
//                     (g = (l * (E[8 + M] - E[56 + M]) + 2048) >> 12),
//                     (y = (l * (E[8 + M] + E[56 + M]) + 2048) >> 12),
//                     (_ = E[24 + M]),
//                     (b = E[40 + M]),
//                     (v = (c - d + 1) >> 1),
//                     (c = (c + d + 1) >> 1),
//                     (d = v),
//                     (v = (p * s + m * a + 2048) >> 12),
//                     (p = (p * a - m * s + 2048) >> 12),
//                     (m = v),
//                     (v = (g - b + 1) >> 1),
//                     (g = (g + b + 1) >> 1),
//                     (b = v),
//                     (v = (y + _ + 1) >> 1),
//                     (_ = (y - _ + 1) >> 1),
//                     (y = v),
//                     (v = (c - m + 1) >> 1),
//                     (c = (c + m + 1) >> 1),
//                     (m = v),
//                     (v = (d - p + 1) >> 1),
//                     (d = (d + p + 1) >> 1),
//                     (p = v),
//                     (v = (g * n + y * r + 2048) >> 12),
//                     (g = (g * r - y * n + 2048) >> 12),
//                     (y = v),
//                     (v = (_ * i + b * e + 2048) >> 12),
//                     (_ = (_ * e - b * i + 2048) >> 12),
//                     (b = v),
//                     (E[0 + M] = c + y),
//                     (E[56 + M] = c - y),
//                     (E[8 + M] = d + b),
//                     (E[48 + M] = d - b),
//                     (E[16 + M] = p + _),
//                     (E[40 + M] = p - _),
//                     (E[24 + M] = m + g),
//                     (E[32 + M] = m - g))
//                   : ((v = (o * f[w + 0] + 8192) >> 14),
//                     (E[0 + M] = v),
//                     (E[8 + M] = v),
//                     (E[16 + M] = v),
//                     (E[24 + M] = v),
//                     (E[32 + M] = v),
//                     (E[40 + M] = v),
//                     (E[48 + M] = v),
//                     (E[56 + M] = v));
//               }
//               for (w = 0; w < 64; ++w) {
//                 var S = 128 + ((E[w] + 8) >> 4);
//                 u[w] = S < 0 ? 0 : S > 255 ? 255 : S;
//               }
//             }
//             g(m * p * 8);
//             for (var v = 0; v < p; v++) {
//               var w = v << 3;
//               for (u = 0; u < 8; u++) c.push(new Uint8Array(m));
//               for (var x = 0; x < d; x++) {
//                 y(h.blocks[v][x], b, _);
//                 var E = 0,
//                   k = x << 3;
//                 for (f = 0; f < 8; f++) {
//                   var M = c[w + f];
//                   for (u = 0; u < 8; u++) M[k + u] = b[E++];
//                 }
//               }
//             }
//             return c;
//           }
//           function d(t) {
//             return t < 0 ? 0 : t > 255 ? 255 : t;
//           }
//           h.prototype = {
//             load: function (t) {
//               var e = new XMLHttpRequest();
//               e.open("GET", t, !0),
//                 (e.responseType = "arraybuffer"),
//                 (e.onload = function () {
//                   var t = new Uint8Array(
//                     e.response || e.mozResponseArrayBuffer
//                   );
//                   this.parse(t), this.onload && this.onload();
//                 }.bind(this)),
//                 e.send(null);
//             },
//             parse: function (e) {
//               var i = 1e3 * this.opts.maxResolutionInMP * 1e3,
//                 r = 0;
//               function n() {
//                 var t = (e[r] << 8) | e[r + 1];
//                 return (r += 2), t;
//               }
//               function a(t) {
//                 var e,
//                   i,
//                   r = 1,
//                   n = 1;
//                 for (i in t.components)
//                   t.components.hasOwnProperty(i) &&
//                     (r < (e = t.components[i]).h && (r = e.h),
//                     n < e.v && (n = e.v));
//                 var a = Math.ceil(t.samplesPerLine / 8 / r),
//                   s = Math.ceil(t.scanLines / 8 / n);
//                 for (i in t.components)
//                   if (t.components.hasOwnProperty(i)) {
//                     e = t.components[i];
//                     var o = Math.ceil(
//                         (Math.ceil(t.samplesPerLine / 8) * e.h) / r
//                       ),
//                       l = Math.ceil((Math.ceil(t.scanLines / 8) * e.v) / n),
//                       h = a * e.h,
//                       u = s * e.v,
//                       f = [];
//                     g(u * h * 256);
//                     for (var c = 0; c < u; c++) {
//                       for (var d = [], p = 0; p < h; p++)
//                         d.push(new Int32Array(64));
//                       f.push(d);
//                     }
//                     (e.blocksPerLine = o),
//                       (e.blocksPerColumn = l),
//                       (e.blocks = f);
//                   }
//                 (t.maxH = r),
//                   (t.maxV = n),
//                   (t.mcusPerLine = a),
//                   (t.mcusPerColumn = s);
//               }
//               e.length;
//               var s,
//                 o,
//                 l,
//                 h,
//                 d = null,
//                 p = null,
//                 m = [],
//                 _ = [],
//                 b = [],
//                 y = [],
//                 v = n(),
//                 w = -1;
//               if (((this.comments = []), 65496 != v))
//                 throw Error("SOI not found");
//               for (v = n(); 65497 != v; ) {
//                 switch (v) {
//                   case 65280:
//                     break;
//                   case 65504:
//                   case 65505:
//                   case 65506:
//                   case 65507:
//                   case 65508:
//                   case 65509:
//                   case 65510:
//                   case 65511:
//                   case 65512:
//                   case 65513:
//                   case 65514:
//                   case 65515:
//                   case 65516:
//                   case 65517:
//                   case 65518:
//                   case 65519:
//                   case 65534:
//                     var x =
//                       ((l = void 0),
//                       (h = void 0),
//                       (l = n()),
//                       (h = e.subarray(r, r + l - 2)),
//                       (r += h.length),
//                       h);
//                     if (65534 === v) {
//                       var E = String.fromCharCode.apply(null, x);
//                       this.comments.push(E);
//                     }
//                     65504 === v &&
//                       74 === x[0] &&
//                       70 === x[1] &&
//                       73 === x[2] &&
//                       70 === x[3] &&
//                       0 === x[4] &&
//                       (d = {
//                         version: { major: x[5], minor: x[6] },
//                         densityUnits: x[7],
//                         xDensity: (x[8] << 8) | x[9],
//                         yDensity: (x[10] << 8) | x[11],
//                         thumbWidth: x[12],
//                         thumbHeight: x[13],
//                         thumbData: x.subarray(14, 14 + 3 * x[12] * x[13]),
//                       }),
//                       65505 === v &&
//                         69 === x[0] &&
//                         120 === x[1] &&
//                         105 === x[2] &&
//                         102 === x[3] &&
//                         0 === x[4] &&
//                         (this.exifBuffer = x.subarray(5, x.length)),
//                       65518 === v &&
//                         65 === x[0] &&
//                         100 === x[1] &&
//                         111 === x[2] &&
//                         98 === x[3] &&
//                         101 === x[4] &&
//                         0 === x[5] &&
//                         (p = {
//                           version: x[6],
//                           flags0: (x[7] << 8) | x[8],
//                           flags1: (x[9] << 8) | x[10],
//                           transformCode: x[11],
//                         });
//                     break;
//                   case 65499:
//                     for (var k = n() + r - 2; r < k; ) {
//                       var M = e[r++];
//                       g(256);
//                       var S = new Int32Array(64);
//                       if (M >> 4) {
//                         if (M >> 4 != 1) throw Error("DQT: invalid table spec");
//                         for (V = 0; V < 64; V++) S[t[V]] = n();
//                       } else for (V = 0; V < 64; V++) S[t[V]] = e[r++];
//                       m[15 & M] = S;
//                     }
//                     break;
//                   case 65472:
//                   case 65473:
//                   case 65474:
//                     n(),
//                       ((s = {}).extended = 65473 === v),
//                       (s.progressive = 65474 === v),
//                       (s.precision = e[r++]),
//                       (s.scanLines = n()),
//                       (s.samplesPerLine = n()),
//                       (s.components = {}),
//                       (s.componentsOrder = []);
//                     var A = s.scanLines * s.samplesPerLine;
//                     if (A > i) {
//                       var I = Math.ceil((A - i) / 1e6);
//                       throw Error(`maxResolutionInMP limit exceeded by ${I}MP`);
//                     }
//                     var T,
//                       B = e[r++];
//                     for (q = 0; q < B; q++) {
//                       T = e[r];
//                       var R = e[r + 1] >> 4,
//                         P = 15 & e[r + 1],
//                         O = e[r + 2];
//                       if (R <= 0 || P <= 0)
//                         throw Error(
//                           "Invalid sampling factor, expected values above 0"
//                         );
//                       s.componentsOrder.push(T),
//                         (s.components[T] = { h: R, v: P, quantizationIdx: O }),
//                         (r += 3);
//                     }
//                     a(s), _.push(s);
//                     break;
//                   case 65476:
//                     var C = n();
//                     for (q = 2; q < C; ) {
//                       var z = e[r++],
//                         L = new Uint8Array(16),
//                         U = 0;
//                       for (V = 0; V < 16; V++, r++) U += L[V] = e[r];
//                       g(16 + U);
//                       var D = new Uint8Array(U);
//                       for (V = 0; V < U; V++, r++) D[V] = e[r];
//                       (q += 17 + U), ((z >> 4 ? b : y)[15 & z] = u(L, D));
//                     }
//                     break;
//                   case 65501:
//                     n(), (o = n());
//                     break;
//                   case 65500:
//                     n(), n();
//                     break;
//                   case 65498:
//                     n();
//                     var N = e[r++],
//                       j = [];
//                     for (q = 0; q < N; q++) {
//                       $ = s.components[e[r++]];
//                       var F = e[r++];
//                       ($.huffmanTableDC = y[F >> 4]),
//                         ($.huffmanTableAC = b[15 & F]),
//                         j.push($);
//                     }
//                     var G = e[r++],
//                       Z = e[r++],
//                       H = e[r++],
//                       W = f(e, r, s, j, o, G, Z, H >> 4, 15 & H, this.opts);
//                     r += W;
//                     break;
//                   case 65535:
//                     255 !== e[r] && r--;
//                     break;
//                   default:
//                     if (255 == e[r - 3] && e[r - 2] >= 192 && e[r - 2] <= 254) {
//                       r -= 3;
//                       break;
//                     }
//                     if (224 === v || 225 == v) {
//                       if (-1 !== w)
//                         throw Error(
//                           `first unknown JPEG marker at offset ${w.toString(
//                             16
//                           )}, second unknown JPEG marker ${v.toString(
//                             16
//                           )} at offset ${(r - 1).toString(16)}`
//                         );
//                       w = r - 1;
//                       let t = n();
//                       if (255 === e[r + t - 2]) {
//                         r += t - 2;
//                         break;
//                       }
//                     }
//                     throw Error("unknown JPEG marker " + v.toString(16));
//                 }
//                 v = n();
//               }
//               if (1 != _.length)
//                 throw Error("only single frame JPEGs supported");
//               for (var q = 0; q < _.length; q++) {
//                 var Y = _[q].components;
//                 for (var V in Y)
//                   (Y[V].quantizationTable = m[Y[V].quantizationIdx]),
//                     delete Y[V].quantizationIdx;
//               }
//               for (
//                 this.width = s.samplesPerLine,
//                   this.height = s.scanLines,
//                   this.jfif = d,
//                   this.adobe = p,
//                   this.components = [],
//                   q = 0;
//                 q < s.componentsOrder.length;
//                 q++
//               ) {
//                 var $ = s.components[s.componentsOrder[q]];
//                 this.components.push({
//                   lines: c(0, $),
//                   scaleX: $.h / s.maxH,
//                   scaleY: $.v / s.maxV,
//                 });
//               }
//             },
//             getData: function (t, e) {
//               var i,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o,
//                 l,
//                 h,
//                 u,
//                 f,
//                 c,
//                 p,
//                 m,
//                 _,
//                 b,
//                 y,
//                 v,
//                 w,
//                 x,
//                 E,
//                 k,
//                 M = this.width / t,
//                 S = this.height / e,
//                 A = 0,
//                 I = t * e * this.components.length;
//               g(I);
//               var T = new Uint8Array(I);
//               switch (this.components.length) {
//                 case 1:
//                   for (i = this.components[0], f = 0; f < e; f++)
//                     for (s = i.lines[0 | (f * i.scaleY * S)], u = 0; u < t; u++)
//                       (c = s[0 | (u * i.scaleX * M)]), (T[A++] = c);
//                   break;
//                 case 2:
//                   for (
//                     i = this.components[0], r = this.components[1], f = 0;
//                     f < e;
//                     f++
//                   )
//                     for (
//                       s = i.lines[0 | (f * i.scaleY * S)],
//                         o = r.lines[0 | (f * r.scaleY * S)],
//                         u = 0;
//                       u < t;
//                       u++
//                     )
//                       (c = s[0 | (u * i.scaleX * M)]),
//                         (T[A++] = c),
//                         (c = o[0 | (u * r.scaleX * M)]),
//                         (T[A++] = c);
//                   break;
//                 case 3:
//                   for (
//                     k = !0,
//                       this.adobe && this.adobe.transformCode
//                         ? (k = !0)
//                         : void 0 !== this.opts.colorTransform &&
//                           (k = !!this.opts.colorTransform),
//                       i = this.components[0],
//                       r = this.components[1],
//                       n = this.components[2],
//                       f = 0;
//                     f < e;
//                     f++
//                   )
//                     for (
//                       s = i.lines[0 | (f * i.scaleY * S)],
//                         o = r.lines[0 | (f * r.scaleY * S)],
//                         l = n.lines[0 | (f * n.scaleY * S)],
//                         u = 0;
//                       u < t;
//                       u++
//                     )
//                       k
//                         ? ((c = s[0 | (u * i.scaleX * M)]),
//                           (p = o[0 | (u * r.scaleX * M)]),
//                           (w = d(
//                             c + 1.402 * ((m = l[0 | (u * n.scaleX * M)]) - 128)
//                           )),
//                           (x = d(
//                             c - 0.3441363 * (p - 128) - 0.71413636 * (m - 128)
//                           )),
//                           (E = d(c + 1.772 * (p - 128))))
//                         : ((w = s[0 | (u * i.scaleX * M)]),
//                           (x = o[0 | (u * r.scaleX * M)]),
//                           (E = l[0 | (u * n.scaleX * M)])),
//                         (T[A++] = w),
//                         (T[A++] = x),
//                         (T[A++] = E);
//                   break;
//                 case 4:
//                   if (!this.adobe)
//                     throw Error("Unsupported color mode (4 components)");
//                   for (
//                     k = !1,
//                       this.adobe && this.adobe.transformCode
//                         ? (k = !0)
//                         : void 0 !== this.opts.colorTransform &&
//                           (k = !!this.opts.colorTransform),
//                       i = this.components[0],
//                       r = this.components[1],
//                       n = this.components[2],
//                       a = this.components[3],
//                       f = 0;
//                     f < e;
//                     f++
//                   )
//                     for (
//                       s = i.lines[0 | (f * i.scaleY * S)],
//                         o = r.lines[0 | (f * r.scaleY * S)],
//                         l = n.lines[0 | (f * n.scaleY * S)],
//                         h = a.lines[0 | (f * a.scaleY * S)],
//                         u = 0;
//                       u < t;
//                       u++
//                     )
//                       k
//                         ? ((c = s[0 | (u * i.scaleX * M)]),
//                           (p = o[0 | (u * r.scaleX * M)]),
//                           (m = l[0 | (u * n.scaleX * M)]),
//                           (_ = h[0 | (u * a.scaleX * M)]),
//                           (b = 255 - d(c + 1.402 * (m - 128))),
//                           (y =
//                             255 -
//                             d(
//                               c - 0.3441363 * (p - 128) - 0.71413636 * (m - 128)
//                             )),
//                           (v = 255 - d(c + 1.772 * (p - 128))))
//                         : ((b = s[0 | (u * i.scaleX * M)]),
//                           (y = o[0 | (u * r.scaleX * M)]),
//                           (v = l[0 | (u * n.scaleX * M)]),
//                           (_ = h[0 | (u * a.scaleX * M)])),
//                         (T[A++] = 255 - b),
//                         (T[A++] = 255 - y),
//                         (T[A++] = 255 - v),
//                         (T[A++] = 255 - _);
//                   break;
//                 default:
//                   throw Error("Unsupported color mode");
//               }
//               return T;
//             },
//             copyToImageData: function (t, e) {
//               var i,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o,
//                 l,
//                 h,
//                 u,
//                 f = t.width,
//                 c = t.height,
//                 p = t.data,
//                 m = this.getData(f, c),
//                 g = 0,
//                 _ = 0;
//               switch (this.components.length) {
//                 case 1:
//                   for (r = 0; r < c; r++)
//                     for (i = 0; i < f; i++)
//                       (n = m[g++]),
//                         (p[_++] = n),
//                         (p[_++] = n),
//                         (p[_++] = n),
//                         e && (p[_++] = 255);
//                   break;
//                 case 3:
//                   for (r = 0; r < c; r++)
//                     for (i = 0; i < f; i++)
//                       (l = m[g++]),
//                         (h = m[g++]),
//                         (u = m[g++]),
//                         (p[_++] = l),
//                         (p[_++] = h),
//                         (p[_++] = u),
//                         e && (p[_++] = 255);
//                   break;
//                 case 4:
//                   for (r = 0; r < c; r++)
//                     for (i = 0; i < f; i++)
//                       (s = m[g++]),
//                         (o = m[g++]),
//                         (n = m[g++]),
//                         (l = 255 - d(s * (1 - (a = m[g++]) / 255) + a)),
//                         (h = 255 - d(o * (1 - a / 255) + a)),
//                         (u = 255 - d(n * (1 - a / 255) + a)),
//                         (p[_++] = l),
//                         (p[_++] = h),
//                         (p[_++] = u),
//                         e && (p[_++] = 255);
//                   break;
//                 default:
//                   throw Error("Unsupported color mode");
//               }
//             },
//           };
//           var p = 0,
//             m = 0;
//           function g(t = 0) {
//             var e = p + t;
//             if (e > m) {
//               var i = Math.ceil((e - m) / 1024 / 1024);
//               throw Error(
//                 `maxMemoryUsageInMB limit exceeded by at least ${i}MB`
//               );
//             }
//             p = e;
//           }
//           return (
//             (h.resetMaxMemoryUsage = function (t) {
//               (p = 0), (m = t);
//             }),
//             (h.getBytesAllocated = function () {
//               return p;
//             }),
//             (h.requestMemoryAllocation = g),
//             h
//           );
//         })()),
//         (module.exports = function (t, e = {}) {
//           var i = {
//               colorTransform: void 0,
//               useTArray: !1,
//               formatAsRGBA: !0,
//               tolerantDecoding: !0,
//               maxResolutionInMP: 100,
//               maxMemoryUsageInMB: 512,
//               ...e,
//             },
//             r = new Uint8Array(t),
//             n = new JpegImage();
//           (n.opts = i),
//             JpegImage.resetMaxMemoryUsage(1024 * i.maxMemoryUsageInMB * 1024),
//             n.parse(r);
//           var a = i.formatAsRGBA ? 4 : 3,
//             s = n.width * n.height * a;
//           try {
//             JpegImage.requestMemoryAllocation(s);
//             var o = {
//               width: n.width,
//               height: n.height,
//               exifBuffer: n.exifBuffer,
//               data: i.useTArray ? new Uint8Array(s) : Buffer.alloc(s),
//             };
//             n.comments.length > 0 && (o.comments = n.comments);
//           } catch (t) {
//             if (t instanceof RangeError)
//               throw Error(
//                 "Could not allocate enough memory for the image. Required: " + s
//               );
//             if (
//               t instanceof ReferenceError &&
//               "Buffer is not defined" === t.message
//             )
//               throw Error(
//                 "Buffer is not globally defined in this environment. Consider setting useTArray to true"
//               );
//             throw t;
//           }
//           return n.copyToImageData(o, i.formatAsRGBA), o;
//         });
//       var decoderExports = decoder.exports,
//         encode = encoderExports,
//         decode = decoderExports,
//         jpegJs = { encode: encode, decode: decode },
//         JPEG = getDefaultExportFromCjs(jpegJs);
//       function jpeg$2() {
//         return {
//           mime: "image/jpeg",
//           encode: (t, { quality: e = 100 } = {}) => JPEG.encode(t, e).data,
//           decode: (t, e) => JPEG.decode(t, e),
//         };
//       }
//       function commonjsRequire(t) {
//         throw Error(
//           'Could not dynamically require "' +
//             t +
//             '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.'
//         );
//       }
//       var browser$1 = { exports: {} };
//       browser$1.exports = (function () {
//         function t(e, i, r) {
//           function n(s, o) {
//             if (!i[s]) {
//               if (!e[s]) {
//                 var l = commonjsRequire;
//                 if (!o && l) return l(s, !0);
//                 if (a) return a(s, !0);
//                 var h = Error("Cannot find module '" + s + "'");
//                 throw ((h.code = "MODULE_NOT_FOUND"), h);
//               }
//               var u = (i[s] = { exports: {} });
//               e[s][0].call(
//                 u.exports,
//                 function (t) {
//                   return n(e[s][1][t] || t);
//                 },
//                 u,
//                 u.exports,
//                 t,
//                 e,
//                 i,
//                 r
//               );
//             }
//             return i[s].exports;
//           }
//           for (var a = commonjsRequire, s = 0; s < r.length; s++) n(r[s]);
//           return n;
//         }
//         return t;
//       })()(
//         {
//           1: [
//             function (t, e, i) {
//               (function (e) {
//                 (function () {
//                   let r = t("./interlace"),
//                     n = [
//                       function () {},
//                       function (t, e, i, r) {
//                         if (r === e.length) throw Error("Ran out of data");
//                         let n = e[r];
//                         (t[i] = n),
//                           (t[i + 1] = n),
//                           (t[i + 2] = n),
//                           (t[i + 3] = 255);
//                       },
//                       function (t, e, i, r) {
//                         if (r + 1 >= e.length) throw Error("Ran out of data");
//                         let n = e[r];
//                         (t[i] = n),
//                           (t[i + 1] = n),
//                           (t[i + 2] = n),
//                           (t[i + 3] = e[r + 1]);
//                       },
//                       function (t, e, i, r) {
//                         if (r + 2 >= e.length) throw Error("Ran out of data");
//                         (t[i] = e[r]),
//                           (t[i + 1] = e[r + 1]),
//                           (t[i + 2] = e[r + 2]),
//                           (t[i + 3] = 255);
//                       },
//                       function (t, e, i, r) {
//                         if (r + 3 >= e.length) throw Error("Ran out of data");
//                         (t[i] = e[r]),
//                           (t[i + 1] = e[r + 1]),
//                           (t[i + 2] = e[r + 2]),
//                           (t[i + 3] = e[r + 3]);
//                       },
//                     ],
//                     a = [
//                       function () {},
//                       function (t, e, i, r) {
//                         let n = e[0];
//                         (t[i] = n),
//                           (t[i + 1] = n),
//                           (t[i + 2] = n),
//                           (t[i + 3] = r);
//                       },
//                       function (t, e, i) {
//                         let r = e[0];
//                         (t[i] = r),
//                           (t[i + 1] = r),
//                           (t[i + 2] = r),
//                           (t[i + 3] = e[1]);
//                       },
//                       function (t, e, i, r) {
//                         (t[i] = e[0]),
//                           (t[i + 1] = e[1]),
//                           (t[i + 2] = e[2]),
//                           (t[i + 3] = r);
//                       },
//                       function (t, e, i) {
//                         (t[i] = e[0]),
//                           (t[i + 1] = e[1]),
//                           (t[i + 2] = e[2]),
//                           (t[i + 3] = e[3]);
//                       },
//                     ];
//                   function s(t, e) {
//                     let i = [],
//                       r = 0;
//                     function n() {
//                       if (r === t.length) throw Error("Ran out of data");
//                       let n,
//                         a,
//                         s,
//                         o,
//                         l,
//                         h,
//                         u,
//                         f,
//                         c = t[r];
//                       switch ((r++, e)) {
//                         default:
//                           throw Error("unrecognised depth");
//                         case 16:
//                           (u = t[r]), r++, i.push((c << 8) + u);
//                           break;
//                         case 4:
//                           (u = 15 & c), (f = c >> 4), i.push(f, u);
//                           break;
//                         case 2:
//                           (l = 3 & c),
//                             (h = (c >> 2) & 3),
//                             (u = (c >> 4) & 3),
//                             (f = (c >> 6) & 3),
//                             i.push(f, u, h, l);
//                           break;
//                         case 1:
//                           (n = 1 & c),
//                             (a = (c >> 1) & 1),
//                             (s = (c >> 2) & 1),
//                             (o = (c >> 3) & 1),
//                             (l = (c >> 4) & 1),
//                             (h = (c >> 5) & 1),
//                             (u = (c >> 6) & 1),
//                             (f = (c >> 7) & 1),
//                             i.push(f, u, h, l, o, s, a, n);
//                       }
//                     }
//                     return {
//                       get: function (t) {
//                         for (; i.length < t; ) n();
//                         let e = i.slice(0, t);
//                         return (i = i.slice(t)), e;
//                       },
//                       resetAfterLine: function () {
//                         i.length = 0;
//                       },
//                       end: function () {
//                         if (r !== t.length) throw Error("extra data found");
//                       },
//                     };
//                   }
//                   function o(t, e, i, r, a, s) {
//                     let o = t.width,
//                       l = t.height,
//                       h = t.index;
//                     for (let t = 0; t < l; t++)
//                       for (let l = 0; l < o; l++) {
//                         let o = i(l, t, h);
//                         n[r](e, a, o, s), (s += r);
//                       }
//                     return s;
//                   }
//                   function l(t, e, i, r, n, s) {
//                     let o = t.width,
//                       l = t.height,
//                       h = t.index;
//                     for (let t = 0; t < l; t++) {
//                       for (let l = 0; l < o; l++) {
//                         let o = n.get(r),
//                           u = i(l, t, h);
//                         a[r](e, o, u, s);
//                       }
//                       n.resetAfterLine();
//                     }
//                   }
//                   i.dataToBitMap = function (t, i) {
//                     let n,
//                       a,
//                       h = i.width,
//                       u = i.height,
//                       f = i.depth,
//                       c = i.bpp,
//                       d = i.interlace;
//                     8 !== f && (n = s(t, f)),
//                       (a =
//                         f <= 8
//                           ? e.alloc(h * u * 4)
//                           : new Uint16Array(h * u * 4));
//                     let p,
//                       m,
//                       g = Math.pow(2, f) - 1,
//                       _ = 0;
//                     if (d)
//                       (p = r.getImagePasses(h, u)),
//                         (m = r.getInterlaceIterator(h, u));
//                     else {
//                       let t = 0;
//                       (m = function () {
//                         let e = t;
//                         return (t += 4), e;
//                       }),
//                         (p = [{ width: h, height: u }]);
//                     }
//                     for (let e = 0; e < p.length; e++)
//                       8 === f
//                         ? (_ = o(p[e], a, m, c, t, _))
//                         : l(p[e], a, m, c, n, g);
//                     if (8 === f) {
//                       if (_ !== t.length) throw Error("extra data found");
//                     } else n.end();
//                     return a;
//                   };
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./interlace": 11, buffer: 32 },
//           ],
//           2: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = t("./constants");
//                   e.exports = function (t, e, n, a) {
//                     let s =
//                       -1 !==
//                       [r.COLORTYPE_COLOR_ALPHA, r.COLORTYPE_ALPHA].indexOf(
//                         a.colorType
//                       );
//                     if (a.colorType === a.inputColorType) {
//                       let e = (function () {
//                         let t = new ArrayBuffer(2);
//                         return (
//                           new DataView(t).setInt16(0, 256, !0),
//                           256 !== new Int16Array(t)[0]
//                         );
//                       })();
//                       if (8 === a.bitDepth || (16 === a.bitDepth && e))
//                         return t;
//                     }
//                     let o = 16 !== a.bitDepth ? t : new Uint16Array(t.buffer),
//                       l = 255,
//                       h = r.COLORTYPE_TO_BPP_MAP[a.inputColorType];
//                     4 !== h || a.inputHasAlpha || (h = 3);
//                     let u = r.COLORTYPE_TO_BPP_MAP[a.colorType];
//                     16 === a.bitDepth && ((l = 65535), (u *= 2));
//                     let f = i.alloc(e * n * u),
//                       c = 0,
//                       d = 0,
//                       p = a.bgColor || {};
//                     function m() {
//                       let t,
//                         e,
//                         i,
//                         n = l;
//                       switch (a.inputColorType) {
//                         case r.COLORTYPE_COLOR_ALPHA:
//                           (n = o[c + 3]),
//                             (t = o[c]),
//                             (e = o[c + 1]),
//                             (i = o[c + 2]);
//                           break;
//                         case r.COLORTYPE_COLOR:
//                           (t = o[c]), (e = o[c + 1]), (i = o[c + 2]);
//                           break;
//                         case r.COLORTYPE_ALPHA:
//                           (n = o[c + 1]), (e = t = o[c]), (i = t);
//                           break;
//                         case r.COLORTYPE_GRAYSCALE:
//                           (e = t = o[c]), (i = t);
//                           break;
//                         default:
//                           throw Error(
//                             "input color type:" +
//                               a.inputColorType +
//                               " is not supported at present"
//                           );
//                       }
//                       return (
//                         a.inputHasAlpha &&
//                           (s ||
//                             ((n /= l),
//                             (t = Math.min(
//                               Math.max(Math.round((1 - n) * p.red + n * t), 0),
//                               l
//                             )),
//                             (e = Math.min(
//                               Math.max(
//                                 Math.round((1 - n) * p.green + n * e),
//                                 0
//                               ),
//                               l
//                             )),
//                             (i = Math.min(
//                               Math.max(Math.round((1 - n) * p.blue + n * i), 0),
//                               l
//                             )))),
//                         { red: t, green: e, blue: i, alpha: n }
//                       );
//                     }
//                     void 0 === p.red && (p.red = l),
//                       void 0 === p.green && (p.green = l),
//                       void 0 === p.blue && (p.blue = l);
//                     for (let t = 0; t < n; t++)
//                       for (let t = 0; t < e; t++) {
//                         let t = m();
//                         switch (a.colorType) {
//                           case r.COLORTYPE_COLOR_ALPHA:
//                           case r.COLORTYPE_COLOR:
//                             8 === a.bitDepth
//                               ? ((f[d] = t.red),
//                                 (f[d + 1] = t.green),
//                                 (f[d + 2] = t.blue),
//                                 s && (f[d + 3] = t.alpha))
//                               : (f.writeUInt16BE(t.red, d),
//                                 f.writeUInt16BE(t.green, d + 2),
//                                 f.writeUInt16BE(t.blue, d + 4),
//                                 s && f.writeUInt16BE(t.alpha, d + 6));
//                             break;
//                           case r.COLORTYPE_ALPHA:
//                           case r.COLORTYPE_GRAYSCALE: {
//                             let e = (t.red + t.green + t.blue) / 3;
//                             8 === a.bitDepth
//                               ? ((f[d] = e), s && (f[d + 1] = t.alpha))
//                               : (f.writeUInt16BE(e, d),
//                                 s && f.writeUInt16BE(t.alpha, d + 2));
//                             break;
//                           }
//                           default:
//                             throw Error(
//                               "unrecognised color Type " + a.colorType
//                             );
//                         }
//                         (c += h), (d += u);
//                       }
//                     return f;
//                   };
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./constants": 4, buffer: 32 },
//           ],
//           3: [
//             function (t, e, i) {
//               (function (i, r) {
//                 (function () {
//                   let n = t("util"),
//                     a = t("stream"),
//                     s = (e.exports = function () {
//                       a.call(this),
//                         (this._buffers = []),
//                         (this._buffered = 0),
//                         (this._reads = []),
//                         (this._paused = !1),
//                         (this._encoding = "utf8"),
//                         (this.writable = !0);
//                     });
//                   n.inherits(s, a),
//                     (s.prototype.read = function (t, e) {
//                       this._reads.push({
//                         length: Math.abs(t),
//                         allowLess: t < 0,
//                         func: e,
//                       }),
//                         i.nextTick(
//                           function () {
//                             this._process(),
//                               this._paused &&
//                                 this._reads &&
//                                 this._reads.length > 0 &&
//                                 ((this._paused = !1), this.emit("drain"));
//                           }.bind(this)
//                         );
//                     }),
//                     (s.prototype.write = function (t, e) {
//                       let i;
//                       return this.writable
//                         ? ((i = r.isBuffer(t)
//                             ? t
//                             : r.from(t, e || this._encoding)),
//                           this._buffers.push(i),
//                           (this._buffered += i.length),
//                           this._process(),
//                           this._reads &&
//                             0 === this._reads.length &&
//                             (this._paused = !0),
//                           this.writable && !this._paused)
//                         : (this.emit("error", Error("Stream not writable")),
//                           !1);
//                     }),
//                     (s.prototype.end = function (t, e) {
//                       t && this.write(t, e),
//                         (this.writable = !1),
//                         this._buffers &&
//                           (0 === this._buffers.length
//                             ? this._end()
//                             : (this._buffers.push(null), this._process()));
//                     }),
//                     (s.prototype.destroySoon = s.prototype.end),
//                     (s.prototype._end = function () {
//                       this._reads.length > 0 &&
//                         this.emit("error", Error("Unexpected end of input")),
//                         this.destroy();
//                     }),
//                     (s.prototype.destroy = function () {
//                       this._buffers &&
//                         ((this.writable = !1),
//                         (this._reads = null),
//                         (this._buffers = null),
//                         this.emit("close"));
//                     }),
//                     (s.prototype._processReadAllowingLess = function (t) {
//                       this._reads.shift();
//                       let e = this._buffers[0];
//                       e.length > t.length
//                         ? ((this._buffered -= t.length),
//                           (this._buffers[0] = e.slice(t.length)),
//                           t.func.call(this, e.slice(0, t.length)))
//                         : ((this._buffered -= e.length),
//                           this._buffers.shift(),
//                           t.func.call(this, e));
//                     }),
//                     (s.prototype._processRead = function (t) {
//                       this._reads.shift();
//                       let e = 0,
//                         i = 0,
//                         n = r.alloc(t.length);
//                       for (; e < t.length; ) {
//                         let r = this._buffers[i++],
//                           a = Math.min(r.length, t.length - e);
//                         r.copy(n, e, 0, a),
//                           (e += a),
//                           a !== r.length && (this._buffers[--i] = r.slice(a));
//                       }
//                       i > 0 && this._buffers.splice(0, i),
//                         (this._buffered -= t.length),
//                         t.func.call(this, n);
//                     }),
//                     (s.prototype._process = function () {
//                       try {
//                         for (
//                           ;
//                           this._buffered > 0 &&
//                           this._reads &&
//                           this._reads.length > 0;

//                         ) {
//                           let t = this._reads[0];
//                           if (t.allowLess) this._processReadAllowingLess(t);
//                           else {
//                             if (!(this._buffered >= t.length)) break;
//                             this._processRead(t);
//                           }
//                         }
//                         this._buffers && !this.writable && this._end();
//                       } catch (t) {
//                         this.emit("error", t);
//                       }
//                     });
//                 }).call(this);
//               }).call(this, t("_process"), t("buffer").Buffer);
//             },
//             { _process: 63, buffer: 32, stream: 65, util: 84 },
//           ],
//           4: [
//             function (t, e, i) {
//               e.exports = {
//                 PNG_SIGNATURE: [137, 80, 78, 71, 13, 10, 26, 10],
//                 TYPE_IHDR: 1229472850,
//                 TYPE_IEND: 1229278788,
//                 TYPE_IDAT: 1229209940,
//                 TYPE_PLTE: 1347179589,
//                 TYPE_tRNS: 1951551059,
//                 TYPE_gAMA: 1732332865,
//                 COLORTYPE_GRAYSCALE: 0,
//                 COLORTYPE_PALETTE: 1,
//                 COLORTYPE_COLOR: 2,
//                 COLORTYPE_ALPHA: 4,
//                 COLORTYPE_PALETTE_COLOR: 3,
//                 COLORTYPE_COLOR_ALPHA: 6,
//                 COLORTYPE_TO_BPP_MAP: { 0: 1, 2: 3, 3: 1, 4: 2, 6: 4 },
//                 GAMMA_DIVISION: 1e5,
//               };
//             },
//             {},
//           ],
//           5: [
//             function (t, e, i) {
//               let r = [];
//               !(function () {
//                 for (let t = 0; t < 256; t++) {
//                   let e = t;
//                   for (let t = 0; t < 8; t++)
//                     1 & e ? (e = 3988292384 ^ (e >>> 1)) : (e >>>= 1);
//                   r[t] = e;
//                 }
//               })();
//               let n = (e.exports = function () {
//                 this._crc = -1;
//               });
//               (n.prototype.write = function (t) {
//                 for (let e = 0; e < t.length; e++)
//                   this._crc = r[255 & (this._crc ^ t[e])] ^ (this._crc >>> 8);
//                 return !0;
//               }),
//                 (n.prototype.crc32 = function () {
//                   return ~this._crc;
//                 }),
//                 (n.crc32 = function (t) {
//                   let e = -1;
//                   for (let i = 0; i < t.length; i++)
//                     e = r[255 & (e ^ t[i])] ^ (e >>> 8);
//                   return ~e;
//                 });
//             },
//             {},
//           ],
//           6: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = t("./paeth-predictor"),
//                     n = {
//                       0: function (t, e, i, r, n) {
//                         for (let a = 0; a < i; a++) r[n + a] = t[e + a];
//                       },
//                       1: function (t, e, i, r, n, a) {
//                         for (let s = 0; s < i; s++) {
//                           let i = s >= a ? t[e + s - a] : 0,
//                             o = t[e + s] - i;
//                           r[n + s] = o;
//                         }
//                       },
//                       2: function (t, e, i, r, n) {
//                         for (let a = 0; a < i; a++) {
//                           let s = e > 0 ? t[e + a - i] : 0,
//                             o = t[e + a] - s;
//                           r[n + a] = o;
//                         }
//                       },
//                       3: function (t, e, i, r, n, a) {
//                         for (let s = 0; s < i; s++) {
//                           let o = s >= a ? t[e + s - a] : 0,
//                             l = e > 0 ? t[e + s - i] : 0,
//                             h = t[e + s] - ((o + l) >> 1);
//                           r[n + s] = h;
//                         }
//                       },
//                       4: function (t, e, i, n, a, s) {
//                         for (let o = 0; o < i; o++) {
//                           let l = o >= s ? t[e + o - s] : 0,
//                             h = e > 0 ? t[e + o - i] : 0,
//                             u = e > 0 && o >= s ? t[e + o - (i + s)] : 0,
//                             f = t[e + o] - r(l, h, u);
//                           n[a + o] = f;
//                         }
//                       },
//                     },
//                     a = {
//                       0: function (t, e, i) {
//                         let r = 0,
//                           n = e + i;
//                         for (let i = e; i < n; i++) r += Math.abs(t[i]);
//                         return r;
//                       },
//                       1: function (t, e, i, r) {
//                         let n = 0;
//                         for (let a = 0; a < i; a++) {
//                           let i = a >= r ? t[e + a - r] : 0;
//                           n += Math.abs(t[e + a] - i);
//                         }
//                         return n;
//                       },
//                       2: function (t, e, i) {
//                         let r = 0,
//                           n = e + i;
//                         for (let a = e; a < n; a++) {
//                           let n = e > 0 ? t[a - i] : 0;
//                           r += Math.abs(t[a] - n);
//                         }
//                         return r;
//                       },
//                       3: function (t, e, i, r) {
//                         let n = 0;
//                         for (let a = 0; a < i; a++) {
//                           let s = a >= r ? t[e + a - r] : 0,
//                             o = e > 0 ? t[e + a - i] : 0;
//                           n += Math.abs(t[e + a] - ((s + o) >> 1));
//                         }
//                         return n;
//                       },
//                       4: function (t, e, i, n) {
//                         let a = 0;
//                         for (let s = 0; s < i; s++) {
//                           let o = s >= n ? t[e + s - n] : 0,
//                             l = e > 0 ? t[e + s - i] : 0,
//                             h = e > 0 && s >= n ? t[e + s - (i + n)] : 0;
//                           a += Math.abs(t[e + s] - r(o, l, h));
//                         }
//                         return a;
//                       },
//                     };
//                   e.exports = function (t, e, r, s, o) {
//                     let l;
//                     if ("filterType" in s && -1 !== s.filterType) {
//                       if ("number" != typeof s.filterType)
//                         throw Error("unrecognised filter types");
//                       l = [s.filterType];
//                     } else l = [0, 1, 2, 3, 4];
//                     16 === s.bitDepth && (o *= 2);
//                     let h = e * o,
//                       u = 0,
//                       f = 0,
//                       c = i.alloc((h + 1) * r),
//                       d = l[0];
//                     for (let e = 0; e < r; e++) {
//                       if (l.length > 1) {
//                         let e = 1 / 0;
//                         for (let i = 0; i < l.length; i++) {
//                           let r = a[l[i]](t, f, h, o);
//                           r < e && ((d = l[i]), (e = r));
//                         }
//                       }
//                       (c[u] = d),
//                         u++,
//                         n[d](t, f, h, c, u, o),
//                         (u += h),
//                         (f += h);
//                     }
//                     return c;
//                   };
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./paeth-predictor": 15, buffer: 32 },
//           ],
//           7: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = t("util"),
//                     n = t("./chunkstream"),
//                     a = t("./filter-parse"),
//                     s = (e.exports = function (t) {
//                       n.call(this);
//                       let e = [],
//                         r = this;
//                       (this._filter = new a(t, {
//                         read: this.read.bind(this),
//                         write: function (t) {
//                           e.push(t);
//                         },
//                         complete: function () {
//                           r.emit("complete", i.concat(e));
//                         },
//                       })),
//                         this._filter.start();
//                     });
//                   r.inherits(s, n);
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./chunkstream": 3, "./filter-parse": 9, buffer: 32, util: 84 },
//           ],
//           8: [
//             function (t, e, i) {
//               (function (e) {
//                 (function () {
//                   let r = t("./sync-reader"),
//                     n = t("./filter-parse");
//                   i.process = function (t, i) {
//                     let a = [],
//                       s = new r(t);
//                     return (
//                       new n(i, {
//                         read: s.read.bind(s),
//                         write: function (t) {
//                           a.push(t);
//                         },
//                         complete: function () {},
//                       }).start(),
//                       s.process(),
//                       e.concat(a)
//                     );
//                   };
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./filter-parse": 9, "./sync-reader": 22, buffer: 32 },
//           ],
//           9: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = t("./interlace"),
//                     n = t("./paeth-predictor");
//                   function a(t, e, i) {
//                     let r = t * e;
//                     return 8 !== i && (r = Math.ceil(r / (8 / i))), r;
//                   }
//                   let s = (e.exports = function (t, e) {
//                     let i = t.width,
//                       n = t.height,
//                       s = t.interlace,
//                       o = t.bpp,
//                       l = t.depth;
//                     if (
//                       ((this.read = e.read),
//                       (this.write = e.write),
//                       (this.complete = e.complete),
//                       (this._imageIndex = 0),
//                       (this._images = []),
//                       s)
//                     ) {
//                       let t = r.getImagePasses(i, n);
//                       for (let e = 0; e < t.length; e++)
//                         this._images.push({
//                           byteWidth: a(t[e].width, o, l),
//                           height: t[e].height,
//                           lineIndex: 0,
//                         });
//                     } else
//                       this._images.push({
//                         byteWidth: a(i, o, l),
//                         height: n,
//                         lineIndex: 0,
//                       });
//                     this._xComparison = 8 === l ? o : 16 === l ? 2 * o : 1;
//                   });
//                   (s.prototype.start = function () {
//                     this.read(
//                       this._images[this._imageIndex].byteWidth + 1,
//                       this._reverseFilterLine.bind(this)
//                     );
//                   }),
//                     (s.prototype._unFilterType1 = function (t, e, i) {
//                       let r = this._xComparison,
//                         n = r - 1;
//                       for (let a = 0; a < i; a++) {
//                         let i = t[1 + a],
//                           s = a > n ? e[a - r] : 0;
//                         e[a] = i + s;
//                       }
//                     }),
//                     (s.prototype._unFilterType2 = function (t, e, i) {
//                       let r = this._lastLine;
//                       for (let n = 0; n < i; n++) {
//                         let i = t[1 + n],
//                           a = r ? r[n] : 0;
//                         e[n] = i + a;
//                       }
//                     }),
//                     (s.prototype._unFilterType3 = function (t, e, i) {
//                       let r = this._xComparison,
//                         n = r - 1,
//                         a = this._lastLine;
//                       for (let s = 0; s < i; s++) {
//                         let i = t[1 + s],
//                           o = a ? a[s] : 0,
//                           l = Math.floor(((s > n ? e[s - r] : 0) + o) / 2);
//                         e[s] = i + l;
//                       }
//                     }),
//                     (s.prototype._unFilterType4 = function (t, e, i) {
//                       let r = this._xComparison,
//                         a = r - 1,
//                         s = this._lastLine;
//                       for (let o = 0; o < i; o++) {
//                         let i = t[1 + o],
//                           l = s ? s[o] : 0,
//                           h = n(
//                             o > a ? e[o - r] : 0,
//                             l,
//                             o > a && s ? s[o - r] : 0
//                           );
//                         e[o] = i + h;
//                       }
//                     }),
//                     (s.prototype._reverseFilterLine = function (t) {
//                       let e,
//                         r = t[0],
//                         n = this._images[this._imageIndex],
//                         a = n.byteWidth;
//                       if (0 === r) e = t.slice(1, a + 1);
//                       else
//                         switch (((e = i.alloc(a)), r)) {
//                           case 1:
//                             this._unFilterType1(t, e, a);
//                             break;
//                           case 2:
//                             this._unFilterType2(t, e, a);
//                             break;
//                           case 3:
//                             this._unFilterType3(t, e, a);
//                             break;
//                           case 4:
//                             this._unFilterType4(t, e, a);
//                             break;
//                           default:
//                             throw Error("Unrecognised filter type - " + r);
//                         }
//                       this.write(e),
//                         n.lineIndex++,
//                         n.lineIndex >= n.height
//                           ? ((this._lastLine = null),
//                             this._imageIndex++,
//                             (n = this._images[this._imageIndex]))
//                           : (this._lastLine = e),
//                         n
//                           ? this.read(
//                               n.byteWidth + 1,
//                               this._reverseFilterLine.bind(this)
//                             )
//                           : ((this._lastLine = null), this.complete());
//                     });
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./interlace": 11, "./paeth-predictor": 15, buffer: 32 },
//           ],
//           10: [
//             function (t, e, i) {
//               (function (t) {
//                 (function () {
//                   function i(t, e, i, r, n) {
//                     let a = 0;
//                     for (let s = 0; s < r; s++)
//                       for (let r = 0; r < i; r++) {
//                         let i = n[t[a]];
//                         if (!i)
//                           throw Error("index " + t[a] + " not in palette");
//                         for (let t = 0; t < 4; t++) e[a + t] = i[t];
//                         a += 4;
//                       }
//                   }
//                   function r(t, e, i, r, n) {
//                     let a = 0;
//                     for (let s = 0; s < r; s++)
//                       for (let r = 0; r < i; r++) {
//                         let i = !1;
//                         if (
//                           (1 === n.length
//                             ? n[0] === t[a] && (i = !0)
//                             : n[0] === t[a] &&
//                               n[1] === t[a + 1] &&
//                               n[2] === t[a + 2] &&
//                               (i = !0),
//                           i)
//                         )
//                           for (let t = 0; t < 4; t++) e[a + t] = 0;
//                         a += 4;
//                       }
//                   }
//                   function n(t, e, i, r, n) {
//                     let a = 255,
//                       s = Math.pow(2, n) - 1,
//                       o = 0;
//                     for (let n = 0; n < r; n++)
//                       for (let r = 0; r < i; r++) {
//                         for (let i = 0; i < 4; i++)
//                           e[o + i] = Math.floor((t[o + i] * a) / s + 0.5);
//                         o += 4;
//                       }
//                   }
//                   e.exports = function (e, a, s = !1) {
//                     let o = a.depth,
//                       l = a.width,
//                       h = a.height,
//                       u = a.colorType,
//                       f = a.transColor,
//                       c = a.palette,
//                       d = e;
//                     return (
//                       3 === u
//                         ? i(e, d, l, h, c)
//                         : (f && r(e, d, l, h, f),
//                           8 === o ||
//                             s ||
//                             (16 === o && (d = t.alloc(l * h * 4)),
//                             n(e, d, l, h, o))),
//                       d
//                     );
//                   };
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { buffer: 32 },
//           ],
//           11: [
//             function (t, e, i) {
//               let r = [
//                 { x: [0], y: [0] },
//                 { x: [4], y: [0] },
//                 { x: [0, 4], y: [4] },
//                 { x: [2, 6], y: [0, 4] },
//                 { x: [0, 2, 4, 6], y: [2, 6] },
//                 { x: [1, 3, 5, 7], y: [0, 2, 4, 6] },
//                 { x: [0, 1, 2, 3, 4, 5, 6, 7], y: [1, 3, 5, 7] },
//               ];
//               (i.getImagePasses = function (t, e) {
//                 let i = [],
//                   n = t % 8,
//                   a = e % 8,
//                   s = (t - n) / 8,
//                   o = (e - a) / 8;
//                 for (let t = 0; t < r.length; t++) {
//                   let e = r[t],
//                     l = s * e.x.length,
//                     h = o * e.y.length;
//                   for (let t = 0; t < e.x.length && e.x[t] < n; t++) l++;
//                   for (let t = 0; t < e.y.length && e.y[t] < a; t++) h++;
//                   l > 0 && h > 0 && i.push({ width: l, height: h, index: t });
//                 }
//                 return i;
//               }),
//                 (i.getInterlaceIterator = function (t) {
//                   return function (e, i, n) {
//                     let a = e % r[n].x.length,
//                       s = ((e - a) / r[n].x.length) * 8 + r[n].x[a],
//                       o = i % r[n].y.length;
//                     return (
//                       4 * s +
//                       (((i - o) / r[n].y.length) * 8 + r[n].y[o]) * t * 4
//                     );
//                   };
//                 });
//             },
//             {},
//           ],
//           12: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = t("util"),
//                     n = t("stream"),
//                     a = t("./constants"),
//                     s = t("./packer"),
//                     o = (e.exports = function (t) {
//                       n.call(this);
//                       let e = t || {};
//                       (this._packer = new s(e)),
//                         (this._deflate = this._packer.createDeflate()),
//                         (this.readable = !0);
//                     });
//                   r.inherits(o, n),
//                     (o.prototype.pack = function (t, e, r, n) {
//                       this.emit("data", i.from(a.PNG_SIGNATURE)),
//                         this.emit("data", this._packer.packIHDR(e, r)),
//                         n && this.emit("data", this._packer.packGAMA(n));
//                       let s = this._packer.filterData(t, e, r);
//                       this._deflate.on("error", this.emit.bind(this, "error")),
//                         this._deflate.on(
//                           "data",
//                           function (t) {
//                             this.emit("data", this._packer.packIDAT(t));
//                           }.bind(this)
//                         ),
//                         this._deflate.on(
//                           "end",
//                           function () {
//                             this.emit("data", this._packer.packIEND()),
//                               this.emit("end");
//                           }.bind(this)
//                         ),
//                         this._deflate.end(s);
//                     });
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             {
//               "./constants": 4,
//               "./packer": 14,
//               buffer: 32,
//               stream: 65,
//               util: 84,
//             },
//           ],
//           13: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = !0,
//                     n = t("zlib");
//                   n.deflateSync || (r = !1);
//                   let a = t("./constants"),
//                     s = t("./packer");
//                   e.exports = function (t, e) {
//                     if (!r)
//                       throw Error(
//                         "To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0"
//                       );
//                     let o = new s(e || {}),
//                       l = [];
//                     l.push(i.from(a.PNG_SIGNATURE)),
//                       l.push(o.packIHDR(t.width, t.height)),
//                       t.gamma && l.push(o.packGAMA(t.gamma));
//                     let h = o.filterData(t.data, t.width, t.height),
//                       u = n.deflateSync(h, o.getDeflateOptions());
//                     if (((h = null), !u || !u.length))
//                       throw Error("bad png - invalid compressed data response");
//                     return (
//                       l.push(o.packIDAT(u)), l.push(o.packIEND()), i.concat(l)
//                     );
//                   };
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./constants": 4, "./packer": 14, buffer: 32, zlib: 31 },
//           ],
//           14: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = t("./constants"),
//                     n = t("./crc"),
//                     a = t("./bitpacker"),
//                     s = t("./filter-pack"),
//                     o = t("zlib"),
//                     l = (e.exports = function (t) {
//                       if (
//                         ((this._options = t),
//                         (t.deflateChunkSize = t.deflateChunkSize || 32768),
//                         (t.deflateLevel =
//                           null != t.deflateLevel ? t.deflateLevel : 9),
//                         (t.deflateStrategy =
//                           null != t.deflateStrategy ? t.deflateStrategy : 3),
//                         (t.inputHasAlpha =
//                           null == t.inputHasAlpha || t.inputHasAlpha),
//                         (t.deflateFactory =
//                           t.deflateFactory || o.createDeflate),
//                         (t.bitDepth = t.bitDepth || 8),
//                         (t.colorType =
//                           "number" == typeof t.colorType
//                             ? t.colorType
//                             : r.COLORTYPE_COLOR_ALPHA),
//                         (t.inputColorType =
//                           "number" == typeof t.inputColorType
//                             ? t.inputColorType
//                             : r.COLORTYPE_COLOR_ALPHA),
//                         -1 ===
//                           [
//                             r.COLORTYPE_GRAYSCALE,
//                             r.COLORTYPE_COLOR,
//                             r.COLORTYPE_COLOR_ALPHA,
//                             r.COLORTYPE_ALPHA,
//                           ].indexOf(t.colorType))
//                       )
//                         throw Error(
//                           "option color type:" +
//                             t.colorType +
//                             " is not supported at present"
//                         );
//                       if (
//                         -1 ===
//                         [
//                           r.COLORTYPE_GRAYSCALE,
//                           r.COLORTYPE_COLOR,
//                           r.COLORTYPE_COLOR_ALPHA,
//                           r.COLORTYPE_ALPHA,
//                         ].indexOf(t.inputColorType)
//                       )
//                         throw Error(
//                           "option input color type:" +
//                             t.inputColorType +
//                             " is not supported at present"
//                         );
//                       if (8 !== t.bitDepth && 16 !== t.bitDepth)
//                         throw Error(
//                           "option bit depth:" +
//                             t.bitDepth +
//                             " is not supported at present"
//                         );
//                     });
//                   (l.prototype.getDeflateOptions = function () {
//                     return {
//                       chunkSize: this._options.deflateChunkSize,
//                       level: this._options.deflateLevel,
//                       strategy: this._options.deflateStrategy,
//                     };
//                   }),
//                     (l.prototype.createDeflate = function () {
//                       return this._options.deflateFactory(
//                         this.getDeflateOptions()
//                       );
//                     }),
//                     (l.prototype.filterData = function (t, e, i) {
//                       let n = a(t, e, i, this._options),
//                         o = r.COLORTYPE_TO_BPP_MAP[this._options.colorType];
//                       return s(n, e, i, this._options, o);
//                     }),
//                     (l.prototype._packChunk = function (t, e) {
//                       let r = e ? e.length : 0,
//                         a = i.alloc(r + 12);
//                       return (
//                         a.writeUInt32BE(r, 0),
//                         a.writeUInt32BE(t, 4),
//                         e && e.copy(a, 8),
//                         a.writeInt32BE(
//                           n.crc32(a.slice(4, a.length - 4)),
//                           a.length - 4
//                         ),
//                         a
//                       );
//                     }),
//                     (l.prototype.packGAMA = function (t) {
//                       let e = i.alloc(4);
//                       return (
//                         e.writeUInt32BE(Math.floor(t * r.GAMMA_DIVISION), 0),
//                         this._packChunk(r.TYPE_gAMA, e)
//                       );
//                     }),
//                     (l.prototype.packIHDR = function (t, e) {
//                       let n = i.alloc(13);
//                       return (
//                         n.writeUInt32BE(t, 0),
//                         n.writeUInt32BE(e, 4),
//                         (n[8] = this._options.bitDepth),
//                         (n[9] = this._options.colorType),
//                         (n[10] = 0),
//                         (n[11] = 0),
//                         (n[12] = 0),
//                         this._packChunk(r.TYPE_IHDR, n)
//                       );
//                     }),
//                     (l.prototype.packIDAT = function (t) {
//                       return this._packChunk(r.TYPE_IDAT, t);
//                     }),
//                     (l.prototype.packIEND = function () {
//                       return this._packChunk(r.TYPE_IEND, null);
//                     });
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             {
//               "./bitpacker": 2,
//               "./constants": 4,
//               "./crc": 5,
//               "./filter-pack": 6,
//               buffer: 32,
//               zlib: 31,
//             },
//           ],
//           15: [
//             function (t, e, i) {
//               e.exports = function (t, e, i) {
//                 let r = t + e - i,
//                   n = Math.abs(r - t),
//                   a = Math.abs(r - e),
//                   s = Math.abs(r - i);
//                 return n <= a && n <= s ? t : a <= s ? e : i;
//               };
//             },
//             {},
//           ],
//           16: [
//             function (t, e, i) {
//               let r = t("util"),
//                 n = t("zlib"),
//                 a = t("./chunkstream"),
//                 s = t("./filter-parse-async"),
//                 o = t("./parser"),
//                 l = t("./bitmapper"),
//                 h = t("./format-normaliser"),
//                 u = (e.exports = function (t) {
//                   a.call(this),
//                     (this._parser = new o(t, {
//                       read: this.read.bind(this),
//                       error: this._handleError.bind(this),
//                       metadata: this._handleMetaData.bind(this),
//                       gamma: this.emit.bind(this, "gamma"),
//                       palette: this._handlePalette.bind(this),
//                       transColor: this._handleTransColor.bind(this),
//                       finished: this._finished.bind(this),
//                       inflateData: this._inflateData.bind(this),
//                       simpleTransparency: this._simpleTransparency.bind(this),
//                       headersFinished: this._headersFinished.bind(this),
//                     })),
//                     (this._options = t),
//                     (this.writable = !0),
//                     this._parser.start();
//                 });
//               r.inherits(u, a),
//                 (u.prototype._handleError = function (t) {
//                   this.emit("error", t),
//                     (this.writable = !1),
//                     this.destroy(),
//                     this._inflate &&
//                       this._inflate.destroy &&
//                       this._inflate.destroy(),
//                     this._filter &&
//                       (this._filter.destroy(),
//                       this._filter.on("error", function () {})),
//                     (this.errord = !0);
//                 }),
//                 (u.prototype._inflateData = function (t) {
//                   if (!this._inflate) {
//                     if (this._bitmapInfo.interlace)
//                       (this._inflate = n.createInflate()),
//                         this._inflate.on(
//                           "error",
//                           this.emit.bind(this, "error")
//                         ),
//                         this._filter.on("complete", this._complete.bind(this)),
//                         this._inflate.pipe(this._filter);
//                     else {
//                       let t =
//                           (1 +
//                             ((this._bitmapInfo.width *
//                               this._bitmapInfo.bpp *
//                               this._bitmapInfo.depth +
//                               7) >>
//                               3)) *
//                           this._bitmapInfo.height,
//                         e = Math.max(t, n.Z_MIN_CHUNK);
//                       this._inflate = n.createInflate({ chunkSize: e });
//                       let i = t,
//                         r = this.emit.bind(this, "error");
//                       this._inflate.on("error", function (t) {
//                         i && r(t);
//                       }),
//                         this._filter.on("complete", this._complete.bind(this));
//                       let a = this._filter.write.bind(this._filter);
//                       this._inflate.on("data", function (t) {
//                         i &&
//                           (t.length > i && (t = t.slice(0, i)),
//                           (i -= t.length),
//                           a(t));
//                       }),
//                         this._inflate.on(
//                           "end",
//                           this._filter.end.bind(this._filter)
//                         );
//                     }
//                   }
//                   this._inflate.write(t);
//                 }),
//                 (u.prototype._handleMetaData = function (t) {
//                   (this._metaData = t),
//                     (this._bitmapInfo = Object.create(t)),
//                     (this._filter = new s(this._bitmapInfo));
//                 }),
//                 (u.prototype._handleTransColor = function (t) {
//                   this._bitmapInfo.transColor = t;
//                 }),
//                 (u.prototype._handlePalette = function (t) {
//                   this._bitmapInfo.palette = t;
//                 }),
//                 (u.prototype._simpleTransparency = function () {
//                   this._metaData.alpha = !0;
//                 }),
//                 (u.prototype._headersFinished = function () {
//                   this.emit("metadata", this._metaData);
//                 }),
//                 (u.prototype._finished = function () {
//                   this.errord ||
//                     (this._inflate
//                       ? this._inflate.end()
//                       : this.emit("error", "No Inflate block"));
//                 }),
//                 (u.prototype._complete = function (t) {
//                   let e;
//                   if (!this.errord) {
//                     try {
//                       let i = l.dataToBitMap(t, this._bitmapInfo);
//                       (e = h(i, this._bitmapInfo, this._options.skipRescale)),
//                         (i = null);
//                     } catch (t) {
//                       return void this._handleError(t);
//                     }
//                     this.emit("parsed", e);
//                   }
//                 });
//             },
//             {
//               "./bitmapper": 1,
//               "./chunkstream": 3,
//               "./filter-parse-async": 7,
//               "./format-normaliser": 10,
//               "./parser": 18,
//               util: 84,
//               zlib: 31,
//             },
//           ],
//           17: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = !0,
//                     n = t("zlib"),
//                     a = t("./sync-inflate");
//                   n.deflateSync || (r = !1);
//                   let s = t("./sync-reader"),
//                     o = t("./filter-parse-sync"),
//                     l = t("./parser"),
//                     h = t("./bitmapper"),
//                     u = t("./format-normaliser");
//                   e.exports = function (t, e) {
//                     let f, c, d;
//                     if (!r)
//                       throw Error(
//                         "To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0"
//                       );
//                     function p(t) {
//                       f = t;
//                     }
//                     function m(t) {
//                       c = t;
//                     }
//                     function g(t) {
//                       c.transColor = t;
//                     }
//                     function _(t) {
//                       c.palette = t;
//                     }
//                     function b() {
//                       c.alpha = !0;
//                     }
//                     function y(t) {
//                       d = t;
//                     }
//                     let v = [];
//                     function w(t) {
//                       v.push(t);
//                     }
//                     let x = new s(t);
//                     if (
//                       (new l(e, {
//                         read: x.read.bind(x),
//                         error: p,
//                         metadata: m,
//                         gamma: y,
//                         palette: _,
//                         transColor: g,
//                         inflateData: w,
//                         simpleTransparency: b,
//                       }).start(),
//                       x.process(),
//                       f)
//                     )
//                       throw f;
//                     let E,
//                       k = i.concat(v);
//                     if (((v.length = 0), c.interlace)) E = n.inflateSync(k);
//                     else {
//                       let t =
//                         (1 + ((c.width * c.bpp * c.depth + 7) >> 3)) * c.height;
//                       E = a(k, { chunkSize: t, maxLength: t });
//                     }
//                     if (((k = null), !E || !E.length))
//                       throw Error("bad png - invalid inflate data response");
//                     let M = o.process(E, c);
//                     k = null;
//                     let S = h.dataToBitMap(M, c);
//                     M = null;
//                     let A = u(S, c, e.skipRescale);
//                     return (c.data = A), (c.gamma = d || 0), c;
//                   };
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             {
//               "./bitmapper": 1,
//               "./filter-parse-sync": 8,
//               "./format-normaliser": 10,
//               "./parser": 18,
//               "./sync-inflate": 21,
//               "./sync-reader": 22,
//               buffer: 32,
//               zlib: 31,
//             },
//           ],
//           18: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   let r = t("./constants"),
//                     n = t("./crc"),
//                     a = (e.exports = function (t, e) {
//                       (this._options = t),
//                         (t.checkCRC = !1 !== t.checkCRC),
//                         (this._hasIHDR = !1),
//                         (this._hasIEND = !1),
//                         (this._emittedHeadersFinished = !1),
//                         (this._palette = []),
//                         (this._colorType = 0),
//                         (this._chunks = {}),
//                         (this._chunks[r.TYPE_IHDR] =
//                           this._handleIHDR.bind(this)),
//                         (this._chunks[r.TYPE_IEND] =
//                           this._handleIEND.bind(this)),
//                         (this._chunks[r.TYPE_IDAT] =
//                           this._handleIDAT.bind(this)),
//                         (this._chunks[r.TYPE_PLTE] =
//                           this._handlePLTE.bind(this)),
//                         (this._chunks[r.TYPE_tRNS] =
//                           this._handleTRNS.bind(this)),
//                         (this._chunks[r.TYPE_gAMA] =
//                           this._handleGAMA.bind(this)),
//                         (this.read = e.read),
//                         (this.error = e.error),
//                         (this.metadata = e.metadata),
//                         (this.gamma = e.gamma),
//                         (this.transColor = e.transColor),
//                         (this.palette = e.palette),
//                         (this.parsed = e.parsed),
//                         (this.inflateData = e.inflateData),
//                         (this.finished = e.finished),
//                         (this.simpleTransparency = e.simpleTransparency),
//                         (this.headersFinished =
//                           e.headersFinished || function () {});
//                     });
//                   (a.prototype.start = function () {
//                     this.read(
//                       r.PNG_SIGNATURE.length,
//                       this._parseSignature.bind(this)
//                     );
//                   }),
//                     (a.prototype._parseSignature = function (t) {
//                       let e = r.PNG_SIGNATURE;
//                       for (let i = 0; i < e.length; i++)
//                         if (t[i] !== e[i])
//                           return void this.error(
//                             Error("Invalid file signature")
//                           );
//                       this.read(8, this._parseChunkBegin.bind(this));
//                     }),
//                     (a.prototype._parseChunkBegin = function (t) {
//                       let e = t.readUInt32BE(0),
//                         a = t.readUInt32BE(4),
//                         s = "";
//                       for (let e = 4; e < 8; e++)
//                         s += String.fromCharCode(t[e]);
//                       let o = !!(32 & t[4]);
//                       if (this._hasIHDR || a === r.TYPE_IHDR) {
//                         if (
//                           ((this._crc = new n()),
//                           this._crc.write(i.from(s)),
//                           this._chunks[a])
//                         )
//                           return this._chunks[a](e);
//                         o
//                           ? this.read(e + 4, this._skipChunk.bind(this))
//                           : this.error(
//                               Error("Unsupported critical chunk type " + s)
//                             );
//                       } else this.error(Error("Expected IHDR on beggining"));
//                     }),
//                     (a.prototype._skipChunk = function () {
//                       this.read(8, this._parseChunkBegin.bind(this));
//                     }),
//                     (a.prototype._handleChunkEnd = function () {
//                       this.read(4, this._parseChunkEnd.bind(this));
//                     }),
//                     (a.prototype._parseChunkEnd = function (t) {
//                       let e = t.readInt32BE(0),
//                         i = this._crc.crc32();
//                       this._options.checkCRC && i !== e
//                         ? this.error(Error("Crc error - " + e + " - " + i))
//                         : this._hasIEND ||
//                           this.read(8, this._parseChunkBegin.bind(this));
//                     }),
//                     (a.prototype._handleIHDR = function (t) {
//                       this.read(t, this._parseIHDR.bind(this));
//                     }),
//                     (a.prototype._parseIHDR = function (t) {
//                       this._crc.write(t);
//                       let e = t.readUInt32BE(0),
//                         i = t.readUInt32BE(4),
//                         n = t[8],
//                         a = t[9],
//                         s = t[10],
//                         o = t[11],
//                         l = t[12];
//                       if (8 !== n && 4 !== n && 2 !== n && 1 !== n && 16 !== n)
//                         return void this.error(
//                           Error("Unsupported bit depth " + n)
//                         );
//                       if (!(a in r.COLORTYPE_TO_BPP_MAP))
//                         return void this.error(Error("Unsupported color type"));
//                       if (0 !== s)
//                         return void this.error(
//                           Error("Unsupported compression method")
//                         );
//                       if (0 !== o)
//                         return void this.error(
//                           Error("Unsupported filter method")
//                         );
//                       if (0 !== l && 1 !== l)
//                         return void this.error(
//                           Error("Unsupported interlace method")
//                         );
//                       this._colorType = a;
//                       let h = r.COLORTYPE_TO_BPP_MAP[this._colorType];
//                       (this._hasIHDR = !0),
//                         this.metadata({
//                           width: e,
//                           height: i,
//                           depth: n,
//                           interlace: !!l,
//                           palette: !!(a & r.COLORTYPE_PALETTE),
//                           color: !!(a & r.COLORTYPE_COLOR),
//                           alpha: !!(a & r.COLORTYPE_ALPHA),
//                           bpp: h,
//                           colorType: a,
//                         }),
//                         this._handleChunkEnd();
//                     }),
//                     (a.prototype._handlePLTE = function (t) {
//                       this.read(t, this._parsePLTE.bind(this));
//                     }),
//                     (a.prototype._parsePLTE = function (t) {
//                       this._crc.write(t);
//                       let e = Math.floor(t.length / 3);
//                       for (let i = 0; i < e; i++)
//                         this._palette.push([
//                           t[3 * i],
//                           t[3 * i + 1],
//                           t[3 * i + 2],
//                           255,
//                         ]);
//                       this.palette(this._palette), this._handleChunkEnd();
//                     }),
//                     (a.prototype._handleTRNS = function (t) {
//                       this.simpleTransparency(),
//                         this.read(t, this._parseTRNS.bind(this));
//                     }),
//                     (a.prototype._parseTRNS = function (t) {
//                       if (
//                         (this._crc.write(t),
//                         this._colorType === r.COLORTYPE_PALETTE_COLOR)
//                       ) {
//                         if (0 === this._palette.length)
//                           return void this.error(
//                             Error("Transparency chunk must be after palette")
//                           );
//                         if (t.length > this._palette.length)
//                           return void this.error(
//                             Error("More transparent colors than palette size")
//                           );
//                         for (let e = 0; e < t.length; e++)
//                           this._palette[e][3] = t[e];
//                         this.palette(this._palette);
//                       }
//                       this._colorType === r.COLORTYPE_GRAYSCALE &&
//                         this.transColor([t.readUInt16BE(0)]),
//                         this._colorType === r.COLORTYPE_COLOR &&
//                           this.transColor([
//                             t.readUInt16BE(0),
//                             t.readUInt16BE(2),
//                             t.readUInt16BE(4),
//                           ]),
//                         this._handleChunkEnd();
//                     }),
//                     (a.prototype._handleGAMA = function (t) {
//                       this.read(t, this._parseGAMA.bind(this));
//                     }),
//                     (a.prototype._parseGAMA = function (t) {
//                       this._crc.write(t),
//                         this.gamma(t.readUInt32BE(0) / r.GAMMA_DIVISION),
//                         this._handleChunkEnd();
//                     }),
//                     (a.prototype._handleIDAT = function (t) {
//                       this._emittedHeadersFinished ||
//                         ((this._emittedHeadersFinished = !0),
//                         this.headersFinished()),
//                         this.read(-t, this._parseIDAT.bind(this, t));
//                     }),
//                     (a.prototype._parseIDAT = function (t, e) {
//                       if (
//                         (this._crc.write(e),
//                         this._colorType === r.COLORTYPE_PALETTE_COLOR &&
//                           0 === this._palette.length)
//                       )
//                         throw Error("Expected palette not found");
//                       this.inflateData(e);
//                       let i = t - e.length;
//                       i > 0 ? this._handleIDAT(i) : this._handleChunkEnd();
//                     }),
//                     (a.prototype._handleIEND = function (t) {
//                       this.read(t, this._parseIEND.bind(this));
//                     }),
//                     (a.prototype._parseIEND = function (t) {
//                       this._crc.write(t),
//                         (this._hasIEND = !0),
//                         this._handleChunkEnd(),
//                         this.finished && this.finished();
//                     });
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "./constants": 4, "./crc": 5, buffer: 32 },
//           ],
//           19: [
//             function (t, e, i) {
//               let r = t("./parser-sync"),
//                 n = t("./packer-sync");
//               (i.read = function (t, e) {
//                 return r(t, e || {});
//               }),
//                 (i.write = function (t, e) {
//                   return n(t, e);
//                 });
//             },
//             { "./packer-sync": 13, "./parser-sync": 17 },
//           ],
//           20: [
//             function (t, e, i) {
//               (function (e, r) {
//                 (function () {
//                   let n = t("util"),
//                     a = t("stream"),
//                     s = t("./parser-async"),
//                     o = t("./packer-async"),
//                     l = t("./png-sync"),
//                     h = (i.PNG = function (t) {
//                       a.call(this),
//                         (t = t || {}),
//                         (this.width = 0 | t.width),
//                         (this.height = 0 | t.height),
//                         (this.data =
//                           this.width > 0 && this.height > 0
//                             ? r.alloc(4 * this.width * this.height)
//                             : null),
//                         t.fill && this.data && this.data.fill(0),
//                         (this.gamma = 0),
//                         (this.readable = this.writable = !0),
//                         (this._parser = new s(t)),
//                         this._parser.on("error", this.emit.bind(this, "error")),
//                         this._parser.on("close", this._handleClose.bind(this)),
//                         this._parser.on("metadata", this._metadata.bind(this)),
//                         this._parser.on("gamma", this._gamma.bind(this)),
//                         this._parser.on(
//                           "parsed",
//                           function (t) {
//                             (this.data = t), this.emit("parsed", t);
//                           }.bind(this)
//                         ),
//                         (this._packer = new o(t)),
//                         this._packer.on("data", this.emit.bind(this, "data")),
//                         this._packer.on("end", this.emit.bind(this, "end")),
//                         this._parser.on("close", this._handleClose.bind(this)),
//                         this._packer.on("error", this.emit.bind(this, "error"));
//                     });
//                   n.inherits(h, a),
//                     (h.sync = l),
//                     (h.prototype.pack = function () {
//                       return (
//                         this.data && this.data.length
//                           ? e.nextTick(
//                               function () {
//                                 this._packer.pack(
//                                   this.data,
//                                   this.width,
//                                   this.height,
//                                   this.gamma
//                                 );
//                               }.bind(this)
//                             )
//                           : this.emit("error", "No data provided"),
//                         this
//                       );
//                     }),
//                     (h.prototype.parse = function (t, e) {
//                       if (e) {
//                         let t, i;
//                         (t = function (t) {
//                           this.removeListener("error", i),
//                             (this.data = t),
//                             e(null, this);
//                         }.bind(this)),
//                           (i = function (i) {
//                             this.removeListener("parsed", t), e(i, null);
//                           }.bind(this)),
//                           this.once("parsed", t),
//                           this.once("error", i);
//                       }
//                       return this.end(t), this;
//                     }),
//                     (h.prototype.write = function (t) {
//                       return this._parser.write(t), !0;
//                     }),
//                     (h.prototype.end = function (t) {
//                       this._parser.end(t);
//                     }),
//                     (h.prototype._metadata = function (t) {
//                       (this.width = t.width),
//                         (this.height = t.height),
//                         this.emit("metadata", t);
//                     }),
//                     (h.prototype._gamma = function (t) {
//                       this.gamma = t;
//                     }),
//                     (h.prototype._handleClose = function () {
//                       this._parser.writable ||
//                         this._packer.readable ||
//                         this.emit("close");
//                     }),
//                     (h.bitblt = function (t, e, i, r, n, a, s, o) {
//                       if (
//                         ((r |= 0),
//                         (n |= 0),
//                         (a |= 0),
//                         (s |= 0),
//                         (o |= 0),
//                         (i |= 0) > t.width ||
//                           r > t.height ||
//                           i + n > t.width ||
//                           r + a > t.height)
//                       )
//                         throw Error("bitblt reading outside image");
//                       if (
//                         s > e.width ||
//                         o > e.height ||
//                         s + n > e.width ||
//                         o + a > e.height
//                       )
//                         throw Error("bitblt writing outside image");
//                       for (let l = 0; l < a; l++)
//                         t.data.copy(
//                           e.data,
//                           ((o + l) * e.width + s) << 2,
//                           ((r + l) * t.width + i) << 2,
//                           ((r + l) * t.width + i + n) << 2
//                         );
//                     }),
//                     (h.prototype.bitblt = function (t, e, i, r, n, a, s) {
//                       return h.bitblt(this, t, e, i, r, n, a, s), this;
//                     }),
//                     (h.adjustGamma = function (t) {
//                       if (t.gamma) {
//                         for (let e = 0; e < t.height; e++)
//                           for (let i = 0; i < t.width; i++) {
//                             let r = (t.width * e + i) << 2;
//                             for (let e = 0; e < 3; e++) {
//                               let i = t.data[r + e] / 255;
//                               (i = Math.pow(i, 1 / 2.2 / t.gamma)),
//                                 (t.data[r + e] = Math.round(255 * i));
//                             }
//                           }
//                         t.gamma = 0;
//                       }
//                     }),
//                     (h.prototype.adjustGamma = function () {
//                       h.adjustGamma(this);
//                     });
//                 }).call(this);
//               }).call(this, t("_process"), t("buffer").Buffer);
//             },
//             {
//               "./packer-async": 12,
//               "./parser-async": 16,
//               "./png-sync": 19,
//               _process: 63,
//               buffer: 32,
//               stream: 65,
//               util: 84,
//             },
//           ],
//           21: [
//             function (t, e, i) {
//               (function (r, n) {
//                 (function () {
//                   let r = t("assert").ok,
//                     a = t("zlib"),
//                     s = t("util"),
//                     o = t("buffer").kMaxLength;
//                   function l(t) {
//                     if (!(this instanceof l)) return new l(t);
//                     t &&
//                       t.chunkSize < a.Z_MIN_CHUNK &&
//                       (t.chunkSize = a.Z_MIN_CHUNK),
//                       a.Inflate.call(this, t),
//                       (this._offset =
//                         void 0 === this._offset
//                           ? this._outOffset
//                           : this._offset),
//                       (this._buffer = this._buffer || this._outBuffer),
//                       t &&
//                         null != t.maxLength &&
//                         (this._maxLength = t.maxLength);
//                   }
//                   function h(t) {
//                     return new l(t);
//                   }
//                   function u(t, e) {
//                     t._handle && (t._handle.close(), (t._handle = null));
//                   }
//                   function f(t, e) {
//                     if (
//                       ("string" == typeof e && (e = n.from(e)),
//                       !(e instanceof n))
//                     )
//                       throw TypeError("Not a string or buffer");
//                     let i = t._finishFlushFlag;
//                     return null == i && (i = a.Z_FINISH), t._processChunk(e, i);
//                   }
//                   function c(t, e) {
//                     return f(new l(e), t);
//                   }
//                   (l.prototype._processChunk = function (t, e, i) {
//                     if ("function" == typeof i)
//                       return a.Inflate._processChunk.call(this, t, e, i);
//                     let s,
//                       l,
//                       h = this,
//                       f = t && t.length,
//                       c = this._chunkSize - this._offset,
//                       d = this._maxLength,
//                       p = 0,
//                       m = [],
//                       g = 0;
//                     function _(t, e) {
//                       if (h._hadError) return;
//                       let i = c - e;
//                       if ((r(i >= 0, "have should not go down"), i > 0)) {
//                         let t = h._buffer.slice(h._offset, h._offset + i);
//                         if (
//                           ((h._offset += i),
//                           t.length > d && (t = t.slice(0, d)),
//                           m.push(t),
//                           (g += t.length),
//                           0 == (d -= t.length))
//                         )
//                           return !1;
//                       }
//                       return (
//                         (0 === e || h._offset >= h._chunkSize) &&
//                           ((c = h._chunkSize),
//                           (h._offset = 0),
//                           (h._buffer = n.allocUnsafe(h._chunkSize))),
//                         0 === e && ((p += f - t), (f = t), !0)
//                       );
//                     }
//                     this.on("error", function (t) {
//                       s = t;
//                     }),
//                       r(this._handle, "zlib binding closed");
//                     do
//                       l =
//                         (l = this._handle.writeSync(
//                           e,
//                           t,
//                           p,
//                           f,
//                           this._buffer,
//                           this._offset,
//                           c
//                         )) || this._writeState;
//                     while (!this._hadError && _(l[0], l[1]));
//                     if (this._hadError) throw s;
//                     if (g >= o)
//                       throw (
//                         (u(this),
//                         RangeError(
//                           "Cannot create final Buffer. It would be larger than 0x" +
//                             o.toString(16) +
//                             " bytes"
//                         ))
//                       );
//                     let b = n.concat(m, g);
//                     return u(this), b;
//                   }),
//                     s.inherits(l, a.Inflate),
//                     (e.exports = i = c),
//                     (i.Inflate = l),
//                     (i.createInflate = h),
//                     (i.inflateSync = c);
//                 }).call(this);
//               }).call(this, t("_process"), t("buffer").Buffer);
//             },
//             { _process: 63, assert: 23, buffer: 32, util: 84, zlib: 31 },
//           ],
//           22: [
//             function (t, e, i) {
//               let r = (e.exports = function (t) {
//                 (this._buffer = t), (this._reads = []);
//               });
//               (r.prototype.read = function (t, e) {
//                 this._reads.push({
//                   length: Math.abs(t),
//                   allowLess: t < 0,
//                   func: e,
//                 });
//               }),
//                 (r.prototype.process = function () {
//                   for (; this._reads.length > 0 && this._buffer.length; ) {
//                     let t = this._reads[0];
//                     if (
//                       !this._buffer.length ||
//                       !(this._buffer.length >= t.length || t.allowLess)
//                     )
//                       break;
//                     {
//                       this._reads.shift();
//                       let e = this._buffer;
//                       (this._buffer = e.slice(t.length)),
//                         t.func.call(this, e.slice(0, t.length));
//                     }
//                   }
//                   if (this._reads.length > 0)
//                     throw Error(
//                       "There are some read requests waitng on finished stream"
//                     );
//                   if (this._buffer.length > 0)
//                     throw Error("unrecognised content at end of stream");
//                 });
//             },
//             {},
//           ],
//           23: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   var r = t("object-assign");
//                   function n(t, e) {
//                     if (t === e) return 0;
//                     for (
//                       var i = t.length, r = e.length, n = 0, a = Math.min(i, r);
//                       n < a;
//                       ++n
//                     )
//                       if (t[n] !== e[n]) {
//                         (i = t[n]), (r = e[n]);
//                         break;
//                       }
//                     return i < r ? -1 : r < i ? 1 : 0;
//                   }
//                   function a(t) {
//                     return i.Buffer && "function" == typeof i.Buffer.isBuffer
//                       ? i.Buffer.isBuffer(t)
//                       : !(null == t || !t._isBuffer);
//                   }
//                   var s = t("util/"),
//                     o = Object.prototype.hasOwnProperty,
//                     l = Array.prototype.slice,
//                     h = "foo" === function () {}.name;
//                   function u(t) {
//                     return Object.prototype.toString.call(t);
//                   }
//                   function f(t) {
//                     return (
//                       !a(t) &&
//                       "function" == typeof i.ArrayBuffer &&
//                       ("function" == typeof ArrayBuffer.isView
//                         ? ArrayBuffer.isView(t)
//                         : !!t &&
//                           (t instanceof DataView ||
//                             !!(t.buffer && t.buffer instanceof ArrayBuffer)))
//                     );
//                   }
//                   var c = (e.exports = y),
//                     d = /\s*function\s+([^\(\s]*)\s*/;
//                   function p(t) {
//                     if (s.isFunction(t)) {
//                       if (h) return t.name;
//                       var e = t.toString().match(d);
//                       return e && e[1];
//                     }
//                   }
//                   function m(t, e) {
//                     return "string" == typeof t
//                       ? t.length < e
//                         ? t
//                         : t.slice(0, e)
//                       : t;
//                   }
//                   function g(t) {
//                     if (h || !s.isFunction(t)) return s.inspect(t);
//                     var e = p(t);
//                     return "[Function" + (e ? ": " + e : "") + "]";
//                   }
//                   function _(t) {
//                     return (
//                       m(g(t.actual), 128) +
//                       " " +
//                       t.operator +
//                       " " +
//                       m(g(t.expected), 128)
//                     );
//                   }
//                   function b(t, e, i, r, n) {
//                     throw new c.AssertionError({
//                       message: i,
//                       actual: t,
//                       expected: e,
//                       operator: r,
//                       stackStartFunction: n,
//                     });
//                   }
//                   function y(t, e) {
//                     t || b(t, !0, e, "==", c.ok);
//                   }
//                   function v(t, e, i, r) {
//                     if (t === e) return !0;
//                     if (a(t) && a(e)) return 0 === n(t, e);
//                     if (s.isDate(t) && s.isDate(e))
//                       return t.getTime() === e.getTime();
//                     if (s.isRegExp(t) && s.isRegExp(e))
//                       return (
//                         t.source === e.source &&
//                         t.global === e.global &&
//                         t.multiline === e.multiline &&
//                         t.lastIndex === e.lastIndex &&
//                         t.ignoreCase === e.ignoreCase
//                       );
//                     if (
//                       (null !== t && "object" == typeof t) ||
//                       (null !== e && "object" == typeof e)
//                     ) {
//                       if (
//                         f(t) &&
//                         f(e) &&
//                         u(t) === u(e) &&
//                         !(
//                           t instanceof Float32Array || t instanceof Float64Array
//                         )
//                       )
//                         return (
//                           0 ===
//                           n(new Uint8Array(t.buffer), new Uint8Array(e.buffer))
//                         );
//                       if (a(t) !== a(e)) return !1;
//                       var o = (r = r || {
//                         actual: [],
//                         expected: [],
//                       }).actual.indexOf(t);
//                       return (
//                         (-1 !== o && o === r.expected.indexOf(e)) ||
//                         (r.actual.push(t), r.expected.push(e), x(t, e, i, r))
//                       );
//                     }
//                     return i ? t === e : t == e;
//                   }
//                   function w(t) {
//                     return (
//                       "[object Arguments]" == Object.prototype.toString.call(t)
//                     );
//                   }
//                   function x(t, e, i, r) {
//                     if (null == t || null == e) return !1;
//                     if (s.isPrimitive(t) || s.isPrimitive(e)) return t === e;
//                     if (
//                       i &&
//                       Object.getPrototypeOf(t) !== Object.getPrototypeOf(e)
//                     )
//                       return !1;
//                     var n = w(t),
//                       a = w(e);
//                     if ((n && !a) || (!n && a)) return !1;
//                     if (n) return v((t = l.call(t)), (e = l.call(e)), i);
//                     var o,
//                       h,
//                       u = I(t),
//                       f = I(e);
//                     if (u.length !== f.length) return !1;
//                     for (u.sort(), f.sort(), h = u.length - 1; h >= 0; h--)
//                       if (u[h] !== f[h]) return !1;
//                     for (h = u.length - 1; h >= 0; h--)
//                       if (!v(t[(o = u[h])], e[o], i, r)) return !1;
//                     return !0;
//                   }
//                   function E(t, e, i) {
//                     v(t, e, !0) && b(t, e, i, "notDeepStrictEqual", E);
//                   }
//                   function k(t, e) {
//                     if (!t || !e) return !1;
//                     if ("[object RegExp]" == Object.prototype.toString.call(e))
//                       return e.test(t);
//                     try {
//                       if (t instanceof e) return !0;
//                     } catch (t) {}
//                     return !Error.isPrototypeOf(e) && !0 === e.call({}, t);
//                   }
//                   function M(t) {
//                     var e;
//                     try {
//                       t();
//                     } catch (t) {
//                       e = t;
//                     }
//                     return e;
//                   }
//                   function S(t, e, i, r) {
//                     if ("function" != typeof e)
//                       throw TypeError('"block" argument must be a function');
//                     "string" == typeof i && ((r = i), (i = null)),
//                       (n = M(e)),
//                       (r =
//                         (i && i.name ? " (" + i.name + ")." : ".") +
//                         (r ? " " + r : ".")),
//                       t && !n && b(n, i, "Missing expected exception" + r);
//                     var n,
//                       a = "string" == typeof r,
//                       o = !t && n && !i;
//                     if (
//                       (((!t && s.isError(n) && a && k(n, i)) || o) &&
//                         b(n, i, "Got unwanted exception" + r),
//                       (t && n && i && !k(n, i)) || (!t && n))
//                     )
//                       throw n;
//                   }
//                   function A(t, e) {
//                     t || b(t, !0, e, "==", A);
//                   }
//                   (c.AssertionError = function (t) {
//                     (this.name = "AssertionError"),
//                       (this.actual = t.actual),
//                       (this.expected = t.expected),
//                       (this.operator = t.operator),
//                       t.message
//                         ? ((this.message = t.message),
//                           (this.generatedMessage = !1))
//                         : ((this.message = _(this)),
//                           (this.generatedMessage = !0));
//                     var e = t.stackStartFunction || b;
//                     if (Error.captureStackTrace)
//                       Error.captureStackTrace(this, e);
//                     else {
//                       var i = Error();
//                       if (i.stack) {
//                         var r = i.stack,
//                           n = p(e),
//                           a = r.indexOf("\n" + n);
//                         if (a >= 0) {
//                           var s = r.indexOf("\n", a + 1);
//                           r = r.substring(s + 1);
//                         }
//                         this.stack = r;
//                       }
//                     }
//                   }),
//                     s.inherits(c.AssertionError, Error),
//                     (c.fail = b),
//                     (c.ok = y),
//                     (c.equal = function (t, e, i) {
//                       t != e && b(t, e, i, "==", c.equal);
//                     }),
//                     (c.notEqual = function (t, e, i) {
//                       t == e && b(t, e, i, "!=", c.notEqual);
//                     }),
//                     (c.deepEqual = function (t, e, i) {
//                       v(t, e, !1) || b(t, e, i, "deepEqual", c.deepEqual);
//                     }),
//                     (c.deepStrictEqual = function (t, e, i) {
//                       v(t, e, !0) ||
//                         b(t, e, i, "deepStrictEqual", c.deepStrictEqual);
//                     }),
//                     (c.notDeepEqual = function (t, e, i) {
//                       v(t, e, !1) && b(t, e, i, "notDeepEqual", c.notDeepEqual);
//                     }),
//                     (c.notDeepStrictEqual = E),
//                     (c.strictEqual = function (t, e, i) {
//                       t !== e && b(t, e, i, "===", c.strictEqual);
//                     }),
//                     (c.notStrictEqual = function (t, e, i) {
//                       t === e && b(t, e, i, "!==", c.notStrictEqual);
//                     }),
//                     (c.throws = function (t, e, i) {
//                       S(!0, t, e, i);
//                     }),
//                     (c.doesNotThrow = function (t, e, i) {
//                       S(!1, t, e, i);
//                     }),
//                     (c.ifError = function (t) {
//                       if (t) throw t;
//                     }),
//                     (c.strict = r(A, c, {
//                       equal: c.strictEqual,
//                       deepEqual: c.deepStrictEqual,
//                       notEqual: c.notStrictEqual,
//                       notDeepEqual: c.notDeepStrictEqual,
//                     })),
//                     (c.strict.strict = c.strict);
//                   var I =
//                     Object.keys ||
//                     function (t) {
//                       var e = [];
//                       for (var i in t) o.call(t, i) && e.push(i);
//                       return e;
//                     };
//                 }).call(this);
//               }).call(
//                 this,
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             { "object-assign": 51, "util/": 26 },
//           ],
//           24: [
//             function (t, e, i) {
//               "function" == typeof Object.create
//                 ? (e.exports = function (t, e) {
//                     (t.super_ = e),
//                       (t.prototype = Object.create(e.prototype, {
//                         constructor: {
//                           value: t,
//                           enumerable: !1,
//                           writable: !0,
//                           configurable: !0,
//                         },
//                       }));
//                   })
//                 : (e.exports = function (t, e) {
//                     t.super_ = e;
//                     var i = function () {};
//                     (i.prototype = e.prototype),
//                       (t.prototype = new i()),
//                       (t.prototype.constructor = t);
//                   });
//             },
//             {},
//           ],
//           25: [
//             function (t, e, i) {
//               e.exports = function (t) {
//                 return (
//                   t &&
//                   "object" == typeof t &&
//                   "function" == typeof t.copy &&
//                   "function" == typeof t.fill &&
//                   "function" == typeof t.readUInt8
//                 );
//               };
//             },
//             {},
//           ],
//           26: [
//             function (t, e, i) {
//               (function (e, r) {
//                 (function () {
//                   var n = /%[sdj%]/g;
//                   (i.format = function (t) {
//                     if (!x(t)) {
//                       for (var e = [], i = 0; i < arguments.length; i++)
//                         e.push(o(arguments[i]));
//                       return e.join(" ");
//                     }
//                     i = 1;
//                     for (
//                       var r = arguments,
//                         a = r.length,
//                         s = String(t).replace(n, function (t) {
//                           if ("%%" === t) return "%";
//                           if (i >= a) return t;
//                           switch (t) {
//                             case "%s":
//                               return String(r[i++]);
//                             case "%d":
//                               return Number(r[i++]);
//                             case "%j":
//                               try {
//                                 return JSON.stringify(r[i++]);
//                               } catch (t) {
//                                 return "[Circular]";
//                               }
//                             default:
//                               return t;
//                           }
//                         }),
//                         l = r[i];
//                       i < a;
//                       l = r[++i]
//                     )
//                       y(l) || !S(l) ? (s += " " + l) : (s += " " + o(l));
//                     return s;
//                   }),
//                     (i.deprecate = function (t, n) {
//                       if (k(r.process))
//                         return function () {
//                           return i.deprecate(t, n).apply(this, arguments);
//                         };
//                       if (!0 === e.noDeprecation) return t;
//                       var a = !1;
//                       return function () {
//                         if (!a) {
//                           if (e.throwDeprecation) throw Error(n);
//                           e.traceDeprecation
//                             ? console.trace(n)
//                             : console.error(n),
//                             (a = !0);
//                         }
//                         return t.apply(this, arguments);
//                       };
//                     });
//                   var a,
//                     s = {};
//                   function o(t, e) {
//                     var r = { seen: [], stylize: h };
//                     return (
//                       arguments.length >= 3 && (r.depth = arguments[2]),
//                       arguments.length >= 4 && (r.colors = arguments[3]),
//                       b(e) ? (r.showHidden = e) : e && i._extend(r, e),
//                       k(r.showHidden) && (r.showHidden = !1),
//                       k(r.depth) && (r.depth = 2),
//                       k(r.colors) && (r.colors = !1),
//                       k(r.customInspect) && (r.customInspect = !0),
//                       r.colors && (r.stylize = l),
//                       f(r, t, r.depth)
//                     );
//                   }
//                   function l(t, e) {
//                     var i = o.styles[e];
//                     return i
//                       ? "\x1b[" +
//                           o.colors[i][0] +
//                           "m" +
//                           t +
//                           "\x1b[" +
//                           o.colors[i][1] +
//                           "m"
//                       : t;
//                   }
//                   function h(t, e) {
//                     return t;
//                   }
//                   function u(t) {
//                     var e = {};
//                     return (
//                       t.forEach(function (t, i) {
//                         e[t] = !0;
//                       }),
//                       e
//                     );
//                   }
//                   function f(t, e, r) {
//                     if (
//                       t.customInspect &&
//                       e &&
//                       T(e.inspect) &&
//                       e.inspect !== i.inspect &&
//                       (!e.constructor || e.constructor.prototype !== e)
//                     ) {
//                       var n = e.inspect(r, t);
//                       return x(n) || (n = f(t, n, r)), n;
//                     }
//                     var a = c(t, e);
//                     if (a) return a;
//                     var s = Object.keys(e),
//                       o = u(s);
//                     if (
//                       (t.showHidden && (s = Object.getOwnPropertyNames(e)),
//                       I(e) &&
//                         (s.indexOf("message") >= 0 ||
//                           s.indexOf("description") >= 0))
//                     )
//                       return d(e);
//                     if (0 === s.length) {
//                       if (T(e)) {
//                         var l = e.name ? ": " + e.name : "";
//                         return t.stylize("[Function" + l + "]", "special");
//                       }
//                       if (M(e))
//                         return t.stylize(
//                           RegExp.prototype.toString.call(e),
//                           "regexp"
//                         );
//                       if (A(e))
//                         return t.stylize(
//                           Date.prototype.toString.call(e),
//                           "date"
//                         );
//                       if (I(e)) return d(e);
//                     }
//                     var h,
//                       b = "",
//                       y = !1,
//                       v = ["{", "}"];
//                     return (
//                       _(e) && ((y = !0), (v = ["[", "]"])),
//                       T(e) &&
//                         (b =
//                           " [Function" + (e.name ? ": " + e.name : "") + "]"),
//                       M(e) && (b = " " + RegExp.prototype.toString.call(e)),
//                       A(e) && (b = " " + Date.prototype.toUTCString.call(e)),
//                       I(e) && (b = " " + d(e)),
//                       0 !== s.length || (y && 0 != e.length)
//                         ? r < 0
//                           ? M(e)
//                             ? t.stylize(
//                                 RegExp.prototype.toString.call(e),
//                                 "regexp"
//                               )
//                             : t.stylize("[Object]", "special")
//                           : (t.seen.push(e),
//                             (h = y
//                               ? p(t, e, r, o, s)
//                               : s.map(function (i) {
//                                   return m(t, e, r, o, i, y);
//                                 })),
//                             t.seen.pop(),
//                             g(h, b, v))
//                         : v[0] + b + v[1]
//                     );
//                   }
//                   function c(t, e) {
//                     if (k(e)) return t.stylize("undefined", "undefined");
//                     if (x(e)) {
//                       var i =
//                         "'" +
//                         JSON.stringify(e)
//                           .replace(/^"|"$/g, "")
//                           .replace(/'/g, "\\'")
//                           .replace(/\\"/g, '"') +
//                         "'";
//                       return t.stylize(i, "string");
//                     }
//                     return w(e)
//                       ? t.stylize("" + e, "number")
//                       : b(e)
//                       ? t.stylize("" + e, "boolean")
//                       : y(e)
//                       ? t.stylize("null", "null")
//                       : void 0;
//                   }
//                   function d(t) {
//                     return "[" + Error.prototype.toString.call(t) + "]";
//                   }
//                   function p(t, e, i, r, n) {
//                     for (var a = [], s = 0, o = e.length; s < o; ++s)
//                       z(e, String(s))
//                         ? a.push(m(t, e, i, r, String(s), !0))
//                         : a.push("");
//                     return (
//                       n.forEach(function (n) {
//                         n.match(/^\d+$/) || a.push(m(t, e, i, r, n, !0));
//                       }),
//                       a
//                     );
//                   }
//                   function m(t, e, i, r, n, a) {
//                     var s, o, l;
//                     if (
//                       ((l = Object.getOwnPropertyDescriptor(e, n) || {
//                         value: e[n],
//                       }).get
//                         ? (o = l.set
//                             ? t.stylize("[Getter/Setter]", "special")
//                             : t.stylize("[Getter]", "special"))
//                         : l.set && (o = t.stylize("[Setter]", "special")),
//                       z(r, n) || (s = "[" + n + "]"),
//                       o ||
//                         (0 > t.seen.indexOf(l.value)
//                           ? (o = y(i)
//                               ? f(t, l.value, null)
//                               : f(t, l.value, i - 1)).indexOf("\n") > -1 &&
//                             (o = a
//                               ? o
//                                   .split("\n")
//                                   .map(function (t) {
//                                     return "  " + t;
//                                   })
//                                   .join("\n")
//                                   .substr(2)
//                               : "\n" +
//                                 o
//                                   .split("\n")
//                                   .map(function (t) {
//                                     return "   " + t;
//                                   })
//                                   .join("\n"))
//                           : (o = t.stylize("[Circular]", "special"))),
//                       k(s))
//                     ) {
//                       if (a && n.match(/^\d+$/)) return o;
//                       (s = JSON.stringify("" + n)).match(
//                         /^"([a-zA-Z_][a-zA-Z_0-9]*)"$/
//                       )
//                         ? ((s = s.substr(1, s.length - 2)),
//                           (s = t.stylize(s, "name")))
//                         : ((s = s
//                             .replace(/'/g, "\\'")
//                             .replace(/\\"/g, '"')
//                             .replace(/(^"|"$)/g, "'")),
//                           (s = t.stylize(s, "string")));
//                     }
//                     return s + ": " + o;
//                   }
//                   function g(t, e, i) {
//                     return t.reduce(function (t, e) {
//                       return (
//                         e.indexOf("\n"),
//                         t + e.replace(/\u001b\[\d\d?m/g, "").length + 1
//                       );
//                     }, 0) > 60
//                       ? i[0] +
//                           ("" === e ? "" : e + "\n ") +
//                           " " +
//                           t.join(",\n  ") +
//                           " " +
//                           i[1]
//                       : i[0] + e + " " + t.join(", ") + " " + i[1];
//                   }
//                   function _(t) {
//                     return Array.isArray(t);
//                   }
//                   function b(t) {
//                     return "boolean" == typeof t;
//                   }
//                   function y(t) {
//                     return null === t;
//                   }
//                   function v(t) {
//                     return null == t;
//                   }
//                   function w(t) {
//                     return "number" == typeof t;
//                   }
//                   function x(t) {
//                     return "string" == typeof t;
//                   }
//                   function E(t) {
//                     return "symbol" == typeof t;
//                   }
//                   function k(t) {
//                     return void 0 === t;
//                   }
//                   function M(t) {
//                     return S(t) && "[object RegExp]" === R(t);
//                   }
//                   function S(t) {
//                     return "object" == typeof t && null !== t;
//                   }
//                   function A(t) {
//                     return S(t) && "[object Date]" === R(t);
//                   }
//                   function I(t) {
//                     return (
//                       S(t) && ("[object Error]" === R(t) || t instanceof Error)
//                     );
//                   }
//                   function T(t) {
//                     return "function" == typeof t;
//                   }
//                   function B(t) {
//                     return (
//                       null === t ||
//                       "boolean" == typeof t ||
//                       "number" == typeof t ||
//                       "string" == typeof t ||
//                       "symbol" == typeof t ||
//                       void 0 === t
//                     );
//                   }
//                   function R(t) {
//                     return Object.prototype.toString.call(t);
//                   }
//                   function P(t) {
//                     return t < 10 ? "0" + t.toString(10) : t.toString(10);
//                   }
//                   (i.debuglog = function (t) {
//                     if (
//                       (k(a) && (a = e.env.NODE_DEBUG || ""),
//                       !s[(t = t.toUpperCase())])
//                     ) {
//                       if (RegExp("\\b" + t + "\\b", "i").test(a)) {
//                         var r = e.pid;
//                         s[t] = function () {
//                           var e = i.format.apply(i, arguments);
//                           console.error("%s %d: %s", t, r, e);
//                         };
//                       } else s[t] = function () {};
//                     }
//                     return s[t];
//                   }),
//                     (i.inspect = o),
//                     (o.colors = {
//                       bold: [1, 22],
//                       italic: [3, 23],
//                       underline: [4, 24],
//                       inverse: [7, 27],
//                       white: [37, 39],
//                       grey: [90, 39],
//                       black: [30, 39],
//                       blue: [34, 39],
//                       cyan: [36, 39],
//                       green: [32, 39],
//                       magenta: [35, 39],
//                       red: [31, 39],
//                       yellow: [33, 39],
//                     }),
//                     (o.styles = {
//                       special: "cyan",
//                       number: "yellow",
//                       boolean: "yellow",
//                       undefined: "grey",
//                       null: "bold",
//                       string: "green",
//                       date: "magenta",
//                       regexp: "red",
//                     }),
//                     (i.isArray = _),
//                     (i.isBoolean = b),
//                     (i.isNull = y),
//                     (i.isNullOrUndefined = v),
//                     (i.isNumber = w),
//                     (i.isString = x),
//                     (i.isSymbol = E),
//                     (i.isUndefined = k),
//                     (i.isRegExp = M),
//                     (i.isObject = S),
//                     (i.isDate = A),
//                     (i.isError = I),
//                     (i.isFunction = T),
//                     (i.isPrimitive = B),
//                     (i.isBuffer = t("./support/isBuffer"));
//                   var O = [
//                     "Jan",
//                     "Feb",
//                     "Mar",
//                     "Apr",
//                     "May",
//                     "Jun",
//                     "Jul",
//                     "Aug",
//                     "Sep",
//                     "Oct",
//                     "Nov",
//                     "Dec",
//                   ];
//                   function C() {
//                     var t = new Date(),
//                       e = [
//                         P(t.getHours()),
//                         P(t.getMinutes()),
//                         P(t.getSeconds()),
//                       ].join(":");
//                     return [t.getDate(), O[t.getMonth()], e].join(" ");
//                   }
//                   function z(t, e) {
//                     return Object.prototype.hasOwnProperty.call(t, e);
//                   }
//                   (i.log = function () {
//                     console.log("%s - %s", C(), i.format.apply(i, arguments));
//                   }),
//                     (i.inherits = t("inherits")),
//                     (i._extend = function (t, e) {
//                       if (!e || !S(e)) return t;
//                       for (var i = Object.keys(e), r = i.length; r--; )
//                         t[i[r]] = e[i[r]];
//                       return t;
//                     });
//                 }).call(this);
//               }).call(
//                 this,
//                 t("_process"),
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             { "./support/isBuffer": 25, _process: 63, inherits: 24 },
//           ],
//           27: [
//             function (t, e, i) {
//               (function (t) {
//                 (function () {
//                   var i = [
//                       "BigInt64Array",
//                       "BigUint64Array",
//                       "Float32Array",
//                       "Float64Array",
//                       "Int16Array",
//                       "Int32Array",
//                       "Int8Array",
//                       "Uint16Array",
//                       "Uint32Array",
//                       "Uint8Array",
//                       "Uint8ClampedArray",
//                     ],
//                     r = "undefined" == typeof globalThis ? t : globalThis;
//                   e.exports = function () {
//                     for (var t = [], e = 0; e < i.length; e++)
//                       "function" == typeof r[i[e]] && (t[t.length] = i[e]);
//                     return t;
//                   };
//                 }).call(this);
//               }).call(
//                 this,
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             {},
//           ],
//           28: [
//             function (t, e, i) {
//               (i.byteLength = u), (i.toByteArray = c), (i.fromByteArray = m);
//               for (
//                 var r = [],
//                   n = [],
//                   a = "undefined" != typeof Uint8Array ? Uint8Array : Array,
//                   s =
//                     "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
//                   o = 0,
//                   l = s.length;
//                 o < l;
//                 ++o
//               )
//                 (r[o] = s[o]), (n[s.charCodeAt(o)] = o);
//               function h(t) {
//                 var e = t.length;
//                 if (e % 4 > 0)
//                   throw Error("Invalid string. Length must be a multiple of 4");
//                 var i = t.indexOf("=");
//                 return -1 === i && (i = e), [i, i === e ? 0 : 4 - (i % 4)];
//               }
//               function u(t) {
//                 var e = h(t),
//                   i = e[0],
//                   r = e[1];
//                 return (3 * (i + r)) / 4 - r;
//               }
//               function f(t, e, i) {
//                 return (3 * (e + i)) / 4 - i;
//               }
//               function c(t) {
//                 var e,
//                   i,
//                   r = h(t),
//                   s = r[0],
//                   o = r[1],
//                   l = new a(f(t, s, o)),
//                   u = 0,
//                   c = o > 0 ? s - 4 : s;
//                 for (i = 0; i < c; i += 4)
//                   (e =
//                     (n[t.charCodeAt(i)] << 18) |
//                     (n[t.charCodeAt(i + 1)] << 12) |
//                     (n[t.charCodeAt(i + 2)] << 6) |
//                     n[t.charCodeAt(i + 3)]),
//                     (l[u++] = (e >> 16) & 255),
//                     (l[u++] = (e >> 8) & 255),
//                     (l[u++] = 255 & e);
//                 return (
//                   2 === o &&
//                     ((e =
//                       (n[t.charCodeAt(i)] << 2) |
//                       (n[t.charCodeAt(i + 1)] >> 4)),
//                     (l[u++] = 255 & e)),
//                   1 === o &&
//                     ((e =
//                       (n[t.charCodeAt(i)] << 10) |
//                       (n[t.charCodeAt(i + 1)] << 4) |
//                       (n[t.charCodeAt(i + 2)] >> 2)),
//                     (l[u++] = (e >> 8) & 255),
//                     (l[u++] = 255 & e)),
//                   l
//                 );
//               }
//               function d(t) {
//                 return (
//                   r[(t >> 18) & 63] +
//                   r[(t >> 12) & 63] +
//                   r[(t >> 6) & 63] +
//                   r[63 & t]
//                 );
//               }
//               function p(t, e, i) {
//                 for (var r = [], n = e; n < i; n += 3)
//                   r.push(
//                     d(
//                       ((t[n] << 16) & 16711680) +
//                         ((t[n + 1] << 8) & 65280) +
//                         (255 & t[n + 2])
//                     )
//                   );
//                 return r.join("");
//               }
//               function m(t) {
//                 for (
//                   var e,
//                     i = t.length,
//                     n = i % 3,
//                     a = [],
//                     s = 16383,
//                     o = 0,
//                     l = i - n;
//                   o < l;
//                   o += s
//                 )
//                   a.push(p(t, o, o + s > l ? l : o + s));
//                 return (
//                   1 === n
//                     ? a.push(r[(e = t[i - 1]) >> 2] + r[(e << 4) & 63] + "==")
//                     : 2 === n &&
//                       a.push(
//                         r[(e = (t[i - 2] << 8) + t[i - 1]) >> 10] +
//                           r[(e >> 4) & 63] +
//                           r[(e << 2) & 63] +
//                           "="
//                       ),
//                   a.join("")
//                 );
//               }
//               (n["-".charCodeAt(0)] = 62), (n["_".charCodeAt(0)] = 63);
//             },
//             {},
//           ],
//           29: [function (t, e, i) {}, {}],
//           30: [
//             function (t, e, i) {
//               (function (e, r) {
//                 (function () {
//                   var n = t("assert"),
//                     a = t("pako/lib/zlib/zstream"),
//                     s = t("pako/lib/zlib/deflate.js"),
//                     o = t("pako/lib/zlib/inflate.js"),
//                     l = t("pako/lib/zlib/constants");
//                   for (var h in l) i[h] = l[h];
//                   (i.NONE = 0),
//                     (i.DEFLATE = 1),
//                     (i.INFLATE = 2),
//                     (i.GZIP = 3),
//                     (i.GUNZIP = 4),
//                     (i.DEFLATERAW = 5),
//                     (i.INFLATERAW = 6),
//                     (i.UNZIP = 7);
//                   var u = 31,
//                     f = 139;
//                   function c(t) {
//                     if ("number" != typeof t || t < i.DEFLATE || t > i.UNZIP)
//                       throw TypeError("Bad argument");
//                     (this.dictionary = null),
//                       (this.err = 0),
//                       (this.flush = 0),
//                       (this.init_done = !1),
//                       (this.level = 0),
//                       (this.memLevel = 0),
//                       (this.mode = t),
//                       (this.strategy = 0),
//                       (this.windowBits = 0),
//                       (this.write_in_progress = !1),
//                       (this.pending_close = !1),
//                       (this.gzip_id_bytes_read = 0);
//                   }
//                   (c.prototype.close = function () {
//                     this.write_in_progress
//                       ? (this.pending_close = !0)
//                       : ((this.pending_close = !1),
//                         n(this.init_done, "close before init"),
//                         n(this.mode <= i.UNZIP),
//                         this.mode === i.DEFLATE ||
//                         this.mode === i.GZIP ||
//                         this.mode === i.DEFLATERAW
//                           ? s.deflateEnd(this.strm)
//                           : (this.mode !== i.INFLATE &&
//                               this.mode !== i.GUNZIP &&
//                               this.mode !== i.INFLATERAW &&
//                               this.mode !== i.UNZIP) ||
//                             o.inflateEnd(this.strm),
//                         (this.mode = i.NONE),
//                         (this.dictionary = null));
//                   }),
//                     (c.prototype.write = function (t, e, i, r, n, a, s) {
//                       return this._write(!0, t, e, i, r, n, a, s);
//                     }),
//                     (c.prototype.writeSync = function (t, e, i, r, n, a, s) {
//                       return this._write(!1, t, e, i, r, n, a, s);
//                     }),
//                     (c.prototype._write = function (t, a, s, o, l, h, u, f) {
//                       if (
//                         (n.equal(arguments.length, 8),
//                         n(this.init_done, "write before init"),
//                         n(this.mode !== i.NONE, "already finalized"),
//                         n.equal(
//                           !1,
//                           this.write_in_progress,
//                           "write already in progress"
//                         ),
//                         n.equal(!1, this.pending_close, "close is pending"),
//                         (this.write_in_progress = !0),
//                         n.equal(!1, void 0 === a, "must provide flush value"),
//                         (this.write_in_progress = !0),
//                         a !== i.Z_NO_FLUSH &&
//                           a !== i.Z_PARTIAL_FLUSH &&
//                           a !== i.Z_SYNC_FLUSH &&
//                           a !== i.Z_FULL_FLUSH &&
//                           a !== i.Z_FINISH &&
//                           a !== i.Z_BLOCK)
//                       )
//                         throw Error("Invalid flush value");
//                       if (
//                         (null == s && ((s = r.alloc(0)), (l = 0), (o = 0)),
//                         (this.strm.avail_in = l),
//                         (this.strm.input = s),
//                         (this.strm.next_in = o),
//                         (this.strm.avail_out = f),
//                         (this.strm.output = h),
//                         (this.strm.next_out = u),
//                         (this.flush = a),
//                         !t)
//                       )
//                         return (
//                           this._process(),
//                           this._checkError() ? this._afterSync() : void 0
//                         );
//                       var c = this;
//                       return (
//                         e.nextTick(function () {
//                           c._process(), c._after();
//                         }),
//                         this
//                       );
//                     }),
//                     (c.prototype._afterSync = function () {
//                       var t = this.strm.avail_out,
//                         e = this.strm.avail_in;
//                       return (this.write_in_progress = !1), [e, t];
//                     }),
//                     (c.prototype._process = function () {
//                       var t = null;
//                       switch (this.mode) {
//                         case i.DEFLATE:
//                         case i.GZIP:
//                         case i.DEFLATERAW:
//                           this.err = s.deflate(this.strm, this.flush);
//                           break;
//                         case i.UNZIP:
//                           switch (
//                             (this.strm.avail_in > 0 && (t = this.strm.next_in),
//                             this.gzip_id_bytes_read)
//                           ) {
//                             case 0:
//                               if (null === t) break;
//                               if (this.strm.input[t] !== u) {
//                                 this.mode = i.INFLATE;
//                                 break;
//                               }
//                               if (
//                                 ((this.gzip_id_bytes_read = 1),
//                                 t++,
//                                 1 === this.strm.avail_in)
//                               )
//                                 break;
//                             case 1:
//                               if (null === t) break;
//                               this.strm.input[t] === f
//                                 ? ((this.gzip_id_bytes_read = 2),
//                                   (this.mode = i.GUNZIP))
//                                 : (this.mode = i.INFLATE);
//                               break;
//                             default:
//                               throw Error(
//                                 "invalid number of gzip magic number bytes read"
//                               );
//                           }
//                         case i.INFLATE:
//                         case i.GUNZIP:
//                         case i.INFLATERAW:
//                           for (
//                             this.err = o.inflate(this.strm, this.flush),
//                               this.err === i.Z_NEED_DICT &&
//                                 this.dictionary &&
//                                 ((this.err = o.inflateSetDictionary(
//                                   this.strm,
//                                   this.dictionary
//                                 )),
//                                 this.err === i.Z_OK
//                                   ? (this.err = o.inflate(
//                                       this.strm,
//                                       this.flush
//                                     ))
//                                   : this.err === i.Z_DATA_ERROR &&
//                                     (this.err = i.Z_NEED_DICT));
//                             this.strm.avail_in > 0 &&
//                             this.mode === i.GUNZIP &&
//                             this.err === i.Z_STREAM_END &&
//                             0 !== this.strm.next_in[0];

//                           )
//                             this.reset(),
//                               (this.err = o.inflate(this.strm, this.flush));
//                           break;
//                         default:
//                           throw Error("Unknown mode " + this.mode);
//                       }
//                     }),
//                     (c.prototype._checkError = function () {
//                       switch (this.err) {
//                         case i.Z_OK:
//                         case i.Z_BUF_ERROR:
//                           if (
//                             0 !== this.strm.avail_out &&
//                             this.flush === i.Z_FINISH
//                           )
//                             return this._error("unexpected end of file"), !1;
//                           break;
//                         case i.Z_STREAM_END:
//                           break;
//                         case i.Z_NEED_DICT:
//                           return (
//                             null == this.dictionary
//                               ? this._error("Missing dictionary")
//                               : this._error("Bad dictionary"),
//                             !1
//                           );
//                         default:
//                           return this._error("Zlib error"), !1;
//                       }
//                       return !0;
//                     }),
//                     (c.prototype._after = function () {
//                       if (this._checkError()) {
//                         var t = this.strm.avail_out,
//                           e = this.strm.avail_in;
//                         (this.write_in_progress = !1),
//                           this.callback(e, t),
//                           this.pending_close && this.close();
//                       }
//                     }),
//                     (c.prototype._error = function (t) {
//                       this.strm.msg && (t = this.strm.msg),
//                         this.onerror(t, this.err),
//                         (this.write_in_progress = !1),
//                         this.pending_close && this.close();
//                     }),
//                     (c.prototype.init = function (t, e, r, a, s) {
//                       n(
//                         4 == arguments.length || 5 == arguments.length,
//                         "init(windowBits, level, memLevel, strategy, [dictionary])"
//                       ),
//                         n(t >= 8 && t <= 15, "invalid windowBits"),
//                         n(e >= -1 && e <= 9, "invalid compression level"),
//                         n(r >= 1 && r <= 9, "invalid memlevel"),
//                         n(
//                           a === i.Z_FILTERED ||
//                             a === i.Z_HUFFMAN_ONLY ||
//                             a === i.Z_RLE ||
//                             a === i.Z_FIXED ||
//                             a === i.Z_DEFAULT_STRATEGY,
//                           "invalid strategy"
//                         ),
//                         this._init(e, t, r, a, s),
//                         this._setDictionary();
//                     }),
//                     (c.prototype.params = function () {
//                       throw Error("deflateParams Not supported");
//                     }),
//                     (c.prototype.reset = function () {
//                       this._reset(), this._setDictionary();
//                     }),
//                     (c.prototype._init = function (t, e, r, n, l) {
//                       switch (
//                         ((this.level = t),
//                         (this.windowBits = e),
//                         (this.memLevel = r),
//                         (this.strategy = n),
//                         (this.flush = i.Z_NO_FLUSH),
//                         (this.err = i.Z_OK),
//                         (this.mode !== i.GZIP && this.mode !== i.GUNZIP) ||
//                           (this.windowBits += 16),
//                         this.mode === i.UNZIP && (this.windowBits += 32),
//                         (this.mode !== i.DEFLATERAW &&
//                           this.mode !== i.INFLATERAW) ||
//                           (this.windowBits = -1 * this.windowBits),
//                         (this.strm = new a()),
//                         this.mode)
//                       ) {
//                         case i.DEFLATE:
//                         case i.GZIP:
//                         case i.DEFLATERAW:
//                           this.err = s.deflateInit2(
//                             this.strm,
//                             this.level,
//                             i.Z_DEFLATED,
//                             this.windowBits,
//                             this.memLevel,
//                             this.strategy
//                           );
//                           break;
//                         case i.INFLATE:
//                         case i.GUNZIP:
//                         case i.INFLATERAW:
//                         case i.UNZIP:
//                           this.err = o.inflateInit2(this.strm, this.windowBits);
//                           break;
//                         default:
//                           throw Error("Unknown mode " + this.mode);
//                       }
//                       this.err !== i.Z_OK && this._error("Init error"),
//                         (this.dictionary = l),
//                         (this.write_in_progress = !1),
//                         (this.init_done = !0);
//                     }),
//                     (c.prototype._setDictionary = function () {
//                       if (null != this.dictionary) {
//                         switch (((this.err = i.Z_OK), this.mode)) {
//                           case i.DEFLATE:
//                           case i.DEFLATERAW:
//                             this.err = s.deflateSetDictionary(
//                               this.strm,
//                               this.dictionary
//                             );
//                         }
//                         this.err !== i.Z_OK &&
//                           this._error("Failed to set dictionary");
//                       }
//                     }),
//                     (c.prototype._reset = function () {
//                       switch (((this.err = i.Z_OK), this.mode)) {
//                         case i.DEFLATE:
//                         case i.DEFLATERAW:
//                         case i.GZIP:
//                           this.err = s.deflateReset(this.strm);
//                           break;
//                         case i.INFLATE:
//                         case i.INFLATERAW:
//                         case i.GUNZIP:
//                           this.err = o.inflateReset(this.strm);
//                       }
//                       this.err !== i.Z_OK &&
//                         this._error("Failed to reset stream");
//                     }),
//                     (i.Zlib = c);
//                 }).call(this);
//               }).call(this, t("_process"), t("buffer").Buffer);
//             },
//             {
//               _process: 63,
//               assert: 23,
//               buffer: 32,
//               "pako/lib/zlib/constants": 54,
//               "pako/lib/zlib/deflate.js": 56,
//               "pako/lib/zlib/inflate.js": 58,
//               "pako/lib/zlib/zstream": 62,
//             },
//           ],
//           31: [
//             function (t, e, i) {
//               (function (e) {
//                 (function () {
//                   var r = t("buffer").Buffer,
//                     n = t("stream").Transform,
//                     a = t("./binding"),
//                     s = t("util"),
//                     o = t("assert").ok,
//                     l = t("buffer").kMaxLength,
//                     h =
//                       "Cannot create final Buffer. It would be larger than 0x" +
//                       l.toString(16) +
//                       " bytes";
//                   (a.Z_MIN_WINDOWBITS = 8),
//                     (a.Z_MAX_WINDOWBITS = 15),
//                     (a.Z_DEFAULT_WINDOWBITS = 15),
//                     (a.Z_MIN_CHUNK = 64),
//                     (a.Z_MAX_CHUNK = 1 / 0),
//                     (a.Z_DEFAULT_CHUNK = 16384),
//                     (a.Z_MIN_MEMLEVEL = 1),
//                     (a.Z_MAX_MEMLEVEL = 9),
//                     (a.Z_DEFAULT_MEMLEVEL = 8),
//                     (a.Z_MIN_LEVEL = -1),
//                     (a.Z_MAX_LEVEL = 9),
//                     (a.Z_DEFAULT_LEVEL = a.Z_DEFAULT_COMPRESSION);
//                   for (var u = Object.keys(a), f = 0; f < u.length; f++) {
//                     var c = u[f];
//                     c.match(/^Z/) &&
//                       Object.defineProperty(i, c, {
//                         enumerable: !0,
//                         value: a[c],
//                         writable: !1,
//                       });
//                   }
//                   for (
//                     var d = {
//                         Z_OK: a.Z_OK,
//                         Z_STREAM_END: a.Z_STREAM_END,
//                         Z_NEED_DICT: a.Z_NEED_DICT,
//                         Z_ERRNO: a.Z_ERRNO,
//                         Z_STREAM_ERROR: a.Z_STREAM_ERROR,
//                         Z_DATA_ERROR: a.Z_DATA_ERROR,
//                         Z_MEM_ERROR: a.Z_MEM_ERROR,
//                         Z_BUF_ERROR: a.Z_BUF_ERROR,
//                         Z_VERSION_ERROR: a.Z_VERSION_ERROR,
//                       },
//                       p = Object.keys(d),
//                       m = 0;
//                     m < p.length;
//                     m++
//                   ) {
//                     var g = p[m];
//                     d[d[g]] = g;
//                   }
//                   function _(t, e, i) {
//                     var n = [],
//                       a = 0;
//                     function s() {
//                       for (var e; null !== (e = t.read()); )
//                         n.push(e), (a += e.length);
//                       t.once("readable", s);
//                     }
//                     function o(e) {
//                       t.removeListener("end", u),
//                         t.removeListener("readable", s),
//                         i(e);
//                     }
//                     function u() {
//                       var e,
//                         s = null;
//                       a >= l ? (s = RangeError(h)) : (e = r.concat(n, a)),
//                         (n = []),
//                         t.close(),
//                         i(s, e);
//                     }
//                     t.on("error", o), t.on("end", u), t.end(e), s();
//                   }
//                   function b(t, e) {
//                     if (
//                       ("string" == typeof e && (e = r.from(e)), !r.isBuffer(e))
//                     )
//                       throw TypeError("Not a string or buffer");
//                     var i = t._finishFlushFlag;
//                     return t._processChunk(e, i);
//                   }
//                   function y(t) {
//                     if (!(this instanceof y)) return new y(t);
//                     A.call(this, t, a.DEFLATE);
//                   }
//                   function v(t) {
//                     if (!(this instanceof v)) return new v(t);
//                     A.call(this, t, a.INFLATE);
//                   }
//                   function w(t) {
//                     if (!(this instanceof w)) return new w(t);
//                     A.call(this, t, a.GZIP);
//                   }
//                   function x(t) {
//                     if (!(this instanceof x)) return new x(t);
//                     A.call(this, t, a.GUNZIP);
//                   }
//                   function E(t) {
//                     if (!(this instanceof E)) return new E(t);
//                     A.call(this, t, a.DEFLATERAW);
//                   }
//                   function k(t) {
//                     if (!(this instanceof k)) return new k(t);
//                     A.call(this, t, a.INFLATERAW);
//                   }
//                   function M(t) {
//                     if (!(this instanceof M)) return new M(t);
//                     A.call(this, t, a.UNZIP);
//                   }
//                   function S(t) {
//                     return (
//                       t === a.Z_NO_FLUSH ||
//                       t === a.Z_PARTIAL_FLUSH ||
//                       t === a.Z_SYNC_FLUSH ||
//                       t === a.Z_FULL_FLUSH ||
//                       t === a.Z_FINISH ||
//                       t === a.Z_BLOCK
//                     );
//                   }
//                   function A(t, e) {
//                     var s = this;
//                     if (
//                       ((this._opts = t = t || {}),
//                       (this._chunkSize = t.chunkSize || i.Z_DEFAULT_CHUNK),
//                       n.call(this, t),
//                       t.flush && !S(t.flush))
//                     )
//                       throw Error("Invalid flush flag: " + t.flush);
//                     if (t.finishFlush && !S(t.finishFlush))
//                       throw Error("Invalid flush flag: " + t.finishFlush);
//                     if (
//                       ((this._flushFlag = t.flush || a.Z_NO_FLUSH),
//                       (this._finishFlushFlag =
//                         void 0 !== t.finishFlush ? t.finishFlush : a.Z_FINISH),
//                       t.chunkSize &&
//                         (t.chunkSize < i.Z_MIN_CHUNK ||
//                           t.chunkSize > i.Z_MAX_CHUNK))
//                     )
//                       throw Error("Invalid chunk size: " + t.chunkSize);
//                     if (
//                       t.windowBits &&
//                       (t.windowBits < i.Z_MIN_WINDOWBITS ||
//                         t.windowBits > i.Z_MAX_WINDOWBITS)
//                     )
//                       throw Error("Invalid windowBits: " + t.windowBits);
//                     if (
//                       t.level &&
//                       (t.level < i.Z_MIN_LEVEL || t.level > i.Z_MAX_LEVEL)
//                     )
//                       throw Error("Invalid compression level: " + t.level);
//                     if (
//                       t.memLevel &&
//                       (t.memLevel < i.Z_MIN_MEMLEVEL ||
//                         t.memLevel > i.Z_MAX_MEMLEVEL)
//                     )
//                       throw Error("Invalid memLevel: " + t.memLevel);
//                     if (
//                       t.strategy &&
//                       t.strategy != i.Z_FILTERED &&
//                       t.strategy != i.Z_HUFFMAN_ONLY &&
//                       t.strategy != i.Z_RLE &&
//                       t.strategy != i.Z_FIXED &&
//                       t.strategy != i.Z_DEFAULT_STRATEGY
//                     )
//                       throw Error("Invalid strategy: " + t.strategy);
//                     if (t.dictionary && !r.isBuffer(t.dictionary))
//                       throw Error(
//                         "Invalid dictionary: it should be a Buffer instance"
//                       );
//                     this._handle = new a.Zlib(e);
//                     var o = this;
//                     (this._hadError = !1),
//                       (this._handle.onerror = function (t, e) {
//                         I(o), (o._hadError = !0);
//                         var r = Error(t);
//                         (r.errno = e),
//                           (r.code = i.codes[e]),
//                           o.emit("error", r);
//                       });
//                     var l = i.Z_DEFAULT_COMPRESSION;
//                     "number" == typeof t.level && (l = t.level);
//                     var h = i.Z_DEFAULT_STRATEGY;
//                     "number" == typeof t.strategy && (h = t.strategy),
//                       this._handle.init(
//                         t.windowBits || i.Z_DEFAULT_WINDOWBITS,
//                         l,
//                         t.memLevel || i.Z_DEFAULT_MEMLEVEL,
//                         h,
//                         t.dictionary
//                       ),
//                       (this._buffer = r.allocUnsafe(this._chunkSize)),
//                       (this._offset = 0),
//                       (this._level = l),
//                       (this._strategy = h),
//                       this.once("end", this.close),
//                       Object.defineProperty(this, "_closed", {
//                         get: function () {
//                           return !s._handle;
//                         },
//                         configurable: !0,
//                         enumerable: !0,
//                       });
//                   }
//                   function I(t, i) {
//                     i && e.nextTick(i),
//                       t._handle && (t._handle.close(), (t._handle = null));
//                   }
//                   function T(t) {
//                     t.emit("close");
//                   }
//                   Object.defineProperty(i, "codes", {
//                     enumerable: !0,
//                     value: Object.freeze(d),
//                     writable: !1,
//                   }),
//                     (i.Deflate = y),
//                     (i.Inflate = v),
//                     (i.Gzip = w),
//                     (i.Gunzip = x),
//                     (i.DeflateRaw = E),
//                     (i.InflateRaw = k),
//                     (i.Unzip = M),
//                     (i.createDeflate = function (t) {
//                       return new y(t);
//                     }),
//                     (i.createInflate = function (t) {
//                       return new v(t);
//                     }),
//                     (i.createDeflateRaw = function (t) {
//                       return new E(t);
//                     }),
//                     (i.createInflateRaw = function (t) {
//                       return new k(t);
//                     }),
//                     (i.createGzip = function (t) {
//                       return new w(t);
//                     }),
//                     (i.createGunzip = function (t) {
//                       return new x(t);
//                     }),
//                     (i.createUnzip = function (t) {
//                       return new M(t);
//                     }),
//                     (i.deflate = function (t, e, i) {
//                       return (
//                         "function" == typeof e && ((i = e), (e = {})),
//                         _(new y(e), t, i)
//                       );
//                     }),
//                     (i.deflateSync = function (t, e) {
//                       return b(new y(e), t);
//                     }),
//                     (i.gzip = function (t, e, i) {
//                       return (
//                         "function" == typeof e && ((i = e), (e = {})),
//                         _(new w(e), t, i)
//                       );
//                     }),
//                     (i.gzipSync = function (t, e) {
//                       return b(new w(e), t);
//                     }),
//                     (i.deflateRaw = function (t, e, i) {
//                       return (
//                         "function" == typeof e && ((i = e), (e = {})),
//                         _(new E(e), t, i)
//                       );
//                     }),
//                     (i.deflateRawSync = function (t, e) {
//                       return b(new E(e), t);
//                     }),
//                     (i.unzip = function (t, e, i) {
//                       return (
//                         "function" == typeof e && ((i = e), (e = {})),
//                         _(new M(e), t, i)
//                       );
//                     }),
//                     (i.unzipSync = function (t, e) {
//                       return b(new M(e), t);
//                     }),
//                     (i.inflate = function (t, e, i) {
//                       return (
//                         "function" == typeof e && ((i = e), (e = {})),
//                         _(new v(e), t, i)
//                       );
//                     }),
//                     (i.inflateSync = function (t, e) {
//                       return b(new v(e), t);
//                     }),
//                     (i.gunzip = function (t, e, i) {
//                       return (
//                         "function" == typeof e && ((i = e), (e = {})),
//                         _(new x(e), t, i)
//                       );
//                     }),
//                     (i.gunzipSync = function (t, e) {
//                       return b(new x(e), t);
//                     }),
//                     (i.inflateRaw = function (t, e, i) {
//                       return (
//                         "function" == typeof e && ((i = e), (e = {})),
//                         _(new k(e), t, i)
//                       );
//                     }),
//                     (i.inflateRawSync = function (t, e) {
//                       return b(new k(e), t);
//                     }),
//                     s.inherits(A, n),
//                     (A.prototype.params = function (t, r, n) {
//                       if (t < i.Z_MIN_LEVEL || t > i.Z_MAX_LEVEL)
//                         throw RangeError("Invalid compression level: " + t);
//                       if (
//                         r != i.Z_FILTERED &&
//                         r != i.Z_HUFFMAN_ONLY &&
//                         r != i.Z_RLE &&
//                         r != i.Z_FIXED &&
//                         r != i.Z_DEFAULT_STRATEGY
//                       )
//                         throw TypeError("Invalid strategy: " + r);
//                       if (this._level !== t || this._strategy !== r) {
//                         var s = this;
//                         this.flush(a.Z_SYNC_FLUSH, function () {
//                           o(s._handle, "zlib binding closed"),
//                             s._handle.params(t, r),
//                             s._hadError ||
//                               ((s._level = t), (s._strategy = r), n && n());
//                         });
//                       } else e.nextTick(n);
//                     }),
//                     (A.prototype.reset = function () {
//                       return (
//                         o(this._handle, "zlib binding closed"),
//                         this._handle.reset()
//                       );
//                     }),
//                     (A.prototype._flush = function (t) {
//                       this._transform(r.alloc(0), "", t);
//                     }),
//                     (A.prototype.flush = function (t, i) {
//                       var n = this,
//                         s = this._writableState;
//                       ("function" != typeof t && (void 0 !== t || i)) ||
//                         ((i = t), (t = a.Z_FULL_FLUSH)),
//                         s.ended
//                           ? i && e.nextTick(i)
//                           : s.ending
//                           ? i && this.once("end", i)
//                           : s.needDrain
//                           ? i &&
//                             this.once("drain", function () {
//                               return n.flush(t, i);
//                             })
//                           : ((this._flushFlag = t),
//                             this.write(r.alloc(0), "", i));
//                     }),
//                     (A.prototype.close = function (t) {
//                       I(this, t), e.nextTick(T, this);
//                     }),
//                     (A.prototype._transform = function (t, e, i) {
//                       var n,
//                         s = this._writableState,
//                         o =
//                           (s.ending || s.ended) &&
//                           (!t || s.length === t.length);
//                       return null === t || r.isBuffer(t)
//                         ? this._handle
//                           ? (o
//                               ? (n = this._finishFlushFlag)
//                               : ((n = this._flushFlag),
//                                 t.length >= s.length &&
//                                   (this._flushFlag =
//                                     this._opts.flush || a.Z_NO_FLUSH)),
//                             void this._processChunk(t, n, i))
//                           : i(Error("zlib binding closed"))
//                         : i(Error("invalid input"));
//                     }),
//                     (A.prototype._processChunk = function (t, e, i) {
//                       var n = t && t.length,
//                         a = this._chunkSize - this._offset,
//                         s = 0,
//                         u = this,
//                         f = "function" == typeof i;
//                       if (!f) {
//                         var c,
//                           d = [],
//                           p = 0;
//                         this.on("error", function (t) {
//                           c = t;
//                         }),
//                           o(this._handle, "zlib binding closed");
//                         do
//                           var m = this._handle.writeSync(
//                             e,
//                             t,
//                             s,
//                             n,
//                             this._buffer,
//                             this._offset,
//                             a
//                           );
//                         while (!this._hadError && b(m[0], m[1]));
//                         if (this._hadError) throw c;
//                         if (p >= l) throw (I(this), RangeError(h));
//                         var g = r.concat(d, p);
//                         return I(this), g;
//                       }
//                       o(this._handle, "zlib binding closed");
//                       var _ = this._handle.write(
//                         e,
//                         t,
//                         s,
//                         n,
//                         this._buffer,
//                         this._offset,
//                         a
//                       );
//                       function b(l, h) {
//                         if (
//                           (this &&
//                             ((this.buffer = null), (this.callback = null)),
//                           !u._hadError)
//                         ) {
//                           var c = a - h;
//                           if ((o(c >= 0, "have should not go down"), c > 0)) {
//                             var m = u._buffer.slice(u._offset, u._offset + c);
//                             (u._offset += c),
//                               f ? u.push(m) : (d.push(m), (p += m.length));
//                           }
//                           if (
//                             ((0 === h || u._offset >= u._chunkSize) &&
//                               ((a = u._chunkSize),
//                               (u._offset = 0),
//                               (u._buffer = r.allocUnsafe(u._chunkSize))),
//                             0 === h)
//                           ) {
//                             if (((s += n - l), (n = l), !f)) return !0;
//                             var g = u._handle.write(
//                               e,
//                               t,
//                               s,
//                               n,
//                               u._buffer,
//                               u._offset,
//                               u._chunkSize
//                             );
//                             return (g.callback = b), void (g.buffer = t);
//                           }
//                           if (!f) return !1;
//                           i();
//                         }
//                       }
//                       (_.buffer = t), (_.callback = b);
//                     }),
//                     s.inherits(y, A),
//                     s.inherits(v, A),
//                     s.inherits(w, A),
//                     s.inherits(x, A),
//                     s.inherits(E, A),
//                     s.inherits(k, A),
//                     s.inherits(M, A);
//                 }).call(this);
//               }).call(this, t("_process"));
//             },
//             {
//               "./binding": 30,
//               _process: 63,
//               assert: 23,
//               buffer: 32,
//               stream: 65,
//               util: 84,
//             },
//           ],
//           32: [
//             function (t, e, i) {
//               (function (e) {
//                 (function () {
//                   var e = t("base64-js"),
//                     r = t("ieee754");
//                   (i.Buffer = o),
//                     (i.SlowBuffer = _),
//                     (i.INSPECT_MAX_BYTES = 50);
//                   var n = 2147483647;
//                   function a() {
//                     try {
//                       var t = new Uint8Array(1);
//                       return (
//                         (t.__proto__ = {
//                           __proto__: Uint8Array.prototype,
//                           foo: function () {
//                             return 42;
//                           },
//                         }),
//                         42 === t.foo()
//                       );
//                     } catch (t) {
//                       return !1;
//                     }
//                   }
//                   function s(t) {
//                     if (t > n)
//                       throw RangeError(
//                         'The value "' + t + '" is invalid for option "size"'
//                       );
//                     var e = new Uint8Array(t);
//                     return (e.__proto__ = o.prototype), e;
//                   }
//                   function o(t, e, i) {
//                     if ("number" == typeof t) {
//                       if ("string" == typeof e)
//                         throw TypeError(
//                           'The "string" argument must be of type string. Received type number'
//                         );
//                       return f(t);
//                     }
//                     return l(t, e, i);
//                   }
//                   function l(t, e, i) {
//                     if ("string" == typeof t) return c(t, e);
//                     if (ArrayBuffer.isView(t)) return d(t);
//                     if (null == t)
//                       throw TypeError(
//                         "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
//                           typeof t
//                       );
//                     if (K(t, ArrayBuffer) || (t && K(t.buffer, ArrayBuffer)))
//                       return p(t, e, i);
//                     if ("number" == typeof t)
//                       throw TypeError(
//                         'The "value" argument must not be of type number. Received type number'
//                       );
//                     var r = t.valueOf && t.valueOf();
//                     if (null != r && r !== t) return o.from(r, e, i);
//                     var n = m(t);
//                     if (n) return n;
//                     if (
//                       "undefined" != typeof Symbol &&
//                       null != Symbol.toPrimitive &&
//                       "function" == typeof t[Symbol.toPrimitive]
//                     )
//                       return o.from(t[Symbol.toPrimitive]("string"), e, i);
//                     throw TypeError(
//                       "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
//                         typeof t
//                     );
//                   }
//                   function h(t) {
//                     if ("number" != typeof t)
//                       throw TypeError('"size" argument must be of type number');
//                     if (t < 0)
//                       throw RangeError(
//                         'The value "' + t + '" is invalid for option "size"'
//                       );
//                   }
//                   function u(t, e, i) {
//                     return (
//                       h(t),
//                       t <= 0
//                         ? s(t)
//                         : void 0 !== e
//                         ? "string" == typeof i
//                           ? s(t).fill(e, i)
//                           : s(t).fill(e)
//                         : s(t)
//                     );
//                   }
//                   function f(t) {
//                     return h(t), s(t < 0 ? 0 : 0 | g(t));
//                   }
//                   function c(t, e) {
//                     if (
//                       (("string" == typeof e && "" !== e) || (e = "utf8"),
//                       !o.isEncoding(e))
//                     )
//                       throw TypeError("Unknown encoding: " + e);
//                     var i = 0 | b(t, e),
//                       r = s(i),
//                       n = r.write(t, e);
//                     return n !== i && (r = r.slice(0, n)), r;
//                   }
//                   function d(t) {
//                     for (
//                       var e = t.length < 0 ? 0 : 0 | g(t.length),
//                         i = s(e),
//                         r = 0;
//                       r < e;
//                       r += 1
//                     )
//                       i[r] = 255 & t[r];
//                     return i;
//                   }
//                   function p(t, e, i) {
//                     var r;
//                     if (e < 0 || t.byteLength < e)
//                       throw RangeError('"offset" is outside of buffer bounds');
//                     if (t.byteLength < e + (i || 0))
//                       throw RangeError('"length" is outside of buffer bounds');
//                     return (
//                       ((r =
//                         void 0 === e && void 0 === i
//                           ? new Uint8Array(t)
//                           : void 0 === i
//                           ? new Uint8Array(t, e)
//                           : new Uint8Array(t, e, i)).__proto__ = o.prototype),
//                       r
//                     );
//                   }
//                   function m(t) {
//                     if (o.isBuffer(t)) {
//                       var e = 0 | g(t.length),
//                         i = s(e);
//                       return 0 === i.length || t.copy(i, 0, 0, e), i;
//                     }
//                     return void 0 !== t.length
//                       ? "number" != typeof t.length || X(t.length)
//                         ? s(0)
//                         : d(t)
//                       : "Buffer" === t.type && Array.isArray(t.data)
//                       ? d(t.data)
//                       : void 0;
//                   }
//                   function g(t) {
//                     if (t >= n)
//                       throw RangeError(
//                         "Attempt to allocate Buffer larger than maximum size: 0x" +
//                           n.toString(16) +
//                           " bytes"
//                       );
//                     return 0 | t;
//                   }
//                   function _(t) {
//                     return +t != t && (t = 0), o.alloc(+t);
//                   }
//                   function b(t, e) {
//                     if (o.isBuffer(t)) return t.length;
//                     if (ArrayBuffer.isView(t) || K(t, ArrayBuffer))
//                       return t.byteLength;
//                     if ("string" != typeof t)
//                       throw TypeError(
//                         'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
//                           typeof t
//                       );
//                     var i = t.length,
//                       r = arguments.length > 2 && !0 === arguments[2];
//                     if (!r && 0 === i) return 0;
//                     for (var n = !1; ; )
//                       switch (e) {
//                         case "ascii":
//                         case "latin1":
//                         case "binary":
//                           return i;
//                         case "utf8":
//                         case "utf-8":
//                           return W(t).length;
//                         case "ucs2":
//                         case "ucs-2":
//                         case "utf16le":
//                         case "utf-16le":
//                           return 2 * i;
//                         case "hex":
//                           return i >>> 1;
//                         case "base64":
//                           return V(t).length;
//                         default:
//                           if (n) return r ? -1 : W(t).length;
//                           (e = ("" + e).toLowerCase()), (n = !0);
//                       }
//                   }
//                   function y(t, e, i) {
//                     var r = !1;
//                     if (
//                       ((void 0 === e || e < 0) && (e = 0),
//                       e > this.length ||
//                         ((void 0 === i || i > this.length) && (i = this.length),
//                         i <= 0) ||
//                         (i >>>= 0) <= (e >>>= 0))
//                     )
//                       return "";
//                     for (t || (t = "utf8"); ; )
//                       switch (t) {
//                         case "hex":
//                           return z(this, e, i);
//                         case "utf8":
//                         case "utf-8":
//                           return B(this, e, i);
//                         case "ascii":
//                           return O(this, e, i);
//                         case "latin1":
//                         case "binary":
//                           return C(this, e, i);
//                         case "base64":
//                           return T(this, e, i);
//                         case "ucs2":
//                         case "ucs-2":
//                         case "utf16le":
//                         case "utf-16le":
//                           return L(this, e, i);
//                         default:
//                           if (r) throw TypeError("Unknown encoding: " + t);
//                           (t = (t + "").toLowerCase()), (r = !0);
//                       }
//                   }
//                   function v(t, e, i) {
//                     var r = t[e];
//                     (t[e] = t[i]), (t[i] = r);
//                   }
//                   function w(t, e, i, r, n) {
//                     if (0 === t.length) return -1;
//                     if (
//                       ("string" == typeof i
//                         ? ((r = i), (i = 0))
//                         : i > 2147483647
//                         ? (i = 2147483647)
//                         : i < -2147483648 && (i = -2147483648),
//                       X((i = +i)) && (i = n ? 0 : t.length - 1),
//                       i < 0 && (i = t.length + i),
//                       i >= t.length)
//                     ) {
//                       if (n) return -1;
//                       i = t.length - 1;
//                     } else if (i < 0) {
//                       if (!n) return -1;
//                       i = 0;
//                     }
//                     if (
//                       ("string" == typeof e && (e = o.from(e, r)),
//                       o.isBuffer(e))
//                     )
//                       return 0 === e.length ? -1 : x(t, e, i, r, n);
//                     if ("number" == typeof e)
//                       return (
//                         (e &= 255),
//                         "function" == typeof Uint8Array.prototype.indexOf
//                           ? n
//                             ? Uint8Array.prototype.indexOf.call(t, e, i)
//                             : Uint8Array.prototype.lastIndexOf.call(t, e, i)
//                           : x(t, [e], i, r, n)
//                       );
//                     throw TypeError("val must be string, number or Buffer");
//                   }
//                   function x(t, e, i, r, n) {
//                     var a,
//                       s = 1,
//                       o = t.length,
//                       l = e.length;
//                     if (
//                       void 0 !== r &&
//                       ("ucs2" === (r = String(r).toLowerCase()) ||
//                         "ucs-2" === r ||
//                         "utf16le" === r ||
//                         "utf-16le" === r)
//                     ) {
//                       if (t.length < 2 || e.length < 2) return -1;
//                       (s = 2), (o /= 2), (l /= 2), (i /= 2);
//                     }
//                     function h(t, e) {
//                       return 1 === s ? t[e] : t.readUInt16BE(e * s);
//                     }
//                     if (n) {
//                       var u = -1;
//                       for (a = i; a < o; a++)
//                         if (h(t, a) === h(e, -1 === u ? 0 : a - u)) {
//                           if ((-1 === u && (u = a), a - u + 1 === l))
//                             return u * s;
//                         } else -1 !== u && (a -= a - u), (u = -1);
//                     } else
//                       for (i + l > o && (i = o - l), a = i; a >= 0; a--) {
//                         for (var f = !0, c = 0; c < l; c++)
//                           if (h(t, a + c) !== h(e, c)) {
//                             f = !1;
//                             break;
//                           }
//                         if (f) return a;
//                       }
//                     return -1;
//                   }
//                   function E(t, e, i, r) {
//                     i = Number(i) || 0;
//                     var n = t.length - i;
//                     r ? (r = Number(r)) > n && (r = n) : (r = n);
//                     var a = e.length;
//                     r > a / 2 && (r = a / 2);
//                     for (var s = 0; s < r; ++s) {
//                       var o = parseInt(e.substr(2 * s, 2), 16);
//                       if (X(o)) break;
//                       t[i + s] = o;
//                     }
//                     return s;
//                   }
//                   function k(t, e, i, r) {
//                     return $(W(e, t.length - i), t, i, r);
//                   }
//                   function M(t, e, i, r) {
//                     return $(q(e), t, i, r);
//                   }
//                   function S(t, e, i, r) {
//                     return M(t, e, i, r);
//                   }
//                   function A(t, e, i, r) {
//                     return $(V(e), t, i, r);
//                   }
//                   function I(t, e, i, r) {
//                     return $(Y(e, t.length - i), t, i, r);
//                   }
//                   function T(t, i, r) {
//                     return 0 === i && r === t.length
//                       ? e.fromByteArray(t)
//                       : e.fromByteArray(t.slice(i, r));
//                   }
//                   function B(t, e, i) {
//                     i = Math.min(t.length, i);
//                     for (var r = [], n = e; n < i; ) {
//                       var a,
//                         s,
//                         o,
//                         l,
//                         h = t[n],
//                         u = null,
//                         f = h > 239 ? 4 : h > 223 ? 3 : h > 191 ? 2 : 1;
//                       if (n + f <= i)
//                         switch (f) {
//                           case 1:
//                             h < 128 && (u = h);
//                             break;
//                           case 2:
//                             128 == (192 & (a = t[n + 1])) &&
//                               (l = ((31 & h) << 6) | (63 & a)) > 127 &&
//                               (u = l);
//                             break;
//                           case 3:
//                             (a = t[n + 1]),
//                               (s = t[n + 2]),
//                               128 == (192 & a) &&
//                                 128 == (192 & s) &&
//                                 (l =
//                                   ((15 & h) << 12) |
//                                   ((63 & a) << 6) |
//                                   (63 & s)) > 2047 &&
//                                 (l < 55296 || l > 57343) &&
//                                 (u = l);
//                             break;
//                           case 4:
//                             (a = t[n + 1]),
//                               (s = t[n + 2]),
//                               (o = t[n + 3]),
//                               128 == (192 & a) &&
//                                 128 == (192 & s) &&
//                                 128 == (192 & o) &&
//                                 (l =
//                                   ((15 & h) << 18) |
//                                   ((63 & a) << 12) |
//                                   ((63 & s) << 6) |
//                                   (63 & o)) > 65535 &&
//                                 l < 1114112 &&
//                                 (u = l);
//                         }
//                       null === u
//                         ? ((u = 65533), (f = 1))
//                         : u > 65535 &&
//                           ((u -= 65536),
//                           r.push(((u >>> 10) & 1023) | 55296),
//                           (u = 56320 | (1023 & u))),
//                         r.push(u),
//                         (n += f);
//                     }
//                     return P(r);
//                   }
//                   (i.kMaxLength = n),
//                     (o.TYPED_ARRAY_SUPPORT = a()),
//                     o.TYPED_ARRAY_SUPPORT ||
//                       "undefined" == typeof console ||
//                       "function" != typeof console.error ||
//                       console.error(
//                         "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
//                       ),
//                     Object.defineProperty(o.prototype, "parent", {
//                       enumerable: !0,
//                       get: function () {
//                         if (o.isBuffer(this)) return this.buffer;
//                       },
//                     }),
//                     Object.defineProperty(o.prototype, "offset", {
//                       enumerable: !0,
//                       get: function () {
//                         if (o.isBuffer(this)) return this.byteOffset;
//                       },
//                     }),
//                     "undefined" != typeof Symbol &&
//                       null != Symbol.species &&
//                       o[Symbol.species] === o &&
//                       Object.defineProperty(o, Symbol.species, {
//                         value: null,
//                         configurable: !0,
//                         enumerable: !1,
//                         writable: !1,
//                       }),
//                     (o.poolSize = 8192),
//                     (o.from = function (t, e, i) {
//                       return l(t, e, i);
//                     }),
//                     (o.prototype.__proto__ = Uint8Array.prototype),
//                     (o.__proto__ = Uint8Array),
//                     (o.alloc = function (t, e, i) {
//                       return u(t, e, i);
//                     }),
//                     (o.allocUnsafe = function (t) {
//                       return f(t);
//                     }),
//                     (o.allocUnsafeSlow = function (t) {
//                       return f(t);
//                     }),
//                     (o.isBuffer = function (t) {
//                       return (
//                         null != t && !0 === t._isBuffer && t !== o.prototype
//                       );
//                     }),
//                     (o.compare = function (t, e) {
//                       if (
//                         (K(t, Uint8Array) &&
//                           (t = o.from(t, t.offset, t.byteLength)),
//                         K(e, Uint8Array) &&
//                           (e = o.from(e, e.offset, e.byteLength)),
//                         !o.isBuffer(t) || !o.isBuffer(e))
//                       )
//                         throw TypeError(
//                           'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
//                         );
//                       if (t === e) return 0;
//                       for (
//                         var i = t.length,
//                           r = e.length,
//                           n = 0,
//                           a = Math.min(i, r);
//                         n < a;
//                         ++n
//                       )
//                         if (t[n] !== e[n]) {
//                           (i = t[n]), (r = e[n]);
//                           break;
//                         }
//                       return i < r ? -1 : r < i ? 1 : 0;
//                     }),
//                     (o.isEncoding = function (t) {
//                       switch (String(t).toLowerCase()) {
//                         case "hex":
//                         case "utf8":
//                         case "utf-8":
//                         case "ascii":
//                         case "latin1":
//                         case "binary":
//                         case "base64":
//                         case "ucs2":
//                         case "ucs-2":
//                         case "utf16le":
//                         case "utf-16le":
//                           return !0;
//                         default:
//                           return !1;
//                       }
//                     }),
//                     (o.concat = function (t, e) {
//                       if (!Array.isArray(t))
//                         throw TypeError(
//                           '"list" argument must be an Array of Buffers'
//                         );
//                       if (0 === t.length) return o.alloc(0);
//                       if (void 0 === e)
//                         for (e = 0, i = 0; i < t.length; ++i) e += t[i].length;
//                       var i,
//                         r = o.allocUnsafe(e),
//                         n = 0;
//                       for (i = 0; i < t.length; ++i) {
//                         var a = t[i];
//                         if (
//                           (K(a, Uint8Array) && (a = o.from(a)), !o.isBuffer(a))
//                         )
//                           throw TypeError(
//                             '"list" argument must be an Array of Buffers'
//                           );
//                         a.copy(r, n), (n += a.length);
//                       }
//                       return r;
//                     }),
//                     (o.byteLength = b),
//                     (o.prototype._isBuffer = !0),
//                     (o.prototype.swap16 = function () {
//                       var t = this.length;
//                       if (t % 2 != 0)
//                         throw RangeError(
//                           "Buffer size must be a multiple of 16-bits"
//                         );
//                       for (var e = 0; e < t; e += 2) v(this, e, e + 1);
//                       return this;
//                     }),
//                     (o.prototype.swap32 = function () {
//                       var t = this.length;
//                       if (t % 4 != 0)
//                         throw RangeError(
//                           "Buffer size must be a multiple of 32-bits"
//                         );
//                       for (var e = 0; e < t; e += 4)
//                         v(this, e, e + 3), v(this, e + 1, e + 2);
//                       return this;
//                     }),
//                     (o.prototype.swap64 = function () {
//                       var t = this.length;
//                       if (t % 8 != 0)
//                         throw RangeError(
//                           "Buffer size must be a multiple of 64-bits"
//                         );
//                       for (var e = 0; e < t; e += 8)
//                         v(this, e, e + 7),
//                           v(this, e + 1, e + 6),
//                           v(this, e + 2, e + 5),
//                           v(this, e + 3, e + 4);
//                       return this;
//                     }),
//                     (o.prototype.toString = function () {
//                       var t = this.length;
//                       return 0 === t
//                         ? ""
//                         : 0 == arguments.length
//                         ? B(this, 0, t)
//                         : y.apply(this, arguments);
//                     }),
//                     (o.prototype.toLocaleString = o.prototype.toString),
//                     (o.prototype.equals = function (t) {
//                       if (!o.isBuffer(t))
//                         throw TypeError("Argument must be a Buffer");
//                       return this === t || 0 === o.compare(this, t);
//                     }),
//                     (o.prototype.inspect = function () {
//                       var t = "",
//                         e = i.INSPECT_MAX_BYTES;
//                       return (
//                         (t = this.toString("hex", 0, e)
//                           .replace(/(.{2})/g, "$1 ")
//                           .trim()),
//                         this.length > e && (t += " ... "),
//                         "<Buffer " + t + ">"
//                       );
//                     }),
//                     (o.prototype.compare = function (t, e, i, r, n) {
//                       if (
//                         (K(t, Uint8Array) &&
//                           (t = o.from(t, t.offset, t.byteLength)),
//                         !o.isBuffer(t))
//                       )
//                         throw TypeError(
//                           'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
//                             typeof t
//                         );
//                       if (
//                         (void 0 === e && (e = 0),
//                         void 0 === i && (i = t ? t.length : 0),
//                         void 0 === r && (r = 0),
//                         void 0 === n && (n = this.length),
//                         e < 0 || i > t.length || r < 0 || n > this.length)
//                       )
//                         throw RangeError("out of range index");
//                       if (r >= n && e >= i) return 0;
//                       if (r >= n) return -1;
//                       if (e >= i) return 1;
//                       if (this === t) return 0;
//                       for (
//                         var a = (n >>>= 0) - (r >>>= 0),
//                           s = (i >>>= 0) - (e >>>= 0),
//                           l = Math.min(a, s),
//                           h = this.slice(r, n),
//                           u = t.slice(e, i),
//                           f = 0;
//                         f < l;
//                         ++f
//                       )
//                         if (h[f] !== u[f]) {
//                           (a = h[f]), (s = u[f]);
//                           break;
//                         }
//                       return a < s ? -1 : s < a ? 1 : 0;
//                     }),
//                     (o.prototype.includes = function (t, e, i) {
//                       return -1 !== this.indexOf(t, e, i);
//                     }),
//                     (o.prototype.indexOf = function (t, e, i) {
//                       return w(this, t, e, i, !0);
//                     }),
//                     (o.prototype.lastIndexOf = function (t, e, i) {
//                       return w(this, t, e, i, !1);
//                     }),
//                     (o.prototype.write = function (t, e, i, r) {
//                       if (void 0 === e)
//                         (r = "utf8"), (i = this.length), (e = 0);
//                       else if (void 0 === i && "string" == typeof e)
//                         (r = e), (i = this.length), (e = 0);
//                       else {
//                         if (!isFinite(e))
//                           throw Error(
//                             "Buffer.write(string, encoding, offset[, length]) is no longer supported"
//                           );
//                         (e >>>= 0),
//                           isFinite(i)
//                             ? ((i >>>= 0), void 0 === r && (r = "utf8"))
//                             : ((r = i), (i = void 0));
//                       }
//                       var n = this.length - e;
//                       if (
//                         ((void 0 === i || i > n) && (i = n),
//                         (t.length > 0 && (i < 0 || e < 0)) || e > this.length)
//                       )
//                         throw RangeError(
//                           "Attempt to write outside buffer bounds"
//                         );
//                       r || (r = "utf8");
//                       for (var a = !1; ; )
//                         switch (r) {
//                           case "hex":
//                             return E(this, t, e, i);
//                           case "utf8":
//                           case "utf-8":
//                             return k(this, t, e, i);
//                           case "ascii":
//                             return M(this, t, e, i);
//                           case "latin1":
//                           case "binary":
//                             return S(this, t, e, i);
//                           case "base64":
//                             return A(this, t, e, i);
//                           case "ucs2":
//                           case "ucs-2":
//                           case "utf16le":
//                           case "utf-16le":
//                             return I(this, t, e, i);
//                           default:
//                             if (a) throw TypeError("Unknown encoding: " + r);
//                             (r = ("" + r).toLowerCase()), (a = !0);
//                         }
//                     }),
//                     (o.prototype.toJSON = function () {
//                       return {
//                         type: "Buffer",
//                         data: Array.prototype.slice.call(this._arr || this, 0),
//                       };
//                     });
//                   var R = 4096;
//                   function P(t) {
//                     var e = t.length;
//                     if (e <= R) return String.fromCharCode.apply(String, t);
//                     for (var i = "", r = 0; r < e; )
//                       i += String.fromCharCode.apply(
//                         String,
//                         t.slice(r, (r += R))
//                       );
//                     return i;
//                   }
//                   function O(t, e, i) {
//                     var r = "";
//                     i = Math.min(t.length, i);
//                     for (var n = e; n < i; ++n)
//                       r += String.fromCharCode(127 & t[n]);
//                     return r;
//                   }
//                   function C(t, e, i) {
//                     var r = "";
//                     i = Math.min(t.length, i);
//                     for (var n = e; n < i; ++n) r += String.fromCharCode(t[n]);
//                     return r;
//                   }
//                   function z(t, e, i) {
//                     var r = t.length;
//                     (!e || e < 0) && (e = 0), (!i || i < 0 || i > r) && (i = r);
//                     for (var n = "", a = e; a < i; ++a) n += H(t[a]);
//                     return n;
//                   }
//                   function L(t, e, i) {
//                     for (
//                       var r = t.slice(e, i), n = "", a = 0;
//                       a < r.length;
//                       a += 2
//                     )
//                       n += String.fromCharCode(r[a] + 256 * r[a + 1]);
//                     return n;
//                   }
//                   function U(t, e, i) {
//                     if (t % 1 != 0 || t < 0)
//                       throw RangeError("offset is not uint");
//                     if (t + e > i)
//                       throw RangeError("Trying to access beyond buffer length");
//                   }
//                   function D(t, e, i, r, n, a) {
//                     if (!o.isBuffer(t))
//                       throw TypeError(
//                         '"buffer" argument must be a Buffer instance'
//                       );
//                     if (e > n || e < a)
//                       throw RangeError('"value" argument is out of bounds');
//                     if (i + r > t.length)
//                       throw RangeError("Index out of range");
//                   }
//                   function N(t, e, i, r, n, a) {
//                     if (i + r > t.length || i < 0)
//                       throw RangeError("Index out of range");
//                   }
//                   function j(t, e, i, n, a) {
//                     return (
//                       (e = +e),
//                       (i >>>= 0),
//                       a || N(t, e, i, 4),
//                       r.write(t, e, i, n, 23, 4),
//                       i + 4
//                     );
//                   }
//                   function F(t, e, i, n, a) {
//                     return (
//                       (e = +e),
//                       (i >>>= 0),
//                       a || N(t, e, i, 8),
//                       r.write(t, e, i, n, 52, 8),
//                       i + 8
//                     );
//                   }
//                   (o.prototype.slice = function (t, e) {
//                     var i = this.length;
//                     (t = ~~t) < 0 ? (t += i) < 0 && (t = 0) : t > i && (t = i),
//                       (e = void 0 === e ? i : ~~e) < 0
//                         ? (e += i) < 0 && (e = 0)
//                         : e > i && (e = i),
//                       e < t && (e = t);
//                     var r = this.subarray(t, e);
//                     return (r.__proto__ = o.prototype), r;
//                   }),
//                     (o.prototype.readUIntLE = function (t, e, i) {
//                       (t >>>= 0), (e >>>= 0), i || U(t, e, this.length);
//                       for (
//                         var r = this[t], n = 1, a = 0;
//                         ++a < e && (n *= 256);

//                       )
//                         r += this[t + a] * n;
//                       return r;
//                     }),
//                     (o.prototype.readUIntBE = function (t, e, i) {
//                       (t >>>= 0), (e >>>= 0), i || U(t, e, this.length);
//                       for (var r = this[t + --e], n = 1; e > 0 && (n *= 256); )
//                         r += this[t + --e] * n;
//                       return r;
//                     }),
//                     (o.prototype.readUInt8 = function (t, e) {
//                       return (t >>>= 0), e || U(t, 1, this.length), this[t];
//                     }),
//                     (o.prototype.readUInt16LE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 2, this.length),
//                         this[t] | (this[t + 1] << 8)
//                       );
//                     }),
//                     (o.prototype.readUInt16BE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 2, this.length),
//                         (this[t] << 8) | this[t + 1]
//                       );
//                     }),
//                     (o.prototype.readUInt32LE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 4, this.length),
//                         (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) +
//                           16777216 * this[t + 3]
//                       );
//                     }),
//                     (o.prototype.readUInt32BE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 4, this.length),
//                         16777216 * this[t] +
//                           ((this[t + 1] << 16) |
//                             (this[t + 2] << 8) |
//                             this[t + 3])
//                       );
//                     }),
//                     (o.prototype.readIntLE = function (t, e, i) {
//                       (t >>>= 0), (e >>>= 0), i || U(t, e, this.length);
//                       for (
//                         var r = this[t], n = 1, a = 0;
//                         ++a < e && (n *= 256);

//                       )
//                         r += this[t + a] * n;
//                       return r >= (n *= 128) && (r -= Math.pow(2, 8 * e)), r;
//                     }),
//                     (o.prototype.readIntBE = function (t, e, i) {
//                       (t >>>= 0), (e >>>= 0), i || U(t, e, this.length);
//                       for (
//                         var r = e, n = 1, a = this[t + --r];
//                         r > 0 && (n *= 256);

//                       )
//                         a += this[t + --r] * n;
//                       return a >= (n *= 128) && (a -= Math.pow(2, 8 * e)), a;
//                     }),
//                     (o.prototype.readInt8 = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 1, this.length),
//                         128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
//                       );
//                     }),
//                     (o.prototype.readInt16LE = function (t, e) {
//                       (t >>>= 0), e || U(t, 2, this.length);
//                       var i = this[t] | (this[t + 1] << 8);
//                       return 32768 & i ? 4294901760 | i : i;
//                     }),
//                     (o.prototype.readInt16BE = function (t, e) {
//                       (t >>>= 0), e || U(t, 2, this.length);
//                       var i = this[t + 1] | (this[t] << 8);
//                       return 32768 & i ? 4294901760 | i : i;
//                     }),
//                     (o.prototype.readInt32LE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 4, this.length),
//                         this[t] |
//                           (this[t + 1] << 8) |
//                           (this[t + 2] << 16) |
//                           (this[t + 3] << 24)
//                       );
//                     }),
//                     (o.prototype.readInt32BE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 4, this.length),
//                         (this[t] << 24) |
//                           (this[t + 1] << 16) |
//                           (this[t + 2] << 8) |
//                           this[t + 3]
//                       );
//                     }),
//                     (o.prototype.readFloatLE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 4, this.length),
//                         r.read(this, t, !0, 23, 4)
//                       );
//                     }),
//                     (o.prototype.readFloatBE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 4, this.length),
//                         r.read(this, t, !1, 23, 4)
//                       );
//                     }),
//                     (o.prototype.readDoubleLE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 8, this.length),
//                         r.read(this, t, !0, 52, 8)
//                       );
//                     }),
//                     (o.prototype.readDoubleBE = function (t, e) {
//                       return (
//                         (t >>>= 0),
//                         e || U(t, 8, this.length),
//                         r.read(this, t, !1, 52, 8)
//                       );
//                     }),
//                     (o.prototype.writeUIntLE = function (t, e, i, r) {
//                       (t = +t),
//                         (e >>>= 0),
//                         (i >>>= 0),
//                         r || D(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
//                       var n = 1,
//                         a = 0;
//                       for (this[e] = 255 & t; ++a < i && (n *= 256); )
//                         this[e + a] = (t / n) & 255;
//                       return e + i;
//                     }),
//                     (o.prototype.writeUIntBE = function (t, e, i, r) {
//                       (t = +t),
//                         (e >>>= 0),
//                         (i >>>= 0),
//                         r || D(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
//                       var n = i - 1,
//                         a = 1;
//                       for (this[e + n] = 255 & t; --n >= 0 && (a *= 256); )
//                         this[e + n] = (t / a) & 255;
//                       return e + i;
//                     }),
//                     (o.prototype.writeUInt8 = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 1, 255, 0),
//                         (this[e] = 255 & t),
//                         e + 1
//                       );
//                     }),
//                     (o.prototype.writeUInt16LE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 2, 65535, 0),
//                         (this[e] = 255 & t),
//                         (this[e + 1] = t >>> 8),
//                         e + 2
//                       );
//                     }),
//                     (o.prototype.writeUInt16BE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 2, 65535, 0),
//                         (this[e] = t >>> 8),
//                         (this[e + 1] = 255 & t),
//                         e + 2
//                       );
//                     }),
//                     (o.prototype.writeUInt32LE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 4, 4294967295, 0),
//                         (this[e + 3] = t >>> 24),
//                         (this[e + 2] = t >>> 16),
//                         (this[e + 1] = t >>> 8),
//                         (this[e] = 255 & t),
//                         e + 4
//                       );
//                     }),
//                     (o.prototype.writeUInt32BE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 4, 4294967295, 0),
//                         (this[e] = t >>> 24),
//                         (this[e + 1] = t >>> 16),
//                         (this[e + 2] = t >>> 8),
//                         (this[e + 3] = 255 & t),
//                         e + 4
//                       );
//                     }),
//                     (o.prototype.writeIntLE = function (t, e, i, r) {
//                       if (((t = +t), (e >>>= 0), !r)) {
//                         var n = Math.pow(2, 8 * i - 1);
//                         D(this, t, e, i, n - 1, -n);
//                       }
//                       var a = 0,
//                         s = 1,
//                         o = 0;
//                       for (this[e] = 255 & t; ++a < i && (s *= 256); )
//                         t < 0 && 0 === o && 0 !== this[e + a - 1] && (o = 1),
//                           (this[e + a] = (((t / s) | 0) - o) & 255);
//                       return e + i;
//                     }),
//                     (o.prototype.writeIntBE = function (t, e, i, r) {
//                       if (((t = +t), (e >>>= 0), !r)) {
//                         var n = Math.pow(2, 8 * i - 1);
//                         D(this, t, e, i, n - 1, -n);
//                       }
//                       var a = i - 1,
//                         s = 1,
//                         o = 0;
//                       for (this[e + a] = 255 & t; --a >= 0 && (s *= 256); )
//                         t < 0 && 0 === o && 0 !== this[e + a + 1] && (o = 1),
//                           (this[e + a] = (((t / s) | 0) - o) & 255);
//                       return e + i;
//                     }),
//                     (o.prototype.writeInt8 = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 1, 127, -128),
//                         t < 0 && (t = 255 + t + 1),
//                         (this[e] = 255 & t),
//                         e + 1
//                       );
//                     }),
//                     (o.prototype.writeInt16LE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 2, 32767, -32768),
//                         (this[e] = 255 & t),
//                         (this[e + 1] = t >>> 8),
//                         e + 2
//                       );
//                     }),
//                     (o.prototype.writeInt16BE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 2, 32767, -32768),
//                         (this[e] = t >>> 8),
//                         (this[e + 1] = 255 & t),
//                         e + 2
//                       );
//                     }),
//                     (o.prototype.writeInt32LE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 4, 2147483647, -2147483648),
//                         (this[e] = 255 & t),
//                         (this[e + 1] = t >>> 8),
//                         (this[e + 2] = t >>> 16),
//                         (this[e + 3] = t >>> 24),
//                         e + 4
//                       );
//                     }),
//                     (o.prototype.writeInt32BE = function (t, e, i) {
//                       return (
//                         (t = +t),
//                         (e >>>= 0),
//                         i || D(this, t, e, 4, 2147483647, -2147483648),
//                         t < 0 && (t = 4294967295 + t + 1),
//                         (this[e] = t >>> 24),
//                         (this[e + 1] = t >>> 16),
//                         (this[e + 2] = t >>> 8),
//                         (this[e + 3] = 255 & t),
//                         e + 4
//                       );
//                     }),
//                     (o.prototype.writeFloatLE = function (t, e, i) {
//                       return j(this, t, e, !0, i);
//                     }),
//                     (o.prototype.writeFloatBE = function (t, e, i) {
//                       return j(this, t, e, !1, i);
//                     }),
//                     (o.prototype.writeDoubleLE = function (t, e, i) {
//                       return F(this, t, e, !0, i);
//                     }),
//                     (o.prototype.writeDoubleBE = function (t, e, i) {
//                       return F(this, t, e, !1, i);
//                     }),
//                     (o.prototype.copy = function (t, e, i, r) {
//                       if (!o.isBuffer(t))
//                         throw TypeError("argument should be a Buffer");
//                       if (
//                         (i || (i = 0),
//                         r || 0 === r || (r = this.length),
//                         e >= t.length && (e = t.length),
//                         e || (e = 0),
//                         r > 0 && r < i && (r = i),
//                         r === i || 0 === t.length || 0 === this.length)
//                       )
//                         return 0;
//                       if (e < 0) throw RangeError("targetStart out of bounds");
//                       if (i < 0 || i >= this.length)
//                         throw RangeError("Index out of range");
//                       if (r < 0) throw RangeError("sourceEnd out of bounds");
//                       r > this.length && (r = this.length),
//                         t.length - e < r - i && (r = t.length - e + i);
//                       var n = r - i;
//                       if (
//                         this === t &&
//                         "function" == typeof Uint8Array.prototype.copyWithin
//                       )
//                         this.copyWithin(e, i, r);
//                       else if (this === t && i < e && e < r)
//                         for (var a = n - 1; a >= 0; --a) t[a + e] = this[a + i];
//                       else
//                         Uint8Array.prototype.set.call(
//                           t,
//                           this.subarray(i, r),
//                           e
//                         );
//                       return n;
//                     }),
//                     (o.prototype.fill = function (t, e, i, r) {
//                       if ("string" == typeof t) {
//                         if (
//                           ("string" == typeof e
//                             ? ((r = e), (e = 0), (i = this.length))
//                             : "string" == typeof i &&
//                               ((r = i), (i = this.length)),
//                           void 0 !== r && "string" != typeof r)
//                         )
//                           throw TypeError("encoding must be a string");
//                         if ("string" == typeof r && !o.isEncoding(r))
//                           throw TypeError("Unknown encoding: " + r);
//                         if (1 === t.length) {
//                           var n,
//                             a = t.charCodeAt(0);
//                           (("utf8" === r && a < 128) || "latin1" === r) &&
//                             (t = a);
//                         }
//                       } else "number" == typeof t && (t &= 255);
//                       if (e < 0 || this.length < e || this.length < i)
//                         throw RangeError("Out of range index");
//                       if (i <= e) return this;
//                       if (
//                         ((e >>>= 0),
//                         (i = void 0 === i ? this.length : i >>> 0),
//                         t || (t = 0),
//                         "number" == typeof t)
//                       )
//                         for (n = e; n < i; ++n) this[n] = t;
//                       else {
//                         var s = o.isBuffer(t) ? t : o.from(t, r),
//                           l = s.length;
//                         if (0 === l)
//                           throw TypeError(
//                             'The value "' +
//                               t +
//                               '" is invalid for argument "value"'
//                           );
//                         for (n = 0; n < i - e; ++n) this[n + e] = s[n % l];
//                       }
//                       return this;
//                     });
//                   var G = /[^+/0-9A-Za-z-_]/g;
//                   function Z(t) {
//                     if (
//                       (t = (t = t.split("=")[0]).trim().replace(G, "")).length <
//                       2
//                     )
//                       return "";
//                     for (; t.length % 4 != 0; ) t += "=";
//                     return t;
//                   }
//                   function H(t) {
//                     return t < 16 ? "0" + t.toString(16) : t.toString(16);
//                   }
//                   function W(t, e) {
//                     var i;
//                     e = e || 1 / 0;
//                     for (
//                       var r = t.length, n = null, a = [], s = 0;
//                       s < r;
//                       ++s
//                     ) {
//                       if ((i = t.charCodeAt(s)) > 55295 && i < 57344) {
//                         if (!n) {
//                           if (i > 56319 || s + 1 === r) {
//                             (e -= 3) > -1 && a.push(239, 191, 189);
//                             continue;
//                           }
//                           n = i;
//                           continue;
//                         }
//                         if (i < 56320) {
//                           (e -= 3) > -1 && a.push(239, 191, 189), (n = i);
//                           continue;
//                         }
//                         i = 65536 + (((n - 55296) << 10) | (i - 56320));
//                       } else n && (e -= 3) > -1 && a.push(239, 191, 189);
//                       if (((n = null), i < 128)) {
//                         if ((e -= 1) < 0) break;
//                         a.push(i);
//                       } else if (i < 2048) {
//                         if ((e -= 2) < 0) break;
//                         a.push((i >> 6) | 192, (63 & i) | 128);
//                       } else if (i < 65536) {
//                         if ((e -= 3) < 0) break;
//                         a.push(
//                           (i >> 12) | 224,
//                           ((i >> 6) & 63) | 128,
//                           (63 & i) | 128
//                         );
//                       } else {
//                         if (!(i < 1114112)) throw Error("Invalid code point");
//                         if ((e -= 4) < 0) break;
//                         a.push(
//                           (i >> 18) | 240,
//                           ((i >> 12) & 63) | 128,
//                           ((i >> 6) & 63) | 128,
//                           (63 & i) | 128
//                         );
//                       }
//                     }
//                     return a;
//                   }
//                   function q(t) {
//                     for (var e = [], i = 0; i < t.length; ++i)
//                       e.push(255 & t.charCodeAt(i));
//                     return e;
//                   }
//                   function Y(t, e) {
//                     for (
//                       var i, r, n = [], a = 0;
//                       a < t.length && !((e -= 2) < 0);
//                       ++a
//                     )
//                       (r = (i = t.charCodeAt(a)) >> 8),
//                         n.push(i % 256),
//                         n.push(r);
//                     return n;
//                   }
//                   function V(t) {
//                     return e.toByteArray(Z(t));
//                   }
//                   function $(t, e, i, r) {
//                     for (
//                       var n = 0;
//                       n < r && !(n + i >= e.length || n >= t.length);
//                       ++n
//                     )
//                       e[n + i] = t[n];
//                     return n;
//                   }
//                   function K(t, e) {
//                     return (
//                       t instanceof e ||
//                       (null != t &&
//                         null != t.constructor &&
//                         null != t.constructor.name &&
//                         t.constructor.name === e.name)
//                     );
//                   }
//                   function X(t) {
//                     return t != t;
//                   }
//                 }).call(this);
//               }).call(this, t("buffer").Buffer);
//             },
//             { "base64-js": 28, buffer: 32, ieee754: 45 },
//           ],
//           33: [
//             function (t, e, i) {
//               var r = t("get-intrinsic"),
//                 n = t("./"),
//                 a = n(r("String.prototype.indexOf"));
//               e.exports = function (t, e) {
//                 var i = r(t, !!e);
//                 return "function" == typeof i && a(t, ".prototype.") > -1
//                   ? n(i)
//                   : i;
//               };
//             },
//             { "./": 34, "get-intrinsic": 39 },
//           ],
//           34: [
//             function (t, e, i) {
//               var r = t("function-bind"),
//                 n = t("get-intrinsic"),
//                 a = n("%Function.prototype.apply%"),
//                 s = n("%Function.prototype.call%"),
//                 o = n("%Reflect.apply%", !0) || r.call(s, a),
//                 l = n("%Object.getOwnPropertyDescriptor%", !0),
//                 h = n("%Object.defineProperty%", !0),
//                 u = n("%Math.max%");
//               if (h)
//                 try {
//                   h({}, "a", { value: 1 });
//                 } catch (t) {
//                   h = null;
//                 }
//               e.exports = function (t) {
//                 var e = o(r, s, arguments);
//                 return (
//                   l &&
//                     h &&
//                     l(e, "length").configurable &&
//                     h(e, "length", {
//                       value: 1 + u(0, t.length - (arguments.length - 1)),
//                     }),
//                   e
//                 );
//               };
//               var f = function () {
//                 return o(r, a, arguments);
//               };
//               h ? h(e.exports, "apply", { value: f }) : (e.exports.apply = f);
//             },
//             { "function-bind": 38, "get-intrinsic": 39 },
//           ],
//           35: [
//             function (t, e, i) {
//               var r,
//                 n = "object" == typeof Reflect ? Reflect : null,
//                 a =
//                   n && "function" == typeof n.apply
//                     ? n.apply
//                     : function (t, e, i) {
//                         return Function.prototype.apply.call(t, e, i);
//                       };
//               function s(t) {
//                 console && console.warn && console.warn(t);
//               }
//               r =
//                 n && "function" == typeof n.ownKeys
//                   ? n.ownKeys
//                   : Object.getOwnPropertySymbols
//                   ? function (t) {
//                       return Object.getOwnPropertyNames(t).concat(
//                         Object.getOwnPropertySymbols(t)
//                       );
//                     }
//                   : function (t) {
//                       return Object.getOwnPropertyNames(t);
//                     };
//               var o =
//                 Number.isNaN ||
//                 function (t) {
//                   return t != t;
//                 };
//               function l() {
//                 l.init.call(this);
//               }
//               (e.exports = l),
//                 (e.exports.once = v),
//                 (l.EventEmitter = l),
//                 (l.prototype._events = void 0),
//                 (l.prototype._eventsCount = 0),
//                 (l.prototype._maxListeners = void 0);
//               var h = 10;
//               function u(t) {
//                 if ("function" != typeof t)
//                   throw TypeError(
//                     'The "listener" argument must be of type Function. Received type ' +
//                       typeof t
//                   );
//               }
//               function f(t) {
//                 return void 0 === t._maxListeners
//                   ? l.defaultMaxListeners
//                   : t._maxListeners;
//               }
//               function c(t, e, i, r) {
//                 var n, a, o;
//                 if (
//                   (u(i),
//                   void 0 === (a = t._events)
//                     ? ((a = t._events = Object.create(null)),
//                       (t._eventsCount = 0))
//                     : (void 0 !== a.newListener &&
//                         (t.emit("newListener", e, i.listener ? i.listener : i),
//                         (a = t._events)),
//                       (o = a[e])),
//                   void 0 === o)
//                 )
//                   (o = a[e] = i), ++t._eventsCount;
//                 else if (
//                   ("function" == typeof o
//                     ? (o = a[e] = r ? [i, o] : [o, i])
//                     : r
//                     ? o.unshift(i)
//                     : o.push(i),
//                   (n = f(t)) > 0 && o.length > n && !o.warned)
//                 ) {
//                   o.warned = !0;
//                   var l = Error(
//                     "Possible EventEmitter memory leak detected. " +
//                       o.length +
//                       " " +
//                       String(e) +
//                       " listeners added. Use emitter.setMaxListeners() to increase limit"
//                   );
//                   (l.name = "MaxListenersExceededWarning"),
//                     (l.emitter = t),
//                     (l.type = e),
//                     (l.count = o.length),
//                     s(l);
//                 }
//                 return t;
//               }
//               function d() {
//                 if (!this.fired)
//                   return (
//                     this.target.removeListener(this.type, this.wrapFn),
//                     (this.fired = !0),
//                     0 == arguments.length
//                       ? this.listener.call(this.target)
//                       : this.listener.apply(this.target, arguments)
//                   );
//               }
//               function p(t, e, i) {
//                 var r = {
//                     fired: !1,
//                     wrapFn: void 0,
//                     target: t,
//                     type: e,
//                     listener: i,
//                   },
//                   n = d.bind(r);
//                 return (n.listener = i), (r.wrapFn = n), n;
//               }
//               function m(t, e, i) {
//                 var r = t._events;
//                 if (void 0 === r) return [];
//                 var n = r[e];
//                 return void 0 === n
//                   ? []
//                   : "function" == typeof n
//                   ? i
//                     ? [n.listener || n]
//                     : [n]
//                   : i
//                   ? y(n)
//                   : _(n, n.length);
//               }
//               function g(t) {
//                 var e = this._events;
//                 if (void 0 !== e) {
//                   var i = e[t];
//                   if ("function" == typeof i) return 1;
//                   if (void 0 !== i) return i.length;
//                 }
//                 return 0;
//               }
//               function _(t, e) {
//                 for (var i = Array(e), r = 0; r < e; ++r) i[r] = t[r];
//                 return i;
//               }
//               function b(t, e) {
//                 for (; e + 1 < t.length; e++) t[e] = t[e + 1];
//                 t.pop();
//               }
//               function y(t) {
//                 for (var e = Array(t.length), i = 0; i < e.length; ++i)
//                   e[i] = t[i].listener || t[i];
//                 return e;
//               }
//               function v(t, e) {
//                 return new Promise(function (i, r) {
//                   function n(i) {
//                     t.removeListener(e, a), r(i);
//                   }
//                   function a() {
//                     "function" == typeof t.removeListener &&
//                       t.removeListener("error", n),
//                       i([].slice.call(arguments));
//                   }
//                   x(t, e, a, { once: !0 }),
//                     "error" !== e && w(t, n, { once: !0 });
//                 });
//               }
//               function w(t, e, i) {
//                 "function" == typeof t.on && x(t, "error", e, i);
//               }
//               function x(t, e, i, r) {
//                 if ("function" == typeof t.on)
//                   r.once ? t.once(e, i) : t.on(e, i);
//                 else {
//                   if ("function" != typeof t.addEventListener)
//                     throw TypeError(
//                       'The "emitter" argument must be of type EventEmitter. Received type ' +
//                         typeof t
//                     );
//                   t.addEventListener(e, function n(a) {
//                     r.once && t.removeEventListener(e, n), i(a);
//                   });
//                 }
//               }
//               Object.defineProperty(l, "defaultMaxListeners", {
//                 enumerable: !0,
//                 get: function () {
//                   return h;
//                 },
//                 set: function (t) {
//                   if ("number" != typeof t || t < 0 || o(t))
//                     throw RangeError(
//                       'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
//                         t +
//                         "."
//                     );
//                   h = t;
//                 },
//               }),
//                 (l.init = function () {
//                   (void 0 !== this._events &&
//                     this._events !== Object.getPrototypeOf(this)._events) ||
//                     ((this._events = Object.create(null)),
//                     (this._eventsCount = 0)),
//                     (this._maxListeners = this._maxListeners || void 0);
//                 }),
//                 (l.prototype.setMaxListeners = function (t) {
//                   if ("number" != typeof t || t < 0 || o(t))
//                     throw RangeError(
//                       'The value of "n" is out of range. It must be a non-negative number. Received ' +
//                         t +
//                         "."
//                     );
//                   return (this._maxListeners = t), this;
//                 }),
//                 (l.prototype.getMaxListeners = function () {
//                   return f(this);
//                 }),
//                 (l.prototype.emit = function (t) {
//                   for (var e = [], i = 1; i < arguments.length; i++)
//                     e.push(arguments[i]);
//                   var r = "error" === t,
//                     n = this._events;
//                   if (void 0 !== n) r = r && void 0 === n.error;
//                   else if (!r) return !1;
//                   if (r) {
//                     if ((e.length > 0 && (s = e[0]), s instanceof Error))
//                       throw s;
//                     var s,
//                       o = Error(
//                         "Unhandled error." + (s ? " (" + s.message + ")" : "")
//                       );
//                     throw ((o.context = s), o);
//                   }
//                   var l = n[t];
//                   if (void 0 === l) return !1;
//                   if ("function" == typeof l) a(l, this, e);
//                   else {
//                     var h = l.length,
//                       u = _(l, h);
//                     for (i = 0; i < h; ++i) a(u[i], this, e);
//                   }
//                   return !0;
//                 }),
//                 (l.prototype.addListener = function (t, e) {
//                   return c(this, t, e, !1);
//                 }),
//                 (l.prototype.on = l.prototype.addListener),
//                 (l.prototype.prependListener = function (t, e) {
//                   return c(this, t, e, !0);
//                 }),
//                 (l.prototype.once = function (t, e) {
//                   return u(e), this.on(t, p(this, t, e)), this;
//                 }),
//                 (l.prototype.prependOnceListener = function (t, e) {
//                   return u(e), this.prependListener(t, p(this, t, e)), this;
//                 }),
//                 (l.prototype.removeListener = function (t, e) {
//                   var i, r, n, a, s;
//                   if (
//                     (u(e),
//                     void 0 === (r = this._events) || void 0 === (i = r[t]))
//                   )
//                     return this;
//                   if (i === e || i.listener === e)
//                     0 == --this._eventsCount
//                       ? (this._events = Object.create(null))
//                       : (delete r[t],
//                         r.removeListener &&
//                           this.emit("removeListener", t, i.listener || e));
//                   else if ("function" != typeof i) {
//                     for (n = -1, a = i.length - 1; a >= 0; a--)
//                       if (i[a] === e || i[a].listener === e) {
//                         (s = i[a].listener), (n = a);
//                         break;
//                       }
//                     if (n < 0) return this;
//                     0 === n ? i.shift() : b(i, n),
//                       1 === i.length && (r[t] = i[0]),
//                       void 0 !== r.removeListener &&
//                         this.emit("removeListener", t, s || e);
//                   }
//                   return this;
//                 }),
//                 (l.prototype.off = l.prototype.removeListener),
//                 (l.prototype.removeAllListeners = function (t) {
//                   var e, i, r;
//                   if (void 0 === (i = this._events)) return this;
//                   if (void 0 === i.removeListener)
//                     return (
//                       0 == arguments.length
//                         ? ((this._events = Object.create(null)),
//                           (this._eventsCount = 0))
//                         : void 0 !== i[t] &&
//                           (0 == --this._eventsCount
//                             ? (this._events = Object.create(null))
//                             : delete i[t]),
//                       this
//                     );
//                   if (0 == arguments.length) {
//                     var n,
//                       a = Object.keys(i);
//                     for (r = 0; r < a.length; ++r)
//                       "removeListener" !== (n = a[r]) &&
//                         this.removeAllListeners(n);
//                     return (
//                       this.removeAllListeners("removeListener"),
//                       (this._events = Object.create(null)),
//                       (this._eventsCount = 0),
//                       this
//                     );
//                   }
//                   if ("function" == typeof (e = i[t]))
//                     this.removeListener(t, e);
//                   else if (void 0 !== e)
//                     for (r = e.length - 1; r >= 0; r--)
//                       this.removeListener(t, e[r]);
//                   return this;
//                 }),
//                 (l.prototype.listeners = function (t) {
//                   return m(this, t, !0);
//                 }),
//                 (l.prototype.rawListeners = function (t) {
//                   return m(this, t, !1);
//                 }),
//                 (l.listenerCount = function (t, e) {
//                   return "function" == typeof t.listenerCount
//                     ? t.listenerCount(e)
//                     : g.call(t, e);
//                 }),
//                 (l.prototype.listenerCount = g),
//                 (l.prototype.eventNames = function () {
//                   return this._eventsCount > 0 ? r(this._events) : [];
//                 });
//             },
//             {},
//           ],
//           36: [
//             function (t, e, i) {
//               var r = t("is-callable"),
//                 n = Object.prototype.toString,
//                 a = Object.prototype.hasOwnProperty,
//                 s = function (t, e, i) {
//                   for (var r = 0, n = t.length; r < n; r++)
//                     a.call(t, r) &&
//                       (null == i ? e(t[r], r, t) : e.call(i, t[r], r, t));
//                 },
//                 o = function (t, e, i) {
//                   for (var r = 0, n = t.length; r < n; r++)
//                     null == i
//                       ? e(t.charAt(r), r, t)
//                       : e.call(i, t.charAt(r), r, t);
//                 },
//                 l = function (t, e, i) {
//                   for (var r in t)
//                     a.call(t, r) &&
//                       (null == i ? e(t[r], r, t) : e.call(i, t[r], r, t));
//                 },
//                 h = function (t, e, i) {
//                   var a;
//                   if (!r(e)) throw TypeError("iterator must be a function");
//                   arguments.length >= 3 && (a = i),
//                     "[object Array]" === n.call(t)
//                       ? s(t, e, a)
//                       : "string" == typeof t
//                       ? o(t, e, a)
//                       : l(t, e, a);
//                 };
//               e.exports = h;
//             },
//             { "is-callable": 48 },
//           ],
//           37: [
//             function (t, e, i) {
//               var r = "Function.prototype.bind called on incompatible ",
//                 n = Array.prototype.slice,
//                 a = Object.prototype.toString,
//                 s = "[object Function]";
//               e.exports = function (t) {
//                 var e = this;
//                 if ("function" != typeof e || a.call(e) !== s)
//                   throw TypeError(r + e);
//                 for (
//                   var i,
//                     o = n.call(arguments, 1),
//                     l = function () {
//                       if (this instanceof i) {
//                         var r = e.apply(this, o.concat(n.call(arguments)));
//                         return Object(r) === r ? r : this;
//                       }
//                       return e.apply(t, o.concat(n.call(arguments)));
//                     },
//                     h = Math.max(0, e.length - o.length),
//                     u = [],
//                     f = 0;
//                   f < h;
//                   f++
//                 )
//                   u.push("$" + f);
//                 if (
//                   ((i = Function(
//                     "binder",
//                     "return function (" +
//                       u.join(",") +
//                       "){ return binder.apply(this,arguments); }"
//                   )(l)),
//                   e.prototype)
//                 ) {
//                   var c = function () {};
//                   (c.prototype = e.prototype),
//                     (i.prototype = new c()),
//                     (c.prototype = null);
//                 }
//                 return i;
//               };
//             },
//             {},
//           ],
//           38: [
//             function (t, e, i) {
//               var r = t("./implementation");
//               e.exports = Function.prototype.bind || r;
//             },
//             { "./implementation": 37 },
//           ],
//           39: [
//             function (t, e, i) {
//               var r,
//                 n = SyntaxError,
//                 a = Function,
//                 s = TypeError,
//                 o = function (t) {
//                   try {
//                     return a('"use strict"; return (' + t + ").constructor;")();
//                   } catch (t) {}
//                 },
//                 l = Object.getOwnPropertyDescriptor;
//               if (l)
//                 try {
//                   l({}, "");
//                 } catch (t) {
//                   l = null;
//                 }
//               var h = function () {
//                   throw new s();
//                 },
//                 u = l
//                   ? (function () {
//                       try {
//                         return h;
//                       } catch (t) {
//                         try {
//                           return l(arguments, "callee").get;
//                         } catch (t) {
//                           return h;
//                         }
//                       }
//                     })()
//                   : h,
//                 f = t("has-symbols")(),
//                 c =
//                   Object.getPrototypeOf ||
//                   function (t) {
//                     return t.__proto__;
//                   },
//                 d = {},
//                 p = "undefined" == typeof Uint8Array ? r : c(Uint8Array),
//                 m = {
//                   "%AggregateError%":
//                     "undefined" == typeof AggregateError ? r : AggregateError,
//                   "%Array%": Array,
//                   "%ArrayBuffer%":
//                     "undefined" == typeof ArrayBuffer ? r : ArrayBuffer,
//                   "%ArrayIteratorPrototype%": f ? c([][Symbol.iterator]()) : r,
//                   "%AsyncFromSyncIteratorPrototype%": r,
//                   "%AsyncFunction%": d,
//                   "%AsyncGenerator%": d,
//                   "%AsyncGeneratorFunction%": d,
//                   "%AsyncIteratorPrototype%": d,
//                   "%Atomics%": "undefined" == typeof Atomics ? r : Atomics,
//                   "%BigInt%": "undefined" == typeof BigInt ? r : BigInt,
//                   "%BigInt64Array%":
//                     "undefined" == typeof BigInt64Array ? r : BigInt64Array,
//                   "%BigUint64Array%":
//                     "undefined" == typeof BigUint64Array ? r : BigUint64Array,
//                   "%Boolean%": Boolean,
//                   "%DataView%": "undefined" == typeof DataView ? r : DataView,
//                   "%Date%": Date,
//                   "%decodeURI%": decodeURI,
//                   "%decodeURIComponent%": decodeURIComponent,
//                   "%encodeURI%": encodeURI,
//                   "%encodeURIComponent%": encodeURIComponent,
//                   "%Error%": Error,
//                   "%eval%": eval,
//                   "%EvalError%": EvalError,
//                   "%Float32Array%":
//                     "undefined" == typeof Float32Array ? r : Float32Array,
//                   "%Float64Array%":
//                     "undefined" == typeof Float64Array ? r : Float64Array,
//                   "%FinalizationRegistry%":
//                     "undefined" == typeof FinalizationRegistry
//                       ? r
//                       : FinalizationRegistry,
//                   "%Function%": a,
//                   "%GeneratorFunction%": d,
//                   "%Int8Array%":
//                     "undefined" == typeof Int8Array ? r : Int8Array,
//                   "%Int16Array%":
//                     "undefined" == typeof Int16Array ? r : Int16Array,
//                   "%Int32Array%":
//                     "undefined" == typeof Int32Array ? r : Int32Array,
//                   "%isFinite%": isFinite,
//                   "%isNaN%": isNaN,
//                   "%IteratorPrototype%": f ? c(c([][Symbol.iterator]())) : r,
//                   "%JSON%": "object" == typeof JSON ? JSON : r,
//                   "%Map%": "undefined" == typeof Map ? r : Map,
//                   "%MapIteratorPrototype%":
//                     "undefined" != typeof Map && f
//                       ? c(new Map()[Symbol.iterator]())
//                       : r,
//                   "%Math%": Math,
//                   "%Number%": Number,
//                   "%Object%": Object,
//                   "%parseFloat%": parseFloat,
//                   "%parseInt%": parseInt,
//                   "%Promise%": "undefined" == typeof Promise ? r : Promise,
//                   "%Proxy%": "undefined" == typeof Proxy ? r : Proxy,
//                   "%RangeError%": RangeError,
//                   "%ReferenceError%": ReferenceError,
//                   "%Reflect%": "undefined" == typeof Reflect ? r : Reflect,
//                   "%RegExp%": RegExp,
//                   "%Set%": "undefined" == typeof Set ? r : Set,
//                   "%SetIteratorPrototype%":
//                     "undefined" != typeof Set && f
//                       ? c(new Set()[Symbol.iterator]())
//                       : r,
//                   "%SharedArrayBuffer%":
//                     "undefined" == typeof SharedArrayBuffer
//                       ? r
//                       : SharedArrayBuffer,
//                   "%String%": String,
//                   "%StringIteratorPrototype%": f ? c(""[Symbol.iterator]()) : r,
//                   "%Symbol%": f ? Symbol : r,
//                   "%SyntaxError%": n,
//                   "%ThrowTypeError%": u,
//                   "%TypedArray%": p,
//                   "%TypeError%": s,
//                   "%Uint8Array%":
//                     "undefined" == typeof Uint8Array ? r : Uint8Array,
//                   "%Uint8ClampedArray%":
//                     "undefined" == typeof Uint8ClampedArray
//                       ? r
//                       : Uint8ClampedArray,
//                   "%Uint16Array%":
//                     "undefined" == typeof Uint16Array ? r : Uint16Array,
//                   "%Uint32Array%":
//                     "undefined" == typeof Uint32Array ? r : Uint32Array,
//                   "%URIError%": URIError,
//                   "%WeakMap%": "undefined" == typeof WeakMap ? r : WeakMap,
//                   "%WeakRef%": "undefined" == typeof WeakRef ? r : WeakRef,
//                   "%WeakSet%": "undefined" == typeof WeakSet ? r : WeakSet,
//                 };
//               try {
//                 null.error;
//               } catch (t) {
//                 var g = c(c(t));
//                 m["%Error.prototype%"] = g;
//               }
//               var _ = function t(e) {
//                   var i;
//                   if ("%AsyncFunction%" === e) i = o("async function () {}");
//                   else if ("%GeneratorFunction%" === e)
//                     i = o("function* () {}");
//                   else if ("%AsyncGeneratorFunction%" === e)
//                     i = o("async function* () {}");
//                   else if ("%AsyncGenerator%" === e) {
//                     var r = t("%AsyncGeneratorFunction%");
//                     r && (i = r.prototype);
//                   } else if ("%AsyncIteratorPrototype%" === e) {
//                     var n = t("%AsyncGenerator%");
//                     n && (i = c(n.prototype));
//                   }
//                   return (m[e] = i), i;
//                 },
//                 b = {
//                   "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
//                   "%ArrayPrototype%": ["Array", "prototype"],
//                   "%ArrayProto_entries%": ["Array", "prototype", "entries"],
//                   "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
//                   "%ArrayProto_keys%": ["Array", "prototype", "keys"],
//                   "%ArrayProto_values%": ["Array", "prototype", "values"],
//                   "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
//                   "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
//                   "%AsyncGeneratorPrototype%": [
//                     "AsyncGeneratorFunction",
//                     "prototype",
//                     "prototype",
//                   ],
//                   "%BooleanPrototype%": ["Boolean", "prototype"],
//                   "%DataViewPrototype%": ["DataView", "prototype"],
//                   "%DatePrototype%": ["Date", "prototype"],
//                   "%ErrorPrototype%": ["Error", "prototype"],
//                   "%EvalErrorPrototype%": ["EvalError", "prototype"],
//                   "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
//                   "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
//                   "%FunctionPrototype%": ["Function", "prototype"],
//                   "%Generator%": ["GeneratorFunction", "prototype"],
//                   "%GeneratorPrototype%": [
//                     "GeneratorFunction",
//                     "prototype",
//                     "prototype",
//                   ],
//                   "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
//                   "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
//                   "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
//                   "%JSONParse%": ["JSON", "parse"],
//                   "%JSONStringify%": ["JSON", "stringify"],
//                   "%MapPrototype%": ["Map", "prototype"],
//                   "%NumberPrototype%": ["Number", "prototype"],
//                   "%ObjectPrototype%": ["Object", "prototype"],
//                   "%ObjProto_toString%": ["Object", "prototype", "toString"],
//                   "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
//                   "%PromisePrototype%": ["Promise", "prototype"],
//                   "%PromiseProto_then%": ["Promise", "prototype", "then"],
//                   "%Promise_all%": ["Promise", "all"],
//                   "%Promise_reject%": ["Promise", "reject"],
//                   "%Promise_resolve%": ["Promise", "resolve"],
//                   "%RangeErrorPrototype%": ["RangeError", "prototype"],
//                   "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
//                   "%RegExpPrototype%": ["RegExp", "prototype"],
//                   "%SetPrototype%": ["Set", "prototype"],
//                   "%SharedArrayBufferPrototype%": [
//                     "SharedArrayBuffer",
//                     "prototype",
//                   ],
//                   "%StringPrototype%": ["String", "prototype"],
//                   "%SymbolPrototype%": ["Symbol", "prototype"],
//                   "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
//                   "%TypedArrayPrototype%": ["TypedArray", "prototype"],
//                   "%TypeErrorPrototype%": ["TypeError", "prototype"],
//                   "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
//                   "%Uint8ClampedArrayPrototype%": [
//                     "Uint8ClampedArray",
//                     "prototype",
//                   ],
//                   "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
//                   "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
//                   "%URIErrorPrototype%": ["URIError", "prototype"],
//                   "%WeakMapPrototype%": ["WeakMap", "prototype"],
//                   "%WeakSetPrototype%": ["WeakSet", "prototype"],
//                 },
//                 y = t("function-bind"),
//                 v = t("has"),
//                 w = y.call(Function.call, Array.prototype.concat),
//                 x = y.call(Function.apply, Array.prototype.splice),
//                 E = y.call(Function.call, String.prototype.replace),
//                 k = y.call(Function.call, String.prototype.slice),
//                 M = y.call(Function.call, RegExp.prototype.exec),
//                 S =
//                   /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,
//                 A = /\\(\\)?/g,
//                 I = function (t) {
//                   var e = k(t, 0, 1),
//                     i = k(t, -1);
//                   if ("%" === e && "%" !== i)
//                     throw new n(
//                       "invalid intrinsic syntax, expected closing `%`"
//                     );
//                   if ("%" === i && "%" !== e)
//                     throw new n(
//                       "invalid intrinsic syntax, expected opening `%`"
//                     );
//                   var r = [];
//                   return (
//                     E(t, S, function (t, e, i, n) {
//                       r[r.length] = i ? E(n, A, "$1") : e || t;
//                     }),
//                     r
//                   );
//                 },
//                 T = function (t, e) {
//                   var i,
//                     r = t;
//                   if ((v(b, r) && (r = "%" + (i = b[r])[0] + "%"), v(m, r))) {
//                     var a = m[r];
//                     if ((a === d && (a = _(r)), void 0 === a && !e))
//                       throw new s(
//                         "intrinsic " +
//                           t +
//                           " exists, but is not available. Please file an issue!"
//                       );
//                     return { alias: i, name: r, value: a };
//                   }
//                   throw new n("intrinsic " + t + " does not exist!");
//                 };
//               e.exports = function (t, e) {
//                 if ("string" != typeof t || 0 === t.length)
//                   throw new s("intrinsic name must be a non-empty string");
//                 if (arguments.length > 1 && "boolean" != typeof e)
//                   throw new s('"allowMissing" argument must be a boolean');
//                 if (null === M(/^%?[^%]*%?$/, t))
//                   throw new n(
//                     "`%` may not be present anywhere but at the beginning and end of the intrinsic name"
//                   );
//                 var i = I(t),
//                   r = i.length > 0 ? i[0] : "",
//                   a = T("%" + r + "%", e),
//                   o = a.name,
//                   h = a.value,
//                   u = !1,
//                   f = a.alias;
//                 f && ((r = f[0]), x(i, w([0, 1], f)));
//                 for (var c = 1, d = !0; c < i.length; c += 1) {
//                   var p = i[c],
//                     g = k(p, 0, 1),
//                     _ = k(p, -1);
//                   if (
//                     ('"' === g ||
//                       "'" === g ||
//                       "`" === g ||
//                       '"' === _ ||
//                       "'" === _ ||
//                       "`" === _) &&
//                     g !== _
//                   )
//                     throw new n(
//                       "property names with quotes must have matching quotes"
//                     );
//                   if (
//                     (("constructor" !== p && d) || (u = !0),
//                     v(m, (o = "%" + (r += "." + p) + "%")))
//                   )
//                     h = m[o];
//                   else if (null != h) {
//                     if (!(p in h)) {
//                       if (!e)
//                         throw new s(
//                           "base intrinsic for " +
//                             t +
//                             " exists, but the property is not available."
//                         );
//                       return;
//                     }
//                     if (l && c + 1 >= i.length) {
//                       var b = l(h, p);
//                       h =
//                         (d = !!b) && "get" in b && !("originalValue" in b.get)
//                           ? b.get
//                           : h[p];
//                     } else (d = v(h, p)), (h = h[p]);
//                     d && !u && (m[o] = h);
//                   }
//                 }
//                 return h;
//               };
//             },
//             { "function-bind": 38, has: 44, "has-symbols": 41 },
//           ],
//           40: [
//             function (t, e, i) {
//               var r = t("get-intrinsic")(
//                 "%Object.getOwnPropertyDescriptor%",
//                 !0
//               );
//               if (r)
//                 try {
//                   r([], "length");
//                 } catch (t) {
//                   r = null;
//                 }
//               e.exports = r;
//             },
//             { "get-intrinsic": 39 },
//           ],
//           41: [
//             function (t, e, i) {
//               var r = "undefined" != typeof Symbol && Symbol,
//                 n = t("./shams");
//               e.exports = function () {
//                 return (
//                   "function" == typeof r &&
//                   "function" == typeof Symbol &&
//                   "symbol" == typeof r("foo") &&
//                   "symbol" == typeof Symbol("bar") &&
//                   n()
//                 );
//               };
//             },
//             { "./shams": 42 },
//           ],
//           42: [
//             function (t, e, i) {
//               e.exports = function () {
//                 if (
//                   "function" != typeof Symbol ||
//                   "function" != typeof Object.getOwnPropertySymbols
//                 )
//                   return !1;
//                 if ("symbol" == typeof Symbol.iterator) return !0;
//                 var t = {},
//                   e = Symbol("test"),
//                   i = Object(e);
//                 if (
//                   "string" == typeof e ||
//                   "[object Symbol]" !== Object.prototype.toString.call(e) ||
//                   "[object Symbol]" !== Object.prototype.toString.call(i)
//                 )
//                   return !1;
//                 var r = 42;
//                 for (e in ((t[e] = r), t)) return !1;
//                 if (
//                   ("function" == typeof Object.keys &&
//                     0 !== Object.keys(t).length) ||
//                   ("function" == typeof Object.getOwnPropertyNames &&
//                     0 !== Object.getOwnPropertyNames(t).length)
//                 )
//                   return !1;
//                 var n = Object.getOwnPropertySymbols(t);
//                 if (
//                   1 !== n.length ||
//                   n[0] !== e ||
//                   !Object.prototype.propertyIsEnumerable.call(t, e)
//                 )
//                   return !1;
//                 if ("function" == typeof Object.getOwnPropertyDescriptor) {
//                   var a = Object.getOwnPropertyDescriptor(t, e);
//                   if (a.value !== r || !0 !== a.enumerable) return !1;
//                 }
//                 return !0;
//               };
//             },
//             {},
//           ],
//           43: [
//             function (t, e, i) {
//               var r = t("has-symbols/shams");
//               e.exports = function () {
//                 return r() && !!Symbol.toStringTag;
//               };
//             },
//             { "has-symbols/shams": 42 },
//           ],
//           44: [
//             function (t, e, i) {
//               var r = t("function-bind");
//               e.exports = r.call(
//                 Function.call,
//                 Object.prototype.hasOwnProperty
//               );
//             },
//             { "function-bind": 38 },
//           ],
//           45: [
//             function (t, e, i) {
//               (i.read = function (t, e, i, r, n) {
//                 var a,
//                   s,
//                   o = 8 * n - r - 1,
//                   l = (1 << o) - 1,
//                   h = l >> 1,
//                   u = -7,
//                   f = i ? n - 1 : 0,
//                   c = i ? -1 : 1,
//                   d = t[e + f];
//                 for (
//                   f += c, a = d & ((1 << -u) - 1), d >>= -u, u += o;
//                   u > 0;
//                   a = 256 * a + t[e + f], f += c, u -= 8
//                 );
//                 for (
//                   s = a & ((1 << -u) - 1), a >>= -u, u += r;
//                   u > 0;
//                   s = 256 * s + t[e + f], f += c, u -= 8
//                 );
//                 if (0 === a) a = 1 - h;
//                 else {
//                   if (a === l) return s ? NaN : (1 / 0) * (d ? -1 : 1);
//                   (s += Math.pow(2, r)), (a -= h);
//                 }
//                 return (d ? -1 : 1) * s * Math.pow(2, a - r);
//               }),
//                 (i.write = function (t, e, i, r, n, a) {
//                   var s,
//                     o,
//                     l,
//                     h = 8 * a - n - 1,
//                     u = (1 << h) - 1,
//                     f = u >> 1,
//                     c = 23 === n ? 5960464477539062e-23 : 0,
//                     d = r ? 0 : a - 1,
//                     p = r ? 1 : -1,
//                     m = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
//                   for (
//                     isNaN((e = Math.abs(e))) || e === 1 / 0
//                       ? ((o = isNaN(e) ? 1 : 0), (s = u))
//                       : ((s = Math.floor(Math.log(e) / Math.LN2)),
//                         e * (l = Math.pow(2, -s)) < 1 && (s--, (l *= 2)),
//                         (e += s + f >= 1 ? c / l : c * Math.pow(2, 1 - f)) *
//                           l >=
//                           2 && (s++, (l /= 2)),
//                         s + f >= u
//                           ? ((o = 0), (s = u))
//                           : s + f >= 1
//                           ? ((o = (e * l - 1) * Math.pow(2, n)), (s += f))
//                           : ((o = e * Math.pow(2, f - 1) * Math.pow(2, n)),
//                             (s = 0)));
//                     n >= 8;
//                     t[i + d] = 255 & o, d += p, o /= 256, n -= 8
//                   );
//                   for (
//                     s = (s << n) | o, h += n;
//                     h > 0;
//                     t[i + d] = 255 & s, d += p, s /= 256, h -= 8
//                   );
//                   t[i + d - p] |= 128 * m;
//                 });
//             },
//             {},
//           ],
//           46: [
//             function (t, e, i) {
//               "function" == typeof Object.create
//                 ? (e.exports = function (t, e) {
//                     e &&
//                       ((t.super_ = e),
//                       (t.prototype = Object.create(e.prototype, {
//                         constructor: {
//                           value: t,
//                           enumerable: !1,
//                           writable: !0,
//                           configurable: !0,
//                         },
//                       })));
//                   })
//                 : (e.exports = function (t, e) {
//                     if (e) {
//                       t.super_ = e;
//                       var i = function () {};
//                       (i.prototype = e.prototype),
//                         (t.prototype = new i()),
//                         (t.prototype.constructor = t);
//                     }
//                   });
//             },
//             {},
//           ],
//           47: [
//             function (t, e, i) {
//               var r = t("has-tostringtag/shams")(),
//                 n = t("call-bind/callBound")("Object.prototype.toString"),
//                 a = function (t) {
//                   return (
//                     !(
//                       r &&
//                       t &&
//                       "object" == typeof t &&
//                       Symbol.toStringTag in t
//                     ) && "[object Arguments]" === n(t)
//                   );
//                 },
//                 s = function (t) {
//                   return (
//                     !!a(t) ||
//                     (null !== t &&
//                       "object" == typeof t &&
//                       "number" == typeof t.length &&
//                       t.length >= 0 &&
//                       "[object Array]" !== n(t) &&
//                       "[object Function]" === n(t.callee))
//                   );
//                 },
//                 o = (function () {
//                   return a(arguments);
//                 })();
//               (a.isLegacyArguments = s), (e.exports = o ? a : s);
//             },
//             { "call-bind/callBound": 33, "has-tostringtag/shams": 43 },
//           ],
//           48: [
//             function (t, e, i) {
//               var r,
//                 n,
//                 a = Function.prototype.toString,
//                 s =
//                   "object" == typeof Reflect &&
//                   null !== Reflect &&
//                   Reflect.apply;
//               if (
//                 "function" == typeof s &&
//                 "function" == typeof Object.defineProperty
//               )
//                 try {
//                   (r = Object.defineProperty({}, "length", {
//                     get: function () {
//                       throw n;
//                     },
//                   })),
//                     (n = {}),
//                     s(
//                       function () {
//                         throw 42;
//                       },
//                       null,
//                       r
//                     );
//                 } catch (t) {
//                   t !== n && (s = null);
//                 }
//               else s = null;
//               var o = /^\s*class\b/,
//                 l = function (t) {
//                   try {
//                     var e = a.call(t);
//                     return o.test(e);
//                   } catch (t) {
//                     return !1;
//                   }
//                 },
//                 h = function (t) {
//                   try {
//                     return !l(t) && (a.call(t), !0);
//                   } catch (t) {
//                     return !1;
//                   }
//                 },
//                 u = Object.prototype.toString,
//                 f = "[object Object]",
//                 c = "[object Function]",
//                 d = "[object GeneratorFunction]",
//                 p = "[object HTMLAllCollection]",
//                 m = "[object HTML document.all class]",
//                 g = "[object HTMLCollection]",
//                 _ = "function" == typeof Symbol && !!Symbol.toStringTag,
//                 b = !(0 in [,]),
//                 y = function () {
//                   return !1;
//                 };
//               if ("object" == typeof document) {
//                 var v = document.all;
//                 u.call(v) === u.call(document.all) &&
//                   (y = function (t) {
//                     if ((b || !t) && (void 0 === t || "object" == typeof t))
//                       try {
//                         var e = u.call(t);
//                         return (
//                           (e === p || e === m || e === g || e === f) &&
//                           null == t("")
//                         );
//                       } catch (t) {}
//                     return !1;
//                   });
//               }
//               e.exports = s
//                 ? function (t) {
//                     if (y(t)) return !0;
//                     if (!t || ("function" != typeof t && "object" != typeof t))
//                       return !1;
//                     try {
//                       s(t, null, r);
//                     } catch (t) {
//                       if (t !== n) return !1;
//                     }
//                     return !l(t) && h(t);
//                   }
//                 : function (t) {
//                     if (y(t)) return !0;
//                     if (!t || ("function" != typeof t && "object" != typeof t))
//                       return !1;
//                     if (_) return h(t);
//                     if (l(t)) return !1;
//                     var e = u.call(t);
//                     return (
//                       !(e !== c && e !== d && !/^\[object HTML/.test(e)) && h(t)
//                     );
//                   };
//             },
//             {},
//           ],
//           49: [
//             function (t, e, i) {
//               var r,
//                 n = Object.prototype.toString,
//                 a = Function.prototype.toString,
//                 s = /^\s*(?:function)?\*/,
//                 o = t("has-tostringtag/shams")(),
//                 l = Object.getPrototypeOf,
//                 h = function () {
//                   if (!o) return !1;
//                   try {
//                     return Function("return function*() {}")();
//                   } catch (t) {}
//                 };
//               e.exports = function (t) {
//                 if ("function" != typeof t) return !1;
//                 if (s.test(a.call(t))) return !0;
//                 if (!o) return "[object GeneratorFunction]" === n.call(t);
//                 if (!l) return !1;
//                 if (void 0 === r) {
//                   var e = h();
//                   r = !!e && l(e);
//                 }
//                 return l(t) === r;
//               };
//             },
//             { "has-tostringtag/shams": 43 },
//           ],
//           50: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   var r = t("for-each"),
//                     n = t("available-typed-arrays"),
//                     a = t("call-bind/callBound"),
//                     s = a("Object.prototype.toString"),
//                     o = t("has-tostringtag/shams")(),
//                     l = t("gopd"),
//                     h = "undefined" == typeof globalThis ? i : globalThis,
//                     u = n(),
//                     f =
//                       a("Array.prototype.indexOf", !0) ||
//                       function (t, e) {
//                         for (var i = 0; i < t.length; i += 1)
//                           if (t[i] === e) return i;
//                         return -1;
//                       },
//                     c = a("String.prototype.slice"),
//                     d = {},
//                     p = Object.getPrototypeOf;
//                   o &&
//                     l &&
//                     p &&
//                     r(u, function (t) {
//                       var e = new h[t]();
//                       if (Symbol.toStringTag in e) {
//                         var i = p(e),
//                           r = l(i, Symbol.toStringTag);
//                         r || (r = l(p(i), Symbol.toStringTag)), (d[t] = r.get);
//                       }
//                     });
//                   var m = function (t) {
//                     var e = !1;
//                     return (
//                       r(d, function (i, r) {
//                         if (!e)
//                           try {
//                             e = i.call(t) === r;
//                           } catch (t) {}
//                       }),
//                       e
//                     );
//                   };
//                   e.exports = function (t) {
//                     return (
//                       !!t &&
//                       "object" == typeof t &&
//                       (o && Symbol.toStringTag in t
//                         ? !!l && m(t)
//                         : f(u, c(s(t), 8, -1)) > -1)
//                     );
//                   };
//                 }).call(this);
//               }).call(
//                 this,
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             {
//               "available-typed-arrays": 27,
//               "call-bind/callBound": 33,
//               "for-each": 36,
//               gopd: 40,
//               "has-tostringtag/shams": 43,
//             },
//           ],
//           51: [
//             function (t, e, i) {
//               var r = Object.getOwnPropertySymbols,
//                 n = Object.prototype.hasOwnProperty,
//                 a = Object.prototype.propertyIsEnumerable;
//               function s(t) {
//                 if (null == t)
//                   throw TypeError(
//                     "Object.assign cannot be called with null or undefined"
//                   );
//                 return Object(t);
//               }
//               function o() {
//                 try {
//                   if (!Object.assign) return !1;
//                   var t = new String("abc");
//                   if (((t[5] = "de"), "5" === Object.getOwnPropertyNames(t)[0]))
//                     return !1;
//                   for (var e = {}, i = 0; i < 10; i++)
//                     e["_" + String.fromCharCode(i)] = i;
//                   var r = Object.getOwnPropertyNames(e).map(function (t) {
//                     return e[t];
//                   });
//                   if ("0123456789" !== r.join("")) return !1;
//                   var n = {};
//                   return (
//                     "abcdefghijklmnopqrst".split("").forEach(function (t) {
//                       n[t] = t;
//                     }),
//                     "abcdefghijklmnopqrst" ===
//                       Object.keys(Object.assign({}, n)).join("")
//                   );
//                 } catch (t) {
//                   return !1;
//                 }
//               }
//               e.exports = o()
//                 ? Object.assign
//                 : function (t, e) {
//                     for (var i, o, l = s(t), h = 1; h < arguments.length; h++) {
//                       for (var u in (i = Object(arguments[h])))
//                         n.call(i, u) && (l[u] = i[u]);
//                       if (r) {
//                         o = r(i);
//                         for (var f = 0; f < o.length; f++)
//                           a.call(i, o[f]) && (l[o[f]] = i[o[f]]);
//                       }
//                     }
//                     return l;
//                   };
//             },
//             {},
//           ],
//           52: [
//             function (t, e, i) {
//               var r =
//                 "undefined" != typeof Uint8Array &&
//                 "undefined" != typeof Uint16Array &&
//                 "undefined" != typeof Int32Array;
//               function n(t, e) {
//                 return Object.prototype.hasOwnProperty.call(t, e);
//               }
//               (i.assign = function (t) {
//                 for (
//                   var e = Array.prototype.slice.call(arguments, 1);
//                   e.length;

//                 ) {
//                   var i = e.shift();
//                   if (i) {
//                     if ("object" != typeof i)
//                       throw TypeError(i + "must be non-object");
//                     for (var r in i) n(i, r) && (t[r] = i[r]);
//                   }
//                 }
//                 return t;
//               }),
//                 (i.shrinkBuf = function (t, e) {
//                   return t.length === e
//                     ? t
//                     : t.subarray
//                     ? t.subarray(0, e)
//                     : ((t.length = e), t);
//                 });
//               var a = {
//                   arraySet: function (t, e, i, r, n) {
//                     if (e.subarray && t.subarray)
//                       t.set(e.subarray(i, i + r), n);
//                     else for (var a = 0; a < r; a++) t[n + a] = e[i + a];
//                   },
//                   flattenChunks: function (t) {
//                     var e, i, r, n, a, s;
//                     for (r = 0, e = 0, i = t.length; e < i; e++)
//                       r += t[e].length;
//                     for (
//                       s = new Uint8Array(r), n = 0, e = 0, i = t.length;
//                       e < i;
//                       e++
//                     )
//                       (a = t[e]), s.set(a, n), (n += a.length);
//                     return s;
//                   },
//                 },
//                 s = {
//                   arraySet: function (t, e, i, r, n) {
//                     for (var a = 0; a < r; a++) t[n + a] = e[i + a];
//                   },
//                   flattenChunks: function (t) {
//                     return [].concat.apply([], t);
//                   },
//                 };
//               (i.setTyped = function (t) {
//                 t
//                   ? ((i.Buf8 = Uint8Array),
//                     (i.Buf16 = Uint16Array),
//                     (i.Buf32 = Int32Array),
//                     i.assign(i, a))
//                   : ((i.Buf8 = Array),
//                     (i.Buf16 = Array),
//                     (i.Buf32 = Array),
//                     i.assign(i, s));
//               }),
//                 i.setTyped(r);
//             },
//             {},
//           ],
//           53: [
//             function (t, e, i) {
//               function r(t, e, i, r) {
//                 for (
//                   var n = 65535 & t, a = (t >>> 16) & 65535, s = 0;
//                   0 !== i;

//                 ) {
//                   i -= s = i > 2e3 ? 2e3 : i;
//                   do a = (a + (n = (n + e[r++]) | 0)) | 0;
//                   while (--s);
//                   (n %= 65521), (a %= 65521);
//                 }
//                 return n | (a << 16);
//               }
//               e.exports = r;
//             },
//             {},
//           ],
//           54: [
//             function (t, e, i) {
//               e.exports = {
//                 Z_NO_FLUSH: 0,
//                 Z_PARTIAL_FLUSH: 1,
//                 Z_SYNC_FLUSH: 2,
//                 Z_FULL_FLUSH: 3,
//                 Z_FINISH: 4,
//                 Z_BLOCK: 5,
//                 Z_TREES: 6,
//                 Z_OK: 0,
//                 Z_STREAM_END: 1,
//                 Z_NEED_DICT: 2,
//                 Z_ERRNO: -1,
//                 Z_STREAM_ERROR: -2,
//                 Z_DATA_ERROR: -3,
//                 Z_BUF_ERROR: -5,
//                 Z_NO_COMPRESSION: 0,
//                 Z_BEST_SPEED: 1,
//                 Z_BEST_COMPRESSION: 9,
//                 Z_DEFAULT_COMPRESSION: -1,
//                 Z_FILTERED: 1,
//                 Z_HUFFMAN_ONLY: 2,
//                 Z_RLE: 3,
//                 Z_FIXED: 4,
//                 Z_DEFAULT_STRATEGY: 0,
//                 Z_BINARY: 0,
//                 Z_TEXT: 1,
//                 Z_UNKNOWN: 2,
//                 Z_DEFLATED: 8,
//               };
//             },
//             {},
//           ],
//           55: [
//             function (t, e, i) {
//               var r = (function () {
//                 for (var t, e = [], i = 0; i < 256; i++) {
//                   t = i;
//                   for (var r = 0; r < 8; r++)
//                     t = 1 & t ? 3988292384 ^ (t >>> 1) : t >>> 1;
//                   e[i] = t;
//                 }
//                 return e;
//               })();
//               function n(t, e, i, n) {
//                 var a = r,
//                   s = n + i;
//                 t ^= -1;
//                 for (var o = n; o < s; o++) t = (t >>> 8) ^ a[255 & (t ^ e[o])];
//                 return ~t;
//               }
//               e.exports = n;
//             },
//             {},
//           ],
//           56: [
//             function (t, e, i) {
//               var r,
//                 n = t("../utils/common"),
//                 a = t("./trees"),
//                 s = t("./adler32"),
//                 o = t("./crc32"),
//                 l = t("./messages"),
//                 h = 0,
//                 u = 1,
//                 f = 3,
//                 c = 4,
//                 d = 5,
//                 p = 0,
//                 m = 1,
//                 g = -2,
//                 _ = -3,
//                 b = -5,
//                 y = -1,
//                 v = 1,
//                 w = 2,
//                 x = 3,
//                 E = 4,
//                 k = 0,
//                 M = 2,
//                 S = 8,
//                 A = 9,
//                 I = 15,
//                 T = 8,
//                 B = 286,
//                 R = 30,
//                 P = 19,
//                 O = 573,
//                 C = 15,
//                 z = 3,
//                 L = 258,
//                 U = 262,
//                 D = 32,
//                 N = 42,
//                 j = 69,
//                 F = 73,
//                 G = 91,
//                 Z = 103,
//                 H = 113,
//                 W = 666,
//                 q = 1,
//                 Y = 2,
//                 V = 3,
//                 $ = 4,
//                 K = 3;
//               function X(t, e) {
//                 return (t.msg = l[e]), e;
//               }
//               function J(t) {
//                 return (t << 1) - (t > 4 ? 9 : 0);
//               }
//               function Q(t) {
//                 for (var e = t.length; --e >= 0; ) t[e] = 0;
//               }
//               function tt(t) {
//                 var e = t.state,
//                   i = e.pending;
//                 i > t.avail_out && (i = t.avail_out),
//                   0 !== i &&
//                     (n.arraySet(
//                       t.output,
//                       e.pending_buf,
//                       e.pending_out,
//                       i,
//                       t.next_out
//                     ),
//                     (t.next_out += i),
//                     (e.pending_out += i),
//                     (t.total_out += i),
//                     (t.avail_out -= i),
//                     (e.pending -= i),
//                     0 === e.pending && (e.pending_out = 0));
//               }
//               function te(t, e) {
//                 a._tr_flush_block(
//                   t,
//                   t.block_start >= 0 ? t.block_start : -1,
//                   t.strstart - t.block_start,
//                   e
//                 ),
//                   (t.block_start = t.strstart),
//                   tt(t.strm);
//               }
//               function ti(t, e) {
//                 t.pending_buf[t.pending++] = e;
//               }
//               function tr(t, e) {
//                 (t.pending_buf[t.pending++] = (e >>> 8) & 255),
//                   (t.pending_buf[t.pending++] = 255 & e);
//               }
//               function tn(t, e, i, r) {
//                 var a = t.avail_in;
//                 return (
//                   a > r && (a = r),
//                   0 === a
//                     ? 0
//                     : ((t.avail_in -= a),
//                       n.arraySet(e, t.input, t.next_in, a, i),
//                       1 === t.state.wrap
//                         ? (t.adler = s(t.adler, e, a, i))
//                         : 2 === t.state.wrap && (t.adler = o(t.adler, e, a, i)),
//                       (t.next_in += a),
//                       (t.total_in += a),
//                       a)
//                 );
//               }
//               function ta(t, e) {
//                 var i,
//                   r,
//                   n = t.max_chain_length,
//                   a = t.strstart,
//                   s = t.prev_length,
//                   o = t.nice_match,
//                   l =
//                     t.strstart > t.w_size - U ? t.strstart - (t.w_size - U) : 0,
//                   h = t.window,
//                   u = t.w_mask,
//                   f = t.prev,
//                   c = t.strstart + L,
//                   d = h[a + s - 1],
//                   p = h[a + s];
//                 t.prev_length >= t.good_match && (n >>= 2),
//                   o > t.lookahead && (o = t.lookahead);
//                 do
//                   if (
//                     h[(i = e) + s] === p &&
//                     h[i + s - 1] === d &&
//                     h[i] === h[a] &&
//                     h[++i] === h[a + 1]
//                   ) {
//                     (a += 2), i++;
//                     do;
//                     while (
//                       h[++a] === h[++i] &&
//                       h[++a] === h[++i] &&
//                       h[++a] === h[++i] &&
//                       h[++a] === h[++i] &&
//                       h[++a] === h[++i] &&
//                       h[++a] === h[++i] &&
//                       h[++a] === h[++i] &&
//                       h[++a] === h[++i] &&
//                       a < c
//                     );
//                     if (((r = L - (c - a)), (a = c - L), r > s)) {
//                       if (((t.match_start = e), (s = r), r >= o)) break;
//                       (d = h[a + s - 1]), (p = h[a + s]);
//                     }
//                   }
//                 while ((e = f[e & u]) > l && 0 != --n);
//                 return s <= t.lookahead ? s : t.lookahead;
//               }
//               function ts(t) {
//                 var e,
//                   i,
//                   r,
//                   a,
//                   s,
//                   o = t.w_size;
//                 do {
//                   if (
//                     ((a = t.window_size - t.lookahead - t.strstart),
//                     t.strstart >= o + (o - U))
//                   ) {
//                     n.arraySet(t.window, t.window, o, o, 0),
//                       (t.match_start -= o),
//                       (t.strstart -= o),
//                       (t.block_start -= o),
//                       (e = i = t.hash_size);
//                     do (r = t.head[--e]), (t.head[e] = r >= o ? r - o : 0);
//                     while (--i);
//                     e = i = o;
//                     do (r = t.prev[--e]), (t.prev[e] = r >= o ? r - o : 0);
//                     while (--i);
//                     a += o;
//                   }
//                   if (0 === t.strm.avail_in) break;
//                   if (
//                     ((i = tn(t.strm, t.window, t.strstart + t.lookahead, a)),
//                     (t.lookahead += i),
//                     t.lookahead + t.insert >= z)
//                   )
//                     for (
//                       s = t.strstart - t.insert,
//                         t.ins_h = t.window[s],
//                         t.ins_h =
//                           ((t.ins_h << t.hash_shift) ^ t.window[s + 1]) &
//                           t.hash_mask;
//                       t.insert &&
//                       ((t.ins_h =
//                         ((t.ins_h << t.hash_shift) ^ t.window[s + z - 1]) &
//                         t.hash_mask),
//                       (t.prev[s & t.w_mask] = t.head[t.ins_h]),
//                       (t.head[t.ins_h] = s),
//                       s++,
//                       t.insert--,
//                       !(t.lookahead + t.insert < z));

//                     );
//                 } while (t.lookahead < U && 0 !== t.strm.avail_in);
//               }
//               function to(t, e) {
//                 for (var i, r; ; ) {
//                   if (t.lookahead < U) {
//                     if ((ts(t), t.lookahead < U && e === h)) return q;
//                     if (0 === t.lookahead) break;
//                   }
//                   if (
//                     ((i = 0),
//                     t.lookahead >= z &&
//                       ((t.ins_h =
//                         ((t.ins_h << t.hash_shift) ^
//                           t.window[t.strstart + z - 1]) &
//                         t.hash_mask),
//                       (i = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                       (t.head[t.ins_h] = t.strstart)),
//                     0 !== i &&
//                       t.strstart - i <= t.w_size - U &&
//                       (t.match_length = ta(t, i)),
//                     t.match_length >= z)
//                   ) {
//                     if (
//                       ((r = a._tr_tally(
//                         t,
//                         t.strstart - t.match_start,
//                         t.match_length - z
//                       )),
//                       (t.lookahead -= t.match_length),
//                       t.match_length <= t.max_lazy_match && t.lookahead >= z)
//                     ) {
//                       t.match_length--;
//                       do
//                         t.strstart++,
//                           (t.ins_h =
//                             ((t.ins_h << t.hash_shift) ^
//                               t.window[t.strstart + z - 1]) &
//                             t.hash_mask),
//                           (i = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                           (t.head[t.ins_h] = t.strstart);
//                       while (0 != --t.match_length);
//                       t.strstart++;
//                     } else
//                       (t.strstart += t.match_length),
//                         (t.match_length = 0),
//                         (t.ins_h = t.window[t.strstart]),
//                         (t.ins_h =
//                           ((t.ins_h << t.hash_shift) ^
//                             t.window[t.strstart + 1]) &
//                           t.hash_mask);
//                   } else
//                     (r = a._tr_tally(t, 0, t.window[t.strstart])),
//                       t.lookahead--,
//                       t.strstart++;
//                   if (r && (te(t, !1), 0 === t.strm.avail_out)) return q;
//                 }
//                 return (
//                   (t.insert = t.strstart < z - 1 ? t.strstart : z - 1),
//                   e === c
//                     ? (te(t, !0), 0 === t.strm.avail_out ? V : $)
//                     : t.last_lit && (te(t, !1), 0 === t.strm.avail_out)
//                     ? q
//                     : Y
//                 );
//               }
//               function tl(t, e) {
//                 for (var i, r, n; ; ) {
//                   if (t.lookahead < U) {
//                     if ((ts(t), t.lookahead < U && e === h)) return q;
//                     if (0 === t.lookahead) break;
//                   }
//                   if (
//                     ((i = 0),
//                     t.lookahead >= z &&
//                       ((t.ins_h =
//                         ((t.ins_h << t.hash_shift) ^
//                           t.window[t.strstart + z - 1]) &
//                         t.hash_mask),
//                       (i = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                       (t.head[t.ins_h] = t.strstart)),
//                     (t.prev_length = t.match_length),
//                     (t.prev_match = t.match_start),
//                     (t.match_length = z - 1),
//                     0 !== i &&
//                       t.prev_length < t.max_lazy_match &&
//                       t.strstart - i <= t.w_size - U &&
//                       ((t.match_length = ta(t, i)),
//                       t.match_length <= 5 &&
//                         (t.strategy === v ||
//                           (t.match_length === z &&
//                             t.strstart - t.match_start > 4096)) &&
//                         (t.match_length = z - 1)),
//                     t.prev_length >= z && t.match_length <= t.prev_length)
//                   ) {
//                     (n = t.strstart + t.lookahead - z),
//                       (r = a._tr_tally(
//                         t,
//                         t.strstart - 1 - t.prev_match,
//                         t.prev_length - z
//                       )),
//                       (t.lookahead -= t.prev_length - 1),
//                       (t.prev_length -= 2);
//                     do
//                       ++t.strstart <= n &&
//                         ((t.ins_h =
//                           ((t.ins_h << t.hash_shift) ^
//                             t.window[t.strstart + z - 1]) &
//                           t.hash_mask),
//                         (i = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                         (t.head[t.ins_h] = t.strstart));
//                     while (0 != --t.prev_length);
//                     if (
//                       ((t.match_available = 0),
//                       (t.match_length = z - 1),
//                       t.strstart++,
//                       r && (te(t, !1), 0 === t.strm.avail_out))
//                     )
//                       return q;
//                   } else if (t.match_available) {
//                     if (
//                       ((r = a._tr_tally(t, 0, t.window[t.strstart - 1])) &&
//                         te(t, !1),
//                       t.strstart++,
//                       t.lookahead--,
//                       0 === t.strm.avail_out)
//                     )
//                       return q;
//                   } else (t.match_available = 1), t.strstart++, t.lookahead--;
//                 }
//                 return (
//                   t.match_available &&
//                     ((r = a._tr_tally(t, 0, t.window[t.strstart - 1])),
//                     (t.match_available = 0)),
//                   (t.insert = t.strstart < z - 1 ? t.strstart : z - 1),
//                   e === c
//                     ? (te(t, !0), 0 === t.strm.avail_out ? V : $)
//                     : t.last_lit && (te(t, !1), 0 === t.strm.avail_out)
//                     ? q
//                     : Y
//                 );
//               }
//               function th(t, e) {
//                 for (var i, r, n, s, o = t.window; ; ) {
//                   if (t.lookahead <= L) {
//                     if ((ts(t), t.lookahead <= L && e === h)) return q;
//                     if (0 === t.lookahead) break;
//                   }
//                   if (
//                     ((t.match_length = 0),
//                     t.lookahead >= z &&
//                       t.strstart > 0 &&
//                       (r = o[(n = t.strstart - 1)]) === o[++n] &&
//                       r === o[++n] &&
//                       r === o[++n])
//                   ) {
//                     s = t.strstart + L;
//                     do;
//                     while (
//                       r === o[++n] &&
//                       r === o[++n] &&
//                       r === o[++n] &&
//                       r === o[++n] &&
//                       r === o[++n] &&
//                       r === o[++n] &&
//                       r === o[++n] &&
//                       r === o[++n] &&
//                       n < s
//                     );
//                     (t.match_length = L - (s - n)),
//                       t.match_length > t.lookahead &&
//                         (t.match_length = t.lookahead);
//                   }
//                   if (
//                     (t.match_length >= z
//                       ? ((i = a._tr_tally(t, 1, t.match_length - z)),
//                         (t.lookahead -= t.match_length),
//                         (t.strstart += t.match_length),
//                         (t.match_length = 0))
//                       : ((i = a._tr_tally(t, 0, t.window[t.strstart])),
//                         t.lookahead--,
//                         t.strstart++),
//                     i && (te(t, !1), 0 === t.strm.avail_out))
//                   )
//                     return q;
//                 }
//                 return (
//                   (t.insert = 0),
//                   e === c
//                     ? (te(t, !0), 0 === t.strm.avail_out ? V : $)
//                     : t.last_lit && (te(t, !1), 0 === t.strm.avail_out)
//                     ? q
//                     : Y
//                 );
//               }
//               function tu(t, e) {
//                 for (var i; ; ) {
//                   if (0 === t.lookahead && (ts(t), 0 === t.lookahead)) {
//                     if (e === h) return q;
//                     break;
//                   }
//                   if (
//                     ((t.match_length = 0),
//                     (i = a._tr_tally(t, 0, t.window[t.strstart])),
//                     t.lookahead--,
//                     t.strstart++,
//                     i && (te(t, !1), 0 === t.strm.avail_out))
//                   )
//                     return q;
//                 }
//                 return (
//                   (t.insert = 0),
//                   e === c
//                     ? (te(t, !0), 0 === t.strm.avail_out ? V : $)
//                     : t.last_lit && (te(t, !1), 0 === t.strm.avail_out)
//                     ? q
//                     : Y
//                 );
//               }
//               function tf(t, e, i, r, n) {
//                 (this.good_length = t),
//                   (this.max_lazy = e),
//                   (this.nice_length = i),
//                   (this.max_chain = r),
//                   (this.func = n);
//               }
//               function tc(t) {
//                 (t.window_size = 2 * t.w_size),
//                   Q(t.head),
//                   (t.max_lazy_match = r[t.level].max_lazy),
//                   (t.good_match = r[t.level].good_length),
//                   (t.nice_match = r[t.level].nice_length),
//                   (t.max_chain_length = r[t.level].max_chain),
//                   (t.strstart = 0),
//                   (t.block_start = 0),
//                   (t.lookahead = 0),
//                   (t.insert = 0),
//                   (t.match_length = t.prev_length = z - 1),
//                   (t.match_available = 0),
//                   (t.ins_h = 0);
//               }
//               function td() {
//                 (this.strm = null),
//                   (this.status = 0),
//                   (this.pending_buf = null),
//                   (this.pending_buf_size = 0),
//                   (this.pending_out = 0),
//                   (this.pending = 0),
//                   (this.wrap = 0),
//                   (this.gzhead = null),
//                   (this.gzindex = 0),
//                   (this.method = S),
//                   (this.last_flush = -1),
//                   (this.w_size = 0),
//                   (this.w_bits = 0),
//                   (this.w_mask = 0),
//                   (this.window = null),
//                   (this.window_size = 0),
//                   (this.prev = null),
//                   (this.head = null),
//                   (this.ins_h = 0),
//                   (this.hash_size = 0),
//                   (this.hash_bits = 0),
//                   (this.hash_mask = 0),
//                   (this.hash_shift = 0),
//                   (this.block_start = 0),
//                   (this.match_length = 0),
//                   (this.prev_match = 0),
//                   (this.match_available = 0),
//                   (this.strstart = 0),
//                   (this.match_start = 0),
//                   (this.lookahead = 0),
//                   (this.prev_length = 0),
//                   (this.max_chain_length = 0),
//                   (this.max_lazy_match = 0),
//                   (this.level = 0),
//                   (this.strategy = 0),
//                   (this.good_match = 0),
//                   (this.nice_match = 0),
//                   (this.dyn_ltree = new n.Buf16(2 * O)),
//                   (this.dyn_dtree = new n.Buf16(2 * (2 * R + 1))),
//                   (this.bl_tree = new n.Buf16(2 * (2 * P + 1))),
//                   Q(this.dyn_ltree),
//                   Q(this.dyn_dtree),
//                   Q(this.bl_tree),
//                   (this.l_desc = null),
//                   (this.d_desc = null),
//                   (this.bl_desc = null),
//                   (this.bl_count = new n.Buf16(C + 1)),
//                   (this.heap = new n.Buf16(2 * B + 1)),
//                   Q(this.heap),
//                   (this.heap_len = 0),
//                   (this.heap_max = 0),
//                   (this.depth = new n.Buf16(2 * B + 1)),
//                   Q(this.depth),
//                   (this.l_buf = 0),
//                   (this.lit_bufsize = 0),
//                   (this.last_lit = 0),
//                   (this.d_buf = 0),
//                   (this.opt_len = 0),
//                   (this.static_len = 0),
//                   (this.matches = 0),
//                   (this.insert = 0),
//                   (this.bi_buf = 0),
//                   (this.bi_valid = 0);
//               }
//               function tp(t) {
//                 var e;
//                 return t && t.state
//                   ? ((t.total_in = t.total_out = 0),
//                     (t.data_type = M),
//                     ((e = t.state).pending = 0),
//                     (e.pending_out = 0),
//                     e.wrap < 0 && (e.wrap = -e.wrap),
//                     (e.status = e.wrap ? N : H),
//                     (t.adler = 2 === e.wrap ? 0 : 1),
//                     (e.last_flush = h),
//                     a._tr_init(e),
//                     p)
//                   : X(t, g);
//               }
//               function tm(t) {
//                 var e = tp(t);
//                 return e === p && tc(t.state), e;
//               }
//               function tg(t, e) {
//                 return t && t.state
//                   ? 2 !== t.state.wrap
//                     ? g
//                     : ((t.state.gzhead = e), p)
//                   : g;
//               }
//               function t_(t, e, i, r, a, s) {
//                 if (!t) return g;
//                 var o = 1;
//                 if (
//                   (e === y && (e = 6),
//                   r < 0 ? ((o = 0), (r = -r)) : r > 15 && ((o = 2), (r -= 16)),
//                   a < 1 ||
//                     a > A ||
//                     i !== S ||
//                     r < 8 ||
//                     r > 15 ||
//                     e < 0 ||
//                     e > 9 ||
//                     s < 0 ||
//                     s > E)
//                 )
//                   return X(t, g);
//                 8 === r && (r = 9);
//                 var l = new td();
//                 return (
//                   (t.state = l),
//                   (l.strm = t),
//                   (l.wrap = o),
//                   (l.gzhead = null),
//                   (l.w_bits = r),
//                   (l.w_size = 1 << l.w_bits),
//                   (l.w_mask = l.w_size - 1),
//                   (l.hash_bits = a + 7),
//                   (l.hash_size = 1 << l.hash_bits),
//                   (l.hash_mask = l.hash_size - 1),
//                   (l.hash_shift = ~~((l.hash_bits + z - 1) / z)),
//                   (l.window = new n.Buf8(2 * l.w_size)),
//                   (l.head = new n.Buf16(l.hash_size)),
//                   (l.prev = new n.Buf16(l.w_size)),
//                   (l.lit_bufsize = 1 << (a + 6)),
//                   (l.pending_buf_size = 4 * l.lit_bufsize),
//                   (l.pending_buf = new n.Buf8(l.pending_buf_size)),
//                   (l.d_buf = 1 * l.lit_bufsize),
//                   (l.l_buf = 3 * l.lit_bufsize),
//                   (l.level = e),
//                   (l.strategy = s),
//                   (l.method = i),
//                   tm(t)
//                 );
//               }
//               function tb(t, e) {
//                 return t_(t, e, S, I, T, k);
//               }
//               function ty(t, e) {
//                 var i, n, s, l;
//                 if (!t || !t.state || e > d || e < 0) return t ? X(t, g) : g;
//                 if (
//                   ((n = t.state),
//                   !t.output ||
//                     (!t.input && 0 !== t.avail_in) ||
//                     (n.status === W && e !== c))
//                 )
//                   return X(t, 0 === t.avail_out ? b : g);
//                 if (
//                   ((n.strm = t),
//                   (i = n.last_flush),
//                   (n.last_flush = e),
//                   n.status === N)
//                 ) {
//                   if (2 === n.wrap)
//                     (t.adler = 0),
//                       ti(n, 31),
//                       ti(n, 139),
//                       ti(n, 8),
//                       n.gzhead
//                         ? (ti(
//                             n,
//                             (n.gzhead.text ? 1 : 0) +
//                               (n.gzhead.hcrc ? 2 : 0) +
//                               (n.gzhead.extra ? 4 : 0) +
//                               (n.gzhead.name ? 8 : 0) +
//                               (n.gzhead.comment ? 16 : 0)
//                           ),
//                           ti(n, 255 & n.gzhead.time),
//                           ti(n, (n.gzhead.time >> 8) & 255),
//                           ti(n, (n.gzhead.time >> 16) & 255),
//                           ti(n, (n.gzhead.time >> 24) & 255),
//                           ti(
//                             n,
//                             9 === n.level
//                               ? 2
//                               : n.strategy >= w || n.level < 2
//                               ? 4
//                               : 0
//                           ),
//                           ti(n, 255 & n.gzhead.os),
//                           n.gzhead.extra &&
//                             n.gzhead.extra.length &&
//                             (ti(n, 255 & n.gzhead.extra.length),
//                             ti(n, (n.gzhead.extra.length >> 8) & 255)),
//                           n.gzhead.hcrc &&
//                             (t.adler = o(t.adler, n.pending_buf, n.pending, 0)),
//                           (n.gzindex = 0),
//                           (n.status = j))
//                         : (ti(n, 0),
//                           ti(n, 0),
//                           ti(n, 0),
//                           ti(n, 0),
//                           ti(n, 0),
//                           ti(
//                             n,
//                             9 === n.level
//                               ? 2
//                               : n.strategy >= w || n.level < 2
//                               ? 4
//                               : 0
//                           ),
//                           ti(n, K),
//                           (n.status = H));
//                   else {
//                     var _ = (S + ((n.w_bits - 8) << 4)) << 8;
//                     (_ |=
//                       (n.strategy >= w || n.level < 2
//                         ? 0
//                         : n.level < 6
//                         ? 1
//                         : 6 === n.level
//                         ? 2
//                         : 3) << 6),
//                       0 !== n.strstart && (_ |= D),
//                       (_ += 31 - (_ % 31)),
//                       (n.status = H),
//                       tr(n, _),
//                       0 !== n.strstart &&
//                         (tr(n, t.adler >>> 16), tr(n, 65535 & t.adler)),
//                       (t.adler = 1);
//                   }
//                 }
//                 if (n.status === j) {
//                   if (n.gzhead.extra) {
//                     for (
//                       s = n.pending;
//                       n.gzindex < (65535 & n.gzhead.extra.length) &&
//                       (n.pending !== n.pending_buf_size ||
//                         (n.gzhead.hcrc &&
//                           n.pending > s &&
//                           (t.adler = o(
//                             t.adler,
//                             n.pending_buf,
//                             n.pending - s,
//                             s
//                           )),
//                         tt(t),
//                         (s = n.pending),
//                         n.pending !== n.pending_buf_size));

//                     )
//                       ti(n, 255 & n.gzhead.extra[n.gzindex]), n.gzindex++;
//                     n.gzhead.hcrc &&
//                       n.pending > s &&
//                       (t.adler = o(t.adler, n.pending_buf, n.pending - s, s)),
//                       n.gzindex === n.gzhead.extra.length &&
//                         ((n.gzindex = 0), (n.status = F));
//                   } else n.status = F;
//                 }
//                 if (n.status === F) {
//                   if (n.gzhead.name) {
//                     s = n.pending;
//                     do {
//                       if (
//                         n.pending === n.pending_buf_size &&
//                         (n.gzhead.hcrc &&
//                           n.pending > s &&
//                           (t.adler = o(
//                             t.adler,
//                             n.pending_buf,
//                             n.pending - s,
//                             s
//                           )),
//                         tt(t),
//                         (s = n.pending),
//                         n.pending === n.pending_buf_size)
//                       ) {
//                         l = 1;
//                         break;
//                       }
//                       (l =
//                         n.gzindex < n.gzhead.name.length
//                           ? 255 & n.gzhead.name.charCodeAt(n.gzindex++)
//                           : 0),
//                         ti(n, l);
//                     } while (0 !== l);
//                     n.gzhead.hcrc &&
//                       n.pending > s &&
//                       (t.adler = o(t.adler, n.pending_buf, n.pending - s, s)),
//                       0 === l && ((n.gzindex = 0), (n.status = G));
//                   } else n.status = G;
//                 }
//                 if (n.status === G) {
//                   if (n.gzhead.comment) {
//                     s = n.pending;
//                     do {
//                       if (
//                         n.pending === n.pending_buf_size &&
//                         (n.gzhead.hcrc &&
//                           n.pending > s &&
//                           (t.adler = o(
//                             t.adler,
//                             n.pending_buf,
//                             n.pending - s,
//                             s
//                           )),
//                         tt(t),
//                         (s = n.pending),
//                         n.pending === n.pending_buf_size)
//                       ) {
//                         l = 1;
//                         break;
//                       }
//                       (l =
//                         n.gzindex < n.gzhead.comment.length
//                           ? 255 & n.gzhead.comment.charCodeAt(n.gzindex++)
//                           : 0),
//                         ti(n, l);
//                     } while (0 !== l);
//                     n.gzhead.hcrc &&
//                       n.pending > s &&
//                       (t.adler = o(t.adler, n.pending_buf, n.pending - s, s)),
//                       0 === l && (n.status = Z);
//                   } else n.status = Z;
//                 }
//                 if (
//                   (n.status === Z &&
//                     (n.gzhead.hcrc
//                       ? (n.pending + 2 > n.pending_buf_size && tt(t),
//                         n.pending + 2 <= n.pending_buf_size &&
//                           (ti(n, 255 & t.adler),
//                           ti(n, (t.adler >> 8) & 255),
//                           (t.adler = 0),
//                           (n.status = H)))
//                       : (n.status = H)),
//                   0 !== n.pending)
//                 ) {
//                   if ((tt(t), 0 === t.avail_out)) return (n.last_flush = -1), p;
//                 } else if (0 === t.avail_in && J(e) <= J(i) && e !== c)
//                   return X(t, b);
//                 if (n.status === W && 0 !== t.avail_in) return X(t, b);
//                 if (
//                   0 !== t.avail_in ||
//                   0 !== n.lookahead ||
//                   (e !== h && n.status !== W)
//                 ) {
//                   var y =
//                     n.strategy === w
//                       ? tu(n, e)
//                       : n.strategy === x
//                       ? th(n, e)
//                       : r[n.level].func(n, e);
//                   if (
//                     ((y !== V && y !== $) || (n.status = W), y === q || y === V)
//                   )
//                     return 0 === t.avail_out && (n.last_flush = -1), p;
//                   if (
//                     y === Y &&
//                     (e === u
//                       ? a._tr_align(n)
//                       : e !== d &&
//                         (a._tr_stored_block(n, 0, 0, !1),
//                         e === f &&
//                           (Q(n.head),
//                           0 === n.lookahead &&
//                             ((n.strstart = 0),
//                             (n.block_start = 0),
//                             (n.insert = 0)))),
//                     tt(t),
//                     0 === t.avail_out)
//                   )
//                     return (n.last_flush = -1), p;
//                 }
//                 return e !== c
//                   ? p
//                   : n.wrap <= 0
//                   ? m
//                   : (2 === n.wrap
//                       ? (ti(n, 255 & t.adler),
//                         ti(n, (t.adler >> 8) & 255),
//                         ti(n, (t.adler >> 16) & 255),
//                         ti(n, (t.adler >> 24) & 255),
//                         ti(n, 255 & t.total_in),
//                         ti(n, (t.total_in >> 8) & 255),
//                         ti(n, (t.total_in >> 16) & 255),
//                         ti(n, (t.total_in >> 24) & 255))
//                       : (tr(n, t.adler >>> 16), tr(n, 65535 & t.adler)),
//                     tt(t),
//                     n.wrap > 0 && (n.wrap = -n.wrap),
//                     0 !== n.pending ? p : m);
//               }
//               function tv(t) {
//                 var e;
//                 return t && t.state
//                   ? (e = t.state.status) !== N &&
//                     e !== j &&
//                     e !== F &&
//                     e !== G &&
//                     e !== Z &&
//                     e !== H &&
//                     e !== W
//                     ? X(t, g)
//                     : ((t.state = null), e === H ? X(t, _) : p)
//                   : g;
//               }
//               function tw(t, e) {
//                 var i,
//                   r,
//                   a,
//                   o,
//                   l,
//                   h,
//                   u,
//                   f,
//                   c = e.length;
//                 if (
//                   !t ||
//                   !t.state ||
//                   2 === (o = (i = t.state).wrap) ||
//                   (1 === o && i.status !== N) ||
//                   i.lookahead
//                 )
//                   return g;
//                 for (
//                   1 === o && (t.adler = s(t.adler, e, c, 0)),
//                     i.wrap = 0,
//                     c >= i.w_size &&
//                       (0 === o &&
//                         (Q(i.head),
//                         (i.strstart = 0),
//                         (i.block_start = 0),
//                         (i.insert = 0)),
//                       (f = new n.Buf8(i.w_size)),
//                       n.arraySet(f, e, c - i.w_size, i.w_size, 0),
//                       (e = f),
//                       (c = i.w_size)),
//                     l = t.avail_in,
//                     h = t.next_in,
//                     u = t.input,
//                     t.avail_in = c,
//                     t.next_in = 0,
//                     t.input = e,
//                     ts(i);
//                   i.lookahead >= z;

//                 ) {
//                   (r = i.strstart), (a = i.lookahead - (z - 1));
//                   do
//                     (i.ins_h =
//                       ((i.ins_h << i.hash_shift) ^ i.window[r + z - 1]) &
//                       i.hash_mask),
//                       (i.prev[r & i.w_mask] = i.head[i.ins_h]),
//                       (i.head[i.ins_h] = r),
//                       r++;
//                   while (--a);
//                   (i.strstart = r), (i.lookahead = z - 1), ts(i);
//                 }
//                 return (
//                   (i.strstart += i.lookahead),
//                   (i.block_start = i.strstart),
//                   (i.insert = i.lookahead),
//                   (i.lookahead = 0),
//                   (i.match_length = i.prev_length = z - 1),
//                   (i.match_available = 0),
//                   (t.next_in = h),
//                   (t.input = u),
//                   (t.avail_in = l),
//                   (i.wrap = o),
//                   p
//                 );
//               }
//               (r = [
//                 new tf(0, 0, 0, 0, function (t, e) {
//                   var i = 65535;
//                   for (
//                     65535 > t.pending_buf_size - 5 &&
//                     (i = t.pending_buf_size - 5);
//                     ;

//                   ) {
//                     if (t.lookahead <= 1) {
//                       if ((ts(t), 0 === t.lookahead && e === h)) return q;
//                       if (0 === t.lookahead) break;
//                     }
//                     (t.strstart += t.lookahead), (t.lookahead = 0);
//                     var r = t.block_start + i;
//                     if (
//                       ((0 === t.strstart || t.strstart >= r) &&
//                         ((t.lookahead = t.strstart - r),
//                         (t.strstart = r),
//                         te(t, !1),
//                         0 === t.strm.avail_out)) ||
//                       (t.strstart - t.block_start >= t.w_size - U &&
//                         (te(t, !1), 0 === t.strm.avail_out))
//                     )
//                       return q;
//                   }
//                   return (
//                     (t.insert = 0),
//                     e === c
//                       ? (te(t, !0), 0 === t.strm.avail_out ? V : $)
//                       : (t.strstart > t.block_start &&
//                           (te(t, !1), t.strm.avail_out),
//                         q)
//                   );
//                 }),
//                 new tf(4, 4, 8, 4, to),
//                 new tf(4, 5, 16, 8, to),
//                 new tf(4, 6, 32, 32, to),
//                 new tf(4, 4, 16, 16, tl),
//                 new tf(8, 16, 32, 32, tl),
//                 new tf(8, 16, 128, 128, tl),
//                 new tf(8, 32, 128, 256, tl),
//                 new tf(32, 128, 258, 1024, tl),
//                 new tf(32, 258, 258, 4096, tl),
//               ]),
//                 (i.deflateInit = tb),
//                 (i.deflateInit2 = t_),
//                 (i.deflateReset = tm),
//                 (i.deflateResetKeep = tp),
//                 (i.deflateSetHeader = tg),
//                 (i.deflate = ty),
//                 (i.deflateEnd = tv),
//                 (i.deflateSetDictionary = tw),
//                 (i.deflateInfo = "pako deflate (from Nodeca project)");
//             },
//             {
//               "../utils/common": 52,
//               "./adler32": 53,
//               "./crc32": 55,
//               "./messages": 60,
//               "./trees": 61,
//             },
//           ],
//           57: [
//             function (t, e, i) {
//               var r = 30,
//                 n = 12;
//               e.exports = function (t, e) {
//                 var i,
//                   a,
//                   s,
//                   o,
//                   l,
//                   h,
//                   u,
//                   f,
//                   c,
//                   d,
//                   p,
//                   m,
//                   g,
//                   _,
//                   b,
//                   y,
//                   v,
//                   w,
//                   x,
//                   E,
//                   k,
//                   M,
//                   S,
//                   A,
//                   I;
//                 (i = t.state),
//                   (a = t.next_in),
//                   (A = t.input),
//                   (s = a + (t.avail_in - 5)),
//                   (o = t.next_out),
//                   (I = t.output),
//                   (l = o - (e - t.avail_out)),
//                   (h = o + (t.avail_out - 257)),
//                   (u = i.dmax),
//                   (f = i.wsize),
//                   (c = i.whave),
//                   (d = i.wnext),
//                   (p = i.window),
//                   (m = i.hold),
//                   (g = i.bits),
//                   (_ = i.lencode),
//                   (b = i.distcode),
//                   (y = (1 << i.lenbits) - 1),
//                   (v = (1 << i.distbits) - 1);
//                 t: do
//                   for (
//                     g < 15 &&
//                       ((m += A[a++] << g),
//                       (g += 8),
//                       (m += A[a++] << g),
//                       (g += 8)),
//                       w = _[m & y];
//                     ;

//                   ) {
//                     if (
//                       ((m >>>= x = w >>> 24),
//                       (g -= x),
//                       0 == (x = (w >>> 16) & 255))
//                     )
//                       I[o++] = 65535 & w;
//                     else {
//                       if (!(16 & x)) {
//                         if (64 & x) {
//                           if (32 & x) {
//                             i.mode = n;
//                             break t;
//                           }
//                           (t.msg = "invalid literal/length code"), (i.mode = r);
//                           break t;
//                         }
//                         w = _[(65535 & w) + (m & ((1 << x) - 1))];
//                         continue;
//                       }
//                       for (
//                         E = 65535 & w,
//                           (x &= 15) &&
//                             (g < x && ((m += A[a++] << g), (g += 8)),
//                             (E += m & ((1 << x) - 1)),
//                             (m >>>= x),
//                             (g -= x)),
//                           g < 15 &&
//                             ((m += A[a++] << g),
//                             (g += 8),
//                             (m += A[a++] << g),
//                             (g += 8)),
//                           w = b[m & v];
//                         ;

//                       ) {
//                         if (
//                           ((m >>>= x = w >>> 24),
//                           (g -= x),
//                           16 & (x = (w >>> 16) & 255))
//                         ) {
//                           if (
//                             ((k = 65535 & w),
//                             g < (x &= 15) &&
//                               ((m += A[a++] << g),
//                               (g += 8) < x && ((m += A[a++] << g), (g += 8))),
//                             (k += m & ((1 << x) - 1)) > u)
//                           ) {
//                             (t.msg = "invalid distance too far back"),
//                               (i.mode = r);
//                             break t;
//                           }
//                           if (((m >>>= x), (g -= x), k > (x = o - l))) {
//                             if ((x = k - x) > c && i.sane) {
//                               (t.msg = "invalid distance too far back"),
//                                 (i.mode = r);
//                               break t;
//                             }
//                             if (((M = 0), (S = p), 0 === d)) {
//                               if (((M += f - x), x < E)) {
//                                 E -= x;
//                                 do I[o++] = p[M++];
//                                 while (--x);
//                                 (M = o - k), (S = I);
//                               }
//                             } else if (d < x) {
//                               if (((M += f + d - x), (x -= d) < E)) {
//                                 E -= x;
//                                 do I[o++] = p[M++];
//                                 while (--x);
//                                 if (((M = 0), d < E)) {
//                                   E -= x = d;
//                                   do I[o++] = p[M++];
//                                   while (--x);
//                                   (M = o - k), (S = I);
//                                 }
//                               }
//                             } else if (((M += d - x), x < E)) {
//                               E -= x;
//                               do I[o++] = p[M++];
//                               while (--x);
//                               (M = o - k), (S = I);
//                             }
//                             for (; E > 2; )
//                               (I[o++] = S[M++]),
//                                 (I[o++] = S[M++]),
//                                 (I[o++] = S[M++]),
//                                 (E -= 3);
//                             E &&
//                               ((I[o++] = S[M++]), E > 1 && (I[o++] = S[M++]));
//                           } else {
//                             M = o - k;
//                             do
//                               (I[o++] = I[M++]),
//                                 (I[o++] = I[M++]),
//                                 (I[o++] = I[M++]),
//                                 (E -= 3);
//                             while (E > 2);
//                             E &&
//                               ((I[o++] = I[M++]), E > 1 && (I[o++] = I[M++]));
//                           }
//                           break;
//                         }
//                         if (64 & x) {
//                           (t.msg = "invalid distance code"), (i.mode = r);
//                           break t;
//                         }
//                         w = b[(65535 & w) + (m & ((1 << x) - 1))];
//                       }
//                     }
//                     break;
//                   }
//                 while (a < s && o < h);
//                 (a -= E = g >> 3),
//                   (m &= (1 << (g -= E << 3)) - 1),
//                   (t.next_in = a),
//                   (t.next_out = o),
//                   (t.avail_in = a < s ? s - a + 5 : 5 - (a - s)),
//                   (t.avail_out = o < h ? h - o + 257 : 257 - (o - h)),
//                   (i.hold = m),
//                   (i.bits = g);
//               };
//             },
//             {},
//           ],
//           58: [
//             function (t, e, i) {
//               var r = t("../utils/common"),
//                 n = t("./adler32"),
//                 a = t("./crc32"),
//                 s = t("./inffast"),
//                 o = t("./inftrees"),
//                 l = 0,
//                 h = 1,
//                 u = 2,
//                 f = 4,
//                 c = 5,
//                 d = 6,
//                 p = 0,
//                 m = 1,
//                 g = 2,
//                 _ = -2,
//                 b = -3,
//                 y = -4,
//                 v = -5,
//                 w = 8,
//                 x = 1,
//                 E = 2,
//                 k = 3,
//                 M = 4,
//                 S = 5,
//                 A = 6,
//                 I = 7,
//                 T = 8,
//                 B = 9,
//                 R = 10,
//                 P = 11,
//                 O = 12,
//                 C = 13,
//                 z = 14,
//                 L = 15,
//                 U = 16,
//                 D = 17,
//                 N = 18,
//                 j = 19,
//                 F = 20,
//                 G = 21,
//                 Z = 22,
//                 H = 23,
//                 W = 24,
//                 q = 25,
//                 Y = 26,
//                 V = 27,
//                 $ = 28,
//                 K = 29,
//                 X = 30,
//                 J = 31,
//                 Q = 852,
//                 tt = 592,
//                 te = 15;
//               function ti(t) {
//                 return (
//                   ((t >>> 24) & 255) +
//                   ((t >>> 8) & 65280) +
//                   ((65280 & t) << 8) +
//                   ((255 & t) << 24)
//                 );
//               }
//               function tr() {
//                 (this.mode = 0),
//                   (this.last = !1),
//                   (this.wrap = 0),
//                   (this.havedict = !1),
//                   (this.flags = 0),
//                   (this.dmax = 0),
//                   (this.check = 0),
//                   (this.total = 0),
//                   (this.head = null),
//                   (this.wbits = 0),
//                   (this.wsize = 0),
//                   (this.whave = 0),
//                   (this.wnext = 0),
//                   (this.window = null),
//                   (this.hold = 0),
//                   (this.bits = 0),
//                   (this.length = 0),
//                   (this.offset = 0),
//                   (this.extra = 0),
//                   (this.lencode = null),
//                   (this.distcode = null),
//                   (this.lenbits = 0),
//                   (this.distbits = 0),
//                   (this.ncode = 0),
//                   (this.nlen = 0),
//                   (this.ndist = 0),
//                   (this.have = 0),
//                   (this.next = null),
//                   (this.lens = new r.Buf16(320)),
//                   (this.work = new r.Buf16(288)),
//                   (this.lendyn = null),
//                   (this.distdyn = null),
//                   (this.sane = 0),
//                   (this.back = 0),
//                   (this.was = 0);
//               }
//               function tn(t) {
//                 var e;
//                 return t && t.state
//                   ? ((e = t.state),
//                     (t.total_in = t.total_out = e.total = 0),
//                     (t.msg = ""),
//                     e.wrap && (t.adler = 1 & e.wrap),
//                     (e.mode = x),
//                     (e.last = 0),
//                     (e.havedict = 0),
//                     (e.dmax = 32768),
//                     (e.head = null),
//                     (e.hold = 0),
//                     (e.bits = 0),
//                     (e.lencode = e.lendyn = new r.Buf32(Q)),
//                     (e.distcode = e.distdyn = new r.Buf32(tt)),
//                     (e.sane = 1),
//                     (e.back = -1),
//                     p)
//                   : _;
//               }
//               function ta(t) {
//                 var e;
//                 return t && t.state
//                   ? (((e = t.state).wsize = 0),
//                     (e.whave = 0),
//                     (e.wnext = 0),
//                     tn(t))
//                   : _;
//               }
//               function ts(t, e) {
//                 var i, r;
//                 return t && t.state
//                   ? ((r = t.state),
//                     e < 0
//                       ? ((i = 0), (e = -e))
//                       : ((i = 1 + (e >> 4)), e < 48 && (e &= 15)),
//                     e && (e < 8 || e > 15)
//                       ? _
//                       : (null !== r.window &&
//                           r.wbits !== e &&
//                           (r.window = null),
//                         (r.wrap = i),
//                         (r.wbits = e),
//                         ta(t)))
//                   : _;
//               }
//               function to(t, e) {
//                 var i, r;
//                 return t
//                   ? ((r = new tr()),
//                     (t.state = r),
//                     (r.window = null),
//                     (i = ts(t, e)) !== p && (t.state = null),
//                     i)
//                   : _;
//               }
//               function tl(t) {
//                 return to(t, te);
//               }
//               var th,
//                 tu,
//                 tf = !0;
//               function tc(t) {
//                 if (tf) {
//                   var e;
//                   for (
//                     th = new r.Buf32(512), tu = new r.Buf32(32), e = 0;
//                     e < 144;

//                   )
//                     t.lens[e++] = 8;
//                   for (; e < 256; ) t.lens[e++] = 9;
//                   for (; e < 280; ) t.lens[e++] = 7;
//                   for (; e < 288; ) t.lens[e++] = 8;
//                   for (
//                     o(h, t.lens, 0, 288, th, 0, t.work, { bits: 9 }), e = 0;
//                     e < 32;

//                   )
//                     t.lens[e++] = 5;
//                   o(u, t.lens, 0, 32, tu, 0, t.work, { bits: 5 }), (tf = !1);
//                 }
//                 (t.lencode = th),
//                   (t.lenbits = 9),
//                   (t.distcode = tu),
//                   (t.distbits = 5);
//               }
//               function td(t, e, i, n) {
//                 var a,
//                   s = t.state;
//                 return (
//                   null === s.window &&
//                     ((s.wsize = 1 << s.wbits),
//                     (s.wnext = 0),
//                     (s.whave = 0),
//                     (s.window = new r.Buf8(s.wsize))),
//                   n >= s.wsize
//                     ? (r.arraySet(s.window, e, i - s.wsize, s.wsize, 0),
//                       (s.wnext = 0),
//                       (s.whave = s.wsize))
//                     : ((a = s.wsize - s.wnext) > n && (a = n),
//                       r.arraySet(s.window, e, i - n, a, s.wnext),
//                       (n -= a)
//                         ? (r.arraySet(s.window, e, i - n, n, 0),
//                           (s.wnext = n),
//                           (s.whave = s.wsize))
//                         : ((s.wnext += a),
//                           s.wnext === s.wsize && (s.wnext = 0),
//                           s.whave < s.wsize && (s.whave += a))),
//                   0
//                 );
//               }
//               function tp(t, e) {
//                 var i,
//                   Q,
//                   tt,
//                   te,
//                   tr,
//                   tn,
//                   ta,
//                   ts,
//                   to,
//                   tl,
//                   th,
//                   tu,
//                   tf,
//                   tp,
//                   tm,
//                   tg,
//                   t_,
//                   tb,
//                   ty,
//                   tv,
//                   tw,
//                   tx,
//                   tE,
//                   tk,
//                   tM = 0,
//                   tS = new r.Buf8(4),
//                   tA = [
//                     16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14,
//                     1, 15,
//                   ];
//                 if (
//                   !t ||
//                   !t.state ||
//                   !t.output ||
//                   (!t.input && 0 !== t.avail_in)
//                 )
//                   return _;
//                 (i = t.state).mode === O && (i.mode = C),
//                   (tr = t.next_out),
//                   (tt = t.output),
//                   (ta = t.avail_out),
//                   (te = t.next_in),
//                   (Q = t.input),
//                   (tn = t.avail_in),
//                   (ts = i.hold),
//                   (to = i.bits),
//                   (tl = tn),
//                   (th = ta),
//                   (tx = p);
//                 t: for (;;)
//                   switch (i.mode) {
//                     case x:
//                       if (0 === i.wrap) {
//                         i.mode = C;
//                         break;
//                       }
//                       for (; to < 16; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       if (2 & i.wrap && 35615 === ts) {
//                         (i.check = 0),
//                           (tS[0] = 255 & ts),
//                           (tS[1] = (ts >>> 8) & 255),
//                           (i.check = a(i.check, tS, 2, 0)),
//                           (ts = 0),
//                           (to = 0),
//                           (i.mode = E);
//                         break;
//                       }
//                       if (
//                         ((i.flags = 0),
//                         i.head && (i.head.done = !1),
//                         !(1 & i.wrap) || (((255 & ts) << 8) + (ts >> 8)) % 31)
//                       ) {
//                         (t.msg = "incorrect header check"), (i.mode = X);
//                         break;
//                       }
//                       if ((15 & ts) !== w) {
//                         (t.msg = "unknown compression method"), (i.mode = X);
//                         break;
//                       }
//                       if (
//                         ((to -= 4),
//                         (tw = 8 + (15 & (ts >>>= 4))),
//                         0 === i.wbits)
//                       )
//                         i.wbits = tw;
//                       else if (tw > i.wbits) {
//                         (t.msg = "invalid window size"), (i.mode = X);
//                         break;
//                       }
//                       (i.dmax = 1 << tw),
//                         (t.adler = i.check = 1),
//                         (i.mode = 512 & ts ? R : O),
//                         (ts = 0),
//                         (to = 0);
//                       break;
//                     case E:
//                       for (; to < 16; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       if (((i.flags = ts), (255 & i.flags) !== w)) {
//                         (t.msg = "unknown compression method"), (i.mode = X);
//                         break;
//                       }
//                       if (57344 & i.flags) {
//                         (t.msg = "unknown header flags set"), (i.mode = X);
//                         break;
//                       }
//                       i.head && (i.head.text = (ts >> 8) & 1),
//                         512 & i.flags &&
//                           ((tS[0] = 255 & ts),
//                           (tS[1] = (ts >>> 8) & 255),
//                           (i.check = a(i.check, tS, 2, 0))),
//                         (ts = 0),
//                         (to = 0),
//                         (i.mode = k);
//                     case k:
//                       for (; to < 32; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       i.head && (i.head.time = ts),
//                         512 & i.flags &&
//                           ((tS[0] = 255 & ts),
//                           (tS[1] = (ts >>> 8) & 255),
//                           (tS[2] = (ts >>> 16) & 255),
//                           (tS[3] = (ts >>> 24) & 255),
//                           (i.check = a(i.check, tS, 4, 0))),
//                         (ts = 0),
//                         (to = 0),
//                         (i.mode = M);
//                     case M:
//                       for (; to < 16; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       i.head &&
//                         ((i.head.xflags = 255 & ts), (i.head.os = ts >> 8)),
//                         512 & i.flags &&
//                           ((tS[0] = 255 & ts),
//                           (tS[1] = (ts >>> 8) & 255),
//                           (i.check = a(i.check, tS, 2, 0))),
//                         (ts = 0),
//                         (to = 0),
//                         (i.mode = S);
//                     case S:
//                       if (1024 & i.flags) {
//                         for (; to < 16; ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         (i.length = ts),
//                           i.head && (i.head.extra_len = ts),
//                           512 & i.flags &&
//                             ((tS[0] = 255 & ts),
//                             (tS[1] = (ts >>> 8) & 255),
//                             (i.check = a(i.check, tS, 2, 0))),
//                           (ts = 0),
//                           (to = 0);
//                       } else i.head && (i.head.extra = null);
//                       i.mode = A;
//                     case A:
//                       if (
//                         1024 & i.flags &&
//                         ((tu = i.length) > tn && (tu = tn),
//                         tu &&
//                           (i.head &&
//                             ((tw = i.head.extra_len - i.length),
//                             i.head.extra ||
//                               (i.head.extra = Array(i.head.extra_len)),
//                             r.arraySet(i.head.extra, Q, te, tu, tw)),
//                           512 & i.flags && (i.check = a(i.check, Q, tu, te)),
//                           (tn -= tu),
//                           (te += tu),
//                           (i.length -= tu)),
//                         i.length)
//                       )
//                         break t;
//                       (i.length = 0), (i.mode = I);
//                     case I:
//                       if (2048 & i.flags) {
//                         if (0 === tn) break t;
//                         tu = 0;
//                         do
//                           (tw = Q[te + tu++]),
//                             i.head &&
//                               tw &&
//                               i.length < 65536 &&
//                               (i.head.name += String.fromCharCode(tw));
//                         while (tw && tu < tn);
//                         if (
//                           (512 & i.flags && (i.check = a(i.check, Q, tu, te)),
//                           (tn -= tu),
//                           (te += tu),
//                           tw)
//                         )
//                           break t;
//                       } else i.head && (i.head.name = null);
//                       (i.length = 0), (i.mode = T);
//                     case T:
//                       if (4096 & i.flags) {
//                         if (0 === tn) break t;
//                         tu = 0;
//                         do
//                           (tw = Q[te + tu++]),
//                             i.head &&
//                               tw &&
//                               i.length < 65536 &&
//                               (i.head.comment += String.fromCharCode(tw));
//                         while (tw && tu < tn);
//                         if (
//                           (512 & i.flags && (i.check = a(i.check, Q, tu, te)),
//                           (tn -= tu),
//                           (te += tu),
//                           tw)
//                         )
//                           break t;
//                       } else i.head && (i.head.comment = null);
//                       i.mode = B;
//                     case B:
//                       if (512 & i.flags) {
//                         for (; to < 16; ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         if (ts !== (65535 & i.check)) {
//                           (t.msg = "header crc mismatch"), (i.mode = X);
//                           break;
//                         }
//                         (ts = 0), (to = 0);
//                       }
//                       i.head &&
//                         ((i.head.hcrc = (i.flags >> 9) & 1),
//                         (i.head.done = !0)),
//                         (t.adler = i.check = 0),
//                         (i.mode = O);
//                       break;
//                     case R:
//                       for (; to < 32; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       (t.adler = i.check = ti(ts)),
//                         (ts = 0),
//                         (to = 0),
//                         (i.mode = P);
//                     case P:
//                       if (0 === i.havedict)
//                         return (
//                           (t.next_out = tr),
//                           (t.avail_out = ta),
//                           (t.next_in = te),
//                           (t.avail_in = tn),
//                           (i.hold = ts),
//                           (i.bits = to),
//                           g
//                         );
//                       (t.adler = i.check = 1), (i.mode = O);
//                     case O:
//                       if (e === c || e === d) break t;
//                     case C:
//                       if (i.last) {
//                         (ts >>>= 7 & to), (to -= 7 & to), (i.mode = V);
//                         break;
//                       }
//                       for (; to < 3; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       switch (((i.last = 1 & ts), (to -= 1), 3 & (ts >>>= 1))) {
//                         case 0:
//                           i.mode = z;
//                           break;
//                         case 1:
//                           if ((tc(i), (i.mode = F), e === d)) {
//                             (ts >>>= 2), (to -= 2);
//                             break t;
//                           }
//                           break;
//                         case 2:
//                           i.mode = D;
//                           break;
//                         case 3:
//                           (t.msg = "invalid block type"), (i.mode = X);
//                       }
//                       (ts >>>= 2), (to -= 2);
//                       break;
//                     case z:
//                       for (ts >>>= 7 & to, to -= 7 & to; to < 32; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       if ((65535 & ts) != ((ts >>> 16) ^ 65535)) {
//                         (t.msg = "invalid stored block lengths"), (i.mode = X);
//                         break;
//                       }
//                       if (
//                         ((i.length = 65535 & ts),
//                         (ts = 0),
//                         (to = 0),
//                         (i.mode = L),
//                         e === d)
//                       )
//                         break t;
//                     case L:
//                       i.mode = U;
//                     case U:
//                       if ((tu = i.length)) {
//                         if (
//                           (tu > tn && (tu = tn), tu > ta && (tu = ta), 0 === tu)
//                         )
//                           break t;
//                         r.arraySet(tt, Q, te, tu, tr),
//                           (tn -= tu),
//                           (te += tu),
//                           (ta -= tu),
//                           (tr += tu),
//                           (i.length -= tu);
//                         break;
//                       }
//                       i.mode = O;
//                       break;
//                     case D:
//                       for (; to < 14; ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       if (
//                         ((i.nlen = 257 + (31 & ts)),
//                         (ts >>>= 5),
//                         (to -= 5),
//                         (i.ndist = 1 + (31 & ts)),
//                         (ts >>>= 5),
//                         (to -= 5),
//                         (i.ncode = 4 + (15 & ts)),
//                         (ts >>>= 4),
//                         (to -= 4),
//                         i.nlen > 286 || i.ndist > 30)
//                       ) {
//                         (t.msg = "too many length or distance symbols"),
//                           (i.mode = X);
//                         break;
//                       }
//                       (i.have = 0), (i.mode = N);
//                     case N:
//                       for (; i.have < i.ncode; ) {
//                         for (; to < 3; ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         (i.lens[tA[i.have++]] = 7 & ts), (ts >>>= 3), (to -= 3);
//                       }
//                       for (; i.have < 19; ) i.lens[tA[i.have++]] = 0;
//                       if (
//                         ((i.lencode = i.lendyn),
//                         (i.lenbits = 7),
//                         (tE = { bits: i.lenbits }),
//                         (tx = o(l, i.lens, 0, 19, i.lencode, 0, i.work, tE)),
//                         (i.lenbits = tE.bits),
//                         tx)
//                       ) {
//                         (t.msg = "invalid code lengths set"), (i.mode = X);
//                         break;
//                       }
//                       (i.have = 0), (i.mode = j);
//                     case j:
//                       for (; i.have < i.nlen + i.ndist; ) {
//                         for (
//                           ;
//                           (tg =
//                             ((tM = i.lencode[ts & ((1 << i.lenbits) - 1)]) >>>
//                               16) &
//                             255),
//                             (t_ = 65535 & tM),
//                             !((tm = tM >>> 24) <= to);

//                         ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         if (t_ < 16)
//                           (ts >>>= tm), (to -= tm), (i.lens[i.have++] = t_);
//                         else {
//                           if (16 === t_) {
//                             for (tk = tm + 2; to < tk; ) {
//                               if (0 === tn) break t;
//                               tn--, (ts += Q[te++] << to), (to += 8);
//                             }
//                             if (((ts >>>= tm), (to -= tm), 0 === i.have)) {
//                               (t.msg = "invalid bit length repeat"),
//                                 (i.mode = X);
//                               break;
//                             }
//                             (tw = i.lens[i.have - 1]),
//                               (tu = 3 + (3 & ts)),
//                               (ts >>>= 2),
//                               (to -= 2);
//                           } else if (17 === t_) {
//                             for (tk = tm + 3; to < tk; ) {
//                               if (0 === tn) break t;
//                               tn--, (ts += Q[te++] << to), (to += 8);
//                             }
//                             (to -= tm),
//                               (tw = 0),
//                               (tu = 3 + (7 & (ts >>>= tm))),
//                               (ts >>>= 3),
//                               (to -= 3);
//                           } else {
//                             for (tk = tm + 7; to < tk; ) {
//                               if (0 === tn) break t;
//                               tn--, (ts += Q[te++] << to), (to += 8);
//                             }
//                             (to -= tm),
//                               (tw = 0),
//                               (tu = 11 + (127 & (ts >>>= tm))),
//                               (ts >>>= 7),
//                               (to -= 7);
//                           }
//                           if (i.have + tu > i.nlen + i.ndist) {
//                             (t.msg = "invalid bit length repeat"), (i.mode = X);
//                             break;
//                           }
//                           for (; tu--; ) i.lens[i.have++] = tw;
//                         }
//                       }
//                       if (i.mode === X) break;
//                       if (0 === i.lens[256]) {
//                         (t.msg = "invalid code -- missing end-of-block"),
//                           (i.mode = X);
//                         break;
//                       }
//                       if (
//                         ((i.lenbits = 9),
//                         (tE = { bits: i.lenbits }),
//                         (tx = o(
//                           h,
//                           i.lens,
//                           0,
//                           i.nlen,
//                           i.lencode,
//                           0,
//                           i.work,
//                           tE
//                         )),
//                         (i.lenbits = tE.bits),
//                         tx)
//                       ) {
//                         (t.msg = "invalid literal/lengths set"), (i.mode = X);
//                         break;
//                       }
//                       if (
//                         ((i.distbits = 6),
//                         (i.distcode = i.distdyn),
//                         (tE = { bits: i.distbits }),
//                         (tx = o(
//                           u,
//                           i.lens,
//                           i.nlen,
//                           i.ndist,
//                           i.distcode,
//                           0,
//                           i.work,
//                           tE
//                         )),
//                         (i.distbits = tE.bits),
//                         tx)
//                       ) {
//                         (t.msg = "invalid distances set"), (i.mode = X);
//                         break;
//                       }
//                       if (((i.mode = F), e === d)) break t;
//                     case F:
//                       i.mode = G;
//                     case G:
//                       if (tn >= 6 && ta >= 258) {
//                         (t.next_out = tr),
//                           (t.avail_out = ta),
//                           (t.next_in = te),
//                           (t.avail_in = tn),
//                           (i.hold = ts),
//                           (i.bits = to),
//                           s(t, th),
//                           (tr = t.next_out),
//                           (tt = t.output),
//                           (ta = t.avail_out),
//                           (te = t.next_in),
//                           (Q = t.input),
//                           (tn = t.avail_in),
//                           (ts = i.hold),
//                           (to = i.bits),
//                           i.mode === O && (i.back = -1);
//                         break;
//                       }
//                       for (
//                         i.back = 0;
//                         (tg =
//                           ((tM = i.lencode[ts & ((1 << i.lenbits) - 1)]) >>>
//                             16) &
//                           255),
//                           (t_ = 65535 & tM),
//                           !((tm = tM >>> 24) <= to);

//                       ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       if (tg && !(240 & tg)) {
//                         for (
//                           tb = tm, ty = tg, tv = t_;
//                           (tg =
//                             ((tM =
//                               i.lencode[
//                                 tv + ((ts & ((1 << (tb + ty)) - 1)) >> tb)
//                               ]) >>>
//                               16) &
//                             255),
//                             (t_ = 65535 & tM),
//                             !(tb + (tm = tM >>> 24) <= to);

//                         ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         (ts >>>= tb), (to -= tb), (i.back += tb);
//                       }
//                       if (
//                         ((ts >>>= tm),
//                         (to -= tm),
//                         (i.back += tm),
//                         (i.length = t_),
//                         0 === tg)
//                       ) {
//                         i.mode = Y;
//                         break;
//                       }
//                       if (32 & tg) {
//                         (i.back = -1), (i.mode = O);
//                         break;
//                       }
//                       if (64 & tg) {
//                         (t.msg = "invalid literal/length code"), (i.mode = X);
//                         break;
//                       }
//                       (i.extra = 15 & tg), (i.mode = Z);
//                     case Z:
//                       if (i.extra) {
//                         for (tk = i.extra; to < tk; ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         (i.length += ts & ((1 << i.extra) - 1)),
//                           (ts >>>= i.extra),
//                           (to -= i.extra),
//                           (i.back += i.extra);
//                       }
//                       (i.was = i.length), (i.mode = H);
//                     case H:
//                       for (
//                         ;
//                         (tg =
//                           ((tM = i.distcode[ts & ((1 << i.distbits) - 1)]) >>>
//                             16) &
//                           255),
//                           (t_ = 65535 & tM),
//                           !((tm = tM >>> 24) <= to);

//                       ) {
//                         if (0 === tn) break t;
//                         tn--, (ts += Q[te++] << to), (to += 8);
//                       }
//                       if (!(240 & tg)) {
//                         for (
//                           tb = tm, ty = tg, tv = t_;
//                           (tg =
//                             ((tM =
//                               i.distcode[
//                                 tv + ((ts & ((1 << (tb + ty)) - 1)) >> tb)
//                               ]) >>>
//                               16) &
//                             255),
//                             (t_ = 65535 & tM),
//                             !(tb + (tm = tM >>> 24) <= to);

//                         ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         (ts >>>= tb), (to -= tb), (i.back += tb);
//                       }
//                       if (((ts >>>= tm), (to -= tm), (i.back += tm), 64 & tg)) {
//                         (t.msg = "invalid distance code"), (i.mode = X);
//                         break;
//                       }
//                       (i.offset = t_), (i.extra = 15 & tg), (i.mode = W);
//                     case W:
//                       if (i.extra) {
//                         for (tk = i.extra; to < tk; ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         (i.offset += ts & ((1 << i.extra) - 1)),
//                           (ts >>>= i.extra),
//                           (to -= i.extra),
//                           (i.back += i.extra);
//                       }
//                       if (i.offset > i.dmax) {
//                         (t.msg = "invalid distance too far back"), (i.mode = X);
//                         break;
//                       }
//                       i.mode = q;
//                     case q:
//                       if (0 === ta) break t;
//                       if (((tu = th - ta), i.offset > tu)) {
//                         if ((tu = i.offset - tu) > i.whave && i.sane) {
//                           (t.msg = "invalid distance too far back"),
//                             (i.mode = X);
//                           break;
//                         }
//                         tu > i.wnext
//                           ? ((tu -= i.wnext), (tf = i.wsize - tu))
//                           : (tf = i.wnext - tu),
//                           tu > i.length && (tu = i.length),
//                           (tp = i.window);
//                       } else (tp = tt), (tf = tr - i.offset), (tu = i.length);
//                       tu > ta && (tu = ta), (ta -= tu), (i.length -= tu);
//                       do tt[tr++] = tp[tf++];
//                       while (--tu);
//                       0 === i.length && (i.mode = G);
//                       break;
//                     case Y:
//                       if (0 === ta) break t;
//                       (tt[tr++] = i.length), ta--, (i.mode = G);
//                       break;
//                     case V:
//                       if (i.wrap) {
//                         for (; to < 32; ) {
//                           if (0 === tn) break t;
//                           tn--, (ts |= Q[te++] << to), (to += 8);
//                         }
//                         if (
//                           ((th -= ta),
//                           (t.total_out += th),
//                           (i.total += th),
//                           th &&
//                             (t.adler = i.check =
//                               i.flags
//                                 ? a(i.check, tt, th, tr - th)
//                                 : n(i.check, tt, th, tr - th)),
//                           (th = ta),
//                           (i.flags ? ts : ti(ts)) !== i.check)
//                         ) {
//                           (t.msg = "incorrect data check"), (i.mode = X);
//                           break;
//                         }
//                         (ts = 0), (to = 0);
//                       }
//                       i.mode = $;
//                     case $:
//                       if (i.wrap && i.flags) {
//                         for (; to < 32; ) {
//                           if (0 === tn) break t;
//                           tn--, (ts += Q[te++] << to), (to += 8);
//                         }
//                         if (ts !== (4294967295 & i.total)) {
//                           (t.msg = "incorrect length check"), (i.mode = X);
//                           break;
//                         }
//                         (ts = 0), (to = 0);
//                       }
//                       i.mode = K;
//                     case K:
//                       tx = m;
//                       break t;
//                     case X:
//                       tx = b;
//                       break t;
//                     case J:
//                       return y;
//                     default:
//                       return _;
//                   }
//                 return (
//                   (t.next_out = tr),
//                   (t.avail_out = ta),
//                   (t.next_in = te),
//                   (t.avail_in = tn),
//                   (i.hold = ts),
//                   (i.bits = to),
//                   (i.wsize ||
//                     (th !== t.avail_out &&
//                       i.mode < X &&
//                       (i.mode < V || e !== f))) &&
//                     td(t, t.output, t.next_out, th - t.avail_out),
//                   (tl -= t.avail_in),
//                   (th -= t.avail_out),
//                   (t.total_in += tl),
//                   (t.total_out += th),
//                   (i.total += th),
//                   i.wrap &&
//                     th &&
//                     (t.adler = i.check =
//                       i.flags
//                         ? a(i.check, tt, th, t.next_out - th)
//                         : n(i.check, tt, th, t.next_out - th)),
//                   (t.data_type =
//                     i.bits +
//                     (i.last ? 64 : 0) +
//                     (i.mode === O ? 128 : 0) +
//                     (i.mode === F || i.mode === L ? 256 : 0)),
//                   ((0 === tl && 0 === th) || e === f) && tx === p && (tx = v),
//                   tx
//                 );
//               }
//               function tm(t) {
//                 if (!t || !t.state) return _;
//                 var e = t.state;
//                 return e.window && (e.window = null), (t.state = null), p;
//               }
//               function tg(t, e) {
//                 var i;
//                 return t && t.state && 2 & (i = t.state).wrap
//                   ? ((i.head = e), (e.done = !1), p)
//                   : _;
//               }
//               function t_(t, e) {
//                 var i,
//                   r = e.length;
//                 return t && t.state
//                   ? 0 !== (i = t.state).wrap && i.mode !== P
//                     ? _
//                     : i.mode === P && n(1, e, r, 0) !== i.check
//                     ? b
//                     : td(t, e, r, r)
//                     ? ((i.mode = J), y)
//                     : ((i.havedict = 1), p)
//                   : _;
//               }
//               (i.inflateReset = ta),
//                 (i.inflateReset2 = ts),
//                 (i.inflateResetKeep = tn),
//                 (i.inflateInit = tl),
//                 (i.inflateInit2 = to),
//                 (i.inflate = tp),
//                 (i.inflateEnd = tm),
//                 (i.inflateGetHeader = tg),
//                 (i.inflateSetDictionary = t_),
//                 (i.inflateInfo = "pako inflate (from Nodeca project)");
//             },
//             {
//               "../utils/common": 52,
//               "./adler32": 53,
//               "./crc32": 55,
//               "./inffast": 57,
//               "./inftrees": 59,
//             },
//           ],
//           59: [
//             function (t, e, i) {
//               var r = t("../utils/common"),
//                 n = 15,
//                 a = 852,
//                 s = 592,
//                 o = 0,
//                 l = 1,
//                 h = 2,
//                 u = [
//                   3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35,
//                   43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0,
//                 ],
//                 f = [
//                   16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18,
//                   18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72,
//                   78,
//                 ],
//                 c = [
//                   1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
//                   257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193,
//                   12289, 16385, 24577, 0, 0,
//                 ],
//                 d = [
//                   16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22,
//                   22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29,
//                   64, 64,
//                 ];
//               e.exports = function (t, e, i, p, m, g, _, b) {
//                 var y,
//                   v,
//                   w,
//                   x,
//                   E,
//                   k,
//                   M,
//                   S,
//                   A,
//                   I = b.bits,
//                   T = 0,
//                   B = 0,
//                   R = 0,
//                   P = 0,
//                   O = 0,
//                   C = 0,
//                   z = 0,
//                   L = 0,
//                   U = 0,
//                   D = 0,
//                   N = null,
//                   j = 0,
//                   F = new r.Buf16(n + 1),
//                   G = new r.Buf16(n + 1),
//                   Z = null,
//                   H = 0;
//                 for (T = 0; T <= n; T++) F[T] = 0;
//                 for (B = 0; B < p; B++) F[e[i + B]]++;
//                 for (O = I, P = n; P >= 1 && 0 === F[P]; P--);
//                 if ((O > P && (O = P), 0 === P))
//                   return (
//                     (m[g++] = 20971520), (m[g++] = 20971520), (b.bits = 1), 0
//                   );
//                 for (R = 1; R < P && 0 === F[R]; R++);
//                 for (O < R && (O = R), L = 1, T = 1; T <= n; T++)
//                   if (((L <<= 1), (L -= F[T]) < 0)) return -1;
//                 if (L > 0 && (t === o || 1 !== P)) return -1;
//                 for (G[1] = 0, T = 1; T < n; T++) G[T + 1] = G[T] + F[T];
//                 for (B = 0; B < p; B++)
//                   0 !== e[i + B] && (_[G[e[i + B]]++] = B);
//                 if (
//                   (t === o
//                     ? ((N = Z = _), (k = 19))
//                     : t === l
//                     ? ((N = u), (j -= 257), (Z = f), (H -= 257), (k = 256))
//                     : ((N = c), (Z = d), (k = -1)),
//                   (D = 0),
//                   (B = 0),
//                   (T = R),
//                   (E = g),
//                   (C = O),
//                   (z = 0),
//                   (w = -1),
//                   (x = (U = 1 << O) - 1),
//                   (t === l && U > a) || (t === h && U > s))
//                 )
//                   return 1;
//                 for (;;) {
//                   (M = T - z),
//                     _[B] < k
//                       ? ((S = 0), (A = _[B]))
//                       : _[B] > k
//                       ? ((S = Z[H + _[B]]), (A = N[j + _[B]]))
//                       : ((S = 96), (A = 0)),
//                     (y = 1 << (T - z)),
//                     (R = v = 1 << C);
//                   do m[E + (D >> z) + (v -= y)] = (M << 24) | (S << 16) | A;
//                   while (0 !== v);
//                   for (y = 1 << (T - 1); D & y; ) y >>= 1;
//                   if (
//                     (0 !== y ? ((D &= y - 1), (D += y)) : (D = 0),
//                     B++,
//                     0 == --F[T])
//                   ) {
//                     if (T === P) break;
//                     T = e[i + _[B]];
//                   }
//                   if (T > O && (D & x) !== w) {
//                     for (
//                       0 === z && (z = O), E += R, L = 1 << (C = T - z);
//                       C + z < P && !((L -= F[C + z]) <= 0);

//                     )
//                       C++, (L <<= 1);
//                     if (
//                       ((U += 1 << C), (t === l && U > a) || (t === h && U > s))
//                     )
//                       return 1;
//                     m[(w = D & x)] = (O << 24) | (C << 16) | (E - g);
//                   }
//                 }
//                 return (
//                   0 !== D && (m[E + D] = ((T - z) << 24) | 4194304),
//                   (b.bits = O),
//                   0
//                 );
//               };
//             },
//             { "../utils/common": 52 },
//           ],
//           60: [
//             function (t, e, i) {
//               e.exports = {
//                 2: "need dictionary",
//                 1: "stream end",
//                 0: "",
//                 "-1": "file error",
//                 "-2": "stream error",
//                 "-3": "data error",
//                 "-4": "insufficient memory",
//                 "-5": "buffer error",
//                 "-6": "incompatible version",
//               };
//             },
//             {},
//           ],
//           61: [
//             function (t, e, i) {
//               var r = t("../utils/common"),
//                 n = 4,
//                 a = 0,
//                 s = 1,
//                 o = 2;
//               function l(t) {
//                 for (var e = t.length; --e >= 0; ) t[e] = 0;
//               }
//               var h = 0,
//                 u = 1,
//                 f = 2,
//                 c = 3,
//                 d = 258,
//                 p = 29,
//                 m = 256,
//                 g = 286,
//                 _ = 30,
//                 b = 19,
//                 y = 573,
//                 v = 15,
//                 w = 16,
//                 x = 7,
//                 E = 256,
//                 k = 16,
//                 M = 17,
//                 S = 18,
//                 A = [
//                   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4,
//                   4, 4, 4, 5, 5, 5, 5, 0,
//                 ],
//                 I = [
//                   0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,
//                   9, 10, 10, 11, 11, 12, 12, 13, 13,
//                 ],
//                 T = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7],
//                 B = [
//                   16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1,
//                   15,
//                 ],
//                 R = 512,
//                 P = Array(576);
//               l(P);
//               var O = Array(2 * _);
//               l(O);
//               var C = Array(R);
//               l(C);
//               var z = Array(d - c + 1);
//               l(z);
//               var L = Array(p);
//               l(L);
//               var U,
//                 D,
//                 N,
//                 j = Array(_);
//               function F(t, e, i, r, n) {
//                 (this.static_tree = t),
//                   (this.extra_bits = e),
//                   (this.extra_base = i),
//                   (this.elems = r),
//                   (this.max_length = n),
//                   (this.has_stree = t && t.length);
//               }
//               function G(t, e) {
//                 (this.dyn_tree = t), (this.max_code = 0), (this.stat_desc = e);
//               }
//               function Z(t) {
//                 return t < 256 ? C[t] : C[256 + (t >>> 7)];
//               }
//               function H(t, e) {
//                 (t.pending_buf[t.pending++] = 255 & e),
//                   (t.pending_buf[t.pending++] = (e >>> 8) & 255);
//               }
//               function W(t, e, i) {
//                 t.bi_valid > w - i
//                   ? ((t.bi_buf |= (e << t.bi_valid) & 65535),
//                     H(t, t.bi_buf),
//                     (t.bi_buf = e >> (w - t.bi_valid)),
//                     (t.bi_valid += i - w))
//                   : ((t.bi_buf |= (e << t.bi_valid) & 65535),
//                     (t.bi_valid += i));
//               }
//               function q(t, e, i) {
//                 W(t, i[2 * e], i[2 * e + 1]);
//               }
//               function Y(t, e) {
//                 var i = 0;
//                 do (i |= 1 & t), (t >>>= 1), (i <<= 1);
//                 while (--e > 0);
//                 return i >>> 1;
//               }
//               function V(t) {
//                 16 === t.bi_valid
//                   ? (H(t, t.bi_buf), (t.bi_buf = 0), (t.bi_valid = 0))
//                   : t.bi_valid >= 8 &&
//                     ((t.pending_buf[t.pending++] = 255 & t.bi_buf),
//                     (t.bi_buf >>= 8),
//                     (t.bi_valid -= 8));
//               }
//               function $(t, e) {
//                 var i,
//                   r,
//                   n,
//                   a,
//                   s,
//                   o,
//                   l = e.dyn_tree,
//                   h = e.max_code,
//                   u = e.stat_desc.static_tree,
//                   f = e.stat_desc.has_stree,
//                   c = e.stat_desc.extra_bits,
//                   d = e.stat_desc.extra_base,
//                   p = e.stat_desc.max_length,
//                   m = 0;
//                 for (a = 0; a <= v; a++) t.bl_count[a] = 0;
//                 for (
//                   l[2 * t.heap[t.heap_max] + 1] = 0, i = t.heap_max + 1;
//                   i < y;
//                   i++
//                 )
//                   (a = l[2 * l[2 * (r = t.heap[i]) + 1] + 1] + 1) > p &&
//                     ((a = p), m++),
//                     (l[2 * r + 1] = a),
//                     r > h ||
//                       (t.bl_count[a]++,
//                       (s = 0),
//                       r >= d && (s = c[r - d]),
//                       (o = l[2 * r]),
//                       (t.opt_len += o * (a + s)),
//                       f && (t.static_len += o * (u[2 * r + 1] + s)));
//                 if (0 !== m) {
//                   do {
//                     for (a = p - 1; 0 === t.bl_count[a]; ) a--;
//                     t.bl_count[a]--,
//                       (t.bl_count[a + 1] += 2),
//                       t.bl_count[p]--,
//                       (m -= 2);
//                   } while (m > 0);
//                   for (a = p; 0 !== a; a--)
//                     for (r = t.bl_count[a]; 0 !== r; )
//                       (n = t.heap[--i]) > h ||
//                         (l[2 * n + 1] !== a &&
//                           ((t.opt_len += (a - l[2 * n + 1]) * l[2 * n]),
//                           (l[2 * n + 1] = a)),
//                         r--);
//                 }
//               }
//               function K(t, e, i) {
//                 var r,
//                   n,
//                   a = Array(v + 1),
//                   s = 0;
//                 for (r = 1; r <= v; r++) a[r] = s = (s + i[r - 1]) << 1;
//                 for (n = 0; n <= e; n++) {
//                   var o = t[2 * n + 1];
//                   0 !== o && (t[2 * n] = Y(a[o]++, o));
//                 }
//               }
//               function X() {
//                 var t,
//                   e,
//                   i,
//                   r,
//                   n,
//                   a = Array(v + 1);
//                 for (i = 0, r = 0; r < p - 1; r++)
//                   for (L[r] = i, t = 0; t < 1 << A[r]; t++) z[i++] = r;
//                 for (z[i - 1] = r, n = 0, r = 0; r < 16; r++)
//                   for (j[r] = n, t = 0; t < 1 << I[r]; t++) C[n++] = r;
//                 for (n >>= 7; r < _; r++)
//                   for (j[r] = n << 7, t = 0; t < 1 << (I[r] - 7); t++)
//                     C[256 + n++] = r;
//                 for (e = 0; e <= v; e++) a[e] = 0;
//                 for (t = 0; t <= 143; ) (P[2 * t + 1] = 8), t++, a[8]++;
//                 for (; t <= 255; ) (P[2 * t + 1] = 9), t++, a[9]++;
//                 for (; t <= 279; ) (P[2 * t + 1] = 7), t++, a[7]++;
//                 for (; t <= 287; ) (P[2 * t + 1] = 8), t++, a[8]++;
//                 for (K(P, g + 1, a), t = 0; t < _; t++)
//                   (O[2 * t + 1] = 5), (O[2 * t] = Y(t, 5));
//                 (U = new F(P, A, m + 1, g, v)),
//                   (D = new F(O, I, 0, _, v)),
//                   (N = new F([], T, 0, b, x));
//               }
//               function J(t) {
//                 var e;
//                 for (e = 0; e < g; e++) t.dyn_ltree[2 * e] = 0;
//                 for (e = 0; e < _; e++) t.dyn_dtree[2 * e] = 0;
//                 for (e = 0; e < b; e++) t.bl_tree[2 * e] = 0;
//                 (t.dyn_ltree[2 * E] = 1),
//                   (t.opt_len = t.static_len = 0),
//                   (t.last_lit = t.matches = 0);
//               }
//               function Q(t) {
//                 t.bi_valid > 8
//                   ? H(t, t.bi_buf)
//                   : t.bi_valid > 0 && (t.pending_buf[t.pending++] = t.bi_buf),
//                   (t.bi_buf = 0),
//                   (t.bi_valid = 0);
//               }
//               function tt(t, e, i, n) {
//                 Q(t),
//                   H(t, i),
//                   H(t, ~i),
//                   r.arraySet(t.pending_buf, t.window, e, i, t.pending),
//                   (t.pending += i);
//               }
//               function te(t, e, i, r) {
//                 var n = 2 * e,
//                   a = 2 * i;
//                 return t[n] < t[a] || (t[n] === t[a] && r[e] <= r[i]);
//               }
//               function ti(t, e, i) {
//                 for (
//                   var r = t.heap[i], n = i << 1;
//                   n <= t.heap_len &&
//                   (n < t.heap_len &&
//                     te(e, t.heap[n + 1], t.heap[n], t.depth) &&
//                     n++,
//                   !te(e, r, t.heap[n], t.depth));

//                 )
//                   (t.heap[i] = t.heap[n]), (i = n), (n <<= 1);
//                 t.heap[i] = r;
//               }
//               function tr(t, e, i) {
//                 var r,
//                   n,
//                   a,
//                   s,
//                   o = 0;
//                 if (0 !== t.last_lit)
//                   do
//                     (r =
//                       (t.pending_buf[t.d_buf + 2 * o] << 8) |
//                       t.pending_buf[t.d_buf + 2 * o + 1]),
//                       (n = t.pending_buf[t.l_buf + o]),
//                       o++,
//                       0 === r
//                         ? q(t, n, e)
//                         : (q(t, (a = z[n]) + m + 1, e),
//                           0 !== (s = A[a]) && W(t, (n -= L[a]), s),
//                           q(t, (a = Z(--r)), i),
//                           0 !== (s = I[a]) && W(t, (r -= j[a]), s));
//                   while (o < t.last_lit);
//                 q(t, E, e);
//               }
//               function tn(t, e) {
//                 var i,
//                   r,
//                   n,
//                   a = e.dyn_tree,
//                   s = e.stat_desc.static_tree,
//                   o = e.stat_desc.has_stree,
//                   l = e.stat_desc.elems,
//                   h = -1;
//                 for (t.heap_len = 0, t.heap_max = y, i = 0; i < l; i++)
//                   0 !== a[2 * i]
//                     ? ((t.heap[++t.heap_len] = h = i), (t.depth[i] = 0))
//                     : (a[2 * i + 1] = 0);
//                 for (; t.heap_len < 2; )
//                   (a[2 * (n = t.heap[++t.heap_len] = h < 2 ? ++h : 0)] = 1),
//                     (t.depth[n] = 0),
//                     t.opt_len--,
//                     o && (t.static_len -= s[2 * n + 1]);
//                 for (e.max_code = h, i = t.heap_len >> 1; i >= 1; i--)
//                   ti(t, a, i);
//                 n = l;
//                 do
//                   (i = t.heap[1]),
//                     (t.heap[1] = t.heap[t.heap_len--]),
//                     ti(t, a, 1),
//                     (r = t.heap[1]),
//                     (t.heap[--t.heap_max] = i),
//                     (t.heap[--t.heap_max] = r),
//                     (a[2 * n] = a[2 * i] + a[2 * r]),
//                     (t.depth[n] =
//                       (t.depth[i] >= t.depth[r] ? t.depth[i] : t.depth[r]) + 1),
//                     (a[2 * i + 1] = a[2 * r + 1] = n),
//                     (t.heap[1] = n++),
//                     ti(t, a, 1);
//                 while (t.heap_len >= 2);
//                 (t.heap[--t.heap_max] = t.heap[1]),
//                   $(t, e),
//                   K(a, h, t.bl_count);
//               }
//               function ta(t, e, i) {
//                 var r,
//                   n,
//                   a = -1,
//                   s = e[1],
//                   o = 0,
//                   l = 7,
//                   h = 4;
//                 for (
//                   0 === s && ((l = 138), (h = 3)),
//                     e[2 * (i + 1) + 1] = 65535,
//                     r = 0;
//                   r <= i;
//                   r++
//                 )
//                   (n = s),
//                     (s = e[2 * (r + 1) + 1]),
//                     (++o < l && n === s) ||
//                       (o < h
//                         ? (t.bl_tree[2 * n] += o)
//                         : 0 !== n
//                         ? (n !== a && t.bl_tree[2 * n]++, t.bl_tree[2 * k]++)
//                         : o <= 10
//                         ? t.bl_tree[2 * M]++
//                         : t.bl_tree[2 * S]++,
//                       (o = 0),
//                       (a = n),
//                       0 === s
//                         ? ((l = 138), (h = 3))
//                         : n === s
//                         ? ((l = 6), (h = 3))
//                         : ((l = 7), (h = 4)));
//               }
//               function ts(t, e, i) {
//                 var r,
//                   n,
//                   a = -1,
//                   s = e[1],
//                   o = 0,
//                   l = 7,
//                   h = 4;
//                 for (0 === s && ((l = 138), (h = 3)), r = 0; r <= i; r++)
//                   if (
//                     ((n = s), (s = e[2 * (r + 1) + 1]), !(++o < l && n === s))
//                   ) {
//                     if (o < h)
//                       do q(t, n, t.bl_tree);
//                       while (0 != --o);
//                     else
//                       0 !== n
//                         ? (n !== a && (q(t, n, t.bl_tree), o--),
//                           q(t, k, t.bl_tree),
//                           W(t, o - 3, 2))
//                         : o <= 10
//                         ? (q(t, M, t.bl_tree), W(t, o - 3, 3))
//                         : (q(t, S, t.bl_tree), W(t, o - 11, 7));
//                     (o = 0),
//                       (a = n),
//                       0 === s
//                         ? ((l = 138), (h = 3))
//                         : n === s
//                         ? ((l = 6), (h = 3))
//                         : ((l = 7), (h = 4));
//                   }
//               }
//               function to(t) {
//                 var e;
//                 for (
//                   ta(t, t.dyn_ltree, t.l_desc.max_code),
//                     ta(t, t.dyn_dtree, t.d_desc.max_code),
//                     tn(t, t.bl_desc),
//                     e = b - 1;
//                   e >= 3 && 0 === t.bl_tree[2 * B[e] + 1];
//                   e--
//                 );
//                 return (t.opt_len += 3 * (e + 1) + 5 + 5 + 4), e;
//               }
//               function tl(t, e, i, r) {
//                 var n;
//                 for (
//                   W(t, e - 257, 5), W(t, i - 1, 5), W(t, r - 4, 4), n = 0;
//                   n < r;
//                   n++
//                 )
//                   W(t, t.bl_tree[2 * B[n] + 1], 3);
//                 ts(t, t.dyn_ltree, e - 1), ts(t, t.dyn_dtree, i - 1);
//               }
//               function th(t) {
//                 var e,
//                   i = 4093624447;
//                 for (e = 0; e <= 31; e++, i >>>= 1)
//                   if (1 & i && 0 !== t.dyn_ltree[2 * e]) return a;
//                 if (
//                   0 !== t.dyn_ltree[18] ||
//                   0 !== t.dyn_ltree[20] ||
//                   0 !== t.dyn_ltree[26]
//                 )
//                   return s;
//                 for (e = 32; e < m; e++) if (0 !== t.dyn_ltree[2 * e]) return s;
//                 return a;
//               }
//               l(j);
//               var tu = !1;
//               function tf(t) {
//                 tu || (X(), (tu = !0)),
//                   (t.l_desc = new G(t.dyn_ltree, U)),
//                   (t.d_desc = new G(t.dyn_dtree, D)),
//                   (t.bl_desc = new G(t.bl_tree, N)),
//                   (t.bi_buf = 0),
//                   (t.bi_valid = 0),
//                   J(t);
//               }
//               function tc(t, e, i, r) {
//                 W(t, (h << 1) + (r ? 1 : 0), 3), tt(t, e, i);
//               }
//               function td(t) {
//                 W(t, u << 1, 3), q(t, E, P), V(t);
//               }
//               function tp(t, e, i, r) {
//                 var a,
//                   s,
//                   l = 0;
//                 t.level > 0
//                   ? (t.strm.data_type === o && (t.strm.data_type = th(t)),
//                     tn(t, t.l_desc),
//                     tn(t, t.d_desc),
//                     (l = to(t)),
//                     (a = (t.opt_len + 3 + 7) >>> 3),
//                     (s = (t.static_len + 3 + 7) >>> 3) <= a && (a = s))
//                   : (a = s = i + 5),
//                   i + 4 <= a && -1 !== e
//                     ? tc(t, e, i, r)
//                     : t.strategy === n || s === a
//                     ? (W(t, (u << 1) + (r ? 1 : 0), 3), tr(t, P, O))
//                     : (W(t, (f << 1) + (r ? 1 : 0), 3),
//                       tl(
//                         t,
//                         t.l_desc.max_code + 1,
//                         t.d_desc.max_code + 1,
//                         l + 1
//                       ),
//                       tr(t, t.dyn_ltree, t.dyn_dtree)),
//                   J(t),
//                   r && Q(t);
//               }
//               function tm(t, e, i) {
//                 return (
//                   (t.pending_buf[t.d_buf + 2 * t.last_lit] = (e >>> 8) & 255),
//                   (t.pending_buf[t.d_buf + 2 * t.last_lit + 1] = 255 & e),
//                   (t.pending_buf[t.l_buf + t.last_lit] = 255 & i),
//                   t.last_lit++,
//                   0 === e
//                     ? t.dyn_ltree[2 * i]++
//                     : (t.matches++,
//                       e--,
//                       t.dyn_ltree[2 * (z[i] + m + 1)]++,
//                       t.dyn_dtree[2 * Z(e)]++),
//                   t.last_lit === t.lit_bufsize - 1
//                 );
//               }
//               (i._tr_init = tf),
//                 (i._tr_stored_block = tc),
//                 (i._tr_flush_block = tp),
//                 (i._tr_tally = tm),
//                 (i._tr_align = td);
//             },
//             { "../utils/common": 52 },
//           ],
//           62: [
//             function (t, e, i) {
//               function r() {
//                 (this.input = null),
//                   (this.next_in = 0),
//                   (this.avail_in = 0),
//                   (this.total_in = 0),
//                   (this.output = null),
//                   (this.next_out = 0),
//                   (this.avail_out = 0),
//                   (this.total_out = 0),
//                   (this.msg = ""),
//                   (this.state = null),
//                   (this.data_type = 2),
//                   (this.adler = 0);
//               }
//               e.exports = r;
//             },
//             {},
//           ],
//           63: [
//             function (t, e, i) {
//               var r,
//                 n,
//                 a = (e.exports = {});
//               function s() {
//                 throw Error("setTimeout has not been defined");
//               }
//               function o() {
//                 throw Error("clearTimeout has not been defined");
//               }
//               function l(t) {
//                 if (r === setTimeout) return setTimeout(t, 0);
//                 if ((r === s || !r) && setTimeout)
//                   return (r = setTimeout), setTimeout(t, 0);
//                 try {
//                   return r(t, 0);
//                 } catch (e) {
//                   try {
//                     return r.call(null, t, 0);
//                   } catch (e) {
//                     return r.call(this, t, 0);
//                   }
//                 }
//               }
//               function h(t) {
//                 if (n === clearTimeout) return clearTimeout(t);
//                 if ((n === o || !n) && clearTimeout)
//                   return (n = clearTimeout), clearTimeout(t);
//                 try {
//                   return n(t);
//                 } catch (e) {
//                   try {
//                     return n.call(null, t);
//                   } catch (e) {
//                     return n.call(this, t);
//                   }
//                 }
//               }
//               !(function () {
//                 try {
//                   r = "function" == typeof setTimeout ? setTimeout : s;
//                 } catch (t) {
//                   r = s;
//                 }
//                 try {
//                   n = "function" == typeof clearTimeout ? clearTimeout : o;
//                 } catch (t) {
//                   n = o;
//                 }
//               })();
//               var u,
//                 f = [],
//                 c = !1,
//                 d = -1;
//               function p() {
//                 c &&
//                   u &&
//                   ((c = !1),
//                   u.length ? (f = u.concat(f)) : (d = -1),
//                   f.length && m());
//               }
//               function m() {
//                 if (!c) {
//                   var t = l(p);
//                   c = !0;
//                   for (var e = f.length; e; ) {
//                     for (u = f, f = []; ++d < e; ) u && u[d].run();
//                     (d = -1), (e = f.length);
//                   }
//                   (u = null), (c = !1), h(t);
//                 }
//               }
//               function g(t, e) {
//                 (this.fun = t), (this.array = e);
//               }
//               function _() {}
//               (a.nextTick = function (t) {
//                 var e = Array(arguments.length - 1);
//                 if (arguments.length > 1)
//                   for (var i = 1; i < arguments.length; i++)
//                     e[i - 1] = arguments[i];
//                 f.push(new g(t, e)), 1 !== f.length || c || l(m);
//               }),
//                 (g.prototype.run = function () {
//                   this.fun.apply(null, this.array);
//                 }),
//                 (a.title = "browser"),
//                 (a.browser = !0),
//                 (a.env = {}),
//                 (a.argv = []),
//                 (a.version = ""),
//                 (a.versions = {}),
//                 (a.on = _),
//                 (a.addListener = _),
//                 (a.once = _),
//                 (a.off = _),
//                 (a.removeListener = _),
//                 (a.removeAllListeners = _),
//                 (a.emit = _),
//                 (a.prependListener = _),
//                 (a.prependOnceListener = _),
//                 (a.listeners = function (t) {
//                   return [];
//                 }),
//                 (a.binding = function (t) {
//                   throw Error("process.binding is not supported");
//                 }),
//                 (a.cwd = function () {
//                   return "/";
//                 }),
//                 (a.chdir = function (t) {
//                   throw Error("process.chdir is not supported");
//                 }),
//                 (a.umask = function () {
//                   return 0;
//                 });
//             },
//             {},
//           ],
//           64: [
//             function (t, e, i) {
//               var r = t("buffer"),
//                 n = r.Buffer;
//               function a(t, e) {
//                 for (var i in t) e[i] = t[i];
//               }
//               function s(t, e, i) {
//                 return n(t, e, i);
//               }
//               n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow
//                 ? (e.exports = r)
//                 : (a(r, i), (i.Buffer = s)),
//                 (s.prototype = Object.create(n.prototype)),
//                 a(n, s),
//                 (s.from = function (t, e, i) {
//                   if ("number" == typeof t)
//                     throw TypeError("Argument must not be a number");
//                   return n(t, e, i);
//                 }),
//                 (s.alloc = function (t, e, i) {
//                   if ("number" != typeof t)
//                     throw TypeError("Argument must be a number");
//                   var r = n(t);
//                   return (
//                     void 0 !== e
//                       ? "string" == typeof i
//                         ? r.fill(e, i)
//                         : r.fill(e)
//                       : r.fill(0),
//                     r
//                   );
//                 }),
//                 (s.allocUnsafe = function (t) {
//                   if ("number" != typeof t)
//                     throw TypeError("Argument must be a number");
//                   return n(t);
//                 }),
//                 (s.allocUnsafeSlow = function (t) {
//                   if ("number" != typeof t)
//                     throw TypeError("Argument must be a number");
//                   return r.SlowBuffer(t);
//                 });
//             },
//             { buffer: 32 },
//           ],
//           65: [
//             function (t, e, i) {
//               e.exports = n;
//               var r = t("events").EventEmitter;
//               function n() {
//                 r.call(this);
//               }
//               t("inherits")(n, r),
//                 (n.Readable = t("readable-stream/lib/_stream_readable.js")),
//                 (n.Writable = t("readable-stream/lib/_stream_writable.js")),
//                 (n.Duplex = t("readable-stream/lib/_stream_duplex.js")),
//                 (n.Transform = t("readable-stream/lib/_stream_transform.js")),
//                 (n.PassThrough = t(
//                   "readable-stream/lib/_stream_passthrough.js"
//                 )),
//                 (n.finished = t(
//                   "readable-stream/lib/internal/streams/end-of-stream.js"
//                 )),
//                 (n.pipeline = t(
//                   "readable-stream/lib/internal/streams/pipeline.js"
//                 )),
//                 (n.Stream = n),
//                 (n.prototype.pipe = function (t, e) {
//                   var i = this;
//                   function n(e) {
//                     t.writable && !1 === t.write(e) && i.pause && i.pause();
//                   }
//                   function a() {
//                     i.readable && i.resume && i.resume();
//                   }
//                   i.on("data", n),
//                     t.on("drain", a),
//                     t._isStdio ||
//                       (e && !1 === e.end) ||
//                       (i.on("end", o), i.on("close", l));
//                   var s = !1;
//                   function o() {
//                     s || ((s = !0), t.end());
//                   }
//                   function l() {
//                     s ||
//                       ((s = !0), "function" == typeof t.destroy && t.destroy());
//                   }
//                   function h(t) {
//                     if ((u(), 0 === r.listenerCount(this, "error"))) throw t;
//                   }
//                   function u() {
//                     i.removeListener("data", n),
//                       t.removeListener("drain", a),
//                       i.removeListener("end", o),
//                       i.removeListener("close", l),
//                       i.removeListener("error", h),
//                       t.removeListener("error", h),
//                       i.removeListener("end", u),
//                       i.removeListener("close", u),
//                       t.removeListener("close", u);
//                   }
//                   return (
//                     i.on("error", h),
//                     t.on("error", h),
//                     i.on("end", u),
//                     i.on("close", u),
//                     t.on("close", u),
//                     t.emit("pipe", i),
//                     t
//                   );
//                 });
//             },
//             {
//               events: 35,
//               inherits: 46,
//               "readable-stream/lib/_stream_duplex.js": 67,
//               "readable-stream/lib/_stream_passthrough.js": 68,
//               "readable-stream/lib/_stream_readable.js": 69,
//               "readable-stream/lib/_stream_transform.js": 70,
//               "readable-stream/lib/_stream_writable.js": 71,
//               "readable-stream/lib/internal/streams/end-of-stream.js": 75,
//               "readable-stream/lib/internal/streams/pipeline.js": 77,
//             },
//           ],
//           66: [
//             function (t, e, i) {
//               function r(t, e) {
//                 (t.prototype = Object.create(e.prototype)),
//                   (t.prototype.constructor = t),
//                   (t.__proto__ = e);
//               }
//               var n = {};
//               function a(t, e, i) {
//                 function a(t, i, r) {
//                   return "string" == typeof e ? e : e(t, i, r);
//                 }
//                 i || (i = Error);
//                 var s = (function (t) {
//                   function e(e, i, r) {
//                     return t.call(this, a(e, i, r)) || this;
//                   }
//                   return r(e, t), e;
//                 })(i);
//                 (s.prototype.name = i.name), (s.prototype.code = t), (n[t] = s);
//               }
//               function s(t, e) {
//                 if (Array.isArray(t)) {
//                   var i = t.length;
//                   return (
//                     (t = t.map(function (t) {
//                       return String(t);
//                     })),
//                     i > 2
//                       ? "one of "
//                           .concat(e, " ")
//                           .concat(t.slice(0, i - 1).join(", "), ", or ") +
//                         t[i - 1]
//                       : 2 === i
//                       ? "one of "
//                           .concat(e, " ")
//                           .concat(t[0], " or ")
//                           .concat(t[1])
//                       : "of ".concat(e, " ").concat(t[0])
//                   );
//                 }
//                 return "of ".concat(e, " ").concat(String(t));
//               }
//               function o(t, e, i) {
//                 return t.substr(0, e.length) === e;
//               }
//               function l(t, e, i) {
//                 return (
//                   (void 0 === i || i > t.length) && (i = t.length),
//                   t.substring(i - e.length, i) === e
//                 );
//               }
//               function h(t, e, i) {
//                 return (
//                   "number" != typeof i && (i = 0),
//                   !(i + e.length > t.length) && -1 !== t.indexOf(e, i)
//                 );
//               }
//               a(
//                 "ERR_INVALID_OPT_VALUE",
//                 function (t, e) {
//                   return (
//                     'The value "' + e + '" is invalid for option "' + t + '"'
//                   );
//                 },
//                 TypeError
//               ),
//                 a(
//                   "ERR_INVALID_ARG_TYPE",
//                   function (t, e, i) {
//                     var r, n;
//                     if (
//                       ("string" == typeof e && o(e, "not ")
//                         ? ((r = "must not be"), (e = e.replace(/^not /, "")))
//                         : (r = "must be"),
//                       l(t, " argument"))
//                     )
//                       n = "The "
//                         .concat(t, " ")
//                         .concat(r, " ")
//                         .concat(s(e, "type"));
//                     else {
//                       var a = h(t, ".") ? "property" : "argument";
//                       n = 'The "'
//                         .concat(t, '" ')
//                         .concat(a, " ")
//                         .concat(r, " ")
//                         .concat(s(e, "type"));
//                     }
//                     return n + ". Received type ".concat(typeof i);
//                   },
//                   TypeError
//                 ),
//                 a("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"),
//                 a("ERR_METHOD_NOT_IMPLEMENTED", function (t) {
//                   return "The " + t + " method is not implemented";
//                 }),
//                 a("ERR_STREAM_PREMATURE_CLOSE", "Premature close"),
//                 a("ERR_STREAM_DESTROYED", function (t) {
//                   return "Cannot call " + t + " after a stream was destroyed";
//                 }),
//                 a("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"),
//                 a("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"),
//                 a("ERR_STREAM_WRITE_AFTER_END", "write after end"),
//                 a(
//                   "ERR_STREAM_NULL_VALUES",
//                   "May not write null values to stream",
//                   TypeError
//                 ),
//                 a(
//                   "ERR_UNKNOWN_ENCODING",
//                   function (t) {
//                     return "Unknown encoding: " + t;
//                   },
//                   TypeError
//                 ),
//                 a(
//                   "ERR_STREAM_UNSHIFT_AFTER_END_EVENT",
//                   "stream.unshift() after end event"
//                 ),
//                 (e.exports.codes = n);
//             },
//             {},
//           ],
//           67: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   var r =
//                     Object.keys ||
//                     function (t) {
//                       var e = [];
//                       for (var i in t) e.push(i);
//                       return e;
//                     };
//                   e.exports = h;
//                   var n = t("./_stream_readable"),
//                     a = t("./_stream_writable");
//                   t("inherits")(h, n);
//                   for (var s = r(a.prototype), o = 0; o < s.length; o++) {
//                     var l = s[o];
//                     h.prototype[l] || (h.prototype[l] = a.prototype[l]);
//                   }
//                   function h(t) {
//                     if (!(this instanceof h)) return new h(t);
//                     n.call(this, t),
//                       a.call(this, t),
//                       (this.allowHalfOpen = !0),
//                       t &&
//                         (!1 === t.readable && (this.readable = !1),
//                         !1 === t.writable && (this.writable = !1),
//                         !1 === t.allowHalfOpen &&
//                           ((this.allowHalfOpen = !1), this.once("end", u)));
//                   }
//                   function u() {
//                     this._writableState.ended || i.nextTick(f, this);
//                   }
//                   function f(t) {
//                     t.end();
//                   }
//                   Object.defineProperty(h.prototype, "writableHighWaterMark", {
//                     enumerable: !1,
//                     get: function () {
//                       return this._writableState.highWaterMark;
//                     },
//                   }),
//                     Object.defineProperty(h.prototype, "writableBuffer", {
//                       enumerable: !1,
//                       get: function () {
//                         return (
//                           this._writableState && this._writableState.getBuffer()
//                         );
//                       },
//                     }),
//                     Object.defineProperty(h.prototype, "writableLength", {
//                       enumerable: !1,
//                       get: function () {
//                         return this._writableState.length;
//                       },
//                     }),
//                     Object.defineProperty(h.prototype, "destroyed", {
//                       enumerable: !1,
//                       get: function () {
//                         return (
//                           void 0 !== this._readableState &&
//                           void 0 !== this._writableState &&
//                           this._readableState.destroyed &&
//                           this._writableState.destroyed
//                         );
//                       },
//                       set: function (t) {
//                         void 0 !== this._readableState &&
//                           void 0 !== this._writableState &&
//                           ((this._readableState.destroyed = t),
//                           (this._writableState.destroyed = t));
//                       },
//                     });
//                 }).call(this);
//               }).call(this, t("_process"));
//             },
//             {
//               "./_stream_readable": 69,
//               "./_stream_writable": 71,
//               _process: 63,
//               inherits: 46,
//             },
//           ],
//           68: [
//             function (t, e, i) {
//               e.exports = n;
//               var r = t("./_stream_transform");
//               function n(t) {
//                 if (!(this instanceof n)) return new n(t);
//                 r.call(this, t);
//               }
//               t("inherits")(n, r),
//                 (n.prototype._transform = function (t, e, i) {
//                   i(null, t);
//                 });
//             },
//             { "./_stream_transform": 70, inherits: 46 },
//           ],
//           69: [
//             function (t, e, i) {
//               (function (i, r) {
//                 (function () {
//                   (e.exports = I),
//                     (I.ReadableState = A),
//                     t("events").EventEmitter;
//                   var n = function (t, e) {
//                       return t.listeners(e).length;
//                     },
//                     a = t("./internal/streams/stream"),
//                     s = t("buffer").Buffer,
//                     o = r.Uint8Array || function () {};
//                   function l(t) {
//                     return s.from(t);
//                   }
//                   function h(t) {
//                     return s.isBuffer(t) || t instanceof o;
//                   }
//                   var u,
//                     f,
//                     c = t("util");
//                   f = c && c.debuglog ? c.debuglog("stream") : function () {};
//                   var d,
//                     p,
//                     m,
//                     g = t("./internal/streams/buffer_list"),
//                     _ = t("./internal/streams/destroy"),
//                     b = t("./internal/streams/state").getHighWaterMark,
//                     y = t("../errors").codes,
//                     v = y.ERR_INVALID_ARG_TYPE,
//                     w = y.ERR_STREAM_PUSH_AFTER_EOF,
//                     x = y.ERR_METHOD_NOT_IMPLEMENTED,
//                     E = y.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
//                   t("inherits")(I, a);
//                   var k = _.errorOrDestroy,
//                     M = ["error", "close", "destroy", "pause", "resume"];
//                   function S(t, e, i) {
//                     if ("function" == typeof t.prependListener)
//                       return t.prependListener(e, i);
//                     t._events && t._events[e]
//                       ? Array.isArray(t._events[e])
//                         ? t._events[e].unshift(i)
//                         : (t._events[e] = [i, t._events[e]])
//                       : t.on(e, i);
//                   }
//                   function A(e, i, r) {
//                     (u = u || t("./_stream_duplex")),
//                       (e = e || {}),
//                       "boolean" != typeof r && (r = i instanceof u),
//                       (this.objectMode = !!e.objectMode),
//                       r &&
//                         (this.objectMode =
//                           this.objectMode || !!e.readableObjectMode),
//                       (this.highWaterMark = b(
//                         this,
//                         e,
//                         "readableHighWaterMark",
//                         r
//                       )),
//                       (this.buffer = new g()),
//                       (this.length = 0),
//                       (this.pipes = null),
//                       (this.pipesCount = 0),
//                       (this.flowing = null),
//                       (this.ended = !1),
//                       (this.endEmitted = !1),
//                       (this.reading = !1),
//                       (this.sync = !0),
//                       (this.needReadable = !1),
//                       (this.emittedReadable = !1),
//                       (this.readableListening = !1),
//                       (this.resumeScheduled = !1),
//                       (this.paused = !0),
//                       (this.emitClose = !1 !== e.emitClose),
//                       (this.autoDestroy = !!e.autoDestroy),
//                       (this.destroyed = !1),
//                       (this.defaultEncoding = e.defaultEncoding || "utf8"),
//                       (this.awaitDrain = 0),
//                       (this.readingMore = !1),
//                       (this.decoder = null),
//                       (this.encoding = null),
//                       e.encoding &&
//                         (d || (d = t("string_decoder/").StringDecoder),
//                         (this.decoder = new d(e.encoding)),
//                         (this.encoding = e.encoding));
//                   }
//                   function I(e) {
//                     if (
//                       ((u = u || t("./_stream_duplex")), !(this instanceof I))
//                     )
//                       return new I(e);
//                     var i = this instanceof u;
//                     (this._readableState = new A(e, this, i)),
//                       (this.readable = !0),
//                       e &&
//                         ("function" == typeof e.read && (this._read = e.read),
//                         "function" == typeof e.destroy &&
//                           (this._destroy = e.destroy)),
//                       a.call(this);
//                   }
//                   function T(t, e, i, r, n) {
//                     f("readableAddChunk", e);
//                     var a,
//                       o = t._readableState;
//                     if (null === e) (o.reading = !1), z(t, o);
//                     else if ((n || (a = R(o, e)), a)) k(t, a);
//                     else if (o.objectMode || (e && e.length > 0)) {
//                       if (
//                         ("string" == typeof e ||
//                           o.objectMode ||
//                           Object.getPrototypeOf(e) === s.prototype ||
//                           (e = l(e)),
//                         r)
//                       )
//                         o.endEmitted ? k(t, new E()) : B(t, o, e, !0);
//                       else if (o.ended) k(t, new w());
//                       else {
//                         if (o.destroyed) return !1;
//                         (o.reading = !1),
//                           o.decoder && !i
//                             ? ((e = o.decoder.write(e)),
//                               o.objectMode || 0 !== e.length
//                                 ? B(t, o, e, !1)
//                                 : D(t, o))
//                             : B(t, o, e, !1);
//                       }
//                     } else r || ((o.reading = !1), D(t, o));
//                     return (
//                       !o.ended && (o.length < o.highWaterMark || 0 === o.length)
//                     );
//                   }
//                   function B(t, e, i, r) {
//                     e.flowing && 0 === e.length && !e.sync
//                       ? ((e.awaitDrain = 0), t.emit("data", i))
//                       : ((e.length += e.objectMode ? 1 : i.length),
//                         r ? e.buffer.unshift(i) : e.buffer.push(i),
//                         e.needReadable && L(t)),
//                       D(t, e);
//                   }
//                   function R(t, e) {
//                     var i;
//                     return (
//                       h(e) ||
//                         "string" == typeof e ||
//                         void 0 === e ||
//                         t.objectMode ||
//                         (i = new v(
//                           "chunk",
//                           ["string", "Buffer", "Uint8Array"],
//                           e
//                         )),
//                       i
//                     );
//                   }
//                   Object.defineProperty(I.prototype, "destroyed", {
//                     enumerable: !1,
//                     get: function () {
//                       return (
//                         void 0 !== this._readableState &&
//                         this._readableState.destroyed
//                       );
//                     },
//                     set: function (t) {
//                       this._readableState &&
//                         (this._readableState.destroyed = t);
//                     },
//                   }),
//                     (I.prototype.destroy = _.destroy),
//                     (I.prototype._undestroy = _.undestroy),
//                     (I.prototype._destroy = function (t, e) {
//                       e(t);
//                     }),
//                     (I.prototype.push = function (t, e) {
//                       var i,
//                         r = this._readableState;
//                       return (
//                         r.objectMode
//                           ? (i = !0)
//                           : "string" == typeof t &&
//                             ((e = e || r.defaultEncoding) !== r.encoding &&
//                               ((t = s.from(t, e)), (e = "")),
//                             (i = !0)),
//                         T(this, t, e, !1, i)
//                       );
//                     }),
//                     (I.prototype.unshift = function (t) {
//                       return T(this, t, null, !0, !1);
//                     }),
//                     (I.prototype.isPaused = function () {
//                       return !1 === this._readableState.flowing;
//                     }),
//                     (I.prototype.setEncoding = function (e) {
//                       d || (d = t("string_decoder/").StringDecoder);
//                       var i = new d(e);
//                       (this._readableState.decoder = i),
//                         (this._readableState.encoding =
//                           this._readableState.decoder.encoding);
//                       for (
//                         var r = this._readableState.buffer.head, n = "";
//                         null !== r;

//                       )
//                         (n += i.write(r.data)), (r = r.next);
//                       return (
//                         this._readableState.buffer.clear(),
//                         "" !== n && this._readableState.buffer.push(n),
//                         (this._readableState.length = n.length),
//                         this
//                       );
//                     });
//                   var P = 1073741824;
//                   function O(t) {
//                     return (
//                       t >= P
//                         ? (t = P)
//                         : (t--,
//                           (t |= t >>> 1),
//                           (t |= t >>> 2),
//                           (t |= t >>> 4),
//                           (t |= t >>> 8),
//                           (t |= t >>> 16),
//                           t++),
//                       t
//                     );
//                   }
//                   function C(t, e) {
//                     return t <= 0 || (0 === e.length && e.ended)
//                       ? 0
//                       : e.objectMode
//                       ? 1
//                       : t != t
//                       ? e.flowing && e.length
//                         ? e.buffer.head.data.length
//                         : e.length
//                       : (t > e.highWaterMark && (e.highWaterMark = O(t)),
//                         t <= e.length
//                           ? t
//                           : e.ended
//                           ? e.length
//                           : ((e.needReadable = !0), 0));
//                   }
//                   function z(t, e) {
//                     if ((f("onEofChunk"), !e.ended)) {
//                       if (e.decoder) {
//                         var i = e.decoder.end();
//                         i &&
//                           i.length &&
//                           (e.buffer.push(i),
//                           (e.length += e.objectMode ? 1 : i.length));
//                       }
//                       (e.ended = !0),
//                         e.sync
//                           ? L(t)
//                           : ((e.needReadable = !1),
//                             e.emittedReadable ||
//                               ((e.emittedReadable = !0), U(t)));
//                     }
//                   }
//                   function L(t) {
//                     var e = t._readableState;
//                     f("emitReadable", e.needReadable, e.emittedReadable),
//                       (e.needReadable = !1),
//                       e.emittedReadable ||
//                         (f("emitReadable", e.flowing),
//                         (e.emittedReadable = !0),
//                         i.nextTick(U, t));
//                   }
//                   function U(t) {
//                     var e = t._readableState;
//                     f("emitReadable_", e.destroyed, e.length, e.ended),
//                       !e.destroyed &&
//                         (e.length || e.ended) &&
//                         (t.emit("readable"), (e.emittedReadable = !1)),
//                       (e.needReadable =
//                         !e.flowing && !e.ended && e.length <= e.highWaterMark),
//                       W(t);
//                   }
//                   function D(t, e) {
//                     e.readingMore ||
//                       ((e.readingMore = !0), i.nextTick(N, t, e));
//                   }
//                   function N(t, e) {
//                     for (
//                       ;
//                       !e.reading &&
//                       !e.ended &&
//                       (e.length < e.highWaterMark ||
//                         (e.flowing && 0 === e.length));

//                     ) {
//                       var i = e.length;
//                       if (
//                         (f("maybeReadMore read 0"), t.read(0), i === e.length)
//                       )
//                         break;
//                     }
//                     e.readingMore = !1;
//                   }
//                   function j(t) {
//                     return function () {
//                       var e = t._readableState;
//                       f("pipeOnDrain", e.awaitDrain),
//                         e.awaitDrain && e.awaitDrain--,
//                         0 === e.awaitDrain &&
//                           n(t, "data") &&
//                           ((e.flowing = !0), W(t));
//                     };
//                   }
//                   function F(t) {
//                     var e = t._readableState;
//                     (e.readableListening = t.listenerCount("readable") > 0),
//                       e.resumeScheduled && !e.paused
//                         ? (e.flowing = !0)
//                         : t.listenerCount("data") > 0 && t.resume();
//                   }
//                   function G(t) {
//                     f("readable nexttick read 0"), t.read(0);
//                   }
//                   function Z(t, e) {
//                     e.resumeScheduled ||
//                       ((e.resumeScheduled = !0), i.nextTick(H, t, e));
//                   }
//                   function H(t, e) {
//                     f("resume", e.reading),
//                       e.reading || t.read(0),
//                       (e.resumeScheduled = !1),
//                       t.emit("resume"),
//                       W(t),
//                       e.flowing && !e.reading && t.read(0);
//                   }
//                   function W(t) {
//                     var e = t._readableState;
//                     for (
//                       f("flow", e.flowing);
//                       e.flowing && null !== t.read();

//                     );
//                   }
//                   function q(t, e) {
//                     var i;
//                     return 0 === e.length
//                       ? null
//                       : (e.objectMode
//                           ? (i = e.buffer.shift())
//                           : !t || t >= e.length
//                           ? ((i = e.decoder
//                               ? e.buffer.join("")
//                               : 1 === e.buffer.length
//                               ? e.buffer.first()
//                               : e.buffer.concat(e.length)),
//                             e.buffer.clear())
//                           : (i = e.buffer.consume(t, e.decoder)),
//                         i);
//                   }
//                   function Y(t) {
//                     var e = t._readableState;
//                     f("endReadable", e.endEmitted),
//                       e.endEmitted || ((e.ended = !0), i.nextTick(V, e, t));
//                   }
//                   function V(t, e) {
//                     if (
//                       (f("endReadableNT", t.endEmitted, t.length),
//                       !t.endEmitted &&
//                         0 === t.length &&
//                         ((t.endEmitted = !0),
//                         (e.readable = !1),
//                         e.emit("end"),
//                         t.autoDestroy))
//                     ) {
//                       var i = e._writableState;
//                       (!i || (i.autoDestroy && i.finished)) && e.destroy();
//                     }
//                   }
//                   function $(t, e) {
//                     for (var i = 0, r = t.length; i < r; i++)
//                       if (t[i] === e) return i;
//                     return -1;
//                   }
//                   (I.prototype.read = function (t) {
//                     f("read", t), (t = parseInt(t, 10));
//                     var e = this._readableState,
//                       i = t;
//                     if (
//                       (0 !== t && (e.emittedReadable = !1),
//                       0 === t &&
//                         e.needReadable &&
//                         ((0 !== e.highWaterMark
//                           ? e.length >= e.highWaterMark
//                           : e.length > 0) ||
//                           e.ended))
//                     )
//                       return (
//                         f("read: emitReadable", e.length, e.ended),
//                         0 === e.length && e.ended ? Y(this) : L(this),
//                         null
//                       );
//                     if (0 === (t = C(t, e)) && e.ended)
//                       return 0 === e.length && Y(this), null;
//                     var r,
//                       n = e.needReadable;
//                     return (
//                       f("need readable", n),
//                       (0 === e.length || e.length - t < e.highWaterMark) &&
//                         f("length less than watermark", (n = !0)),
//                       e.ended || e.reading
//                         ? f("reading or ended", (n = !1))
//                         : n &&
//                           (f("do read"),
//                           (e.reading = !0),
//                           (e.sync = !0),
//                           0 === e.length && (e.needReadable = !0),
//                           this._read(e.highWaterMark),
//                           (e.sync = !1),
//                           e.reading || (t = C(i, e))),
//                       null === (r = t > 0 ? q(t, e) : null)
//                         ? ((e.needReadable = e.length <= e.highWaterMark),
//                           (t = 0))
//                         : ((e.length -= t), (e.awaitDrain = 0)),
//                       0 === e.length &&
//                         (e.ended || (e.needReadable = !0),
//                         i !== t && e.ended && Y(this)),
//                       null !== r && this.emit("data", r),
//                       r
//                     );
//                   }),
//                     (I.prototype._read = function (t) {
//                       k(this, new x("_read()"));
//                     }),
//                     (I.prototype.pipe = function (t, e) {
//                       var r = this,
//                         a = this._readableState;
//                       switch (a.pipesCount) {
//                         case 0:
//                           a.pipes = t;
//                           break;
//                         case 1:
//                           a.pipes = [a.pipes, t];
//                           break;
//                         default:
//                           a.pipes.push(t);
//                       }
//                       (a.pipesCount += 1),
//                         f("pipe count=%d opts=%j", a.pipesCount, e);
//                       var s =
//                         (e && !1 === e.end) || t === i.stdout || t === i.stderr
//                           ? _
//                           : l;
//                       function o(t, e) {
//                         f("onunpipe"),
//                           t === r &&
//                             e &&
//                             !1 === e.hasUnpiped &&
//                             ((e.hasUnpiped = !0), c());
//                       }
//                       function l() {
//                         f("onend"), t.end();
//                       }
//                       a.endEmitted ? i.nextTick(s) : r.once("end", s),
//                         t.on("unpipe", o);
//                       var h = j(r);
//                       t.on("drain", h);
//                       var u = !1;
//                       function c() {
//                         f("cleanup"),
//                           t.removeListener("close", m),
//                           t.removeListener("finish", g),
//                           t.removeListener("drain", h),
//                           t.removeListener("error", p),
//                           t.removeListener("unpipe", o),
//                           r.removeListener("end", l),
//                           r.removeListener("end", _),
//                           r.removeListener("data", d),
//                           (u = !0),
//                           a.awaitDrain &&
//                             (!t._writableState || t._writableState.needDrain) &&
//                             h();
//                       }
//                       function d(e) {
//                         f("ondata");
//                         var i = t.write(e);
//                         f("dest.write", i),
//                           !1 === i &&
//                             (((1 === a.pipesCount && a.pipes === t) ||
//                               (a.pipesCount > 1 && -1 !== $(a.pipes, t))) &&
//                               !u &&
//                               (f("false write response, pause", a.awaitDrain),
//                               a.awaitDrain++),
//                             r.pause());
//                       }
//                       function p(e) {
//                         f("onerror", e),
//                           _(),
//                           t.removeListener("error", p),
//                           0 === n(t, "error") && k(t, e);
//                       }
//                       function m() {
//                         t.removeListener("finish", g), _();
//                       }
//                       function g() {
//                         f("onfinish"), t.removeListener("close", m), _();
//                       }
//                       function _() {
//                         f("unpipe"), r.unpipe(t);
//                       }
//                       return (
//                         r.on("data", d),
//                         S(t, "error", p),
//                         t.once("close", m),
//                         t.once("finish", g),
//                         t.emit("pipe", r),
//                         a.flowing || (f("pipe resume"), r.resume()),
//                         t
//                       );
//                     }),
//                     (I.prototype.unpipe = function (t) {
//                       var e = this._readableState,
//                         i = { hasUnpiped: !1 };
//                       if (0 === e.pipesCount) return this;
//                       if (1 === e.pipesCount)
//                         return (
//                           (t && t !== e.pipes) ||
//                             (t || (t = e.pipes),
//                             (e.pipes = null),
//                             (e.pipesCount = 0),
//                             (e.flowing = !1),
//                             t && t.emit("unpipe", this, i)),
//                           this
//                         );
//                       if (!t) {
//                         var r = e.pipes,
//                           n = e.pipesCount;
//                         (e.pipes = null), (e.pipesCount = 0), (e.flowing = !1);
//                         for (var a = 0; a < n; a++)
//                           r[a].emit("unpipe", this, { hasUnpiped: !1 });
//                         return this;
//                       }
//                       var s = $(e.pipes, t);
//                       return (
//                         -1 === s ||
//                           (e.pipes.splice(s, 1),
//                           (e.pipesCount -= 1),
//                           1 === e.pipesCount && (e.pipes = e.pipes[0]),
//                           t.emit("unpipe", this, i)),
//                         this
//                       );
//                     }),
//                     (I.prototype.on = function (t, e) {
//                       var r = a.prototype.on.call(this, t, e),
//                         n = this._readableState;
//                       return (
//                         "data" === t
//                           ? ((n.readableListening =
//                               this.listenerCount("readable") > 0),
//                             !1 !== n.flowing && this.resume())
//                           : "readable" === t &&
//                             (n.endEmitted ||
//                               n.readableListening ||
//                               ((n.readableListening = n.needReadable = !0),
//                               (n.flowing = !1),
//                               (n.emittedReadable = !1),
//                               f("on readable", n.length, n.reading),
//                               n.length
//                                 ? L(this)
//                                 : n.reading || i.nextTick(G, this))),
//                         r
//                       );
//                     }),
//                     (I.prototype.addListener = I.prototype.on),
//                     (I.prototype.removeListener = function (t, e) {
//                       var r = a.prototype.removeListener.call(this, t, e);
//                       return "readable" === t && i.nextTick(F, this), r;
//                     }),
//                     (I.prototype.removeAllListeners = function (t) {
//                       var e = a.prototype.removeAllListeners.apply(
//                         this,
//                         arguments
//                       );
//                       return (
//                         ("readable" !== t && void 0 !== t) ||
//                           i.nextTick(F, this),
//                         e
//                       );
//                     }),
//                     (I.prototype.resume = function () {
//                       var t = this._readableState;
//                       return (
//                         t.flowing ||
//                           (f("resume"),
//                           (t.flowing = !t.readableListening),
//                           Z(this, t)),
//                         (t.paused = !1),
//                         this
//                       );
//                     }),
//                     (I.prototype.pause = function () {
//                       return (
//                         f("call pause flowing=%j", this._readableState.flowing),
//                         !1 !== this._readableState.flowing &&
//                           (f("pause"),
//                           (this._readableState.flowing = !1),
//                           this.emit("pause")),
//                         (this._readableState.paused = !0),
//                         this
//                       );
//                     }),
//                     (I.prototype.wrap = function (t) {
//                       var e = this,
//                         i = this._readableState,
//                         r = !1;
//                       for (var n in (t.on("end", function () {
//                         if ((f("wrapped end"), i.decoder && !i.ended)) {
//                           var t = i.decoder.end();
//                           t && t.length && e.push(t);
//                         }
//                         e.push(null);
//                       }),
//                       t.on("data", function (n) {
//                         f("wrapped data"),
//                           i.decoder && (n = i.decoder.write(n)),
//                           (i.objectMode && null == n) ||
//                             ((i.objectMode || (n && n.length)) &&
//                               (e.push(n) || ((r = !0), t.pause())));
//                       }),
//                       t))
//                         void 0 === this[n] &&
//                           "function" == typeof t[n] &&
//                           (this[n] = (function (e) {
//                             return function () {
//                               return t[e].apply(t, arguments);
//                             };
//                           })(n));
//                       for (var a = 0; a < M.length; a++)
//                         t.on(M[a], this.emit.bind(this, M[a]));
//                       return (
//                         (this._read = function (e) {
//                           f("wrapped _read", e), r && ((r = !1), t.resume());
//                         }),
//                         this
//                       );
//                     }),
//                     "function" == typeof Symbol &&
//                       (I.prototype[Symbol.asyncIterator] = function () {
//                         return (
//                           void 0 === p &&
//                             (p = t("./internal/streams/async_iterator")),
//                           p(this)
//                         );
//                       }),
//                     Object.defineProperty(
//                       I.prototype,
//                       "readableHighWaterMark",
//                       {
//                         enumerable: !1,
//                         get: function () {
//                           return this._readableState.highWaterMark;
//                         },
//                       }
//                     ),
//                     Object.defineProperty(I.prototype, "readableBuffer", {
//                       enumerable: !1,
//                       get: function () {
//                         return (
//                           this._readableState && this._readableState.buffer
//                         );
//                       },
//                     }),
//                     Object.defineProperty(I.prototype, "readableFlowing", {
//                       enumerable: !1,
//                       get: function () {
//                         return this._readableState.flowing;
//                       },
//                       set: function (t) {
//                         this._readableState &&
//                           (this._readableState.flowing = t);
//                       },
//                     }),
//                     (I._fromList = q),
//                     Object.defineProperty(I.prototype, "readableLength", {
//                       enumerable: !1,
//                       get: function () {
//                         return this._readableState.length;
//                       },
//                     }),
//                     "function" == typeof Symbol &&
//                       (I.from = function (e, i) {
//                         return (
//                           void 0 === m && (m = t("./internal/streams/from")),
//                           m(I, e, i)
//                         );
//                       });
//                 }).call(this);
//               }).call(
//                 this,
//                 t("_process"),
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             {
//               "../errors": 66,
//               "./_stream_duplex": 67,
//               "./internal/streams/async_iterator": 72,
//               "./internal/streams/buffer_list": 73,
//               "./internal/streams/destroy": 74,
//               "./internal/streams/from": 76,
//               "./internal/streams/state": 78,
//               "./internal/streams/stream": 79,
//               _process: 63,
//               buffer: 32,
//               events: 35,
//               inherits: 46,
//               "string_decoder/": 80,
//               util: 29,
//             },
//           ],
//           70: [
//             function (t, e, i) {
//               e.exports = u;
//               var r = t("../errors").codes,
//                 n = r.ERR_METHOD_NOT_IMPLEMENTED,
//                 a = r.ERR_MULTIPLE_CALLBACK,
//                 s = r.ERR_TRANSFORM_ALREADY_TRANSFORMING,
//                 o = r.ERR_TRANSFORM_WITH_LENGTH_0,
//                 l = t("./_stream_duplex");
//               function h(t, e) {
//                 var i = this._transformState;
//                 i.transforming = !1;
//                 var r = i.writecb;
//                 if (null === r) return this.emit("error", new a());
//                 (i.writechunk = null),
//                   (i.writecb = null),
//                   null != e && this.push(e),
//                   r(t);
//                 var n = this._readableState;
//                 (n.reading = !1),
//                   (n.needReadable || n.length < n.highWaterMark) &&
//                     this._read(n.highWaterMark);
//               }
//               function u(t) {
//                 if (!(this instanceof u)) return new u(t);
//                 l.call(this, t),
//                   (this._transformState = {
//                     afterTransform: h.bind(this),
//                     needTransform: !1,
//                     transforming: !1,
//                     writecb: null,
//                     writechunk: null,
//                     writeencoding: null,
//                   }),
//                   (this._readableState.needReadable = !0),
//                   (this._readableState.sync = !1),
//                   t &&
//                     ("function" == typeof t.transform &&
//                       (this._transform = t.transform),
//                     "function" == typeof t.flush && (this._flush = t.flush)),
//                   this.on("prefinish", f);
//               }
//               function f() {
//                 var t = this;
//                 "function" != typeof this._flush ||
//                 this._readableState.destroyed
//                   ? c(this, null, null)
//                   : this._flush(function (e, i) {
//                       c(t, e, i);
//                     });
//               }
//               function c(t, e, i) {
//                 if (e) return t.emit("error", e);
//                 if ((null != i && t.push(i), t._writableState.length))
//                   throw new o();
//                 if (t._transformState.transforming) throw new s();
//                 return t.push(null);
//               }
//               t("inherits")(u, l),
//                 (u.prototype.push = function (t, e) {
//                   return (
//                     (this._transformState.needTransform = !1),
//                     l.prototype.push.call(this, t, e)
//                   );
//                 }),
//                 (u.prototype._transform = function (t, e, i) {
//                   i(new n("_transform()"));
//                 }),
//                 (u.prototype._write = function (t, e, i) {
//                   var r = this._transformState;
//                   if (
//                     ((r.writecb = i),
//                     (r.writechunk = t),
//                     (r.writeencoding = e),
//                     !r.transforming)
//                   ) {
//                     var n = this._readableState;
//                     (r.needTransform ||
//                       n.needReadable ||
//                       n.length < n.highWaterMark) &&
//                       this._read(n.highWaterMark);
//                   }
//                 }),
//                 (u.prototype._read = function (t) {
//                   var e = this._transformState;
//                   null === e.writechunk || e.transforming
//                     ? (e.needTransform = !0)
//                     : ((e.transforming = !0),
//                       this._transform(
//                         e.writechunk,
//                         e.writeencoding,
//                         e.afterTransform
//                       ));
//                 }),
//                 (u.prototype._destroy = function (t, e) {
//                   l.prototype._destroy.call(this, t, function (t) {
//                     e(t);
//                   });
//                 });
//             },
//             { "../errors": 66, "./_stream_duplex": 67, inherits: 46 },
//           ],
//           71: [
//             function (t, e, i) {
//               (function (i, r) {
//                 (function () {
//                   function n(t) {
//                     var e = this;
//                     (this.next = null),
//                       (this.entry = null),
//                       (this.finish = function () {
//                         H(e, t);
//                       });
//                   }
//                   (e.exports = A), (A.WritableState = S);
//                   var a = { deprecate: t("util-deprecate") },
//                     s = t("./internal/streams/stream"),
//                     o = t("buffer").Buffer,
//                     l = r.Uint8Array || function () {};
//                   function h(t) {
//                     return o.from(t);
//                   }
//                   function u(t) {
//                     return o.isBuffer(t) || t instanceof l;
//                   }
//                   var f,
//                     c,
//                     d = t("./internal/streams/destroy"),
//                     p = t("./internal/streams/state").getHighWaterMark,
//                     m = t("../errors").codes,
//                     g = m.ERR_INVALID_ARG_TYPE,
//                     _ = m.ERR_METHOD_NOT_IMPLEMENTED,
//                     b = m.ERR_MULTIPLE_CALLBACK,
//                     y = m.ERR_STREAM_CANNOT_PIPE,
//                     v = m.ERR_STREAM_DESTROYED,
//                     w = m.ERR_STREAM_NULL_VALUES,
//                     x = m.ERR_STREAM_WRITE_AFTER_END,
//                     E = m.ERR_UNKNOWN_ENCODING,
//                     k = d.errorOrDestroy;
//                   function M() {}
//                   function S(e, i, r) {
//                     (f = f || t("./_stream_duplex")),
//                       (e = e || {}),
//                       "boolean" != typeof r && (r = i instanceof f),
//                       (this.objectMode = !!e.objectMode),
//                       r &&
//                         (this.objectMode =
//                           this.objectMode || !!e.writableObjectMode),
//                       (this.highWaterMark = p(
//                         this,
//                         e,
//                         "writableHighWaterMark",
//                         r
//                       )),
//                       (this.finalCalled = !1),
//                       (this.needDrain = !1),
//                       (this.ending = !1),
//                       (this.ended = !1),
//                       (this.finished = !1),
//                       (this.destroyed = !1);
//                     var a = !1 === e.decodeStrings;
//                     (this.decodeStrings = !a),
//                       (this.defaultEncoding = e.defaultEncoding || "utf8"),
//                       (this.length = 0),
//                       (this.writing = !1),
//                       (this.corked = 0),
//                       (this.sync = !0),
//                       (this.bufferProcessing = !1),
//                       (this.onwrite = function (t) {
//                         z(i, t);
//                       }),
//                       (this.writecb = null),
//                       (this.writelen = 0),
//                       (this.bufferedRequest = null),
//                       (this.lastBufferedRequest = null),
//                       (this.pendingcb = 0),
//                       (this.prefinished = !1),
//                       (this.errorEmitted = !1),
//                       (this.emitClose = !1 !== e.emitClose),
//                       (this.autoDestroy = !!e.autoDestroy),
//                       (this.bufferedRequestCount = 0),
//                       (this.corkedRequestsFree = new n(this));
//                   }
//                   function A(e) {
//                     var i = this instanceof (f = f || t("./_stream_duplex"));
//                     if (!i && !c.call(A, this)) return new A(e);
//                     (this._writableState = new S(e, this, i)),
//                       (this.writable = !0),
//                       e &&
//                         ("function" == typeof e.write &&
//                           (this._write = e.write),
//                         "function" == typeof e.writev &&
//                           (this._writev = e.writev),
//                         "function" == typeof e.destroy &&
//                           (this._destroy = e.destroy),
//                         "function" == typeof e.final &&
//                           (this._final = e.final)),
//                       s.call(this);
//                   }
//                   function I(t, e) {
//                     var r = new x();
//                     k(t, r), i.nextTick(e, r);
//                   }
//                   function T(t, e, r, n) {
//                     var a;
//                     return (
//                       null === r
//                         ? (a = new w())
//                         : "string" == typeof r ||
//                           e.objectMode ||
//                           (a = new g("chunk", ["string", "Buffer"], r)),
//                       !a || (k(t, a), i.nextTick(n, a), !1)
//                     );
//                   }
//                   function B(t, e, i) {
//                     return (
//                       t.objectMode ||
//                         !1 === t.decodeStrings ||
//                         "string" != typeof e ||
//                         (e = o.from(e, i)),
//                       e
//                     );
//                   }
//                   function R(t, e, i, r, n, a) {
//                     if (!i) {
//                       var s = B(e, r, n);
//                       r !== s && ((i = !0), (n = "buffer"), (r = s));
//                     }
//                     var o = e.objectMode ? 1 : r.length;
//                     e.length += o;
//                     var l = e.length < e.highWaterMark;
//                     if ((l || (e.needDrain = !0), e.writing || e.corked)) {
//                       var h = e.lastBufferedRequest;
//                       (e.lastBufferedRequest = {
//                         chunk: r,
//                         encoding: n,
//                         isBuf: i,
//                         callback: a,
//                         next: null,
//                       }),
//                         h
//                           ? (h.next = e.lastBufferedRequest)
//                           : (e.bufferedRequest = e.lastBufferedRequest),
//                         (e.bufferedRequestCount += 1);
//                     } else P(t, e, !1, o, r, n, a);
//                     return l;
//                   }
//                   function P(t, e, i, r, n, a, s) {
//                     (e.writelen = r),
//                       (e.writecb = s),
//                       (e.writing = !0),
//                       (e.sync = !0),
//                       e.destroyed
//                         ? e.onwrite(new v("write"))
//                         : i
//                         ? t._writev(n, e.onwrite)
//                         : t._write(n, a, e.onwrite),
//                       (e.sync = !1);
//                   }
//                   function O(t, e, r, n, a) {
//                     --e.pendingcb,
//                       r
//                         ? (i.nextTick(a, n),
//                           i.nextTick(G, t, e),
//                           (t._writableState.errorEmitted = !0),
//                           k(t, n))
//                         : (a(n),
//                           (t._writableState.errorEmitted = !0),
//                           k(t, n),
//                           G(t, e));
//                   }
//                   function C(t) {
//                     (t.writing = !1),
//                       (t.writecb = null),
//                       (t.length -= t.writelen),
//                       (t.writelen = 0);
//                   }
//                   function z(t, e) {
//                     var r = t._writableState,
//                       n = r.sync,
//                       a = r.writecb;
//                     if ("function" != typeof a) throw new b();
//                     if ((C(r), e)) O(t, r, n, e, a);
//                     else {
//                       var s = N(r) || t.destroyed;
//                       s ||
//                         r.corked ||
//                         r.bufferProcessing ||
//                         !r.bufferedRequest ||
//                         D(t, r),
//                         n ? i.nextTick(L, t, r, s, a) : L(t, r, s, a);
//                     }
//                   }
//                   function L(t, e, i, r) {
//                     i || U(t, e), e.pendingcb--, r(), G(t, e);
//                   }
//                   function U(t, e) {
//                     0 === e.length &&
//                       e.needDrain &&
//                       ((e.needDrain = !1), t.emit("drain"));
//                   }
//                   function D(t, e) {
//                     e.bufferProcessing = !0;
//                     var i = e.bufferedRequest;
//                     if (t._writev && i && i.next) {
//                       var r = Array(e.bufferedRequestCount),
//                         a = e.corkedRequestsFree;
//                       a.entry = i;
//                       for (var s = 0, o = !0; i; )
//                         (r[s] = i), i.isBuf || (o = !1), (i = i.next), (s += 1);
//                       (r.allBuffers = o),
//                         P(t, e, !0, e.length, r, "", a.finish),
//                         e.pendingcb++,
//                         (e.lastBufferedRequest = null),
//                         a.next
//                           ? ((e.corkedRequestsFree = a.next), (a.next = null))
//                           : (e.corkedRequestsFree = new n(e)),
//                         (e.bufferedRequestCount = 0);
//                     } else {
//                       for (; i; ) {
//                         var l = i.chunk,
//                           h = i.encoding,
//                           u = i.callback;
//                         if (
//                           (P(t, e, !1, e.objectMode ? 1 : l.length, l, h, u),
//                           (i = i.next),
//                           e.bufferedRequestCount--,
//                           e.writing)
//                         )
//                           break;
//                       }
//                       null === i && (e.lastBufferedRequest = null);
//                     }
//                     (e.bufferedRequest = i), (e.bufferProcessing = !1);
//                   }
//                   function N(t) {
//                     return (
//                       t.ending &&
//                       0 === t.length &&
//                       null === t.bufferedRequest &&
//                       !t.finished &&
//                       !t.writing
//                     );
//                   }
//                   function j(t, e) {
//                     t._final(function (i) {
//                       e.pendingcb--,
//                         i && k(t, i),
//                         (e.prefinished = !0),
//                         t.emit("prefinish"),
//                         G(t, e);
//                     });
//                   }
//                   function F(t, e) {
//                     e.prefinished ||
//                       e.finalCalled ||
//                       ("function" != typeof t._final || e.destroyed
//                         ? ((e.prefinished = !0), t.emit("prefinish"))
//                         : (e.pendingcb++,
//                           (e.finalCalled = !0),
//                           i.nextTick(j, t, e)));
//                   }
//                   function G(t, e) {
//                     var i = N(e);
//                     if (
//                       i &&
//                       (F(t, e),
//                       0 === e.pendingcb &&
//                         ((e.finished = !0), t.emit("finish"), e.autoDestroy))
//                     ) {
//                       var r = t._readableState;
//                       (!r || (r.autoDestroy && r.endEmitted)) && t.destroy();
//                     }
//                     return i;
//                   }
//                   function Z(t, e, r) {
//                     (e.ending = !0),
//                       G(t, e),
//                       r && (e.finished ? i.nextTick(r) : t.once("finish", r)),
//                       (e.ended = !0),
//                       (t.writable = !1);
//                   }
//                   function H(t, e, i) {
//                     var r = t.entry;
//                     for (t.entry = null; r; ) {
//                       var n = r.callback;
//                       e.pendingcb--, n(i), (r = r.next);
//                     }
//                     e.corkedRequestsFree.next = t;
//                   }
//                   t("inherits")(A, s),
//                     (S.prototype.getBuffer = function () {
//                       for (var t = this.bufferedRequest, e = []; t; )
//                         e.push(t), (t = t.next);
//                       return e;
//                     }),
//                     (function () {
//                       try {
//                         Object.defineProperty(S.prototype, "buffer", {
//                           get: a.deprecate(
//                             function () {
//                               return this.getBuffer();
//                             },
//                             "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.",
//                             "DEP0003"
//                           ),
//                         });
//                       } catch (t) {}
//                     })(),
//                     "function" == typeof Symbol &&
//                     Symbol.hasInstance &&
//                     "function" == typeof Function.prototype[Symbol.hasInstance]
//                       ? ((c = Function.prototype[Symbol.hasInstance]),
//                         Object.defineProperty(A, Symbol.hasInstance, {
//                           value: function (t) {
//                             return (
//                               !!c.call(this, t) ||
//                               (this === A && t && t._writableState instanceof S)
//                             );
//                           },
//                         }))
//                       : (c = function (t) {
//                           return t instanceof this;
//                         }),
//                     (A.prototype.pipe = function () {
//                       k(this, new y());
//                     }),
//                     (A.prototype.write = function (t, e, i) {
//                       var r = this._writableState,
//                         n = !1,
//                         a = !r.objectMode && u(t);
//                       return (
//                         a && !o.isBuffer(t) && (t = h(t)),
//                         "function" == typeof e && ((i = e), (e = null)),
//                         a ? (e = "buffer") : e || (e = r.defaultEncoding),
//                         "function" != typeof i && (i = M),
//                         r.ending
//                           ? I(this, i)
//                           : (a || T(this, r, t, i)) &&
//                             (r.pendingcb++, (n = R(this, r, a, t, e, i))),
//                         n
//                       );
//                     }),
//                     (A.prototype.cork = function () {
//                       this._writableState.corked++;
//                     }),
//                     (A.prototype.uncork = function () {
//                       var t = this._writableState;
//                       t.corked &&
//                         (t.corked--,
//                         t.writing ||
//                           t.corked ||
//                           t.bufferProcessing ||
//                           !t.bufferedRequest ||
//                           D(this, t));
//                     }),
//                     (A.prototype.setDefaultEncoding = function (t) {
//                       if (
//                         ("string" == typeof t && (t = t.toLowerCase()),
//                         !(
//                           [
//                             "hex",
//                             "utf8",
//                             "utf-8",
//                             "ascii",
//                             "binary",
//                             "base64",
//                             "ucs2",
//                             "ucs-2",
//                             "utf16le",
//                             "utf-16le",
//                             "raw",
//                           ].indexOf((t + "").toLowerCase()) > -1
//                         ))
//                       )
//                         throw new E(t);
//                       return (this._writableState.defaultEncoding = t), this;
//                     }),
//                     Object.defineProperty(A.prototype, "writableBuffer", {
//                       enumerable: !1,
//                       get: function () {
//                         return (
//                           this._writableState && this._writableState.getBuffer()
//                         );
//                       },
//                     }),
//                     Object.defineProperty(
//                       A.prototype,
//                       "writableHighWaterMark",
//                       {
//                         enumerable: !1,
//                         get: function () {
//                           return this._writableState.highWaterMark;
//                         },
//                       }
//                     ),
//                     (A.prototype._write = function (t, e, i) {
//                       i(new _("_write()"));
//                     }),
//                     (A.prototype._writev = null),
//                     (A.prototype.end = function (t, e, i) {
//                       var r = this._writableState;
//                       return (
//                         "function" == typeof t
//                           ? ((i = t), (t = null), (e = null))
//                           : "function" == typeof e && ((i = e), (e = null)),
//                         null != t && this.write(t, e),
//                         r.corked && ((r.corked = 1), this.uncork()),
//                         r.ending || Z(this, r, i),
//                         this
//                       );
//                     }),
//                     Object.defineProperty(A.prototype, "writableLength", {
//                       enumerable: !1,
//                       get: function () {
//                         return this._writableState.length;
//                       },
//                     }),
//                     Object.defineProperty(A.prototype, "destroyed", {
//                       enumerable: !1,
//                       get: function () {
//                         return (
//                           void 0 !== this._writableState &&
//                           this._writableState.destroyed
//                         );
//                       },
//                       set: function (t) {
//                         this._writableState &&
//                           (this._writableState.destroyed = t);
//                       },
//                     }),
//                     (A.prototype.destroy = d.destroy),
//                     (A.prototype._undestroy = d.undestroy),
//                     (A.prototype._destroy = function (t, e) {
//                       e(t);
//                     });
//                 }).call(this);
//               }).call(
//                 this,
//                 t("_process"),
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             {
//               "../errors": 66,
//               "./_stream_duplex": 67,
//               "./internal/streams/destroy": 74,
//               "./internal/streams/state": 78,
//               "./internal/streams/stream": 79,
//               _process: 63,
//               buffer: 32,
//               inherits: 46,
//               "util-deprecate": 81,
//             },
//           ],
//           72: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   function r(t, e, i) {
//                     return (
//                       e in t
//                         ? Object.defineProperty(t, e, {
//                             value: i,
//                             enumerable: !0,
//                             configurable: !0,
//                             writable: !0,
//                           })
//                         : (t[e] = i),
//                       t
//                     );
//                   }
//                   var n,
//                     a = t("./end-of-stream"),
//                     s = Symbol("lastResolve"),
//                     o = Symbol("lastReject"),
//                     l = Symbol("error"),
//                     h = Symbol("ended"),
//                     u = Symbol("lastPromise"),
//                     f = Symbol("handlePromise"),
//                     c = Symbol("stream");
//                   function d(t, e) {
//                     return { value: t, done: e };
//                   }
//                   function p(t) {
//                     var e = t[s];
//                     if (null !== e) {
//                       var i = t[c].read();
//                       null !== i &&
//                         ((t[u] = null),
//                         (t[s] = null),
//                         (t[o] = null),
//                         e(d(i, !1)));
//                     }
//                   }
//                   function m(t) {
//                     i.nextTick(p, t);
//                   }
//                   function g(t, e) {
//                     return function (i, r) {
//                       t.then(function () {
//                         e[h] ? i(d(void 0, !0)) : e[f](i, r);
//                       }, r);
//                     };
//                   }
//                   var _ = Object.getPrototypeOf(function () {}),
//                     b = Object.setPrototypeOf(
//                       (r(
//                         (n = {
//                           get stream() {
//                             return this[c];
//                           },
//                           next: function () {
//                             var t = this,
//                               e = this[l];
//                             if (null !== e) return Promise.reject(e);
//                             if (this[h]) return Promise.resolve(d(void 0, !0));
//                             if (this[c].destroyed)
//                               return new Promise(function (e, r) {
//                                 i.nextTick(function () {
//                                   t[l] ? r(t[l]) : e(d(void 0, !0));
//                                 });
//                               });
//                             var r,
//                               n = this[u];
//                             if (n) r = new Promise(g(n, this));
//                             else {
//                               var a = this[c].read();
//                               if (null !== a) return Promise.resolve(d(a, !1));
//                               r = new Promise(this[f]);
//                             }
//                             return (this[u] = r), r;
//                           },
//                         }),
//                         Symbol.asyncIterator,
//                         function () {
//                           return this;
//                         }
//                       ),
//                       r(n, "return", function () {
//                         var t = this;
//                         return new Promise(function (e, i) {
//                           t[c].destroy(null, function (t) {
//                             t ? i(t) : e(d(void 0, !0));
//                           });
//                         });
//                       }),
//                       n),
//                       _
//                     ),
//                     y = function (t) {
//                       var e,
//                         i = Object.create(
//                           b,
//                           (r((e = {}), c, { value: t, writable: !0 }),
//                           r(e, s, { value: null, writable: !0 }),
//                           r(e, o, { value: null, writable: !0 }),
//                           r(e, l, { value: null, writable: !0 }),
//                           r(e, h, {
//                             value: t._readableState.endEmitted,
//                             writable: !0,
//                           }),
//                           r(e, f, {
//                             value: function (t, e) {
//                               var r = i[c].read();
//                               r
//                                 ? ((i[u] = null),
//                                   (i[s] = null),
//                                   (i[o] = null),
//                                   t(d(r, !1)))
//                                 : ((i[s] = t), (i[o] = e));
//                             },
//                             writable: !0,
//                           }),
//                           e)
//                         );
//                       return (
//                         (i[u] = null),
//                         a(t, function (t) {
//                           if (t && "ERR_STREAM_PREMATURE_CLOSE" !== t.code) {
//                             var e = i[o];
//                             return (
//                               null !== e &&
//                                 ((i[u] = null),
//                                 (i[s] = null),
//                                 (i[o] = null),
//                                 e(t)),
//                               void (i[l] = t)
//                             );
//                           }
//                           var r = i[s];
//                           null !== r &&
//                             ((i[u] = null),
//                             (i[s] = null),
//                             (i[o] = null),
//                             r(d(void 0, !0))),
//                             (i[h] = !0);
//                         }),
//                         t.on("readable", m.bind(null, i)),
//                         i
//                       );
//                     };
//                   e.exports = y;
//                 }).call(this);
//               }).call(this, t("_process"));
//             },
//             { "./end-of-stream": 75, _process: 63 },
//           ],
//           73: [
//             function (t, e, i) {
//               function r(t, e) {
//                 var i = Object.keys(t);
//                 if (Object.getOwnPropertySymbols) {
//                   var r = Object.getOwnPropertySymbols(t);
//                   e &&
//                     (r = r.filter(function (e) {
//                       return Object.getOwnPropertyDescriptor(t, e).enumerable;
//                     })),
//                     i.push.apply(i, r);
//                 }
//                 return i;
//               }
//               function n(t) {
//                 for (var e = 1; e < arguments.length; e++) {
//                   var i = null != arguments[e] ? arguments[e] : {};
//                   e % 2
//                     ? r(Object(i), !0).forEach(function (e) {
//                         a(t, e, i[e]);
//                       })
//                     : Object.getOwnPropertyDescriptors
//                     ? Object.defineProperties(
//                         t,
//                         Object.getOwnPropertyDescriptors(i)
//                       )
//                     : r(Object(i)).forEach(function (e) {
//                         Object.defineProperty(
//                           t,
//                           e,
//                           Object.getOwnPropertyDescriptor(i, e)
//                         );
//                       });
//                 }
//                 return t;
//               }
//               function a(t, e, i) {
//                 return (
//                   e in t
//                     ? Object.defineProperty(t, e, {
//                         value: i,
//                         enumerable: !0,
//                         configurable: !0,
//                         writable: !0,
//                       })
//                     : (t[e] = i),
//                   t
//                 );
//               }
//               function s(t, e) {
//                 if (!(t instanceof e))
//                   throw TypeError("Cannot call a class as a function");
//               }
//               function o(t, e) {
//                 for (var i = 0; i < e.length; i++) {
//                   var r = e[i];
//                   (r.enumerable = r.enumerable || !1),
//                     (r.configurable = !0),
//                     "value" in r && (r.writable = !0),
//                     Object.defineProperty(t, r.key, r);
//                 }
//               }
//               function l(t, e, i) {
//                 return e && o(t.prototype, e), t;
//               }
//               var h = t("buffer").Buffer,
//                 u = t("util").inspect,
//                 f = (u && u.custom) || "inspect";
//               function c(t, e, i) {
//                 h.prototype.copy.call(t, e, i);
//               }
//               e.exports = (function () {
//                 function t() {
//                   s(this, t),
//                     (this.head = null),
//                     (this.tail = null),
//                     (this.length = 0);
//                 }
//                 return (
//                   l(t, [
//                     {
//                       key: "push",
//                       value: function (t) {
//                         var e = { data: t, next: null };
//                         this.length > 0
//                           ? (this.tail.next = e)
//                           : (this.head = e),
//                           (this.tail = e),
//                           ++this.length;
//                       },
//                     },
//                     {
//                       key: "unshift",
//                       value: function (t) {
//                         var e = { data: t, next: this.head };
//                         0 === this.length && (this.tail = e),
//                           (this.head = e),
//                           ++this.length;
//                       },
//                     },
//                     {
//                       key: "shift",
//                       value: function () {
//                         if (0 !== this.length) {
//                           var t = this.head.data;
//                           return (
//                             1 === this.length
//                               ? (this.head = this.tail = null)
//                               : (this.head = this.head.next),
//                             --this.length,
//                             t
//                           );
//                         }
//                       },
//                     },
//                     {
//                       key: "clear",
//                       value: function () {
//                         (this.head = this.tail = null), (this.length = 0);
//                       },
//                     },
//                     {
//                       key: "join",
//                       value: function (t) {
//                         if (0 === this.length) return "";
//                         for (var e = this.head, i = "" + e.data; (e = e.next); )
//                           i += t + e.data;
//                         return i;
//                       },
//                     },
//                     {
//                       key: "concat",
//                       value: function (t) {
//                         if (0 === this.length) return h.alloc(0);
//                         for (
//                           var e = h.allocUnsafe(t >>> 0), i = this.head, r = 0;
//                           i;

//                         )
//                           c(i.data, e, r), (r += i.data.length), (i = i.next);
//                         return e;
//                       },
//                     },
//                     {
//                       key: "consume",
//                       value: function (t, e) {
//                         var i;
//                         return (
//                           t < this.head.data.length
//                             ? ((i = this.head.data.slice(0, t)),
//                               (this.head.data = this.head.data.slice(t)))
//                             : (i =
//                                 t === this.head.data.length
//                                   ? this.shift()
//                                   : e
//                                   ? this._getString(t)
//                                   : this._getBuffer(t)),
//                           i
//                         );
//                       },
//                     },
//                     {
//                       key: "first",
//                       value: function () {
//                         return this.head.data;
//                       },
//                     },
//                     {
//                       key: "_getString",
//                       value: function (t) {
//                         var e = this.head,
//                           i = 1,
//                           r = e.data;
//                         for (t -= r.length; (e = e.next); ) {
//                           var n = e.data,
//                             a = t > n.length ? n.length : t;
//                           if (
//                             (a === n.length ? (r += n) : (r += n.slice(0, t)),
//                             0 == (t -= a))
//                           ) {
//                             a === n.length
//                               ? (++i,
//                                 e.next
//                                   ? (this.head = e.next)
//                                   : (this.head = this.tail = null))
//                               : ((this.head = e), (e.data = n.slice(a)));
//                             break;
//                           }
//                           ++i;
//                         }
//                         return (this.length -= i), r;
//                       },
//                     },
//                     {
//                       key: "_getBuffer",
//                       value: function (t) {
//                         var e = h.allocUnsafe(t),
//                           i = this.head,
//                           r = 1;
//                         for (
//                           i.data.copy(e), t -= i.data.length;
//                           (i = i.next);

//                         ) {
//                           var n = i.data,
//                             a = t > n.length ? n.length : t;
//                           if ((n.copy(e, e.length - t, 0, a), 0 == (t -= a))) {
//                             a === n.length
//                               ? (++r,
//                                 i.next
//                                   ? (this.head = i.next)
//                                   : (this.head = this.tail = null))
//                               : ((this.head = i), (i.data = n.slice(a)));
//                             break;
//                           }
//                           ++r;
//                         }
//                         return (this.length -= r), e;
//                       },
//                     },
//                     {
//                       key: f,
//                       value: function (t, e) {
//                         return u(
//                           this,
//                           n({}, e, { depth: 0, customInspect: !1 })
//                         );
//                       },
//                     },
//                   ]),
//                   t
//                 );
//               })();
//             },
//             { buffer: 32, util: 29 },
//           ],
//           74: [
//             function (t, e, i) {
//               (function (t) {
//                 (function () {
//                   function i(e, i) {
//                     var a = this,
//                       o = this._readableState && this._readableState.destroyed,
//                       l = this._writableState && this._writableState.destroyed;
//                     return (
//                       o || l
//                         ? i
//                           ? i(e)
//                           : e &&
//                             (this._writableState
//                               ? this._writableState.errorEmitted ||
//                                 ((this._writableState.errorEmitted = !0),
//                                 t.nextTick(s, this, e))
//                               : t.nextTick(s, this, e))
//                         : (this._readableState &&
//                             (this._readableState.destroyed = !0),
//                           this._writableState &&
//                             (this._writableState.destroyed = !0),
//                           this._destroy(e || null, function (e) {
//                             !i && e
//                               ? a._writableState
//                                 ? a._writableState.errorEmitted
//                                   ? t.nextTick(n, a)
//                                   : ((a._writableState.errorEmitted = !0),
//                                     t.nextTick(r, a, e))
//                                 : t.nextTick(r, a, e)
//                               : i
//                               ? (t.nextTick(n, a), i(e))
//                               : t.nextTick(n, a);
//                           })),
//                       this
//                     );
//                   }
//                   function r(t, e) {
//                     s(t, e), n(t);
//                   }
//                   function n(t) {
//                     (t._writableState && !t._writableState.emitClose) ||
//                       (t._readableState && !t._readableState.emitClose) ||
//                       t.emit("close");
//                   }
//                   function a() {
//                     this._readableState &&
//                       ((this._readableState.destroyed = !1),
//                       (this._readableState.reading = !1),
//                       (this._readableState.ended = !1),
//                       (this._readableState.endEmitted = !1)),
//                       this._writableState &&
//                         ((this._writableState.destroyed = !1),
//                         (this._writableState.ended = !1),
//                         (this._writableState.ending = !1),
//                         (this._writableState.finalCalled = !1),
//                         (this._writableState.prefinished = !1),
//                         (this._writableState.finished = !1),
//                         (this._writableState.errorEmitted = !1));
//                   }
//                   function s(t, e) {
//                     t.emit("error", e);
//                   }
//                   function o(t, e) {
//                     var i = t._readableState,
//                       r = t._writableState;
//                     (i && i.autoDestroy) || (r && r.autoDestroy)
//                       ? t.destroy(e)
//                       : t.emit("error", e);
//                   }
//                   e.exports = { destroy: i, undestroy: a, errorOrDestroy: o };
//                 }).call(this);
//               }).call(this, t("_process"));
//             },
//             { _process: 63 },
//           ],
//           75: [
//             function (t, e, i) {
//               var r = t("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
//               function n(t) {
//                 var e = !1;
//                 return function () {
//                   if (!e) {
//                     e = !0;
//                     for (
//                       var i = arguments.length, r = Array(i), n = 0;
//                       n < i;
//                       n++
//                     )
//                       r[n] = arguments[n];
//                     t.apply(this, r);
//                   }
//                 };
//               }
//               function a() {}
//               function s(t) {
//                 return t.setHeader && "function" == typeof t.abort;
//               }
//               function o(t, e, i) {
//                 if ("function" == typeof e) return o(t, null, e);
//                 e || (e = {}), (i = n(i || a));
//                 var l = e.readable || (!1 !== e.readable && t.readable),
//                   h = e.writable || (!1 !== e.writable && t.writable),
//                   u = function () {
//                     t.writable || c();
//                   },
//                   f = t._writableState && t._writableState.finished,
//                   c = function () {
//                     (h = !1), (f = !0), l || i.call(t);
//                   },
//                   d = t._readableState && t._readableState.endEmitted,
//                   p = function () {
//                     (l = !1), (d = !0), h || i.call(t);
//                   },
//                   m = function (e) {
//                     i.call(t, e);
//                   },
//                   g = function () {
//                     var e;
//                     return l && !d
//                       ? ((t._readableState && t._readableState.ended) ||
//                           (e = new r()),
//                         i.call(t, e))
//                       : h && !f
//                       ? ((t._writableState && t._writableState.ended) ||
//                           (e = new r()),
//                         i.call(t, e))
//                       : void 0;
//                   },
//                   _ = function () {
//                     t.req.on("finish", c);
//                   };
//                 return (
//                   s(t)
//                     ? (t.on("complete", c),
//                       t.on("abort", g),
//                       t.req ? _() : t.on("request", _))
//                     : h &&
//                       !t._writableState &&
//                       (t.on("end", u), t.on("close", u)),
//                   t.on("end", p),
//                   t.on("finish", c),
//                   !1 !== e.error && t.on("error", m),
//                   t.on("close", g),
//                   function () {
//                     t.removeListener("complete", c),
//                       t.removeListener("abort", g),
//                       t.removeListener("request", _),
//                       t.req && t.req.removeListener("finish", c),
//                       t.removeListener("end", u),
//                       t.removeListener("close", u),
//                       t.removeListener("finish", c),
//                       t.removeListener("end", p),
//                       t.removeListener("error", m),
//                       t.removeListener("close", g);
//                   }
//                 );
//               }
//               e.exports = o;
//             },
//             { "../../../errors": 66 },
//           ],
//           76: [
//             function (t, e, i) {
//               e.exports = function () {
//                 throw Error("Readable.from is not available in the browser");
//               };
//             },
//             {},
//           ],
//           77: [
//             function (t, e, i) {
//               function r(t) {
//                 var e = !1;
//                 return function () {
//                   e || ((e = !0), t.apply(void 0, arguments));
//                 };
//               }
//               var n,
//                 a = t("../../../errors").codes,
//                 s = a.ERR_MISSING_ARGS,
//                 o = a.ERR_STREAM_DESTROYED;
//               function l(t) {
//                 if (t) throw t;
//               }
//               function h(t) {
//                 return t.setHeader && "function" == typeof t.abort;
//               }
//               function u(e, i, a, s) {
//                 s = r(s);
//                 var l = !1;
//                 e.on("close", function () {
//                   l = !0;
//                 }),
//                   void 0 === n && (n = t("./end-of-stream")),
//                   n(e, { readable: i, writable: a }, function (t) {
//                     if (t) return s(t);
//                     (l = !0), s();
//                   });
//                 var u = !1;
//                 return function (t) {
//                   if (!l && !u)
//                     return (
//                       (u = !0),
//                       h(e)
//                         ? e.abort()
//                         : "function" == typeof e.destroy
//                         ? e.destroy()
//                         : void s(t || new o("pipe"))
//                     );
//                 };
//               }
//               function f(t) {
//                 t();
//               }
//               function c(t, e) {
//                 return t.pipe(e);
//               }
//               function d(t) {
//                 return t.length
//                   ? "function" != typeof t[t.length - 1]
//                     ? l
//                     : t.pop()
//                   : l;
//               }
//               function p() {
//                 for (var t = arguments.length, e = Array(t), i = 0; i < t; i++)
//                   e[i] = arguments[i];
//                 var r,
//                   n = d(e);
//                 if ((Array.isArray(e[0]) && (e = e[0]), e.length < 2))
//                   throw new s("streams");
//                 var a = e.map(function (t, i) {
//                   var s = i < e.length - 1;
//                   return u(t, s, i > 0, function (t) {
//                     r || (r = t), t && a.forEach(f), s || (a.forEach(f), n(r));
//                   });
//                 });
//                 return e.reduce(c);
//               }
//               e.exports = p;
//             },
//             { "../../../errors": 66, "./end-of-stream": 75 },
//           ],
//           78: [
//             function (t, e, i) {
//               var r = t("../../../errors").codes.ERR_INVALID_OPT_VALUE;
//               function n(t, e, i) {
//                 return null != t.highWaterMark
//                   ? t.highWaterMark
//                   : e
//                   ? t[i]
//                   : null;
//               }
//               function a(t, e, i, a) {
//                 var s = n(e, a, i);
//                 if (null != s) {
//                   if (!isFinite(s) || Math.floor(s) !== s || s < 0)
//                     throw new r(a ? i : "highWaterMark", s);
//                   return Math.floor(s);
//                 }
//                 return t.objectMode ? 16 : 16384;
//               }
//               e.exports = { getHighWaterMark: a };
//             },
//             { "../../../errors": 66 },
//           ],
//           79: [
//             function (t, e, i) {
//               e.exports = t("events").EventEmitter;
//             },
//             { events: 35 },
//           ],
//           80: [
//             function (t, e, i) {
//               var r = t("safe-buffer").Buffer,
//                 n =
//                   r.isEncoding ||
//                   function (t) {
//                     switch ((t = "" + t) && t.toLowerCase()) {
//                       case "hex":
//                       case "utf8":
//                       case "utf-8":
//                       case "ascii":
//                       case "binary":
//                       case "base64":
//                       case "ucs2":
//                       case "ucs-2":
//                       case "utf16le":
//                       case "utf-16le":
//                       case "raw":
//                         return !0;
//                       default:
//                         return !1;
//                     }
//                   };
//               function a(t) {
//                 if (!t) return "utf8";
//                 for (var e; ; )
//                   switch (t) {
//                     case "utf8":
//                     case "utf-8":
//                       return "utf8";
//                     case "ucs2":
//                     case "ucs-2":
//                     case "utf16le":
//                     case "utf-16le":
//                       return "utf16le";
//                     case "latin1":
//                     case "binary":
//                       return "latin1";
//                     case "base64":
//                     case "ascii":
//                     case "hex":
//                       return t;
//                     default:
//                       if (e) return;
//                       (t = ("" + t).toLowerCase()), (e = !0);
//                   }
//               }
//               function s(t) {
//                 var e = a(t);
//                 if ("string" != typeof e && (r.isEncoding === n || !n(t)))
//                   throw Error("Unknown encoding: " + t);
//                 return e || t;
//               }
//               function o(t) {
//                 var e;
//                 switch (((this.encoding = s(t)), this.encoding)) {
//                   case "utf16le":
//                     (this.text = p), (this.end = m), (e = 4);
//                     break;
//                   case "utf8":
//                     (this.fillLast = f), (e = 4);
//                     break;
//                   case "base64":
//                     (this.text = g), (this.end = _), (e = 3);
//                     break;
//                   default:
//                     return (this.write = b), void (this.end = y);
//                 }
//                 (this.lastNeed = 0),
//                   (this.lastTotal = 0),
//                   (this.lastChar = r.allocUnsafe(e));
//               }
//               function l(t) {
//                 return t <= 127
//                   ? 0
//                   : t >> 5 == 6
//                   ? 2
//                   : t >> 4 == 14
//                   ? 3
//                   : t >> 3 == 30
//                   ? 4
//                   : t >> 6 == 2
//                   ? -1
//                   : -2;
//               }
//               function h(t, e, i) {
//                 var r = e.length - 1;
//                 if (r < i) return 0;
//                 var n = l(e[r]);
//                 return n >= 0
//                   ? (n > 0 && (t.lastNeed = n - 1), n)
//                   : --r < i || -2 === n
//                   ? 0
//                   : (n = l(e[r])) >= 0
//                   ? (n > 0 && (t.lastNeed = n - 2), n)
//                   : --r < i || -2 === n
//                   ? 0
//                   : (n = l(e[r])) >= 0
//                   ? (n > 0 && (2 === n ? (n = 0) : (t.lastNeed = n - 3)), n)
//                   : 0;
//               }
//               function u(t, e, i) {
//                 if (128 != (192 & e[0])) return (t.lastNeed = 0), "�";
//                 if (t.lastNeed > 1 && e.length > 1) {
//                   if (128 != (192 & e[1])) return (t.lastNeed = 1), "�";
//                   if (t.lastNeed > 2 && e.length > 2 && 128 != (192 & e[2]))
//                     return (t.lastNeed = 2), "�";
//                 }
//               }
//               function f(t) {
//                 var e = this.lastTotal - this.lastNeed,
//                   i = u(this, t);
//                 return void 0 !== i
//                   ? i
//                   : this.lastNeed <= t.length
//                   ? (t.copy(this.lastChar, e, 0, this.lastNeed),
//                     this.lastChar.toString(this.encoding, 0, this.lastTotal))
//                   : (t.copy(this.lastChar, e, 0, t.length),
//                     void (this.lastNeed -= t.length));
//               }
//               function c(t, e) {
//                 var i = h(this, t, e);
//                 if (!this.lastNeed) return t.toString("utf8", e);
//                 this.lastTotal = i;
//                 var r = t.length - (i - this.lastNeed);
//                 return t.copy(this.lastChar, 0, r), t.toString("utf8", e, r);
//               }
//               function d(t) {
//                 var e = t && t.length ? this.write(t) : "";
//                 return this.lastNeed ? e + "�" : e;
//               }
//               function p(t, e) {
//                 if ((t.length - e) % 2 == 0) {
//                   var i = t.toString("utf16le", e);
//                   if (i) {
//                     var r = i.charCodeAt(i.length - 1);
//                     if (r >= 55296 && r <= 56319)
//                       return (
//                         (this.lastNeed = 2),
//                         (this.lastTotal = 4),
//                         (this.lastChar[0] = t[t.length - 2]),
//                         (this.lastChar[1] = t[t.length - 1]),
//                         i.slice(0, -1)
//                       );
//                   }
//                   return i;
//                 }
//                 return (
//                   (this.lastNeed = 1),
//                   (this.lastTotal = 2),
//                   (this.lastChar[0] = t[t.length - 1]),
//                   t.toString("utf16le", e, t.length - 1)
//                 );
//               }
//               function m(t) {
//                 var e = t && t.length ? this.write(t) : "";
//                 if (this.lastNeed) {
//                   var i = this.lastTotal - this.lastNeed;
//                   return e + this.lastChar.toString("utf16le", 0, i);
//                 }
//                 return e;
//               }
//               function g(t, e) {
//                 var i = (t.length - e) % 3;
//                 return 0 === i
//                   ? t.toString("base64", e)
//                   : ((this.lastNeed = 3 - i),
//                     (this.lastTotal = 3),
//                     1 === i
//                       ? (this.lastChar[0] = t[t.length - 1])
//                       : ((this.lastChar[0] = t[t.length - 2]),
//                         (this.lastChar[1] = t[t.length - 1])),
//                     t.toString("base64", e, t.length - i));
//               }
//               function _(t) {
//                 var e = t && t.length ? this.write(t) : "";
//                 return this.lastNeed
//                   ? e + this.lastChar.toString("base64", 0, 3 - this.lastNeed)
//                   : e;
//               }
//               function b(t) {
//                 return t.toString(this.encoding);
//               }
//               function y(t) {
//                 return t && t.length ? this.write(t) : "";
//               }
//               (i.StringDecoder = o),
//                 (o.prototype.write = function (t) {
//                   var e, i;
//                   if (0 === t.length) return "";
//                   if (this.lastNeed) {
//                     if (void 0 === (e = this.fillLast(t))) return "";
//                     (i = this.lastNeed), (this.lastNeed = 0);
//                   } else i = 0;
//                   return i < t.length
//                     ? e
//                       ? e + this.text(t, i)
//                       : this.text(t, i)
//                     : e || "";
//                 }),
//                 (o.prototype.end = d),
//                 (o.prototype.text = c),
//                 (o.prototype.fillLast = function (t) {
//                   if (this.lastNeed <= t.length)
//                     return (
//                       t.copy(
//                         this.lastChar,
//                         this.lastTotal - this.lastNeed,
//                         0,
//                         this.lastNeed
//                       ),
//                       this.lastChar.toString(this.encoding, 0, this.lastTotal)
//                     );
//                   t.copy(
//                     this.lastChar,
//                     this.lastTotal - this.lastNeed,
//                     0,
//                     t.length
//                   ),
//                     (this.lastNeed -= t.length);
//                 });
//             },
//             { "safe-buffer": 64 },
//           ],
//           81: [
//             function (t, e, i) {
//               (function (t) {
//                 (function () {
//                   function i(t, e) {
//                     if (r("noDeprecation")) return t;
//                     var i = !1;
//                     return function () {
//                       if (!i) {
//                         if (r("throwDeprecation")) throw Error(e);
//                         r("traceDeprecation")
//                           ? console.trace(e)
//                           : console.warn(e),
//                           (i = !0);
//                       }
//                       return t.apply(this, arguments);
//                     };
//                   }
//                   function r(e) {
//                     try {
//                       if (!t.localStorage) return !1;
//                     } catch (t) {
//                       return !1;
//                     }
//                     var i = t.localStorage[e];
//                     return null != i && "true" === String(i).toLowerCase();
//                   }
//                   e.exports = i;
//                 }).call(this);
//               }).call(
//                 this,
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             {},
//           ],
//           82: [
//             function (t, e, i) {
//               arguments[4][25][0].apply(i, arguments);
//             },
//             { dup: 25 },
//           ],
//           83: [
//             function (t, e, i) {
//               var r = t("is-arguments"),
//                 n = t("is-generator-function"),
//                 a = t("which-typed-array"),
//                 s = t("is-typed-array");
//               function o(t) {
//                 return t.call.bind(t);
//               }
//               var l = "undefined" != typeof BigInt,
//                 h = "undefined" != typeof Symbol,
//                 u = o(Object.prototype.toString),
//                 f = o(Number.prototype.valueOf),
//                 c = o(String.prototype.valueOf),
//                 d = o(Boolean.prototype.valueOf);
//               if (l) var p = o(BigInt.prototype.valueOf);
//               if (h) var m = o(Symbol.prototype.valueOf);
//               function g(t, e) {
//                 if ("object" != typeof t) return !1;
//                 try {
//                   return e(t), !0;
//                 } catch (t) {
//                   return !1;
//                 }
//               }
//               function _(t) {
//                 return (
//                   ("undefined" != typeof Promise && t instanceof Promise) ||
//                   (null !== t &&
//                     "object" == typeof t &&
//                     "function" == typeof t.then &&
//                     "function" == typeof t.catch)
//                 );
//               }
//               function b(t) {
//                 return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView
//                   ? ArrayBuffer.isView(t)
//                   : s(t) || F(t);
//               }
//               function y(t) {
//                 return "Uint8Array" === a(t);
//               }
//               function v(t) {
//                 return "Uint8ClampedArray" === a(t);
//               }
//               function w(t) {
//                 return "Uint16Array" === a(t);
//               }
//               function x(t) {
//                 return "Uint32Array" === a(t);
//               }
//               function E(t) {
//                 return "Int8Array" === a(t);
//               }
//               function k(t) {
//                 return "Int16Array" === a(t);
//               }
//               function M(t) {
//                 return "Int32Array" === a(t);
//               }
//               function S(t) {
//                 return "Float32Array" === a(t);
//               }
//               function A(t) {
//                 return "Float64Array" === a(t);
//               }
//               function I(t) {
//                 return "BigInt64Array" === a(t);
//               }
//               function T(t) {
//                 return "BigUint64Array" === a(t);
//               }
//               function B(t) {
//                 return "[object Map]" === u(t);
//               }
//               function R(t) {
//                 return (
//                   "undefined" != typeof Map &&
//                   (B.working ? B(t) : t instanceof Map)
//                 );
//               }
//               function P(t) {
//                 return "[object Set]" === u(t);
//               }
//               function O(t) {
//                 return (
//                   "undefined" != typeof Set &&
//                   (P.working ? P(t) : t instanceof Set)
//                 );
//               }
//               function C(t) {
//                 return "[object WeakMap]" === u(t);
//               }
//               function z(t) {
//                 return (
//                   "undefined" != typeof WeakMap &&
//                   (C.working ? C(t) : t instanceof WeakMap)
//                 );
//               }
//               function L(t) {
//                 return "[object WeakSet]" === u(t);
//               }
//               function U(t) {
//                 return L(t);
//               }
//               function D(t) {
//                 return "[object ArrayBuffer]" === u(t);
//               }
//               function N(t) {
//                 return (
//                   "undefined" != typeof ArrayBuffer &&
//                   (D.working ? D(t) : t instanceof ArrayBuffer)
//                 );
//               }
//               function j(t) {
//                 return "[object DataView]" === u(t);
//               }
//               function F(t) {
//                 return (
//                   "undefined" != typeof DataView &&
//                   (j.working ? j(t) : t instanceof DataView)
//                 );
//               }
//               (i.isArgumentsObject = r),
//                 (i.isGeneratorFunction = n),
//                 (i.isTypedArray = s),
//                 (i.isPromise = _),
//                 (i.isArrayBufferView = b),
//                 (i.isUint8Array = y),
//                 (i.isUint8ClampedArray = v),
//                 (i.isUint16Array = w),
//                 (i.isUint32Array = x),
//                 (i.isInt8Array = E),
//                 (i.isInt16Array = k),
//                 (i.isInt32Array = M),
//                 (i.isFloat32Array = S),
//                 (i.isFloat64Array = A),
//                 (i.isBigInt64Array = I),
//                 (i.isBigUint64Array = T),
//                 (B.working = "undefined" != typeof Map && B(new Map())),
//                 (i.isMap = R),
//                 (P.working = "undefined" != typeof Set && P(new Set())),
//                 (i.isSet = O),
//                 (C.working = "undefined" != typeof WeakMap && C(new WeakMap())),
//                 (i.isWeakMap = z),
//                 (L.working = "undefined" != typeof WeakSet && L(new WeakSet())),
//                 (i.isWeakSet = U),
//                 (D.working =
//                   "undefined" != typeof ArrayBuffer && D(new ArrayBuffer())),
//                 (i.isArrayBuffer = N),
//                 (j.working =
//                   "undefined" != typeof ArrayBuffer &&
//                   "undefined" != typeof DataView &&
//                   j(new DataView(new ArrayBuffer(1), 0, 1))),
//                 (i.isDataView = F);
//               var G =
//                 "undefined" != typeof SharedArrayBuffer
//                   ? SharedArrayBuffer
//                   : void 0;
//               function Z(t) {
//                 return "[object SharedArrayBuffer]" === u(t);
//               }
//               function H(t) {
//                 return (
//                   void 0 !== G &&
//                   (void 0 === Z.working && (Z.working = Z(new G())),
//                   Z.working ? Z(t) : t instanceof G)
//                 );
//               }
//               function W(t) {
//                 return "[object AsyncFunction]" === u(t);
//               }
//               function q(t) {
//                 return "[object Map Iterator]" === u(t);
//               }
//               function Y(t) {
//                 return "[object Set Iterator]" === u(t);
//               }
//               function V(t) {
//                 return "[object Generator]" === u(t);
//               }
//               function $(t) {
//                 return "[object WebAssembly.Module]" === u(t);
//               }
//               function K(t) {
//                 return g(t, f);
//               }
//               function X(t) {
//                 return g(t, c);
//               }
//               function J(t) {
//                 return g(t, d);
//               }
//               function Q(t) {
//                 return l && g(t, p);
//               }
//               function tt(t) {
//                 return h && g(t, m);
//               }
//               function te(t) {
//                 return K(t) || X(t) || J(t) || Q(t) || tt(t);
//               }
//               function ti(t) {
//                 return "undefined" != typeof Uint8Array && (N(t) || H(t));
//               }
//               (i.isSharedArrayBuffer = H),
//                 (i.isAsyncFunction = W),
//                 (i.isMapIterator = q),
//                 (i.isSetIterator = Y),
//                 (i.isGeneratorObject = V),
//                 (i.isWebAssemblyCompiledModule = $),
//                 (i.isNumberObject = K),
//                 (i.isStringObject = X),
//                 (i.isBooleanObject = J),
//                 (i.isBigIntObject = Q),
//                 (i.isSymbolObject = tt),
//                 (i.isBoxedPrimitive = te),
//                 (i.isAnyArrayBuffer = ti),
//                 ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(
//                   function (t) {
//                     Object.defineProperty(i, t, {
//                       enumerable: !1,
//                       value: function () {
//                         throw Error(t + " is not supported in userland");
//                       },
//                     });
//                   }
//                 );
//             },
//             {
//               "is-arguments": 47,
//               "is-generator-function": 49,
//               "is-typed-array": 50,
//               "which-typed-array": 85,
//             },
//           ],
//           84: [
//             function (t, e, i) {
//               (function (e) {
//                 (function () {
//                   var r =
//                       Object.getOwnPropertyDescriptors ||
//                       function (t) {
//                         for (
//                           var e = Object.keys(t), i = {}, r = 0;
//                           r < e.length;
//                           r++
//                         )
//                           i[e[r]] = Object.getOwnPropertyDescriptor(t, e[r]);
//                         return i;
//                       },
//                     n = /%[sdj%]/g;
//                   (i.format = function (t) {
//                     if (!E(t)) {
//                       for (var e = [], i = 0; i < arguments.length; i++)
//                         e.push(l(arguments[i]));
//                       return e.join(" ");
//                     }
//                     i = 1;
//                     for (
//                       var r = arguments,
//                         a = r.length,
//                         s = String(t).replace(n, function (t) {
//                           if ("%%" === t) return "%";
//                           if (i >= a) return t;
//                           switch (t) {
//                             case "%s":
//                               return String(r[i++]);
//                             case "%d":
//                               return Number(r[i++]);
//                             case "%j":
//                               try {
//                                 return JSON.stringify(r[i++]);
//                               } catch (t) {
//                                 return "[Circular]";
//                               }
//                             default:
//                               return t;
//                           }
//                         }),
//                         o = r[i];
//                       i < a;
//                       o = r[++i]
//                     )
//                       v(o) || !A(o) ? (s += " " + o) : (s += " " + l(o));
//                     return s;
//                   }),
//                     (i.deprecate = function (t, r) {
//                       if (void 0 !== e && !0 === e.noDeprecation) return t;
//                       if (void 0 === e)
//                         return function () {
//                           return i.deprecate(t, r).apply(this, arguments);
//                         };
//                       var n = !1;
//                       return function () {
//                         if (!n) {
//                           if (e.throwDeprecation) throw Error(r);
//                           e.traceDeprecation
//                             ? console.trace(r)
//                             : console.error(r),
//                             (n = !0);
//                         }
//                         return t.apply(this, arguments);
//                       };
//                     });
//                   var a = {},
//                     s = /^$/;
//                   if (e.env.NODE_DEBUG) {
//                     var o = e.env.NODE_DEBUG;
//                     s = RegExp(
//                       "^" +
//                         (o = o
//                           .replace(/[|\\{}()[\]^$+?.]/g, "\\$&")
//                           .replace(/\*/g, ".*")
//                           .replace(/,/g, "$|^")
//                           .toUpperCase()) +
//                         "$",
//                       "i"
//                     );
//                   }
//                   function l(t, e) {
//                     var r = { seen: [], stylize: u };
//                     return (
//                       arguments.length >= 3 && (r.depth = arguments[2]),
//                       arguments.length >= 4 && (r.colors = arguments[3]),
//                       y(e) ? (r.showHidden = e) : e && i._extend(r, e),
//                       M(r.showHidden) && (r.showHidden = !1),
//                       M(r.depth) && (r.depth = 2),
//                       M(r.colors) && (r.colors = !1),
//                       M(r.customInspect) && (r.customInspect = !0),
//                       r.colors && (r.stylize = h),
//                       c(r, t, r.depth)
//                     );
//                   }
//                   function h(t, e) {
//                     var i = l.styles[e];
//                     return i
//                       ? "\x1b[" +
//                           l.colors[i][0] +
//                           "m" +
//                           t +
//                           "\x1b[" +
//                           l.colors[i][1] +
//                           "m"
//                       : t;
//                   }
//                   function u(t, e) {
//                     return t;
//                   }
//                   function f(t) {
//                     var e = {};
//                     return (
//                       t.forEach(function (t, i) {
//                         e[t] = !0;
//                       }),
//                       e
//                     );
//                   }
//                   function c(t, e, r) {
//                     if (
//                       t.customInspect &&
//                       e &&
//                       B(e.inspect) &&
//                       e.inspect !== i.inspect &&
//                       (!e.constructor || e.constructor.prototype !== e)
//                     ) {
//                       var n = e.inspect(r, t);
//                       return E(n) || (n = c(t, n, r)), n;
//                     }
//                     var a = d(t, e);
//                     if (a) return a;
//                     var s = Object.keys(e),
//                       o = f(s);
//                     if (
//                       (t.showHidden && (s = Object.getOwnPropertyNames(e)),
//                       T(e) &&
//                         (s.indexOf("message") >= 0 ||
//                           s.indexOf("description") >= 0))
//                     )
//                       return p(e);
//                     if (0 === s.length) {
//                       if (B(e)) {
//                         var l = e.name ? ": " + e.name : "";
//                         return t.stylize("[Function" + l + "]", "special");
//                       }
//                       if (S(e))
//                         return t.stylize(
//                           RegExp.prototype.toString.call(e),
//                           "regexp"
//                         );
//                       if (I(e))
//                         return t.stylize(
//                           Date.prototype.toString.call(e),
//                           "date"
//                         );
//                       if (T(e)) return p(e);
//                     }
//                     var h,
//                       u = "",
//                       y = !1,
//                       v = ["{", "}"];
//                     return (
//                       b(e) && ((y = !0), (v = ["[", "]"])),
//                       B(e) &&
//                         (u =
//                           " [Function" + (e.name ? ": " + e.name : "") + "]"),
//                       S(e) && (u = " " + RegExp.prototype.toString.call(e)),
//                       I(e) && (u = " " + Date.prototype.toUTCString.call(e)),
//                       T(e) && (u = " " + p(e)),
//                       0 !== s.length || (y && 0 != e.length)
//                         ? r < 0
//                           ? S(e)
//                             ? t.stylize(
//                                 RegExp.prototype.toString.call(e),
//                                 "regexp"
//                               )
//                             : t.stylize("[Object]", "special")
//                           : (t.seen.push(e),
//                             (h = y
//                               ? m(t, e, r, o, s)
//                               : s.map(function (i) {
//                                   return g(t, e, r, o, i, y);
//                                 })),
//                             t.seen.pop(),
//                             _(h, u, v))
//                         : v[0] + u + v[1]
//                     );
//                   }
//                   function d(t, e) {
//                     if (M(e)) return t.stylize("undefined", "undefined");
//                     if (E(e)) {
//                       var i =
//                         "'" +
//                         JSON.stringify(e)
//                           .replace(/^"|"$/g, "")
//                           .replace(/'/g, "\\'")
//                           .replace(/\\"/g, '"') +
//                         "'";
//                       return t.stylize(i, "string");
//                     }
//                     return x(e)
//                       ? t.stylize("" + e, "number")
//                       : y(e)
//                       ? t.stylize("" + e, "boolean")
//                       : v(e)
//                       ? t.stylize("null", "null")
//                       : void 0;
//                   }
//                   function p(t) {
//                     return "[" + Error.prototype.toString.call(t) + "]";
//                   }
//                   function m(t, e, i, r, n) {
//                     for (var a = [], s = 0, o = e.length; s < o; ++s)
//                       L(e, String(s))
//                         ? a.push(g(t, e, i, r, String(s), !0))
//                         : a.push("");
//                     return (
//                       n.forEach(function (n) {
//                         n.match(/^\d+$/) || a.push(g(t, e, i, r, n, !0));
//                       }),
//                       a
//                     );
//                   }
//                   function g(t, e, i, r, n, a) {
//                     var s, o, l;
//                     if (
//                       ((l = Object.getOwnPropertyDescriptor(e, n) || {
//                         value: e[n],
//                       }).get
//                         ? (o = l.set
//                             ? t.stylize("[Getter/Setter]", "special")
//                             : t.stylize("[Getter]", "special"))
//                         : l.set && (o = t.stylize("[Setter]", "special")),
//                       L(r, n) || (s = "[" + n + "]"),
//                       o ||
//                         (0 > t.seen.indexOf(l.value)
//                           ? (o = v(i)
//                               ? c(t, l.value, null)
//                               : c(t, l.value, i - 1)).indexOf("\n") > -1 &&
//                             (o = a
//                               ? o
//                                   .split("\n")
//                                   .map(function (t) {
//                                     return "  " + t;
//                                   })
//                                   .join("\n")
//                                   .slice(2)
//                               : "\n" +
//                                 o
//                                   .split("\n")
//                                   .map(function (t) {
//                                     return "   " + t;
//                                   })
//                                   .join("\n"))
//                           : (o = t.stylize("[Circular]", "special"))),
//                       M(s))
//                     ) {
//                       if (a && n.match(/^\d+$/)) return o;
//                       (s = JSON.stringify("" + n)).match(
//                         /^"([a-zA-Z_][a-zA-Z_0-9]*)"$/
//                       )
//                         ? ((s = s.slice(1, -1)), (s = t.stylize(s, "name")))
//                         : ((s = s
//                             .replace(/'/g, "\\'")
//                             .replace(/\\"/g, '"')
//                             .replace(/(^"|"$)/g, "'")),
//                           (s = t.stylize(s, "string")));
//                     }
//                     return s + ": " + o;
//                   }
//                   function _(t, e, i) {
//                     return t.reduce(function (t, e) {
//                       return (
//                         e.indexOf("\n"),
//                         t + e.replace(/\u001b\[\d\d?m/g, "").length + 1
//                       );
//                     }, 0) > 60
//                       ? i[0] +
//                           ("" === e ? "" : e + "\n ") +
//                           " " +
//                           t.join(",\n  ") +
//                           " " +
//                           i[1]
//                       : i[0] + e + " " + t.join(", ") + " " + i[1];
//                   }
//                   function b(t) {
//                     return Array.isArray(t);
//                   }
//                   function y(t) {
//                     return "boolean" == typeof t;
//                   }
//                   function v(t) {
//                     return null === t;
//                   }
//                   function w(t) {
//                     return null == t;
//                   }
//                   function x(t) {
//                     return "number" == typeof t;
//                   }
//                   function E(t) {
//                     return "string" == typeof t;
//                   }
//                   function k(t) {
//                     return "symbol" == typeof t;
//                   }
//                   function M(t) {
//                     return void 0 === t;
//                   }
//                   function S(t) {
//                     return A(t) && "[object RegExp]" === P(t);
//                   }
//                   function A(t) {
//                     return "object" == typeof t && null !== t;
//                   }
//                   function I(t) {
//                     return A(t) && "[object Date]" === P(t);
//                   }
//                   function T(t) {
//                     return (
//                       A(t) && ("[object Error]" === P(t) || t instanceof Error)
//                     );
//                   }
//                   function B(t) {
//                     return "function" == typeof t;
//                   }
//                   function R(t) {
//                     return (
//                       null === t ||
//                       "boolean" == typeof t ||
//                       "number" == typeof t ||
//                       "string" == typeof t ||
//                       "symbol" == typeof t ||
//                       void 0 === t
//                     );
//                   }
//                   function P(t) {
//                     return Object.prototype.toString.call(t);
//                   }
//                   function O(t) {
//                     return t < 10 ? "0" + t.toString(10) : t.toString(10);
//                   }
//                   (i.debuglog = function (t) {
//                     if (!a[(t = t.toUpperCase())]) {
//                       if (s.test(t)) {
//                         var r = e.pid;
//                         a[t] = function () {
//                           var e = i.format.apply(i, arguments);
//                           console.error("%s %d: %s", t, r, e);
//                         };
//                       } else a[t] = function () {};
//                     }
//                     return a[t];
//                   }),
//                     (i.inspect = l),
//                     (l.colors = {
//                       bold: [1, 22],
//                       italic: [3, 23],
//                       underline: [4, 24],
//                       inverse: [7, 27],
//                       white: [37, 39],
//                       grey: [90, 39],
//                       black: [30, 39],
//                       blue: [34, 39],
//                       cyan: [36, 39],
//                       green: [32, 39],
//                       magenta: [35, 39],
//                       red: [31, 39],
//                       yellow: [33, 39],
//                     }),
//                     (l.styles = {
//                       special: "cyan",
//                       number: "yellow",
//                       boolean: "yellow",
//                       undefined: "grey",
//                       null: "bold",
//                       string: "green",
//                       date: "magenta",
//                       regexp: "red",
//                     }),
//                     (i.types = t("./support/types")),
//                     (i.isArray = b),
//                     (i.isBoolean = y),
//                     (i.isNull = v),
//                     (i.isNullOrUndefined = w),
//                     (i.isNumber = x),
//                     (i.isString = E),
//                     (i.isSymbol = k),
//                     (i.isUndefined = M),
//                     (i.isRegExp = S),
//                     (i.types.isRegExp = S),
//                     (i.isObject = A),
//                     (i.isDate = I),
//                     (i.types.isDate = I),
//                     (i.isError = T),
//                     (i.types.isNativeError = T),
//                     (i.isFunction = B),
//                     (i.isPrimitive = R),
//                     (i.isBuffer = t("./support/isBuffer"));
//                   var C = [
//                     "Jan",
//                     "Feb",
//                     "Mar",
//                     "Apr",
//                     "May",
//                     "Jun",
//                     "Jul",
//                     "Aug",
//                     "Sep",
//                     "Oct",
//                     "Nov",
//                     "Dec",
//                   ];
//                   function z() {
//                     var t = new Date(),
//                       e = [
//                         O(t.getHours()),
//                         O(t.getMinutes()),
//                         O(t.getSeconds()),
//                       ].join(":");
//                     return [t.getDate(), C[t.getMonth()], e].join(" ");
//                   }
//                   function L(t, e) {
//                     return Object.prototype.hasOwnProperty.call(t, e);
//                   }
//                   (i.log = function () {
//                     console.log("%s - %s", z(), i.format.apply(i, arguments));
//                   }),
//                     (i.inherits = t("inherits")),
//                     (i._extend = function (t, e) {
//                       if (!e || !A(e)) return t;
//                       for (var i = Object.keys(e), r = i.length; r--; )
//                         t[i[r]] = e[i[r]];
//                       return t;
//                     });
//                   var U =
//                     "undefined" != typeof Symbol
//                       ? Symbol("util.promisify.custom")
//                       : void 0;
//                   function D(t, e) {
//                     if (!t) {
//                       var i = Error("Promise was rejected with a falsy value");
//                       (i.reason = t), (t = i);
//                     }
//                     return e(t);
//                   }
//                   function N(t) {
//                     if ("function" != typeof t)
//                       throw TypeError(
//                         'The "original" argument must be of type Function'
//                       );
//                     function i() {
//                       for (var i = [], r = 0; r < arguments.length; r++)
//                         i.push(arguments[r]);
//                       var n = i.pop();
//                       if ("function" != typeof n)
//                         throw TypeError(
//                           "The last argument must be of type Function"
//                         );
//                       var a = this,
//                         s = function () {
//                           return n.apply(a, arguments);
//                         };
//                       t.apply(this, i).then(
//                         function (t) {
//                           e.nextTick(s.bind(null, null, t));
//                         },
//                         function (t) {
//                           e.nextTick(D.bind(null, t, s));
//                         }
//                       );
//                     }
//                     return (
//                       Object.setPrototypeOf(i, Object.getPrototypeOf(t)),
//                       Object.defineProperties(i, r(t)),
//                       i
//                     );
//                   }
//                   (i.promisify = function (t) {
//                     if ("function" != typeof t)
//                       throw TypeError(
//                         'The "original" argument must be of type Function'
//                       );
//                     if (U && t[U]) {
//                       var e;
//                       if ("function" != typeof (e = t[U]))
//                         throw TypeError(
//                           'The "util.promisify.custom" argument must be of type Function'
//                         );
//                       return (
//                         Object.defineProperty(e, U, {
//                           value: e,
//                           enumerable: !1,
//                           writable: !1,
//                           configurable: !0,
//                         }),
//                         e
//                       );
//                     }
//                     function e() {
//                       for (
//                         var e,
//                           i,
//                           r = new Promise(function (t, r) {
//                             (e = t), (i = r);
//                           }),
//                           n = [],
//                           a = 0;
//                         a < arguments.length;
//                         a++
//                       )
//                         n.push(arguments[a]);
//                       n.push(function (t, r) {
//                         t ? i(t) : e(r);
//                       });
//                       try {
//                         t.apply(this, n);
//                       } catch (t) {
//                         i(t);
//                       }
//                       return r;
//                     }
//                     return (
//                       Object.setPrototypeOf(e, Object.getPrototypeOf(t)),
//                       U &&
//                         Object.defineProperty(e, U, {
//                           value: e,
//                           enumerable: !1,
//                           writable: !1,
//                           configurable: !0,
//                         }),
//                       Object.defineProperties(e, r(t))
//                     );
//                   }),
//                     (i.promisify.custom = U),
//                     (i.callbackify = N);
//                 }).call(this);
//               }).call(this, t("_process"));
//             },
//             {
//               "./support/isBuffer": 82,
//               "./support/types": 83,
//               _process: 63,
//               inherits: 46,
//             },
//           ],
//           85: [
//             function (t, e, i) {
//               (function (i) {
//                 (function () {
//                   var r = t("for-each"),
//                     n = t("available-typed-arrays"),
//                     a = t("call-bind/callBound"),
//                     s = t("gopd"),
//                     o = a("Object.prototype.toString"),
//                     l = t("has-tostringtag/shams")(),
//                     h = "undefined" == typeof globalThis ? i : globalThis,
//                     u = n(),
//                     f = a("String.prototype.slice"),
//                     c = {},
//                     d = Object.getPrototypeOf;
//                   l &&
//                     s &&
//                     d &&
//                     r(u, function (t) {
//                       if ("function" == typeof h[t]) {
//                         var e = new h[t]();
//                         if (Symbol.toStringTag in e) {
//                           var i = d(e),
//                             r = s(i, Symbol.toStringTag);
//                           r || (r = s(d(i), Symbol.toStringTag)),
//                             (c[t] = r.get);
//                         }
//                       }
//                     });
//                   var p = function (t) {
//                       var e = !1;
//                       return (
//                         r(c, function (i, r) {
//                           if (!e)
//                             try {
//                               var n = i.call(t);
//                               n === r && (e = n);
//                             } catch (t) {}
//                         }),
//                         e
//                       );
//                     },
//                     m = t("is-typed-array");
//                   e.exports = function (t) {
//                     return (
//                       !!m(t) &&
//                       (l && Symbol.toStringTag in t ? p(t) : f(o(t), 8, -1))
//                     );
//                   };
//                 }).call(this);
//               }).call(
//                 this,
//                 void 0 !== commonjsGlobal
//                   ? commonjsGlobal
//                   : "undefined" != typeof self
//                   ? self
//                   : "undefined" != typeof window
//                   ? window
//                   : {}
//               );
//             },
//             {
//               "available-typed-arrays": 27,
//               "call-bind/callBound": 33,
//               "for-each": 36,
//               gopd: 40,
//               "has-tostringtag/shams": 43,
//               "is-typed-array": 50,
//             },
//           ],
//         },
//         {},
//         [20]
//       )(20);
//       var PNGFilterType,
//         PNGFilterType2,
//         PNGColorType,
//         PNGColorType2,
//         browserExports = browser$1.exports;
//       function png() {
//         return {
//           mime: "image/png",
//           hasAlpha: !0,
//           encode: (
//             t,
//             {
//               deflateLevel: e = 9,
//               deflateStrategy: i = 3,
//               filterType: r = PNGFilterType.AUTO,
//               colorType: n,
//               inputHasAlpha: a = !0,
//               ...s
//             } = {}
//           ) => {
//             let o = new browserExports.PNG({
//               width: t.width,
//               height: t.height,
//             });
//             return (
//               (o.data = t.data),
//               browserExports.PNG.sync.write(o, {
//                 ...s,
//                 deflateLevel: e,
//                 deflateStrategy: i,
//                 filterType: r,
//                 colorType:
//                   void 0 !== n
//                     ? n
//                     : a
//                     ? PNGColorType.COLOR_ALPHA
//                     : PNGColorType.COLOR,
//                 inputHasAlpha: a,
//               })
//             );
//           },
//           decode: (t, e) => {
//             let i = browserExports.PNG.sync.read(t, e);
//             return { data: i.data, width: i.width, height: i.height };
//           },
//         };
//       }
//       (PNGFilterType2 = PNGFilterType || (PNGFilterType = {})),
//         (PNGFilterType2[(PNGFilterType2.AUTO = -1)] = "AUTO"),
//         (PNGFilterType2[(PNGFilterType2.NONE = 0)] = "NONE"),
//         (PNGFilterType2[(PNGFilterType2.SUB = 1)] = "SUB"),
//         (PNGFilterType2[(PNGFilterType2.UP = 2)] = "UP"),
//         (PNGFilterType2[(PNGFilterType2.AVERAGE = 3)] = "AVERAGE"),
//         (PNGFilterType2[(PNGFilterType2.PATH = 4)] = "PATH"),
//         (PNGColorType2 = PNGColorType || (PNGColorType = {})),
//         (PNGColorType2[(PNGColorType2.GRAYSCALE = 0)] = "GRAYSCALE"),
//         (PNGColorType2[(PNGColorType2.COLOR = 2)] = "COLOR"),
//         (PNGColorType2[(PNGColorType2.GRAYSCALE_ALPHA = 4)] =
//           "GRAYSCALE_ALPHA"),
//         (PNGColorType2[(PNGColorType2.COLOR_ALPHA = 6)] = "COLOR_ALPHA");
//       var hasRequiredCommon,
//         UTIF = { exports: {} },
//         common = {};
//       function requireCommon() {
//         return (
//           hasRequiredCommon ||
//             ((hasRequiredCommon = 1),
//             (function (t) {
//               var e =
//                 "undefined" != typeof Uint8Array &&
//                 "undefined" != typeof Uint16Array &&
//                 "undefined" != typeof Int32Array;
//               function i(t, e) {
//                 return Object.prototype.hasOwnProperty.call(t, e);
//               }
//               (t.assign = function (t) {
//                 for (
//                   var e = Array.prototype.slice.call(arguments, 1);
//                   e.length;

//                 ) {
//                   var r = e.shift();
//                   if (r) {
//                     if ("object" != typeof r)
//                       throw TypeError(r + "must be non-object");
//                     for (var n in r) i(r, n) && (t[n] = r[n]);
//                   }
//                 }
//                 return t;
//               }),
//                 (t.shrinkBuf = function (t, e) {
//                   return t.length === e
//                     ? t
//                     : t.subarray
//                     ? t.subarray(0, e)
//                     : ((t.length = e), t);
//                 });
//               var r = {
//                   arraySet: function (t, e, i, r, n) {
//                     if (e.subarray && t.subarray)
//                       t.set(e.subarray(i, i + r), n);
//                     else for (var a = 0; a < r; a++) t[n + a] = e[i + a];
//                   },
//                   flattenChunks: function (t) {
//                     var e, i, r, n, a, s;
//                     for (r = 0, e = 0, i = t.length; e < i; e++)
//                       r += t[e].length;
//                     for (
//                       s = new Uint8Array(r), n = 0, e = 0, i = t.length;
//                       e < i;
//                       e++
//                     )
//                       (a = t[e]), s.set(a, n), (n += a.length);
//                     return s;
//                   },
//                 },
//                 n = {
//                   arraySet: function (t, e, i, r, n) {
//                     for (var a = 0; a < r; a++) t[n + a] = e[i + a];
//                   },
//                   flattenChunks: function (t) {
//                     return [].concat.apply([], t);
//                   },
//                 };
//               (t.setTyped = function (e) {
//                 e
//                   ? ((t.Buf8 = Uint8Array),
//                     (t.Buf16 = Uint16Array),
//                     (t.Buf32 = Int32Array),
//                     t.assign(t, r))
//                   : ((t.Buf8 = Array),
//                     (t.Buf16 = Array),
//                     (t.Buf32 = Array),
//                     t.assign(t, n));
//               }),
//                 t.setTyped(e);
//             })(common)),
//           common
//         );
//       }
//       var hasRequiredTrees,
//         adler32_1,
//         hasRequiredAdler32,
//         crc32_1,
//         hasRequiredCrc32,
//         messages,
//         hasRequiredMessages,
//         hasRequiredDeflate$1,
//         deflate$1 = {},
//         deflate = {},
//         trees = {};
//       function requireTrees() {
//         if (hasRequiredTrees) return trees;
//         hasRequiredTrees = 1;
//         var t = requireCommon(),
//           e = 0,
//           i = 1;
//         function r(t) {
//           for (var e = t.length; --e >= 0; ) t[e] = 0;
//         }
//         var n = 0,
//           a = 29,
//           s = 256,
//           o = 286,
//           l = 30,
//           h = 19,
//           u = 573,
//           f = 15,
//           c = 16,
//           d = 7,
//           p = 256,
//           m = 16,
//           g = 17,
//           _ = 18,
//           b = [
//             0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,
//             4, 5, 5, 5, 5, 0,
//           ],
//           y = [
//             0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
//             10, 10, 11, 11, 12, 12, 13, 13,
//           ],
//           v = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7],
//           w = [
//             16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
//           ],
//           x = Array(576);
//         r(x);
//         var E = Array(2 * l);
//         r(E);
//         var k = Array(512);
//         r(k);
//         var M = Array(256);
//         r(M);
//         var S = Array(a);
//         r(S);
//         var A,
//           I,
//           T,
//           B = Array(l);
//         function R(t, e, i, r, n) {
//           (this.static_tree = t),
//             (this.extra_bits = e),
//             (this.extra_base = i),
//             (this.elems = r),
//             (this.max_length = n),
//             (this.has_stree = t && t.length);
//         }
//         function P(t, e) {
//           (this.dyn_tree = t), (this.max_code = 0), (this.stat_desc = e);
//         }
//         function O(t) {
//           return t < 256 ? k[t] : k[256 + (t >>> 7)];
//         }
//         function C(t, e) {
//           (t.pending_buf[t.pending++] = 255 & e),
//             (t.pending_buf[t.pending++] = (e >>> 8) & 255);
//         }
//         function z(t, e, i) {
//           t.bi_valid > c - i
//             ? ((t.bi_buf |= (e << t.bi_valid) & 65535),
//               C(t, t.bi_buf),
//               (t.bi_buf = e >> (c - t.bi_valid)),
//               (t.bi_valid += i - c))
//             : ((t.bi_buf |= (e << t.bi_valid) & 65535), (t.bi_valid += i));
//         }
//         function L(t, e, i) {
//           z(t, i[2 * e], i[2 * e + 1]);
//         }
//         function U(t, e) {
//           var i = 0;
//           do (i |= 1 & t), (t >>>= 1), (i <<= 1);
//           while (--e > 0);
//           return i >>> 1;
//         }
//         function D(t, e, i) {
//           var r,
//             n,
//             a = Array(f + 1),
//             s = 0;
//           for (r = 1; r <= f; r++) a[r] = s = (s + i[r - 1]) << 1;
//           for (n = 0; n <= e; n++) {
//             var o = t[2 * n + 1];
//             0 !== o && (t[2 * n] = U(a[o]++, o));
//           }
//         }
//         function N(t) {
//           var e;
//           for (e = 0; e < o; e++) t.dyn_ltree[2 * e] = 0;
//           for (e = 0; e < l; e++) t.dyn_dtree[2 * e] = 0;
//           for (e = 0; e < h; e++) t.bl_tree[2 * e] = 0;
//           (t.dyn_ltree[2 * p] = 1),
//             (t.opt_len = t.static_len = 0),
//             (t.last_lit = t.matches = 0);
//         }
//         function j(t) {
//           t.bi_valid > 8
//             ? C(t, t.bi_buf)
//             : t.bi_valid > 0 && (t.pending_buf[t.pending++] = t.bi_buf),
//             (t.bi_buf = 0),
//             (t.bi_valid = 0);
//         }
//         function F(t, e, i, r) {
//           var n = 2 * e,
//             a = 2 * i;
//           return t[n] < t[a] || (t[n] === t[a] && r[e] <= r[i]);
//         }
//         function G(t, e, i) {
//           for (
//             var r = t.heap[i], n = i << 1;
//             n <= t.heap_len &&
//             (n < t.heap_len && F(e, t.heap[n + 1], t.heap[n], t.depth) && n++,
//             !F(e, r, t.heap[n], t.depth));

//           )
//             (t.heap[i] = t.heap[n]), (i = n), (n <<= 1);
//           t.heap[i] = r;
//         }
//         function Z(t, e, i) {
//           var r,
//             n,
//             a,
//             o,
//             l = 0;
//           if (0 !== t.last_lit)
//             do
//               (r =
//                 (t.pending_buf[t.d_buf + 2 * l] << 8) |
//                 t.pending_buf[t.d_buf + 2 * l + 1]),
//                 (n = t.pending_buf[t.l_buf + l]),
//                 l++,
//                 0 === r
//                   ? L(t, n, e)
//                   : (L(t, (a = M[n]) + s + 1, e),
//                     0 !== (o = b[a]) && z(t, (n -= S[a]), o),
//                     L(t, (a = O(--r)), i),
//                     0 !== (o = y[a]) && z(t, (r -= B[a]), o));
//             while (l < t.last_lit);
//           L(t, p, e);
//         }
//         function H(t, e) {
//           var i,
//             r,
//             n,
//             a = e.dyn_tree,
//             s = e.stat_desc.static_tree,
//             o = e.stat_desc.has_stree,
//             l = e.stat_desc.elems,
//             h = -1;
//           for (t.heap_len = 0, t.heap_max = u, i = 0; i < l; i++)
//             0 !== a[2 * i]
//               ? ((t.heap[++t.heap_len] = h = i), (t.depth[i] = 0))
//               : (a[2 * i + 1] = 0);
//           for (; t.heap_len < 2; )
//             (a[2 * (n = t.heap[++t.heap_len] = h < 2 ? ++h : 0)] = 1),
//               (t.depth[n] = 0),
//               t.opt_len--,
//               o && (t.static_len -= s[2 * n + 1]);
//           for (e.max_code = h, i = t.heap_len >> 1; i >= 1; i--) G(t, a, i);
//           n = l;
//           do
//             (i = t.heap[1]),
//               (t.heap[1] = t.heap[t.heap_len--]),
//               G(t, a, 1),
//               (r = t.heap[1]),
//               (t.heap[--t.heap_max] = i),
//               (t.heap[--t.heap_max] = r),
//               (a[2 * n] = a[2 * i] + a[2 * r]),
//               (t.depth[n] =
//                 (t.depth[i] >= t.depth[r] ? t.depth[i] : t.depth[r]) + 1),
//               (a[2 * i + 1] = a[2 * r + 1] = n),
//               (t.heap[1] = n++),
//               G(t, a, 1);
//           while (t.heap_len >= 2);
//           (t.heap[--t.heap_max] = t.heap[1]),
//             (function (t, e) {
//               var i,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o,
//                 l = e.dyn_tree,
//                 h = e.max_code,
//                 c = e.stat_desc.static_tree,
//                 d = e.stat_desc.has_stree,
//                 p = e.stat_desc.extra_bits,
//                 m = e.stat_desc.extra_base,
//                 g = e.stat_desc.max_length,
//                 _ = 0;
//               for (a = 0; a <= f; a++) t.bl_count[a] = 0;
//               for (
//                 l[2 * t.heap[t.heap_max] + 1] = 0, i = t.heap_max + 1;
//                 i < u;
//                 i++
//               )
//                 (a = l[2 * l[2 * (r = t.heap[i]) + 1] + 1] + 1) > g &&
//                   ((a = g), _++),
//                   (l[2 * r + 1] = a),
//                   r > h ||
//                     (t.bl_count[a]++,
//                     (s = 0),
//                     r >= m && (s = p[r - m]),
//                     (o = l[2 * r]),
//                     (t.opt_len += o * (a + s)),
//                     d && (t.static_len += o * (c[2 * r + 1] + s)));
//               if (0 !== _) {
//                 do {
//                   for (a = g - 1; 0 === t.bl_count[a]; ) a--;
//                   t.bl_count[a]--,
//                     (t.bl_count[a + 1] += 2),
//                     t.bl_count[g]--,
//                     (_ -= 2);
//                 } while (_ > 0);
//                 for (a = g; 0 !== a; a--)
//                   for (r = t.bl_count[a]; 0 !== r; )
//                     (n = t.heap[--i]) > h ||
//                       (l[2 * n + 1] !== a &&
//                         ((t.opt_len += (a - l[2 * n + 1]) * l[2 * n]),
//                         (l[2 * n + 1] = a)),
//                       r--);
//               }
//             })(t, e),
//             D(a, h, t.bl_count);
//         }
//         function W(t, e, i) {
//           var r,
//             n,
//             a = -1,
//             s = e[1],
//             o = 0,
//             l = 7,
//             h = 4;
//           for (
//             0 === s && ((l = 138), (h = 3)), e[2 * (i + 1) + 1] = 65535, r = 0;
//             r <= i;
//             r++
//           )
//             (n = s),
//               (s = e[2 * (r + 1) + 1]),
//               (++o < l && n === s) ||
//                 (o < h
//                   ? (t.bl_tree[2 * n] += o)
//                   : 0 !== n
//                   ? (n !== a && t.bl_tree[2 * n]++, t.bl_tree[2 * m]++)
//                   : o <= 10
//                   ? t.bl_tree[2 * g]++
//                   : t.bl_tree[2 * _]++,
//                 (o = 0),
//                 (a = n),
//                 0 === s
//                   ? ((l = 138), (h = 3))
//                   : n === s
//                   ? ((l = 6), (h = 3))
//                   : ((l = 7), (h = 4)));
//         }
//         function q(t, e, i) {
//           var r,
//             n,
//             a = -1,
//             s = e[1],
//             o = 0,
//             l = 7,
//             h = 4;
//           for (0 === s && ((l = 138), (h = 3)), r = 0; r <= i; r++)
//             if (((n = s), (s = e[2 * (r + 1) + 1]), !(++o < l && n === s))) {
//               if (o < h)
//                 do L(t, n, t.bl_tree);
//                 while (0 != --o);
//               else
//                 0 !== n
//                   ? (n !== a && (L(t, n, t.bl_tree), o--),
//                     L(t, m, t.bl_tree),
//                     z(t, o - 3, 2))
//                   : o <= 10
//                   ? (L(t, g, t.bl_tree), z(t, o - 3, 3))
//                   : (L(t, _, t.bl_tree), z(t, o - 11, 7));
//               (o = 0),
//                 (a = n),
//                 0 === s
//                   ? ((l = 138), (h = 3))
//                   : n === s
//                   ? ((l = 6), (h = 3))
//                   : ((l = 7), (h = 4));
//             }
//         }
//         r(B);
//         var Y = !1;
//         function V(e, i, r, a) {
//           z(e, (n << 1) + (a ? 1 : 0), 3),
//             (function (e, i, r, n) {
//               j(e),
//                 C(e, r),
//                 C(e, ~r),
//                 t.arraySet(e.pending_buf, e.window, i, r, e.pending),
//                 (e.pending += r);
//             })(e, i, r);
//         }
//         return (
//           (trees._tr_init = function (t) {
//             Y ||
//               ((function () {
//                 var t,
//                   e,
//                   i,
//                   r,
//                   n,
//                   u = Array(f + 1);
//                 for (i = 0, r = 0; r < a - 1; r++)
//                   for (S[r] = i, t = 0; t < 1 << b[r]; t++) M[i++] = r;
//                 for (M[i - 1] = r, n = 0, r = 0; r < 16; r++)
//                   for (B[r] = n, t = 0; t < 1 << y[r]; t++) k[n++] = r;
//                 for (n >>= 7; r < l; r++)
//                   for (B[r] = n << 7, t = 0; t < 1 << (y[r] - 7); t++)
//                     k[256 + n++] = r;
//                 for (e = 0; e <= f; e++) u[e] = 0;
//                 for (t = 0; t <= 143; ) (x[2 * t + 1] = 8), t++, u[8]++;
//                 for (; t <= 255; ) (x[2 * t + 1] = 9), t++, u[9]++;
//                 for (; t <= 279; ) (x[2 * t + 1] = 7), t++, u[7]++;
//                 for (; t <= 287; ) (x[2 * t + 1] = 8), t++, u[8]++;
//                 for (D(x, o + 1, u), t = 0; t < l; t++)
//                   (E[2 * t + 1] = 5), (E[2 * t] = U(t, 5));
//                 (A = new R(x, b, s + 1, o, f)),
//                   (I = new R(E, y, 0, l, f)),
//                   (T = new R([], v, 0, h, d));
//               })(),
//               (Y = !0)),
//               (t.l_desc = new P(t.dyn_ltree, A)),
//               (t.d_desc = new P(t.dyn_dtree, I)),
//               (t.bl_desc = new P(t.bl_tree, T)),
//               (t.bi_buf = 0),
//               (t.bi_valid = 0),
//               N(t);
//           }),
//           (trees._tr_stored_block = V),
//           (trees._tr_flush_block = function (t, r, n, a) {
//             var o,
//               l,
//               u = 0;
//             t.level > 0
//               ? (2 === t.strm.data_type &&
//                   (t.strm.data_type = (function (t) {
//                     var r,
//                       n = 4093624447;
//                     for (r = 0; r <= 31; r++, n >>>= 1)
//                       if (1 & n && 0 !== t.dyn_ltree[2 * r]) return e;
//                     if (
//                       0 !== t.dyn_ltree[18] ||
//                       0 !== t.dyn_ltree[20] ||
//                       0 !== t.dyn_ltree[26]
//                     )
//                       return i;
//                     for (r = 32; r < s; r++)
//                       if (0 !== t.dyn_ltree[2 * r]) return i;
//                     return e;
//                   })(t)),
//                 H(t, t.l_desc),
//                 H(t, t.d_desc),
//                 (u = (function (t) {
//                   var e;
//                   for (
//                     W(t, t.dyn_ltree, t.l_desc.max_code),
//                       W(t, t.dyn_dtree, t.d_desc.max_code),
//                       H(t, t.bl_desc),
//                       e = h - 1;
//                     e >= 3 && 0 === t.bl_tree[2 * w[e] + 1];
//                     e--
//                   );
//                   return (t.opt_len += 3 * (e + 1) + 5 + 5 + 4), e;
//                 })(t)),
//                 (o = (t.opt_len + 3 + 7) >>> 3),
//                 (l = (t.static_len + 3 + 7) >>> 3) <= o && (o = l))
//               : (o = l = n + 5),
//               n + 4 <= o && -1 !== r
//                 ? V(t, r, n, a)
//                 : 4 === t.strategy || l === o
//                 ? (z(t, 2 + (a ? 1 : 0), 3), Z(t, x, E))
//                 : (z(t, 4 + (a ? 1 : 0), 3),
//                   (function (t, e, i, r) {
//                     var n;
//                     for (
//                       z(t, e - 257, 5), z(t, i - 1, 5), z(t, r - 4, 4), n = 0;
//                       n < r;
//                       n++
//                     )
//                       z(t, t.bl_tree[2 * w[n] + 1], 3);
//                     q(t, t.dyn_ltree, e - 1), q(t, t.dyn_dtree, i - 1);
//                   })(t, t.l_desc.max_code + 1, t.d_desc.max_code + 1, u + 1),
//                   Z(t, t.dyn_ltree, t.dyn_dtree)),
//               N(t),
//               a && j(t);
//           }),
//           (trees._tr_tally = function (t, e, i) {
//             return (
//               (t.pending_buf[t.d_buf + 2 * t.last_lit] = (e >>> 8) & 255),
//               (t.pending_buf[t.d_buf + 2 * t.last_lit + 1] = 255 & e),
//               (t.pending_buf[t.l_buf + t.last_lit] = 255 & i),
//               t.last_lit++,
//               0 === e
//                 ? t.dyn_ltree[2 * i]++
//                 : (t.matches++,
//                   e--,
//                   t.dyn_ltree[2 * (M[i] + s + 1)]++,
//                   t.dyn_dtree[2 * O(e)]++),
//               t.last_lit === t.lit_bufsize - 1
//             );
//           }),
//           (trees._tr_align = function (t) {
//             z(t, 2, 3),
//               L(t, p, x),
//               (function (t) {
//                 16 === t.bi_valid
//                   ? (C(t, t.bi_buf), (t.bi_buf = 0), (t.bi_valid = 0))
//                   : t.bi_valid >= 8 &&
//                     ((t.pending_buf[t.pending++] = 255 & t.bi_buf),
//                     (t.bi_buf >>= 8),
//                     (t.bi_valid -= 8));
//               })(t);
//           }),
//           trees
//         );
//       }
//       function requireAdler32() {
//         return hasRequiredAdler32
//           ? adler32_1
//           : ((hasRequiredAdler32 = 1),
//             (adler32_1 = function (t, e, i, r) {
//               for (
//                 var n = 65535 & t, a = (t >>> 16) & 65535, s = 0;
//                 0 !== i;

//               ) {
//                 i -= s = i > 2e3 ? 2e3 : i;
//                 do a = (a + (n = (n + e[r++]) | 0)) | 0;
//                 while (--s);
//                 (n %= 65521), (a %= 65521);
//               }
//               return n | (a << 16);
//             }));
//       }
//       function requireCrc32() {
//         if (hasRequiredCrc32) return crc32_1;
//         hasRequiredCrc32 = 1;
//         var t = (function () {
//           for (var t, e = [], i = 0; i < 256; i++) {
//             t = i;
//             for (var r = 0; r < 8; r++)
//               t = 1 & t ? 3988292384 ^ (t >>> 1) : t >>> 1;
//             e[i] = t;
//           }
//           return e;
//         })();
//         return (crc32_1 = function (e, i, r, n) {
//           var a = t,
//             s = n + r;
//           e ^= -1;
//           for (var o = n; o < s; o++) e = (e >>> 8) ^ a[255 & (e ^ i[o])];
//           return ~e;
//         });
//       }
//       function requireMessages() {
//         return hasRequiredMessages
//           ? messages
//           : ((hasRequiredMessages = 1),
//             (messages = {
//               2: "need dictionary",
//               1: "stream end",
//               0: "",
//               "-1": "file error",
//               "-2": "stream error",
//               "-3": "data error",
//               "-4": "insufficient memory",
//               "-5": "buffer error",
//               "-6": "incompatible version",
//             }));
//       }
//       function requireDeflate$1() {
//         if (hasRequiredDeflate$1) return deflate;
//         hasRequiredDeflate$1 = 1;
//         var t,
//           e = requireCommon(),
//           i = requireTrees(),
//           r = requireAdler32(),
//           n = requireCrc32(),
//           a = requireMessages(),
//           s = 0,
//           o = 4,
//           l = 0,
//           h = -2,
//           u = -1,
//           f = 4,
//           c = 2,
//           d = 8,
//           p = 9,
//           m = 286,
//           g = 30,
//           _ = 19,
//           b = 573,
//           y = 15,
//           v = 3,
//           w = 258,
//           x = 262,
//           E = 42,
//           k = 103,
//           M = 113,
//           S = 666,
//           A = 1,
//           I = 2,
//           T = 3,
//           B = 4;
//         function R(t, e) {
//           return (t.msg = a[e]), e;
//         }
//         function P(t) {
//           return (t << 1) - (t > 4 ? 9 : 0);
//         }
//         function O(t) {
//           for (var e = t.length; --e >= 0; ) t[e] = 0;
//         }
//         function C(t) {
//           var i = t.state,
//             r = i.pending;
//           r > t.avail_out && (r = t.avail_out),
//             0 !== r &&
//               (e.arraySet(
//                 t.output,
//                 i.pending_buf,
//                 i.pending_out,
//                 r,
//                 t.next_out
//               ),
//               (t.next_out += r),
//               (i.pending_out += r),
//               (t.total_out += r),
//               (t.avail_out -= r),
//               (i.pending -= r),
//               0 === i.pending && (i.pending_out = 0));
//         }
//         function z(t, e) {
//           i._tr_flush_block(
//             t,
//             t.block_start >= 0 ? t.block_start : -1,
//             t.strstart - t.block_start,
//             e
//           ),
//             (t.block_start = t.strstart),
//             C(t.strm);
//         }
//         function L(t, e) {
//           t.pending_buf[t.pending++] = e;
//         }
//         function U(t, e) {
//           (t.pending_buf[t.pending++] = (e >>> 8) & 255),
//             (t.pending_buf[t.pending++] = 255 & e);
//         }
//         function D(t, e) {
//           var i,
//             r,
//             n = t.max_chain_length,
//             a = t.strstart,
//             s = t.prev_length,
//             o = t.nice_match,
//             l = t.strstart > t.w_size - x ? t.strstart - (t.w_size - x) : 0,
//             h = t.window,
//             u = t.w_mask,
//             f = t.prev,
//             c = t.strstart + w,
//             d = h[a + s - 1],
//             p = h[a + s];
//           t.prev_length >= t.good_match && (n >>= 2),
//             o > t.lookahead && (o = t.lookahead);
//           do
//             if (
//               h[(i = e) + s] === p &&
//               h[i + s - 1] === d &&
//               h[i] === h[a] &&
//               h[++i] === h[a + 1]
//             ) {
//               (a += 2), i++;
//               do;
//               while (
//                 h[++a] === h[++i] &&
//                 h[++a] === h[++i] &&
//                 h[++a] === h[++i] &&
//                 h[++a] === h[++i] &&
//                 h[++a] === h[++i] &&
//                 h[++a] === h[++i] &&
//                 h[++a] === h[++i] &&
//                 h[++a] === h[++i] &&
//                 a < c
//               );
//               if (((r = w - (c - a)), (a = c - w), r > s)) {
//                 if (((t.match_start = e), (s = r), r >= o)) break;
//                 (d = h[a + s - 1]), (p = h[a + s]);
//               }
//             }
//           while ((e = f[e & u]) > l && 0 != --n);
//           return s <= t.lookahead ? s : t.lookahead;
//         }
//         function N(t) {
//           var i,
//             a,
//             s,
//             o,
//             l,
//             h,
//             u,
//             f,
//             c,
//             d,
//             p = t.w_size;
//           do {
//             if (
//               ((o = t.window_size - t.lookahead - t.strstart),
//               t.strstart >= p + (p - x))
//             ) {
//               e.arraySet(t.window, t.window, p, p, 0),
//                 (t.match_start -= p),
//                 (t.strstart -= p),
//                 (t.block_start -= p),
//                 (i = a = t.hash_size);
//               do (s = t.head[--i]), (t.head[i] = s >= p ? s - p : 0);
//               while (--a);
//               i = a = p;
//               do (s = t.prev[--i]), (t.prev[i] = s >= p ? s - p : 0);
//               while (--a);
//               o += p;
//             }
//             if (0 === t.strm.avail_in) break;
//             if (
//               ((h = t.strm),
//               (u = t.window),
//               (f = t.strstart + t.lookahead),
//               (c = o),
//               (d = void 0),
//               (d = h.avail_in) > c && (d = c),
//               (a =
//                 0 === d
//                   ? 0
//                   : ((h.avail_in -= d),
//                     e.arraySet(u, h.input, h.next_in, d, f),
//                     1 === h.state.wrap
//                       ? (h.adler = r(h.adler, u, d, f))
//                       : 2 === h.state.wrap && (h.adler = n(h.adler, u, d, f)),
//                     (h.next_in += d),
//                     (h.total_in += d),
//                     d)),
//               (t.lookahead += a),
//               t.lookahead + t.insert >= v)
//             )
//               for (
//                 l = t.strstart - t.insert,
//                   t.ins_h = t.window[l],
//                   t.ins_h =
//                     ((t.ins_h << t.hash_shift) ^ t.window[l + 1]) & t.hash_mask;
//                 t.insert &&
//                 ((t.ins_h =
//                   ((t.ins_h << t.hash_shift) ^ t.window[l + v - 1]) &
//                   t.hash_mask),
//                 (t.prev[l & t.w_mask] = t.head[t.ins_h]),
//                 (t.head[t.ins_h] = l),
//                 l++,
//                 t.insert--,
//                 !(t.lookahead + t.insert < v));

//               );
//           } while (t.lookahead < x && 0 !== t.strm.avail_in);
//         }
//         function j(t, e) {
//           for (var r, n; ; ) {
//             if (t.lookahead < x) {
//               if ((N(t), t.lookahead < x && e === s)) return A;
//               if (0 === t.lookahead) break;
//             }
//             if (
//               ((r = 0),
//               t.lookahead >= v &&
//                 ((t.ins_h =
//                   ((t.ins_h << t.hash_shift) ^ t.window[t.strstart + v - 1]) &
//                   t.hash_mask),
//                 (r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                 (t.head[t.ins_h] = t.strstart)),
//               0 !== r &&
//                 t.strstart - r <= t.w_size - x &&
//                 (t.match_length = D(t, r)),
//               t.match_length >= v)
//             ) {
//               if (
//                 ((n = i._tr_tally(
//                   t,
//                   t.strstart - t.match_start,
//                   t.match_length - v
//                 )),
//                 (t.lookahead -= t.match_length),
//                 t.match_length <= t.max_lazy_match && t.lookahead >= v)
//               ) {
//                 t.match_length--;
//                 do
//                   t.strstart++,
//                     (t.ins_h =
//                       ((t.ins_h << t.hash_shift) ^
//                         t.window[t.strstart + v - 1]) &
//                       t.hash_mask),
//                     (r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                     (t.head[t.ins_h] = t.strstart);
//                 while (0 != --t.match_length);
//                 t.strstart++;
//               } else
//                 (t.strstart += t.match_length),
//                   (t.match_length = 0),
//                   (t.ins_h = t.window[t.strstart]),
//                   (t.ins_h =
//                     ((t.ins_h << t.hash_shift) ^ t.window[t.strstart + 1]) &
//                     t.hash_mask);
//             } else
//               (n = i._tr_tally(t, 0, t.window[t.strstart])),
//                 t.lookahead--,
//                 t.strstart++;
//             if (n && (z(t, !1), 0 === t.strm.avail_out)) return A;
//           }
//           return (
//             (t.insert = t.strstart < v - 1 ? t.strstart : v - 1),
//             e === o
//               ? (z(t, !0), 0 === t.strm.avail_out ? T : B)
//               : t.last_lit && (z(t, !1), 0 === t.strm.avail_out)
//               ? A
//               : I
//           );
//         }
//         function F(t, e) {
//           for (var r, n, a; ; ) {
//             if (t.lookahead < x) {
//               if ((N(t), t.lookahead < x && e === s)) return A;
//               if (0 === t.lookahead) break;
//             }
//             if (
//               ((r = 0),
//               t.lookahead >= v &&
//                 ((t.ins_h =
//                   ((t.ins_h << t.hash_shift) ^ t.window[t.strstart + v - 1]) &
//                   t.hash_mask),
//                 (r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                 (t.head[t.ins_h] = t.strstart)),
//               (t.prev_length = t.match_length),
//               (t.prev_match = t.match_start),
//               (t.match_length = v - 1),
//               0 !== r &&
//                 t.prev_length < t.max_lazy_match &&
//                 t.strstart - r <= t.w_size - x &&
//                 ((t.match_length = D(t, r)),
//                 t.match_length <= 5 &&
//                   (1 === t.strategy ||
//                     (t.match_length === v &&
//                       t.strstart - t.match_start > 4096)) &&
//                   (t.match_length = v - 1)),
//               t.prev_length >= v && t.match_length <= t.prev_length)
//             ) {
//               (a = t.strstart + t.lookahead - v),
//                 (n = i._tr_tally(
//                   t,
//                   t.strstart - 1 - t.prev_match,
//                   t.prev_length - v
//                 )),
//                 (t.lookahead -= t.prev_length - 1),
//                 (t.prev_length -= 2);
//               do
//                 ++t.strstart <= a &&
//                   ((t.ins_h =
//                     ((t.ins_h << t.hash_shift) ^ t.window[t.strstart + v - 1]) &
//                     t.hash_mask),
//                   (r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h]),
//                   (t.head[t.ins_h] = t.strstart));
//               while (0 != --t.prev_length);
//               if (
//                 ((t.match_available = 0),
//                 (t.match_length = v - 1),
//                 t.strstart++,
//                 n && (z(t, !1), 0 === t.strm.avail_out))
//               )
//                 return A;
//             } else if (t.match_available) {
//               if (
//                 ((n = i._tr_tally(t, 0, t.window[t.strstart - 1])) && z(t, !1),
//                 t.strstart++,
//                 t.lookahead--,
//                 0 === t.strm.avail_out)
//               )
//                 return A;
//             } else (t.match_available = 1), t.strstart++, t.lookahead--;
//           }
//           return (
//             t.match_available &&
//               ((n = i._tr_tally(t, 0, t.window[t.strstart - 1])),
//               (t.match_available = 0)),
//             (t.insert = t.strstart < v - 1 ? t.strstart : v - 1),
//             e === o
//               ? (z(t, !0), 0 === t.strm.avail_out ? T : B)
//               : t.last_lit && (z(t, !1), 0 === t.strm.avail_out)
//               ? A
//               : I
//           );
//         }
//         function G(t, e, i, r, n) {
//           (this.good_length = t),
//             (this.max_lazy = e),
//             (this.nice_length = i),
//             (this.max_chain = r),
//             (this.func = n);
//         }
//         function Z() {
//           (this.strm = null),
//             (this.status = 0),
//             (this.pending_buf = null),
//             (this.pending_buf_size = 0),
//             (this.pending_out = 0),
//             (this.pending = 0),
//             (this.wrap = 0),
//             (this.gzhead = null),
//             (this.gzindex = 0),
//             (this.method = d),
//             (this.last_flush = -1),
//             (this.w_size = 0),
//             (this.w_bits = 0),
//             (this.w_mask = 0),
//             (this.window = null),
//             (this.window_size = 0),
//             (this.prev = null),
//             (this.head = null),
//             (this.ins_h = 0),
//             (this.hash_size = 0),
//             (this.hash_bits = 0),
//             (this.hash_mask = 0),
//             (this.hash_shift = 0),
//             (this.block_start = 0),
//             (this.match_length = 0),
//             (this.prev_match = 0),
//             (this.match_available = 0),
//             (this.strstart = 0),
//             (this.match_start = 0),
//             (this.lookahead = 0),
//             (this.prev_length = 0),
//             (this.max_chain_length = 0),
//             (this.max_lazy_match = 0),
//             (this.level = 0),
//             (this.strategy = 0),
//             (this.good_match = 0),
//             (this.nice_match = 0),
//             (this.dyn_ltree = new e.Buf16(2 * b)),
//             (this.dyn_dtree = new e.Buf16(2 * (2 * g + 1))),
//             (this.bl_tree = new e.Buf16(2 * (2 * _ + 1))),
//             O(this.dyn_ltree),
//             O(this.dyn_dtree),
//             O(this.bl_tree),
//             (this.l_desc = null),
//             (this.d_desc = null),
//             (this.bl_desc = null),
//             (this.bl_count = new e.Buf16(y + 1)),
//             (this.heap = new e.Buf16(2 * m + 1)),
//             O(this.heap),
//             (this.heap_len = 0),
//             (this.heap_max = 0),
//             (this.depth = new e.Buf16(2 * m + 1)),
//             O(this.depth),
//             (this.l_buf = 0),
//             (this.lit_bufsize = 0),
//             (this.last_lit = 0),
//             (this.d_buf = 0),
//             (this.opt_len = 0),
//             (this.static_len = 0),
//             (this.matches = 0),
//             (this.insert = 0),
//             (this.bi_buf = 0),
//             (this.bi_valid = 0);
//         }
//         function H(t) {
//           var e;
//           return t && t.state
//             ? ((t.total_in = t.total_out = 0),
//               (t.data_type = c),
//               ((e = t.state).pending = 0),
//               (e.pending_out = 0),
//               e.wrap < 0 && (e.wrap = -e.wrap),
//               (e.status = e.wrap ? E : M),
//               (t.adler = 2 === e.wrap ? 0 : 1),
//               (e.last_flush = s),
//               i._tr_init(e),
//               l)
//             : R(t, h);
//         }
//         function W(e) {
//           var i = H(e);
//           return (
//             i === l &&
//               (function (e) {
//                 (e.window_size = 2 * e.w_size),
//                   O(e.head),
//                   (e.max_lazy_match = t[e.level].max_lazy),
//                   (e.good_match = t[e.level].good_length),
//                   (e.nice_match = t[e.level].nice_length),
//                   (e.max_chain_length = t[e.level].max_chain),
//                   (e.strstart = 0),
//                   (e.block_start = 0),
//                   (e.lookahead = 0),
//                   (e.insert = 0),
//                   (e.match_length = e.prev_length = v - 1),
//                   (e.match_available = 0),
//                   (e.ins_h = 0);
//               })(e.state),
//             i
//           );
//         }
//         function q(t, i, r, n, a, s) {
//           if (!t) return h;
//           var o = 1;
//           if (
//             (i === u && (i = 6),
//             n < 0 ? ((o = 0), (n = -n)) : n > 15 && ((o = 2), (n -= 16)),
//             a < 1 ||
//               a > p ||
//               r !== d ||
//               n < 8 ||
//               n > 15 ||
//               i < 0 ||
//               i > 9 ||
//               s < 0 ||
//               s > f)
//           )
//             return R(t, h);
//           8 === n && (n = 9);
//           var l = new Z();
//           return (
//             (t.state = l),
//             (l.strm = t),
//             (l.wrap = o),
//             (l.gzhead = null),
//             (l.w_bits = n),
//             (l.w_size = 1 << l.w_bits),
//             (l.w_mask = l.w_size - 1),
//             (l.hash_bits = a + 7),
//             (l.hash_size = 1 << l.hash_bits),
//             (l.hash_mask = l.hash_size - 1),
//             (l.hash_shift = ~~((l.hash_bits + v - 1) / v)),
//             (l.window = new e.Buf8(2 * l.w_size)),
//             (l.head = new e.Buf16(l.hash_size)),
//             (l.prev = new e.Buf16(l.w_size)),
//             (l.lit_bufsize = 1 << (a + 6)),
//             (l.pending_buf_size = 4 * l.lit_bufsize),
//             (l.pending_buf = new e.Buf8(l.pending_buf_size)),
//             (l.d_buf = 1 * l.lit_bufsize),
//             (l.l_buf = 3 * l.lit_bufsize),
//             (l.level = i),
//             (l.strategy = s),
//             (l.method = r),
//             W(t)
//           );
//         }
//         return (
//           (t = [
//             new G(0, 0, 0, 0, function (t, e) {
//               var i = 65535;
//               for (
//                 65535 > t.pending_buf_size - 5 && (i = t.pending_buf_size - 5);
//                 ;

//               ) {
//                 if (t.lookahead <= 1) {
//                   if ((N(t), 0 === t.lookahead && e === s)) return A;
//                   if (0 === t.lookahead) break;
//                 }
//                 (t.strstart += t.lookahead), (t.lookahead = 0);
//                 var r = t.block_start + i;
//                 if (
//                   ((0 === t.strstart || t.strstart >= r) &&
//                     ((t.lookahead = t.strstart - r),
//                     (t.strstart = r),
//                     z(t, !1),
//                     0 === t.strm.avail_out)) ||
//                   (t.strstart - t.block_start >= t.w_size - x &&
//                     (z(t, !1), 0 === t.strm.avail_out))
//                 )
//                   return A;
//               }
//               return (
//                 (t.insert = 0),
//                 e === o
//                   ? (z(t, !0), 0 === t.strm.avail_out ? T : B)
//                   : (t.strstart > t.block_start && (z(t, !1), t.strm.avail_out),
//                     A)
//               );
//             }),
//             new G(4, 4, 8, 4, j),
//             new G(4, 5, 16, 8, j),
//             new G(4, 6, 32, 32, j),
//             new G(4, 4, 16, 16, F),
//             new G(8, 16, 32, 32, F),
//             new G(8, 16, 128, 128, F),
//             new G(8, 32, 128, 256, F),
//             new G(32, 128, 258, 1024, F),
//             new G(32, 258, 258, 4096, F),
//           ]),
//           (deflate.deflateInit = function (t, e) {
//             return q(t, e, d, 15, 8, 0);
//           }),
//           (deflate.deflateInit2 = q),
//           (deflate.deflateReset = W),
//           (deflate.deflateResetKeep = H),
//           (deflate.deflateSetHeader = function (t, e) {
//             return t && t.state
//               ? 2 !== t.state.wrap
//                 ? h
//                 : ((t.state.gzhead = e), l)
//               : h;
//           }),
//           (deflate.deflate = function (e, r) {
//             var a, u, f, c;
//             if (!e || !e.state || r > 5 || r < 0) return e ? R(e, h) : h;
//             if (
//               ((u = e.state),
//               !e.output ||
//                 (!e.input && 0 !== e.avail_in) ||
//                 (u.status === S && r !== o))
//             )
//               return R(e, 0 === e.avail_out ? -5 : h);
//             if (
//               ((u.strm = e),
//               (a = u.last_flush),
//               (u.last_flush = r),
//               u.status === E)
//             ) {
//               if (2 === u.wrap)
//                 (e.adler = 0),
//                   L(u, 31),
//                   L(u, 139),
//                   L(u, 8),
//                   u.gzhead
//                     ? (L(
//                         u,
//                         (u.gzhead.text ? 1 : 0) +
//                           (u.gzhead.hcrc ? 2 : 0) +
//                           (u.gzhead.extra ? 4 : 0) +
//                           (u.gzhead.name ? 8 : 0) +
//                           (u.gzhead.comment ? 16 : 0)
//                       ),
//                       L(u, 255 & u.gzhead.time),
//                       L(u, (u.gzhead.time >> 8) & 255),
//                       L(u, (u.gzhead.time >> 16) & 255),
//                       L(u, (u.gzhead.time >> 24) & 255),
//                       L(
//                         u,
//                         9 === u.level
//                           ? 2
//                           : u.strategy >= 2 || u.level < 2
//                           ? 4
//                           : 0
//                       ),
//                       L(u, 255 & u.gzhead.os),
//                       u.gzhead.extra &&
//                         u.gzhead.extra.length &&
//                         (L(u, 255 & u.gzhead.extra.length),
//                         L(u, (u.gzhead.extra.length >> 8) & 255)),
//                       u.gzhead.hcrc &&
//                         (e.adler = n(e.adler, u.pending_buf, u.pending, 0)),
//                       (u.gzindex = 0),
//                       (u.status = 69))
//                     : (L(u, 0),
//                       L(u, 0),
//                       L(u, 0),
//                       L(u, 0),
//                       L(u, 0),
//                       L(
//                         u,
//                         9 === u.level
//                           ? 2
//                           : u.strategy >= 2 || u.level < 2
//                           ? 4
//                           : 0
//                       ),
//                       L(u, 3),
//                       (u.status = M));
//               else {
//                 var p = (d + ((u.w_bits - 8) << 4)) << 8;
//                 (p |=
//                   (u.strategy >= 2 || u.level < 2
//                     ? 0
//                     : u.level < 6
//                     ? 1
//                     : 6 === u.level
//                     ? 2
//                     : 3) << 6),
//                   0 !== u.strstart && (p |= 32),
//                   (p += 31 - (p % 31)),
//                   (u.status = M),
//                   U(u, p),
//                   0 !== u.strstart &&
//                     (U(u, e.adler >>> 16), U(u, 65535 & e.adler)),
//                   (e.adler = 1);
//               }
//             }
//             if (69 === u.status) {
//               if (u.gzhead.extra) {
//                 for (
//                   f = u.pending;
//                   u.gzindex < (65535 & u.gzhead.extra.length) &&
//                   (u.pending !== u.pending_buf_size ||
//                     (u.gzhead.hcrc &&
//                       u.pending > f &&
//                       (e.adler = n(e.adler, u.pending_buf, u.pending - f, f)),
//                     C(e),
//                     (f = u.pending),
//                     u.pending !== u.pending_buf_size));

//                 )
//                   L(u, 255 & u.gzhead.extra[u.gzindex]), u.gzindex++;
//                 u.gzhead.hcrc &&
//                   u.pending > f &&
//                   (e.adler = n(e.adler, u.pending_buf, u.pending - f, f)),
//                   u.gzindex === u.gzhead.extra.length &&
//                     ((u.gzindex = 0), (u.status = 73));
//               } else u.status = 73;
//             }
//             if (73 === u.status) {
//               if (u.gzhead.name) {
//                 f = u.pending;
//                 do {
//                   if (
//                     u.pending === u.pending_buf_size &&
//                     (u.gzhead.hcrc &&
//                       u.pending > f &&
//                       (e.adler = n(e.adler, u.pending_buf, u.pending - f, f)),
//                     C(e),
//                     (f = u.pending),
//                     u.pending === u.pending_buf_size)
//                   ) {
//                     c = 1;
//                     break;
//                   }
//                   (c =
//                     u.gzindex < u.gzhead.name.length
//                       ? 255 & u.gzhead.name.charCodeAt(u.gzindex++)
//                       : 0),
//                     L(u, c);
//                 } while (0 !== c);
//                 u.gzhead.hcrc &&
//                   u.pending > f &&
//                   (e.adler = n(e.adler, u.pending_buf, u.pending - f, f)),
//                   0 === c && ((u.gzindex = 0), (u.status = 91));
//               } else u.status = 91;
//             }
//             if (91 === u.status) {
//               if (u.gzhead.comment) {
//                 f = u.pending;
//                 do {
//                   if (
//                     u.pending === u.pending_buf_size &&
//                     (u.gzhead.hcrc &&
//                       u.pending > f &&
//                       (e.adler = n(e.adler, u.pending_buf, u.pending - f, f)),
//                     C(e),
//                     (f = u.pending),
//                     u.pending === u.pending_buf_size)
//                   ) {
//                     c = 1;
//                     break;
//                   }
//                   (c =
//                     u.gzindex < u.gzhead.comment.length
//                       ? 255 & u.gzhead.comment.charCodeAt(u.gzindex++)
//                       : 0),
//                     L(u, c);
//                 } while (0 !== c);
//                 u.gzhead.hcrc &&
//                   u.pending > f &&
//                   (e.adler = n(e.adler, u.pending_buf, u.pending - f, f)),
//                   0 === c && (u.status = k);
//               } else u.status = k;
//             }
//             if (
//               (u.status === k &&
//                 (u.gzhead.hcrc
//                   ? (u.pending + 2 > u.pending_buf_size && C(e),
//                     u.pending + 2 <= u.pending_buf_size &&
//                       (L(u, 255 & e.adler),
//                       L(u, (e.adler >> 8) & 255),
//                       (e.adler = 0),
//                       (u.status = M)))
//                   : (u.status = M)),
//               0 !== u.pending)
//             ) {
//               if ((C(e), 0 === e.avail_out)) return (u.last_flush = -1), l;
//             } else if (0 === e.avail_in && P(r) <= P(a) && r !== o)
//               return R(e, -5);
//             if (u.status === S && 0 !== e.avail_in) return R(e, -5);
//             if (
//               0 !== e.avail_in ||
//               0 !== u.lookahead ||
//               (r !== s && u.status !== S)
//             ) {
//               var m =
//                 2 === u.strategy
//                   ? (function (t, e) {
//                       for (var r; ; ) {
//                         if (0 === t.lookahead && (N(t), 0 === t.lookahead)) {
//                           if (e === s) return A;
//                           break;
//                         }
//                         if (
//                           ((t.match_length = 0),
//                           (r = i._tr_tally(t, 0, t.window[t.strstart])),
//                           t.lookahead--,
//                           t.strstart++,
//                           r && (z(t, !1), 0 === t.strm.avail_out))
//                         )
//                           return A;
//                       }
//                       return (
//                         (t.insert = 0),
//                         e === o
//                           ? (z(t, !0), 0 === t.strm.avail_out ? T : B)
//                           : t.last_lit && (z(t, !1), 0 === t.strm.avail_out)
//                           ? A
//                           : I
//                       );
//                     })(u, r)
//                   : 3 === u.strategy
//                   ? (function (t, e) {
//                       for (var r, n, a, l, h = t.window; ; ) {
//                         if (t.lookahead <= w) {
//                           if ((N(t), t.lookahead <= w && e === s)) return A;
//                           if (0 === t.lookahead) break;
//                         }
//                         if (
//                           ((t.match_length = 0),
//                           t.lookahead >= v &&
//                             t.strstart > 0 &&
//                             (n = h[(a = t.strstart - 1)]) === h[++a] &&
//                             n === h[++a] &&
//                             n === h[++a])
//                         ) {
//                           l = t.strstart + w;
//                           do;
//                           while (
//                             n === h[++a] &&
//                             n === h[++a] &&
//                             n === h[++a] &&
//                             n === h[++a] &&
//                             n === h[++a] &&
//                             n === h[++a] &&
//                             n === h[++a] &&
//                             n === h[++a] &&
//                             a < l
//                           );
//                           (t.match_length = w - (l - a)),
//                             t.match_length > t.lookahead &&
//                               (t.match_length = t.lookahead);
//                         }
//                         if (
//                           (t.match_length >= v
//                             ? ((r = i._tr_tally(t, 1, t.match_length - v)),
//                               (t.lookahead -= t.match_length),
//                               (t.strstart += t.match_length),
//                               (t.match_length = 0))
//                             : ((r = i._tr_tally(t, 0, t.window[t.strstart])),
//                               t.lookahead--,
//                               t.strstart++),
//                           r && (z(t, !1), 0 === t.strm.avail_out))
//                         )
//                           return A;
//                       }
//                       return (
//                         (t.insert = 0),
//                         e === o
//                           ? (z(t, !0), 0 === t.strm.avail_out ? T : B)
//                           : t.last_lit && (z(t, !1), 0 === t.strm.avail_out)
//                           ? A
//                           : I
//                       );
//                     })(u, r)
//                   : t[u.level].func(u, r);
//               if (((m !== T && m !== B) || (u.status = S), m === A || m === T))
//                 return 0 === e.avail_out && (u.last_flush = -1), l;
//               if (
//                 m === I &&
//                 (1 === r
//                   ? i._tr_align(u)
//                   : 5 !== r &&
//                     (i._tr_stored_block(u, 0, 0, !1),
//                     3 === r &&
//                       (O(u.head),
//                       0 === u.lookahead &&
//                         ((u.strstart = 0),
//                         (u.block_start = 0),
//                         (u.insert = 0)))),
//                 C(e),
//                 0 === e.avail_out)
//               )
//                 return (u.last_flush = -1), l;
//             }
//             return r !== o
//               ? l
//               : u.wrap <= 0
//               ? 1
//               : (2 === u.wrap
//                   ? (L(u, 255 & e.adler),
//                     L(u, (e.adler >> 8) & 255),
//                     L(u, (e.adler >> 16) & 255),
//                     L(u, (e.adler >> 24) & 255),
//                     L(u, 255 & e.total_in),
//                     L(u, (e.total_in >> 8) & 255),
//                     L(u, (e.total_in >> 16) & 255),
//                     L(u, (e.total_in >> 24) & 255))
//                   : (U(u, e.adler >>> 16), U(u, 65535 & e.adler)),
//                 C(e),
//                 u.wrap > 0 && (u.wrap = -u.wrap),
//                 0 !== u.pending ? l : 1);
//           }),
//           (deflate.deflateEnd = function (t) {
//             var e;
//             return t && t.state
//               ? (e = t.state.status) !== E &&
//                 69 !== e &&
//                 73 !== e &&
//                 91 !== e &&
//                 e !== k &&
//                 e !== M &&
//                 e !== S
//                 ? R(t, h)
//                 : ((t.state = null), e === M ? R(t, -3) : l)
//               : h;
//           }),
//           (deflate.deflateSetDictionary = function (t, i) {
//             var n,
//               a,
//               s,
//               o,
//               u,
//               f,
//               c,
//               d,
//               p = i.length;
//             if (
//               !t ||
//               !t.state ||
//               2 === (o = (n = t.state).wrap) ||
//               (1 === o && n.status !== E) ||
//               n.lookahead
//             )
//               return h;
//             for (
//               1 === o && (t.adler = r(t.adler, i, p, 0)),
//                 n.wrap = 0,
//                 p >= n.w_size &&
//                   (0 === o &&
//                     (O(n.head),
//                     (n.strstart = 0),
//                     (n.block_start = 0),
//                     (n.insert = 0)),
//                   (d = new e.Buf8(n.w_size)),
//                   e.arraySet(d, i, p - n.w_size, n.w_size, 0),
//                   (i = d),
//                   (p = n.w_size)),
//                 u = t.avail_in,
//                 f = t.next_in,
//                 c = t.input,
//                 t.avail_in = p,
//                 t.next_in = 0,
//                 t.input = i,
//                 N(n);
//               n.lookahead >= v;

//             ) {
//               (a = n.strstart), (s = n.lookahead - (v - 1));
//               do
//                 (n.ins_h =
//                   ((n.ins_h << n.hash_shift) ^ n.window[a + v - 1]) &
//                   n.hash_mask),
//                   (n.prev[a & n.w_mask] = n.head[n.ins_h]),
//                   (n.head[n.ins_h] = a),
//                   a++;
//               while (--s);
//               (n.strstart = a), (n.lookahead = v - 1), N(n);
//             }
//             return (
//               (n.strstart += n.lookahead),
//               (n.block_start = n.strstart),
//               (n.insert = n.lookahead),
//               (n.lookahead = 0),
//               (n.match_length = n.prev_length = v - 1),
//               (n.match_available = 0),
//               (t.next_in = f),
//               (t.input = c),
//               (t.avail_in = u),
//               (n.wrap = o),
//               l
//             );
//           }),
//           (deflate.deflateInfo = "pako deflate (from Nodeca project)"),
//           deflate
//         );
//       }
//       var hasRequiredStrings,
//         zstream,
//         hasRequiredZstream,
//         hasRequiredDeflate,
//         strings = {};
//       function requireStrings() {
//         if (hasRequiredStrings) return strings;
//         hasRequiredStrings = 1;
//         var t = requireCommon(),
//           e = !0,
//           i = !0;
//         try {
//           String.fromCharCode.apply(null, [0]);
//         } catch (t) {
//           e = !1;
//         }
//         try {
//           String.fromCharCode.apply(null, new Uint8Array(1));
//         } catch (t) {
//           i = !1;
//         }
//         for (var r = new t.Buf8(256), n = 0; n < 256; n++)
//           r[n] =
//             n >= 252
//               ? 6
//               : n >= 248
//               ? 5
//               : n >= 240
//               ? 4
//               : n >= 224
//               ? 3
//               : n >= 192
//               ? 2
//               : 1;
//         function a(r, n) {
//           if (n < 65534 && ((r.subarray && i) || (!r.subarray && e)))
//             return String.fromCharCode.apply(null, t.shrinkBuf(r, n));
//           for (var a = "", s = 0; s < n; s++) a += String.fromCharCode(r[s]);
//           return a;
//         }
//         return (
//           (r[254] = r[254] = 1),
//           (strings.string2buf = function (e) {
//             var i,
//               r,
//               n,
//               a,
//               s,
//               o = e.length,
//               l = 0;
//             for (a = 0; a < o; a++)
//               55296 == (64512 & (r = e.charCodeAt(a))) &&
//                 a + 1 < o &&
//                 56320 == (64512 & (n = e.charCodeAt(a + 1))) &&
//                 ((r = 65536 + ((r - 55296) << 10) + (n - 56320)), a++),
//                 (l += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4);
//             for (i = new t.Buf8(l), s = 0, a = 0; s < l; a++)
//               55296 == (64512 & (r = e.charCodeAt(a))) &&
//                 a + 1 < o &&
//                 56320 == (64512 & (n = e.charCodeAt(a + 1))) &&
//                 ((r = 65536 + ((r - 55296) << 10) + (n - 56320)), a++),
//                 r < 128
//                   ? (i[s++] = r)
//                   : (r < 2048
//                       ? (i[s++] = 192 | (r >>> 6))
//                       : (r < 65536
//                           ? (i[s++] = 224 | (r >>> 12))
//                           : ((i[s++] = 240 | (r >>> 18)),
//                             (i[s++] = 128 | ((r >>> 12) & 63))),
//                         (i[s++] = 128 | ((r >>> 6) & 63))),
//                     (i[s++] = 128 | (63 & r)));
//             return i;
//           }),
//           (strings.buf2binstring = function (t) {
//             return a(t, t.length);
//           }),
//           (strings.binstring2buf = function (e) {
//             for (var i = new t.Buf8(e.length), r = 0, n = i.length; r < n; r++)
//               i[r] = e.charCodeAt(r);
//             return i;
//           }),
//           (strings.buf2string = function (t, e) {
//             var i,
//               n,
//               s,
//               o,
//               l = e || t.length,
//               h = Array(2 * l);
//             for (n = 0, i = 0; i < l; )
//               if ((s = t[i++]) < 128) h[n++] = s;
//               else if ((o = r[s]) > 4) (h[n++] = 65533), (i += o - 1);
//               else {
//                 for (s &= 2 === o ? 31 : 3 === o ? 15 : 7; o > 1 && i < l; )
//                   (s = (s << 6) | (63 & t[i++])), o--;
//                 o > 1
//                   ? (h[n++] = 65533)
//                   : s < 65536
//                   ? (h[n++] = s)
//                   : ((s -= 65536),
//                     (h[n++] = 55296 | ((s >> 10) & 1023)),
//                     (h[n++] = 56320 | (1023 & s)));
//               }
//             return a(h, n);
//           }),
//           (strings.utf8border = function (t, e) {
//             var i;
//             for (
//               (e = e || t.length) > t.length && (e = t.length), i = e - 1;
//               i >= 0 && 128 == (192 & t[i]);

//             )
//               i--;
//             return i < 0 || 0 === i ? e : i + r[t[i]] > e ? i : e;
//           }),
//           strings
//         );
//       }
//       function requireZstream() {
//         return hasRequiredZstream
//           ? zstream
//           : ((hasRequiredZstream = 1),
//             (zstream = function () {
//               (this.input = null),
//                 (this.next_in = 0),
//                 (this.avail_in = 0),
//                 (this.total_in = 0),
//                 (this.output = null),
//                 (this.next_out = 0),
//                 (this.avail_out = 0),
//                 (this.total_out = 0),
//                 (this.msg = ""),
//                 (this.state = null),
//                 (this.data_type = 2),
//                 (this.adler = 0);
//             }));
//       }
//       function requireDeflate() {
//         if (hasRequiredDeflate) return deflate$1;
//         hasRequiredDeflate = 1;
//         var t = requireDeflate$1(),
//           e = requireCommon(),
//           i = requireStrings(),
//           r = requireMessages(),
//           n = requireZstream(),
//           a = Object.prototype.toString,
//           s = 0,
//           o = -1,
//           l = 0,
//           h = 8;
//         function u(f) {
//           if (!(this instanceof u)) return new u(f);
//           this.options = e.assign(
//             {
//               level: o,
//               method: h,
//               chunkSize: 16384,
//               windowBits: 15,
//               memLevel: 8,
//               strategy: l,
//               to: "",
//             },
//             f || {}
//           );
//           var c,
//             d = this.options;
//           d.raw && d.windowBits > 0
//             ? (d.windowBits = -d.windowBits)
//             : d.gzip &&
//               d.windowBits > 0 &&
//               d.windowBits < 16 &&
//               (d.windowBits += 16),
//             (this.err = 0),
//             (this.msg = ""),
//             (this.ended = !1),
//             (this.chunks = []),
//             (this.strm = new n()),
//             (this.strm.avail_out = 0);
//           var p = t.deflateInit2(
//             this.strm,
//             d.level,
//             d.method,
//             d.windowBits,
//             d.memLevel,
//             d.strategy
//           );
//           if (p !== s) throw Error(r[p]);
//           if (
//             (d.header && t.deflateSetHeader(this.strm, d.header), d.dictionary)
//           ) {
//             if (
//               ((c =
//                 "string" == typeof d.dictionary
//                   ? i.string2buf(d.dictionary)
//                   : "[object ArrayBuffer]" === a.call(d.dictionary)
//                   ? new Uint8Array(d.dictionary)
//                   : d.dictionary),
//               (p = t.deflateSetDictionary(this.strm, c)) !== s)
//             )
//               throw Error(r[p]);
//             this._dict_set = !0;
//           }
//         }
//         function f(t, e) {
//           var i = new u(e);
//           if ((i.push(t, !0), i.err)) throw i.msg || r[i.err];
//           return i.result;
//         }
//         return (
//           (u.prototype.push = function (r, n) {
//             var o,
//               l,
//               h = this.strm,
//               u = this.options.chunkSize;
//             if (this.ended) return !1;
//             (l = n === ~~n ? n : !0 === n ? 4 : 0),
//               "string" == typeof r
//                 ? (h.input = i.string2buf(r))
//                 : "[object ArrayBuffer]" === a.call(r)
//                 ? (h.input = new Uint8Array(r))
//                 : (h.input = r),
//               (h.next_in = 0),
//               (h.avail_in = h.input.length);
//             do {
//               if (
//                 (0 === h.avail_out &&
//                   ((h.output = new e.Buf8(u)),
//                   (h.next_out = 0),
//                   (h.avail_out = u)),
//                 1 !== (o = t.deflate(h, l)) && o !== s)
//               )
//                 return this.onEnd(o), (this.ended = !0), !1;
//               (0 !== h.avail_out &&
//                 (0 !== h.avail_in || (4 !== l && 2 !== l))) ||
//                 ("string" === this.options.to
//                   ? this.onData(
//                       i.buf2binstring(e.shrinkBuf(h.output, h.next_out))
//                     )
//                   : this.onData(e.shrinkBuf(h.output, h.next_out)));
//             } while ((h.avail_in > 0 || 0 === h.avail_out) && 1 !== o);
//             return 4 === l
//               ? ((o = t.deflateEnd(this.strm)),
//                 this.onEnd(o),
//                 (this.ended = !0),
//                 o === s)
//               : 2 !== l || (this.onEnd(s), (h.avail_out = 0), !0);
//           }),
//           (u.prototype.onData = function (t) {
//             this.chunks.push(t);
//           }),
//           (u.prototype.onEnd = function (t) {
//             t === s &&
//               ("string" === this.options.to
//                 ? (this.result = this.chunks.join(""))
//                 : (this.result = e.flattenChunks(this.chunks))),
//               (this.chunks = []),
//               (this.err = t),
//               (this.msg = this.strm.msg);
//           }),
//           (deflate$1.Deflate = u),
//           (deflate$1.deflate = f),
//           (deflate$1.deflateRaw = function (t, e) {
//             return ((e = e || {}).raw = !0), f(t, e);
//           }),
//           (deflate$1.gzip = function (t, e) {
//             return ((e = e || {}).gzip = !0), f(t, e);
//           }),
//           deflate$1
//         );
//       }
//       var inffast,
//         hasRequiredInffast,
//         inftrees,
//         hasRequiredInftrees,
//         hasRequiredInflate$1,
//         constants,
//         hasRequiredConstants,
//         gzheader,
//         hasRequiredGzheader,
//         hasRequiredInflate,
//         pako_1,
//         hasRequiredPako,
//         inflate$1 = {},
//         inflate = {};
//       function requireInffast() {
//         return hasRequiredInffast
//           ? inffast
//           : ((hasRequiredInffast = 1),
//             (inffast = function (t, e) {
//               var i,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o,
//                 l,
//                 h,
//                 u,
//                 f,
//                 c,
//                 d,
//                 p,
//                 m,
//                 g,
//                 _,
//                 b,
//                 y,
//                 v,
//                 w,
//                 x,
//                 E,
//                 k,
//                 M,
//                 S;
//               (i = t.state),
//                 (r = t.next_in),
//                 (M = t.input),
//                 (n = r + (t.avail_in - 5)),
//                 (a = t.next_out),
//                 (S = t.output),
//                 (s = a - (e - t.avail_out)),
//                 (o = a + (t.avail_out - 257)),
//                 (l = i.dmax),
//                 (h = i.wsize),
//                 (u = i.whave),
//                 (f = i.wnext),
//                 (c = i.window),
//                 (d = i.hold),
//                 (p = i.bits),
//                 (m = i.lencode),
//                 (g = i.distcode),
//                 (_ = (1 << i.lenbits) - 1),
//                 (b = (1 << i.distbits) - 1);
//               t: do
//                 for (
//                   p < 15 &&
//                     ((d += M[r++] << p),
//                     (p += 8),
//                     (d += M[r++] << p),
//                     (p += 8)),
//                     y = m[d & _];
//                   ;

//                 ) {
//                   if (
//                     ((d >>>= v = y >>> 24),
//                     (p -= v),
//                     0 == (v = (y >>> 16) & 255))
//                   )
//                     S[a++] = 65535 & y;
//                   else {
//                     if (!(16 & v)) {
//                       if (64 & v) {
//                         if (32 & v) {
//                           i.mode = 12;
//                           break t;
//                         }
//                         (t.msg = "invalid literal/length code"), (i.mode = 30);
//                         break t;
//                       }
//                       y = m[(65535 & y) + (d & ((1 << v) - 1))];
//                       continue;
//                     }
//                     for (
//                       w = 65535 & y,
//                         (v &= 15) &&
//                           (p < v && ((d += M[r++] << p), (p += 8)),
//                           (w += d & ((1 << v) - 1)),
//                           (d >>>= v),
//                           (p -= v)),
//                         p < 15 &&
//                           ((d += M[r++] << p),
//                           (p += 8),
//                           (d += M[r++] << p),
//                           (p += 8)),
//                         y = g[d & b];
//                       ;

//                     ) {
//                       if (
//                         ((d >>>= v = y >>> 24),
//                         (p -= v),
//                         16 & (v = (y >>> 16) & 255))
//                       ) {
//                         if (
//                           ((x = 65535 & y),
//                           p < (v &= 15) &&
//                             ((d += M[r++] << p),
//                             (p += 8) < v && ((d += M[r++] << p), (p += 8))),
//                           (x += d & ((1 << v) - 1)) > l)
//                         ) {
//                           (t.msg = "invalid distance too far back"),
//                             (i.mode = 30);
//                           break t;
//                         }
//                         if (((d >>>= v), (p -= v), x > (v = a - s))) {
//                           if ((v = x - v) > u && i.sane) {
//                             (t.msg = "invalid distance too far back"),
//                               (i.mode = 30);
//                             break t;
//                           }
//                           if (((E = 0), (k = c), 0 === f)) {
//                             if (((E += h - v), v < w)) {
//                               w -= v;
//                               do S[a++] = c[E++];
//                               while (--v);
//                               (E = a - x), (k = S);
//                             }
//                           } else if (f < v) {
//                             if (((E += h + f - v), (v -= f) < w)) {
//                               w -= v;
//                               do S[a++] = c[E++];
//                               while (--v);
//                               if (((E = 0), f < w)) {
//                                 w -= v = f;
//                                 do S[a++] = c[E++];
//                                 while (--v);
//                                 (E = a - x), (k = S);
//                               }
//                             }
//                           } else if (((E += f - v), v < w)) {
//                             w -= v;
//                             do S[a++] = c[E++];
//                             while (--v);
//                             (E = a - x), (k = S);
//                           }
//                           for (; w > 2; )
//                             (S[a++] = k[E++]),
//                               (S[a++] = k[E++]),
//                               (S[a++] = k[E++]),
//                               (w -= 3);
//                           w && ((S[a++] = k[E++]), w > 1 && (S[a++] = k[E++]));
//                         } else {
//                           E = a - x;
//                           do
//                             (S[a++] = S[E++]),
//                               (S[a++] = S[E++]),
//                               (S[a++] = S[E++]),
//                               (w -= 3);
//                           while (w > 2);
//                           w && ((S[a++] = S[E++]), w > 1 && (S[a++] = S[E++]));
//                         }
//                         break;
//                       }
//                       if (64 & v) {
//                         (t.msg = "invalid distance code"), (i.mode = 30);
//                         break t;
//                       }
//                       y = g[(65535 & y) + (d & ((1 << v) - 1))];
//                     }
//                   }
//                   break;
//                 }
//               while (r < n && a < o);
//               (r -= w = p >> 3),
//                 (d &= (1 << (p -= w << 3)) - 1),
//                 (t.next_in = r),
//                 (t.next_out = a),
//                 (t.avail_in = r < n ? n - r + 5 : 5 - (r - n)),
//                 (t.avail_out = a < o ? o - a + 257 : 257 - (a - o)),
//                 (i.hold = d),
//                 (i.bits = p);
//             }));
//       }
//       function requireInftrees() {
//         if (hasRequiredInftrees) return inftrees;
//         hasRequiredInftrees = 1;
//         var t = requireCommon(),
//           e = 15,
//           i = [
//             3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51,
//             59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0,
//           ],
//           r = [
//             16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19,
//             19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78,
//           ],
//           n = [
//             1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385,
//             513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385,
//             24577, 0, 0,
//           ],
//           a = [
//             16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23,
//             23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64,
//           ];
//         return (inftrees = function (s, o, l, h, u, f, c, d) {
//           var p,
//             m,
//             g,
//             _,
//             b,
//             y,
//             v,
//             w,
//             x,
//             E = d.bits,
//             k = 0,
//             M = 0,
//             S = 0,
//             A = 0,
//             I = 0,
//             T = 0,
//             B = 0,
//             R = 0,
//             P = 0,
//             O = 0,
//             C = null,
//             z = 0,
//             L = new t.Buf16(16),
//             U = new t.Buf16(16),
//             D = null,
//             N = 0;
//           for (k = 0; k <= e; k++) L[k] = 0;
//           for (M = 0; M < h; M++) L[o[l + M]]++;
//           for (I = E, A = e; A >= 1 && 0 === L[A]; A--);
//           if ((I > A && (I = A), 0 === A))
//             return (u[f++] = 20971520), (u[f++] = 20971520), (d.bits = 1), 0;
//           for (S = 1; S < A && 0 === L[S]; S++);
//           for (I < S && (I = S), R = 1, k = 1; k <= e; k++)
//             if (((R <<= 1), (R -= L[k]) < 0)) return -1;
//           if (R > 0 && (0 === s || 1 !== A)) return -1;
//           for (U[1] = 0, k = 1; k < e; k++) U[k + 1] = U[k] + L[k];
//           for (M = 0; M < h; M++) 0 !== o[l + M] && (c[U[o[l + M]]++] = M);
//           if (
//             (0 === s
//               ? ((C = D = c), (y = 19))
//               : 1 === s
//               ? ((C = i), (z -= 257), (D = r), (N -= 257), (y = 256))
//               : ((C = n), (D = a), (y = -1)),
//             (O = 0),
//             (M = 0),
//             (k = S),
//             (b = f),
//             (T = I),
//             (B = 0),
//             (g = -1),
//             (_ = (P = 1 << I) - 1),
//             (1 === s && P > 852) || (2 === s && P > 592))
//           )
//             return 1;
//           for (;;) {
//             (v = k - B),
//               c[M] < y
//                 ? ((w = 0), (x = c[M]))
//                 : c[M] > y
//                 ? ((w = D[N + c[M]]), (x = C[z + c[M]]))
//                 : ((w = 96), (x = 0)),
//               (p = 1 << (k - B)),
//               (S = m = 1 << T);
//             do u[b + (O >> B) + (m -= p)] = (v << 24) | (w << 16) | x;
//             while (0 !== m);
//             for (p = 1 << (k - 1); O & p; ) p >>= 1;
//             if (
//               (0 !== p ? ((O &= p - 1), (O += p)) : (O = 0), M++, 0 == --L[k])
//             ) {
//               if (k === A) break;
//               k = o[l + c[M]];
//             }
//             if (k > I && (O & _) !== g) {
//               for (
//                 0 === B && (B = I), b += S, R = 1 << (T = k - B);
//                 T + B < A && !((R -= L[T + B]) <= 0);

//               )
//                 T++, (R <<= 1);
//               if (((P += 1 << T), (1 === s && P > 852) || (2 === s && P > 592)))
//                 return 1;
//               u[(g = O & _)] = (I << 24) | (T << 16) | (b - f);
//             }
//           }
//           return (
//             0 !== O && (u[b + O] = ((k - B) << 24) | 4194304), (d.bits = I), 0
//           );
//         });
//       }
//       function requireInflate$1() {
//         if (hasRequiredInflate$1) return inflate;
//         hasRequiredInflate$1 = 1;
//         var t = requireCommon(),
//           e = requireAdler32(),
//           i = requireCrc32(),
//           r = requireInffast(),
//           n = requireInftrees(),
//           a = 1,
//           s = 2,
//           o = 0,
//           l = -2,
//           h = 1,
//           u = 12,
//           f = 30,
//           c = 852,
//           d = 592;
//         function p(t) {
//           return (
//             ((t >>> 24) & 255) +
//             ((t >>> 8) & 65280) +
//             ((65280 & t) << 8) +
//             ((255 & t) << 24)
//           );
//         }
//         function m() {
//           (this.mode = 0),
//             (this.last = !1),
//             (this.wrap = 0),
//             (this.havedict = !1),
//             (this.flags = 0),
//             (this.dmax = 0),
//             (this.check = 0),
//             (this.total = 0),
//             (this.head = null),
//             (this.wbits = 0),
//             (this.wsize = 0),
//             (this.whave = 0),
//             (this.wnext = 0),
//             (this.window = null),
//             (this.hold = 0),
//             (this.bits = 0),
//             (this.length = 0),
//             (this.offset = 0),
//             (this.extra = 0),
//             (this.lencode = null),
//             (this.distcode = null),
//             (this.lenbits = 0),
//             (this.distbits = 0),
//             (this.ncode = 0),
//             (this.nlen = 0),
//             (this.ndist = 0),
//             (this.have = 0),
//             (this.next = null),
//             (this.lens = new t.Buf16(320)),
//             (this.work = new t.Buf16(288)),
//             (this.lendyn = null),
//             (this.distdyn = null),
//             (this.sane = 0),
//             (this.back = 0),
//             (this.was = 0);
//         }
//         function g(e) {
//           var i;
//           return e && e.state
//             ? ((i = e.state),
//               (e.total_in = e.total_out = i.total = 0),
//               (e.msg = ""),
//               i.wrap && (e.adler = 1 & i.wrap),
//               (i.mode = h),
//               (i.last = 0),
//               (i.havedict = 0),
//               (i.dmax = 32768),
//               (i.head = null),
//               (i.hold = 0),
//               (i.bits = 0),
//               (i.lencode = i.lendyn = new t.Buf32(c)),
//               (i.distcode = i.distdyn = new t.Buf32(d)),
//               (i.sane = 1),
//               (i.back = -1),
//               o)
//             : l;
//         }
//         function _(t) {
//           var e;
//           return t && t.state
//             ? (((e = t.state).wsize = 0), (e.whave = 0), (e.wnext = 0), g(t))
//             : l;
//         }
//         function b(t, e) {
//           var i, r;
//           return t && t.state
//             ? ((r = t.state),
//               e < 0
//                 ? ((i = 0), (e = -e))
//                 : ((i = 1 + (e >> 4)), e < 48 && (e &= 15)),
//               e && (e < 8 || e > 15)
//                 ? l
//                 : (null !== r.window && r.wbits !== e && (r.window = null),
//                   (r.wrap = i),
//                   (r.wbits = e),
//                   _(t)))
//             : l;
//         }
//         function y(t, e) {
//           var i, r;
//           return t
//             ? ((r = new m()),
//               (t.state = r),
//               (r.window = null),
//               (i = b(t, e)) !== o && (t.state = null),
//               i)
//             : l;
//         }
//         var v,
//           w,
//           x = !0;
//         function E(e) {
//           if (x) {
//             var i;
//             for (v = new t.Buf32(512), w = new t.Buf32(32), i = 0; i < 144; )
//               e.lens[i++] = 8;
//             for (; i < 256; ) e.lens[i++] = 9;
//             for (; i < 280; ) e.lens[i++] = 7;
//             for (; i < 288; ) e.lens[i++] = 8;
//             for (
//               n(a, e.lens, 0, 288, v, 0, e.work, { bits: 9 }), i = 0;
//               i < 32;

//             )
//               e.lens[i++] = 5;
//             n(s, e.lens, 0, 32, w, 0, e.work, { bits: 5 }), (x = !1);
//           }
//           (e.lencode = v), (e.lenbits = 9), (e.distcode = w), (e.distbits = 5);
//         }
//         function k(e, i, r, n) {
//           var a,
//             s = e.state;
//           return (
//             null === s.window &&
//               ((s.wsize = 1 << s.wbits),
//               (s.wnext = 0),
//               (s.whave = 0),
//               (s.window = new t.Buf8(s.wsize))),
//             n >= s.wsize
//               ? (t.arraySet(s.window, i, r - s.wsize, s.wsize, 0),
//                 (s.wnext = 0),
//                 (s.whave = s.wsize))
//               : ((a = s.wsize - s.wnext) > n && (a = n),
//                 t.arraySet(s.window, i, r - n, a, s.wnext),
//                 (n -= a)
//                   ? (t.arraySet(s.window, i, r - n, n, 0),
//                     (s.wnext = n),
//                     (s.whave = s.wsize))
//                   : ((s.wnext += a),
//                     s.wnext === s.wsize && (s.wnext = 0),
//                     s.whave < s.wsize && (s.whave += a))),
//             0
//           );
//         }
//         return (
//           (inflate.inflateReset = _),
//           (inflate.inflateReset2 = b),
//           (inflate.inflateResetKeep = g),
//           (inflate.inflateInit = function (t) {
//             return y(t, 15);
//           }),
//           (inflate.inflateInit2 = y),
//           (inflate.inflate = function (c, d) {
//             var m,
//               g,
//               _,
//               b,
//               y,
//               v,
//               w,
//               x,
//               M,
//               S,
//               A,
//               I,
//               T,
//               B,
//               R,
//               P,
//               O,
//               C,
//               z,
//               L,
//               U,
//               D,
//               N,
//               j,
//               F = 0,
//               G = new t.Buf8(4),
//               Z = [
//                 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1,
//                 15,
//               ];
//             if (!c || !c.state || !c.output || (!c.input && 0 !== c.avail_in))
//               return l;
//             (m = c.state).mode === u && (m.mode = 13),
//               (y = c.next_out),
//               (_ = c.output),
//               (w = c.avail_out),
//               (b = c.next_in),
//               (g = c.input),
//               (v = c.avail_in),
//               (x = m.hold),
//               (M = m.bits),
//               (S = v),
//               (A = w),
//               (D = o);
//             t: for (;;)
//               switch (m.mode) {
//                 case h:
//                   if (0 === m.wrap) {
//                     m.mode = 13;
//                     break;
//                   }
//                   for (; M < 16; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   if (2 & m.wrap && 35615 === x) {
//                     (m.check = 0),
//                       (G[0] = 255 & x),
//                       (G[1] = (x >>> 8) & 255),
//                       (m.check = i(m.check, G, 2, 0)),
//                       (x = 0),
//                       (M = 0),
//                       (m.mode = 2);
//                     break;
//                   }
//                   if (
//                     ((m.flags = 0),
//                     m.head && (m.head.done = !1),
//                     !(1 & m.wrap) || (((255 & x) << 8) + (x >> 8)) % 31)
//                   ) {
//                     (c.msg = "incorrect header check"), (m.mode = f);
//                     break;
//                   }
//                   if (8 != (15 & x)) {
//                     (c.msg = "unknown compression method"), (m.mode = f);
//                     break;
//                   }
//                   if (((M -= 4), (U = 8 + (15 & (x >>>= 4))), 0 === m.wbits))
//                     m.wbits = U;
//                   else if (U > m.wbits) {
//                     (c.msg = "invalid window size"), (m.mode = f);
//                     break;
//                   }
//                   (m.dmax = 1 << U),
//                     (c.adler = m.check = 1),
//                     (m.mode = 512 & x ? 10 : u),
//                     (x = 0),
//                     (M = 0);
//                   break;
//                 case 2:
//                   for (; M < 16; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   if (((m.flags = x), 8 != (255 & m.flags))) {
//                     (c.msg = "unknown compression method"), (m.mode = f);
//                     break;
//                   }
//                   if (57344 & m.flags) {
//                     (c.msg = "unknown header flags set"), (m.mode = f);
//                     break;
//                   }
//                   m.head && (m.head.text = (x >> 8) & 1),
//                     512 & m.flags &&
//                       ((G[0] = 255 & x),
//                       (G[1] = (x >>> 8) & 255),
//                       (m.check = i(m.check, G, 2, 0))),
//                     (x = 0),
//                     (M = 0),
//                     (m.mode = 3);
//                 case 3:
//                   for (; M < 32; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   m.head && (m.head.time = x),
//                     512 & m.flags &&
//                       ((G[0] = 255 & x),
//                       (G[1] = (x >>> 8) & 255),
//                       (G[2] = (x >>> 16) & 255),
//                       (G[3] = (x >>> 24) & 255),
//                       (m.check = i(m.check, G, 4, 0))),
//                     (x = 0),
//                     (M = 0),
//                     (m.mode = 4);
//                 case 4:
//                   for (; M < 16; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   m.head && ((m.head.xflags = 255 & x), (m.head.os = x >> 8)),
//                     512 & m.flags &&
//                       ((G[0] = 255 & x),
//                       (G[1] = (x >>> 8) & 255),
//                       (m.check = i(m.check, G, 2, 0))),
//                     (x = 0),
//                     (M = 0),
//                     (m.mode = 5);
//                 case 5:
//                   if (1024 & m.flags) {
//                     for (; M < 16; ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     (m.length = x),
//                       m.head && (m.head.extra_len = x),
//                       512 & m.flags &&
//                         ((G[0] = 255 & x),
//                         (G[1] = (x >>> 8) & 255),
//                         (m.check = i(m.check, G, 2, 0))),
//                       (x = 0),
//                       (M = 0);
//                   } else m.head && (m.head.extra = null);
//                   m.mode = 6;
//                 case 6:
//                   if (
//                     1024 & m.flags &&
//                     ((I = m.length) > v && (I = v),
//                     I &&
//                       (m.head &&
//                         ((U = m.head.extra_len - m.length),
//                         m.head.extra ||
//                           (m.head.extra = Array(m.head.extra_len)),
//                         t.arraySet(m.head.extra, g, b, I, U)),
//                       512 & m.flags && (m.check = i(m.check, g, I, b)),
//                       (v -= I),
//                       (b += I),
//                       (m.length -= I)),
//                     m.length)
//                   )
//                     break t;
//                   (m.length = 0), (m.mode = 7);
//                 case 7:
//                   if (2048 & m.flags) {
//                     if (0 === v) break t;
//                     I = 0;
//                     do
//                       (U = g[b + I++]),
//                         m.head &&
//                           U &&
//                           m.length < 65536 &&
//                           (m.head.name += String.fromCharCode(U));
//                     while (U && I < v);
//                     if (
//                       (512 & m.flags && (m.check = i(m.check, g, I, b)),
//                       (v -= I),
//                       (b += I),
//                       U)
//                     )
//                       break t;
//                   } else m.head && (m.head.name = null);
//                   (m.length = 0), (m.mode = 8);
//                 case 8:
//                   if (4096 & m.flags) {
//                     if (0 === v) break t;
//                     I = 0;
//                     do
//                       (U = g[b + I++]),
//                         m.head &&
//                           U &&
//                           m.length < 65536 &&
//                           (m.head.comment += String.fromCharCode(U));
//                     while (U && I < v);
//                     if (
//                       (512 & m.flags && (m.check = i(m.check, g, I, b)),
//                       (v -= I),
//                       (b += I),
//                       U)
//                     )
//                       break t;
//                   } else m.head && (m.head.comment = null);
//                   m.mode = 9;
//                 case 9:
//                   if (512 & m.flags) {
//                     for (; M < 16; ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     if (x !== (65535 & m.check)) {
//                       (c.msg = "header crc mismatch"), (m.mode = f);
//                       break;
//                     }
//                     (x = 0), (M = 0);
//                   }
//                   m.head &&
//                     ((m.head.hcrc = (m.flags >> 9) & 1), (m.head.done = !0)),
//                     (c.adler = m.check = 0),
//                     (m.mode = u);
//                   break;
//                 case 10:
//                   for (; M < 32; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   (c.adler = m.check = p(x)), (x = 0), (M = 0), (m.mode = 11);
//                 case 11:
//                   if (0 === m.havedict)
//                     return (
//                       (c.next_out = y),
//                       (c.avail_out = w),
//                       (c.next_in = b),
//                       (c.avail_in = v),
//                       (m.hold = x),
//                       (m.bits = M),
//                       2
//                     );
//                   (c.adler = m.check = 1), (m.mode = u);
//                 case u:
//                   if (5 === d || 6 === d) break t;
//                 case 13:
//                   if (m.last) {
//                     (x >>>= 7 & M), (M -= 7 & M), (m.mode = 27);
//                     break;
//                   }
//                   for (; M < 3; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   switch (((m.last = 1 & x), (M -= 1), 3 & (x >>>= 1))) {
//                     case 0:
//                       m.mode = 14;
//                       break;
//                     case 1:
//                       if ((E(m), (m.mode = 20), 6 === d)) {
//                         (x >>>= 2), (M -= 2);
//                         break t;
//                       }
//                       break;
//                     case 2:
//                       m.mode = 17;
//                       break;
//                     case 3:
//                       (c.msg = "invalid block type"), (m.mode = f);
//                   }
//                   (x >>>= 2), (M -= 2);
//                   break;
//                 case 14:
//                   for (x >>>= 7 & M, M -= 7 & M; M < 32; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   if ((65535 & x) != ((x >>> 16) ^ 65535)) {
//                     (c.msg = "invalid stored block lengths"), (m.mode = f);
//                     break;
//                   }
//                   if (
//                     ((m.length = 65535 & x),
//                     (x = 0),
//                     (M = 0),
//                     (m.mode = 15),
//                     6 === d)
//                   )
//                     break t;
//                 case 15:
//                   m.mode = 16;
//                 case 16:
//                   if ((I = m.length)) {
//                     if ((I > v && (I = v), I > w && (I = w), 0 === I)) break t;
//                     t.arraySet(_, g, b, I, y),
//                       (v -= I),
//                       (b += I),
//                       (w -= I),
//                       (y += I),
//                       (m.length -= I);
//                     break;
//                   }
//                   m.mode = u;
//                   break;
//                 case 17:
//                   for (; M < 14; ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   if (
//                     ((m.nlen = 257 + (31 & x)),
//                     (x >>>= 5),
//                     (M -= 5),
//                     (m.ndist = 1 + (31 & x)),
//                     (x >>>= 5),
//                     (M -= 5),
//                     (m.ncode = 4 + (15 & x)),
//                     (x >>>= 4),
//                     (M -= 4),
//                     m.nlen > 286 || m.ndist > 30)
//                   ) {
//                     (c.msg = "too many length or distance symbols"),
//                       (m.mode = f);
//                     break;
//                   }
//                   (m.have = 0), (m.mode = 18);
//                 case 18:
//                   for (; m.have < m.ncode; ) {
//                     for (; M < 3; ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     (m.lens[Z[m.have++]] = 7 & x), (x >>>= 3), (M -= 3);
//                   }
//                   for (; m.have < 19; ) m.lens[Z[m.have++]] = 0;
//                   if (
//                     ((m.lencode = m.lendyn),
//                     (m.lenbits = 7),
//                     (N = { bits: m.lenbits }),
//                     (D = n(0, m.lens, 0, 19, m.lencode, 0, m.work, N)),
//                     (m.lenbits = N.bits),
//                     D)
//                   ) {
//                     (c.msg = "invalid code lengths set"), (m.mode = f);
//                     break;
//                   }
//                   (m.have = 0), (m.mode = 19);
//                 case 19:
//                   for (; m.have < m.nlen + m.ndist; ) {
//                     for (
//                       ;
//                       (P =
//                         ((F = m.lencode[x & ((1 << m.lenbits) - 1)]) >>> 16) &
//                         255),
//                         (O = 65535 & F),
//                         !((R = F >>> 24) <= M);

//                     ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     if (O < 16) (x >>>= R), (M -= R), (m.lens[m.have++] = O);
//                     else {
//                       if (16 === O) {
//                         for (j = R + 2; M < j; ) {
//                           if (0 === v) break t;
//                           v--, (x += g[b++] << M), (M += 8);
//                         }
//                         if (((x >>>= R), (M -= R), 0 === m.have)) {
//                           (c.msg = "invalid bit length repeat"), (m.mode = f);
//                           break;
//                         }
//                         (U = m.lens[m.have - 1]),
//                           (I = 3 + (3 & x)),
//                           (x >>>= 2),
//                           (M -= 2);
//                       } else if (17 === O) {
//                         for (j = R + 3; M < j; ) {
//                           if (0 === v) break t;
//                           v--, (x += g[b++] << M), (M += 8);
//                         }
//                         (M -= R),
//                           (U = 0),
//                           (I = 3 + (7 & (x >>>= R))),
//                           (x >>>= 3),
//                           (M -= 3);
//                       } else {
//                         for (j = R + 7; M < j; ) {
//                           if (0 === v) break t;
//                           v--, (x += g[b++] << M), (M += 8);
//                         }
//                         (M -= R),
//                           (U = 0),
//                           (I = 11 + (127 & (x >>>= R))),
//                           (x >>>= 7),
//                           (M -= 7);
//                       }
//                       if (m.have + I > m.nlen + m.ndist) {
//                         (c.msg = "invalid bit length repeat"), (m.mode = f);
//                         break;
//                       }
//                       for (; I--; ) m.lens[m.have++] = U;
//                     }
//                   }
//                   if (m.mode === f) break;
//                   if (0 === m.lens[256]) {
//                     (c.msg = "invalid code -- missing end-of-block"),
//                       (m.mode = f);
//                     break;
//                   }
//                   if (
//                     ((m.lenbits = 9),
//                     (N = { bits: m.lenbits }),
//                     (D = n(a, m.lens, 0, m.nlen, m.lencode, 0, m.work, N)),
//                     (m.lenbits = N.bits),
//                     D)
//                   ) {
//                     (c.msg = "invalid literal/lengths set"), (m.mode = f);
//                     break;
//                   }
//                   if (
//                     ((m.distbits = 6),
//                     (m.distcode = m.distdyn),
//                     (N = { bits: m.distbits }),
//                     (D = n(
//                       s,
//                       m.lens,
//                       m.nlen,
//                       m.ndist,
//                       m.distcode,
//                       0,
//                       m.work,
//                       N
//                     )),
//                     (m.distbits = N.bits),
//                     D)
//                   ) {
//                     (c.msg = "invalid distances set"), (m.mode = f);
//                     break;
//                   }
//                   if (((m.mode = 20), 6 === d)) break t;
//                 case 20:
//                   m.mode = 21;
//                 case 21:
//                   if (v >= 6 && w >= 258) {
//                     (c.next_out = y),
//                       (c.avail_out = w),
//                       (c.next_in = b),
//                       (c.avail_in = v),
//                       (m.hold = x),
//                       (m.bits = M),
//                       r(c, A),
//                       (y = c.next_out),
//                       (_ = c.output),
//                       (w = c.avail_out),
//                       (b = c.next_in),
//                       (g = c.input),
//                       (v = c.avail_in),
//                       (x = m.hold),
//                       (M = m.bits),
//                       m.mode === u && (m.back = -1);
//                     break;
//                   }
//                   for (
//                     m.back = 0;
//                     (P =
//                       ((F = m.lencode[x & ((1 << m.lenbits) - 1)]) >>> 16) &
//                       255),
//                       (O = 65535 & F),
//                       !((R = F >>> 24) <= M);

//                   ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   if (P && !(240 & P)) {
//                     for (
//                       C = R, z = P, L = O;
//                       (P =
//                         ((F =
//                           m.lencode[L + ((x & ((1 << (C + z)) - 1)) >> C)]) >>>
//                           16) &
//                         255),
//                         (O = 65535 & F),
//                         !(C + (R = F >>> 24) <= M);

//                     ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     (x >>>= C), (M -= C), (m.back += C);
//                   }
//                   if (
//                     ((x >>>= R),
//                     (M -= R),
//                     (m.back += R),
//                     (m.length = O),
//                     0 === P)
//                   ) {
//                     m.mode = 26;
//                     break;
//                   }
//                   if (32 & P) {
//                     (m.back = -1), (m.mode = u);
//                     break;
//                   }
//                   if (64 & P) {
//                     (c.msg = "invalid literal/length code"), (m.mode = f);
//                     break;
//                   }
//                   (m.extra = 15 & P), (m.mode = 22);
//                 case 22:
//                   if (m.extra) {
//                     for (j = m.extra; M < j; ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     (m.length += x & ((1 << m.extra) - 1)),
//                       (x >>>= m.extra),
//                       (M -= m.extra),
//                       (m.back += m.extra);
//                   }
//                   (m.was = m.length), (m.mode = 23);
//                 case 23:
//                   for (
//                     ;
//                     (P =
//                       ((F = m.distcode[x & ((1 << m.distbits) - 1)]) >>> 16) &
//                       255),
//                       (O = 65535 & F),
//                       !((R = F >>> 24) <= M);

//                   ) {
//                     if (0 === v) break t;
//                     v--, (x += g[b++] << M), (M += 8);
//                   }
//                   if (!(240 & P)) {
//                     for (
//                       C = R, z = P, L = O;
//                       (P =
//                         ((F =
//                           m.distcode[L + ((x & ((1 << (C + z)) - 1)) >> C)]) >>>
//                           16) &
//                         255),
//                         (O = 65535 & F),
//                         !(C + (R = F >>> 24) <= M);

//                     ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     (x >>>= C), (M -= C), (m.back += C);
//                   }
//                   if (((x >>>= R), (M -= R), (m.back += R), 64 & P)) {
//                     (c.msg = "invalid distance code"), (m.mode = f);
//                     break;
//                   }
//                   (m.offset = O), (m.extra = 15 & P), (m.mode = 24);
//                 case 24:
//                   if (m.extra) {
//                     for (j = m.extra; M < j; ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     (m.offset += x & ((1 << m.extra) - 1)),
//                       (x >>>= m.extra),
//                       (M -= m.extra),
//                       (m.back += m.extra);
//                   }
//                   if (m.offset > m.dmax) {
//                     (c.msg = "invalid distance too far back"), (m.mode = f);
//                     break;
//                   }
//                   m.mode = 25;
//                 case 25:
//                   if (0 === w) break t;
//                   if (((I = A - w), m.offset > I)) {
//                     if ((I = m.offset - I) > m.whave && m.sane) {
//                       (c.msg = "invalid distance too far back"), (m.mode = f);
//                       break;
//                     }
//                     I > m.wnext
//                       ? ((I -= m.wnext), (T = m.wsize - I))
//                       : (T = m.wnext - I),
//                       I > m.length && (I = m.length),
//                       (B = m.window);
//                   } else (B = _), (T = y - m.offset), (I = m.length);
//                   I > w && (I = w), (w -= I), (m.length -= I);
//                   do _[y++] = B[T++];
//                   while (--I);
//                   0 === m.length && (m.mode = 21);
//                   break;
//                 case 26:
//                   if (0 === w) break t;
//                   (_[y++] = m.length), w--, (m.mode = 21);
//                   break;
//                 case 27:
//                   if (m.wrap) {
//                     for (; M < 32; ) {
//                       if (0 === v) break t;
//                       v--, (x |= g[b++] << M), (M += 8);
//                     }
//                     if (
//                       ((A -= w),
//                       (c.total_out += A),
//                       (m.total += A),
//                       A &&
//                         (c.adler = m.check =
//                           m.flags
//                             ? i(m.check, _, A, y - A)
//                             : e(m.check, _, A, y - A)),
//                       (A = w),
//                       (m.flags ? x : p(x)) !== m.check)
//                     ) {
//                       (c.msg = "incorrect data check"), (m.mode = f);
//                       break;
//                     }
//                     (x = 0), (M = 0);
//                   }
//                   m.mode = 28;
//                 case 28:
//                   if (m.wrap && m.flags) {
//                     for (; M < 32; ) {
//                       if (0 === v) break t;
//                       v--, (x += g[b++] << M), (M += 8);
//                     }
//                     if (x !== (4294967295 & m.total)) {
//                       (c.msg = "incorrect length check"), (m.mode = f);
//                       break;
//                     }
//                     (x = 0), (M = 0);
//                   }
//                   m.mode = 29;
//                 case 29:
//                   D = 1;
//                   break t;
//                 case f:
//                   D = -3;
//                   break t;
//                 case 31:
//                   return -4;
//                 default:
//                   return l;
//               }
//             return (
//               (c.next_out = y),
//               (c.avail_out = w),
//               (c.next_in = b),
//               (c.avail_in = v),
//               (m.hold = x),
//               (m.bits = M),
//               (m.wsize ||
//                 (A !== c.avail_out &&
//                   m.mode < f &&
//                   (m.mode < 27 || 4 !== d))) &&
//                 k(c, c.output, c.next_out, A - c.avail_out),
//               (S -= c.avail_in),
//               (A -= c.avail_out),
//               (c.total_in += S),
//               (c.total_out += A),
//               (m.total += A),
//               m.wrap &&
//                 A &&
//                 (c.adler = m.check =
//                   m.flags
//                     ? i(m.check, _, A, c.next_out - A)
//                     : e(m.check, _, A, c.next_out - A)),
//               (c.data_type =
//                 m.bits +
//                 (m.last ? 64 : 0) +
//                 (m.mode === u ? 128 : 0) +
//                 (20 === m.mode || 15 === m.mode ? 256 : 0)),
//               ((0 === S && 0 === A) || 4 === d) && D === o && (D = -5),
//               D
//             );
//           }),
//           (inflate.inflateEnd = function (t) {
//             if (!t || !t.state) return l;
//             var e = t.state;
//             return e.window && (e.window = null), (t.state = null), o;
//           }),
//           (inflate.inflateGetHeader = function (t, e) {
//             var i;
//             return t && t.state && 2 & (i = t.state).wrap
//               ? ((i.head = e), (e.done = !1), o)
//               : l;
//           }),
//           (inflate.inflateSetDictionary = function (t, i) {
//             var r,
//               n = i.length;
//             return t && t.state
//               ? 0 !== (r = t.state).wrap && 11 !== r.mode
//                 ? l
//                 : 11 === r.mode && e(1, i, n, 0) !== r.check
//                 ? -3
//                 : k(t, i, n, n)
//                 ? ((r.mode = 31), -4)
//                 : ((r.havedict = 1), o)
//               : l;
//           }),
//           (inflate.inflateInfo = "pako inflate (from Nodeca project)"),
//           inflate
//         );
//       }
//       function requireConstants() {
//         return hasRequiredConstants
//           ? constants
//           : ((hasRequiredConstants = 1),
//             (constants = {
//               Z_NO_FLUSH: 0,
//               Z_PARTIAL_FLUSH: 1,
//               Z_SYNC_FLUSH: 2,
//               Z_FULL_FLUSH: 3,
//               Z_FINISH: 4,
//               Z_BLOCK: 5,
//               Z_TREES: 6,
//               Z_OK: 0,
//               Z_STREAM_END: 1,
//               Z_NEED_DICT: 2,
//               Z_ERRNO: -1,
//               Z_STREAM_ERROR: -2,
//               Z_DATA_ERROR: -3,
//               Z_BUF_ERROR: -5,
//               Z_NO_COMPRESSION: 0,
//               Z_BEST_SPEED: 1,
//               Z_BEST_COMPRESSION: 9,
//               Z_DEFAULT_COMPRESSION: -1,
//               Z_FILTERED: 1,
//               Z_HUFFMAN_ONLY: 2,
//               Z_RLE: 3,
//               Z_FIXED: 4,
//               Z_DEFAULT_STRATEGY: 0,
//               Z_BINARY: 0,
//               Z_TEXT: 1,
//               Z_UNKNOWN: 2,
//               Z_DEFLATED: 8,
//             }));
//       }
//       function requireGzheader() {
//         return hasRequiredGzheader
//           ? gzheader
//           : ((hasRequiredGzheader = 1),
//             (gzheader = function () {
//               (this.text = 0),
//                 (this.time = 0),
//                 (this.xflags = 0),
//                 (this.os = 0),
//                 (this.extra = null),
//                 (this.extra_len = 0),
//                 (this.name = ""),
//                 (this.comment = ""),
//                 (this.hcrc = 0),
//                 (this.done = !1);
//             }));
//       }
//       function requireInflate() {
//         if (hasRequiredInflate) return inflate$1;
//         hasRequiredInflate = 1;
//         var t = requireInflate$1(),
//           e = requireCommon(),
//           i = requireStrings(),
//           r = requireConstants(),
//           n = requireMessages(),
//           a = requireZstream(),
//           s = requireGzheader(),
//           o = Object.prototype.toString;
//         function l(h) {
//           if (!(this instanceof l)) return new l(h);
//           this.options = e.assign(
//             { chunkSize: 16384, windowBits: 0, to: "" },
//             h || {}
//           );
//           var u = this.options;
//           u.raw &&
//             u.windowBits >= 0 &&
//             u.windowBits < 16 &&
//             ((u.windowBits = -u.windowBits),
//             0 === u.windowBits && (u.windowBits = -15)),
//             !(u.windowBits >= 0 && u.windowBits < 16) ||
//               (h && h.windowBits) ||
//               (u.windowBits += 32),
//             u.windowBits > 15 &&
//               u.windowBits < 48 &&
//               (15 & u.windowBits || (u.windowBits |= 15)),
//             (this.err = 0),
//             (this.msg = ""),
//             (this.ended = !1),
//             (this.chunks = []),
//             (this.strm = new a()),
//             (this.strm.avail_out = 0);
//           var f = t.inflateInit2(this.strm, u.windowBits);
//           if (
//             f !== r.Z_OK ||
//             ((this.header = new s()),
//             t.inflateGetHeader(this.strm, this.header),
//             u.dictionary &&
//               ("string" == typeof u.dictionary
//                 ? (u.dictionary = i.string2buf(u.dictionary))
//                 : "[object ArrayBuffer]" === o.call(u.dictionary) &&
//                   (u.dictionary = new Uint8Array(u.dictionary)),
//               u.raw &&
//                 (f = t.inflateSetDictionary(this.strm, u.dictionary)) !==
//                   r.Z_OK))
//           )
//             throw Error(n[f]);
//         }
//         function h(t, e) {
//           var i = new l(e);
//           if ((i.push(t, !0), i.err)) throw i.msg || n[i.err];
//           return i.result;
//         }
//         return (
//           (l.prototype.push = function (n, a) {
//             var s,
//               l,
//               h,
//               u,
//               f,
//               c = this.strm,
//               d = this.options.chunkSize,
//               p = this.options.dictionary,
//               m = !1;
//             if (this.ended) return !1;
//             (l = a === ~~a ? a : !0 === a ? r.Z_FINISH : r.Z_NO_FLUSH),
//               "string" == typeof n
//                 ? (c.input = i.binstring2buf(n))
//                 : "[object ArrayBuffer]" === o.call(n)
//                 ? (c.input = new Uint8Array(n))
//                 : (c.input = n),
//               (c.next_in = 0),
//               (c.avail_in = c.input.length);
//             do {
//               if (
//                 (0 === c.avail_out &&
//                   ((c.output = new e.Buf8(d)),
//                   (c.next_out = 0),
//                   (c.avail_out = d)),
//                 (s = t.inflate(c, r.Z_NO_FLUSH)) === r.Z_NEED_DICT &&
//                   p &&
//                   (s = t.inflateSetDictionary(this.strm, p)),
//                 s === r.Z_BUF_ERROR && !0 === m && ((s = r.Z_OK), (m = !1)),
//                 s !== r.Z_STREAM_END && s !== r.Z_OK)
//               )
//                 return this.onEnd(s), (this.ended = !0), !1;
//               c.next_out &&
//                 ((0 !== c.avail_out &&
//                   s !== r.Z_STREAM_END &&
//                   (0 !== c.avail_in ||
//                     (l !== r.Z_FINISH && l !== r.Z_SYNC_FLUSH))) ||
//                   ("string" === this.options.to
//                     ? ((h = i.utf8border(c.output, c.next_out)),
//                       (u = c.next_out - h),
//                       (f = i.buf2string(c.output, h)),
//                       (c.next_out = u),
//                       (c.avail_out = d - u),
//                       u && e.arraySet(c.output, c.output, h, u, 0),
//                       this.onData(f))
//                     : this.onData(e.shrinkBuf(c.output, c.next_out)))),
//                 0 === c.avail_in && 0 === c.avail_out && (m = !0);
//             } while (
//               (c.avail_in > 0 || 0 === c.avail_out) &&
//               s !== r.Z_STREAM_END
//             );
//             return (
//               s === r.Z_STREAM_END && (l = r.Z_FINISH),
//               l === r.Z_FINISH
//                 ? ((s = t.inflateEnd(this.strm)),
//                   this.onEnd(s),
//                   (this.ended = !0),
//                   s === r.Z_OK)
//                 : l !== r.Z_SYNC_FLUSH ||
//                   (this.onEnd(r.Z_OK), (c.avail_out = 0), !0)
//             );
//           }),
//           (l.prototype.onData = function (t) {
//             this.chunks.push(t);
//           }),
//           (l.prototype.onEnd = function (t) {
//             t === r.Z_OK &&
//               ("string" === this.options.to
//                 ? (this.result = this.chunks.join(""))
//                 : (this.result = e.flattenChunks(this.chunks))),
//               (this.chunks = []),
//               (this.err = t),
//               (this.msg = this.strm.msg);
//           }),
//           (inflate$1.Inflate = l),
//           (inflate$1.inflate = h),
//           (inflate$1.inflateRaw = function (t, e) {
//             return ((e = e || {}).raw = !0), h(t, e);
//           }),
//           (inflate$1.ungzip = h),
//           inflate$1
//         );
//       }
//       function requirePako() {
//         if (hasRequiredPako) return pako_1;
//         hasRequiredPako = 1;
//         var t = {};
//         return (
//           (0, requireCommon().assign)(
//             t,
//             requireDeflate(),
//             requireInflate(),
//             requireConstants()
//           ),
//           (pako_1 = t)
//         );
//       }
//       !(function (t) {
//         !(function () {
//           var e = {};
//           function i() {
//             void 0 !== process || console.log.apply(console, arguments);
//           }
//           (t.exports = e),
//             (function (t, e) {
//               (function () {
//                 var e = (function () {
//                     function t(t) {
//                       this.message = "JPEG error: " + t;
//                     }
//                     return (
//                       (t.prototype = Error()),
//                       (t.prototype.name = "JpegError"),
//                       (t.constructor = t),
//                       t
//                     );
//                   })(),
//                   i = (function () {
//                     var t = new Uint8Array([
//                         0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5,
//                         12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14,
//                         21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23,
//                         30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60,
//                         61, 54, 47, 55, 62, 63,
//                       ]),
//                       i = 4017,
//                       n = 799,
//                       a = 3406,
//                       s = 2276,
//                       o = 1567,
//                       l = 3784,
//                       h = 5793,
//                       u = 2896;
//                     function f(t) {
//                       null == t && (t = {}),
//                         null == t.w && (t.w = -1),
//                         (this.V = t.n),
//                         (this.N = t.w);
//                     }
//                     function c(t, e) {
//                       for (
//                         var i, r, n, a = 0, s = [], o = 16;
//                         o > 0 && !t[o - 1];

//                       )
//                         o--;
//                       s.push({ children: [], index: 0 });
//                       var l = s[0];
//                       for (i = 0; i < o; i++) {
//                         for (r = 0; r < t[i]; r++) {
//                           for (
//                             (l = s.pop()).children[l.index] = e[a];
//                             l.index > 0;

//                           )
//                             l = s.pop();
//                           for (l.index++, s.push(l); s.length <= i; )
//                             s.push((n = { children: [], index: 0 })),
//                               (l.children[l.index] = n.children),
//                               (l = n);
//                           a++;
//                         }
//                         i + 1 < o &&
//                           (s.push((n = { children: [], index: 0 })),
//                           (l.children[l.index] = n.children),
//                           (l = n));
//                       }
//                       return s[0].children;
//                     }
//                     function d(t, e, i) {
//                       return 64 * ((t.P + 1) * e + i);
//                     }
//                     function p(i, n, a, s, o, l, h, u, f, c) {
//                       null == c && (c = !1);
//                       var p,
//                         m,
//                         g,
//                         b,
//                         y,
//                         v,
//                         w,
//                         x,
//                         E,
//                         k,
//                         M,
//                         S = a.m,
//                         A = a.Z,
//                         I = n,
//                         T = 0,
//                         B = 0,
//                         R = 0,
//                         P = 0,
//                         O = 0,
//                         C = 0;
//                       function z() {
//                         if (B > 0) return B--, (T >> B) & 1;
//                         if (255 === (T = i[n++])) {
//                           var t = i[n++];
//                           if (t) {
//                             if (220 === t && c) {
//                               var s = r(i, (n += 2));
//                               if (((n += 2), s > 0 && s !== a.s))
//                                 throw new DNLMarkerError(
//                                   "Found DNL marker (0xFFDC) while parsing scan data",
//                                   s
//                                 );
//                             } else if (217 === t) {
//                               if (c) {
//                                 var o = 8 * O;
//                                 if (o > 0 && o < a.s / 10)
//                                   throw new DNLMarkerError(
//                                     "Found EOI marker (0xFFD9) while parsing scan data, possibly caused by incorrect `scanLines` parameter",
//                                     o
//                                   );
//                               }
//                               throw new EOIMarkerError(
//                                 "Found EOI marker (0xFFD9) while parsing scan data"
//                               );
//                             }
//                             throw new e("unexpected marker");
//                           }
//                         }
//                         return (B = 7), T >>> 7;
//                       }
//                       function L(t) {
//                         for (var i = t; ; ) {
//                           switch (typeof (i = i[z()])) {
//                             case "number":
//                               return i;
//                             case "object":
//                               continue;
//                           }
//                           throw new e("invalid huffman sequence");
//                         }
//                       }
//                       function U(t) {
//                         for (var e = 0; t > 0; ) (e = (e << 1) | z()), t--;
//                         return e;
//                       }
//                       function D(t) {
//                         if (1 === t) return 1 === z() ? 1 : -1;
//                         var e = U(t);
//                         return e >= 1 << (t - 1) ? e : e + (-1 << t) + 1;
//                       }
//                       function N(t, e, i, r, n) {
//                         var a = i % S;
//                         O = ((i / S) | 0) * t.A + r;
//                         var s = a * t.h + n;
//                         e(t, d(t, O, s));
//                       }
//                       function j(t, e, i) {
//                         O = (i / t.P) | 0;
//                         var r = i % t.P;
//                         e(t, d(t, O, r));
//                       }
//                       var F = s.length;
//                       for (
//                         w = A
//                           ? 0 === l
//                             ? 0 === u
//                               ? function (t, e) {
//                                   var i = L(t.J),
//                                     r = 0 === i ? 0 : D(i) << f;
//                                   t.D[e] = t.Q += r;
//                                 }
//                               : function (t, e) {
//                                   t.D[e] |= z() << f;
//                                 }
//                             : 0 === u
//                             ? function (e, i) {
//                                 if (R > 0) R--;
//                                 else
//                                   for (var r = l, n = h; r <= n; ) {
//                                     var a = L(e.i),
//                                       s = 15 & a,
//                                       o = a >> 4;
//                                     if (0 !== s) {
//                                       var u = t[(r += o)];
//                                       (e.D[i + u] = D(s) * (1 << f)), r++;
//                                     } else {
//                                       if (o < 15) {
//                                         R = U(o) + (1 << o) - 1;
//                                         break;
//                                       }
//                                       r += 16;
//                                     }
//                                   }
//                               }
//                             : function (i, r) {
//                                 for (var n, a, s = l, o = h, u = 0; s <= o; ) {
//                                   var c = r + t[s],
//                                     d = i.D[c] < 0 ? -1 : 1;
//                                   switch (P) {
//                                     case 0:
//                                       if (
//                                         ((u = (a = L(i.i)) >> 4),
//                                         0 == (n = 15 & a))
//                                       )
//                                         u < 15
//                                           ? ((R = U(u) + (1 << u)), (P = 4))
//                                           : ((u = 16), (P = 1));
//                                       else {
//                                         if (1 !== n)
//                                           throw new e("invalid ACn encoding");
//                                         (p = D(n)), (P = u ? 2 : 3);
//                                       }
//                                       continue;
//                                     case 1:
//                                     case 2:
//                                       i.D[c]
//                                         ? (i.D[c] += d * (z() << f))
//                                         : 0 == --u && (P = 2 === P ? 3 : 0);
//                                       break;
//                                     case 3:
//                                       i.D[c]
//                                         ? (i.D[c] += d * (z() << f))
//                                         : ((i.D[c] = p << f), (P = 0));
//                                       break;
//                                     case 4:
//                                       i.D[c] && (i.D[c] += d * (z() << f));
//                                   }
//                                   s++;
//                                 }
//                                 4 === P && 0 == --R && (P = 0);
//                               }
//                           : function (e, i) {
//                               var r = L(e.J),
//                                 n = 0 === r ? 0 : D(r),
//                                 a = 1;
//                               for (e.D[i] = e.Q += n; a < 64; ) {
//                                 var s = L(e.i),
//                                   o = 15 & s,
//                                   l = s >> 4;
//                                 if (0 !== o) {
//                                   var h = t[(a += l)];
//                                   (e.D[i + h] = D(o)), a++;
//                                 } else {
//                                   if (l < 15) break;
//                                   a += 16;
//                                 }
//                               }
//                             },
//                           E = 1 === F ? s[0].P * s[0].c : S * a.R;
//                         C <= E;

//                       ) {
//                         var G = o ? Math.min(E - C, o) : E;
//                         if (G > 0) {
//                           for (g = 0; g < F; g++) s[g].Q = 0;
//                           if (((R = 0), 1 === F))
//                             for (m = s[0], v = 0; v < G; v++) j(m, w, C), C++;
//                           else
//                             for (v = 0; v < G; v++) {
//                               for (g = 0; g < F; g++)
//                                 for (
//                                   k = (m = s[g]).h, M = m.A, b = 0;
//                                   b < M;
//                                   b++
//                                 )
//                                   for (y = 0; y < k; y++) N(m, w, C, b, y);
//                               C++;
//                             }
//                         }
//                         if (
//                           ((B = 0),
//                           !(x = _(i, n)) ||
//                             (x.u && (n = x.offset),
//                             !(x.M >= 65488 && x.M <= 65495)))
//                         )
//                           break;
//                         n += 2;
//                       }
//                       return n - I;
//                     }
//                     function m(t, r, f) {
//                       var c,
//                         d,
//                         p,
//                         m,
//                         g,
//                         _,
//                         b,
//                         y,
//                         v,
//                         w,
//                         x,
//                         E,
//                         k,
//                         M,
//                         S,
//                         A,
//                         I,
//                         T = t.$,
//                         B = t.D;
//                       if (!T)
//                         throw new e("missing required Quantization Table.");
//                       for (var R = 0; R < 64; R += 8)
//                         (v = B[r + R]),
//                           (w = B[r + R + 1]),
//                           (x = B[r + R + 2]),
//                           (E = B[r + R + 3]),
//                           (k = B[r + R + 4]),
//                           (M = B[r + R + 5]),
//                           (S = B[r + R + 6]),
//                           (A = B[r + R + 7]),
//                           (v *= T[R]),
//                           w | x | E | k | M | S | A
//                             ? ((w *= T[R + 1]),
//                               (x *= T[R + 2]),
//                               (E *= T[R + 3]),
//                               (k *= T[R + 4]),
//                               (M *= T[R + 5]),
//                               (S *= T[R + 6]),
//                               (A *= T[R + 7]),
//                               (d =
//                                 (c =
//                                   ((c = (h * v + 128) >> 8) +
//                                     (d = (h * k + 128) >> 8) +
//                                     1) >>
//                                   1) - d),
//                               (I = ((p = x) * l + (m = S) * o + 128) >> 8),
//                               (p = (p * o - m * l + 128) >> 8),
//                               (b =
//                                 (g =
//                                   ((g = (u * (w - A) + 128) >> 8) +
//                                     (b = M << 4) +
//                                     1) >>
//                                   1) - b),
//                               (_ =
//                                 (y =
//                                   ((y = (u * (w + A) + 128) >> 8) +
//                                     (_ = E << 4) +
//                                     1) >>
//                                   1) - _),
//                               (m = (c = (c + (m = I) + 1) >> 1) - m),
//                               (p = (d = (d + p + 1) >> 1) - p),
//                               (I = (g * s + y * a + 2048) >> 12),
//                               (g = (g * a - y * s + 2048) >> 12),
//                               (y = I),
//                               (I = (_ * n + b * i + 2048) >> 12),
//                               (_ = (_ * i - b * n + 2048) >> 12),
//                               (b = I),
//                               (f[R] = c + y),
//                               (f[R + 7] = c - y),
//                               (f[R + 1] = d + b),
//                               (f[R + 6] = d - b),
//                               (f[R + 2] = p + _),
//                               (f[R + 5] = p - _),
//                               (f[R + 3] = m + g),
//                               (f[R + 4] = m - g))
//                             : ((I = (h * v + 512) >> 10),
//                               (f[R] = I),
//                               (f[R + 1] = I),
//                               (f[R + 2] = I),
//                               (f[R + 3] = I),
//                               (f[R + 4] = I),
//                               (f[R + 5] = I),
//                               (f[R + 6] = I),
//                               (f[R + 7] = I));
//                       for (var P = 0; P < 8; ++P)
//                         (v = f[P]),
//                           (w = f[P + 8]) |
//                           (x = f[P + 16]) |
//                           (E = f[P + 24]) |
//                           (k = f[P + 32]) |
//                           (M = f[P + 40]) |
//                           (S = f[P + 48]) |
//                           (A = f[P + 56])
//                             ? ((d =
//                                 (c =
//                                   4112 +
//                                   (((c = (h * v + 2048) >> 12) +
//                                     (d = (h * k + 2048) >> 12) +
//                                     1) >>
//                                     1)) - d),
//                               (I = ((p = x) * l + (m = S) * o + 2048) >> 12),
//                               (p = (p * o - m * l + 2048) >> 12),
//                               (m = I),
//                               (b =
//                                 (g =
//                                   ((g = (u * (w - A) + 2048) >> 12) +
//                                     (b = M) +
//                                     1) >>
//                                   1) - b),
//                               (_ =
//                                 (y =
//                                   ((y = (u * (w + A) + 2048) >> 12) +
//                                     (_ = E) +
//                                     1) >>
//                                   1) - _),
//                               (I = (g * s + y * a + 2048) >> 12),
//                               (g = (g * a - y * s + 2048) >> 12),
//                               (y = I),
//                               (I = (_ * n + b * i + 2048) >> 12),
//                               (_ = (_ * i - b * n + 2048) >> 12),
//                               (v = (c = (c + m + 1) >> 1) + y) < 16
//                                 ? (v = 0)
//                                 : v >= 4080
//                                 ? (v = 255)
//                                 : (v >>= 4),
//                               (w = (d = (d + p + 1) >> 1) + (b = I)) < 16
//                                 ? (w = 0)
//                                 : w >= 4080
//                                 ? (w = 255)
//                                 : (w >>= 4),
//                               (x = (p = d - p) + _) < 16
//                                 ? (x = 0)
//                                 : x >= 4080
//                                 ? (x = 255)
//                                 : (x >>= 4),
//                               (E = (m = c - m) + g) < 16
//                                 ? (E = 0)
//                                 : E >= 4080
//                                 ? (E = 255)
//                                 : (E >>= 4),
//                               (k = m - g) < 16
//                                 ? (k = 0)
//                                 : k >= 4080
//                                 ? (k = 255)
//                                 : (k >>= 4),
//                               (M = p - _) < 16
//                                 ? (M = 0)
//                                 : M >= 4080
//                                 ? (M = 255)
//                                 : (M >>= 4),
//                               (S = d - b) < 16
//                                 ? (S = 0)
//                                 : S >= 4080
//                                 ? (S = 255)
//                                 : (S >>= 4),
//                               (A = c - y) < 16
//                                 ? (A = 0)
//                                 : A >= 4080
//                                 ? (A = 255)
//                                 : (A >>= 4),
//                               (B[r + P] = v),
//                               (B[r + P + 8] = w),
//                               (B[r + P + 16] = x),
//                               (B[r + P + 24] = E),
//                               (B[r + P + 32] = k),
//                               (B[r + P + 40] = M),
//                               (B[r + P + 48] = S),
//                               (B[r + P + 56] = A))
//                             : ((I =
//                                 (I = (h * v + 8192) >> 14) < -2040
//                                   ? 0
//                                   : I >= 2024
//                                   ? 255
//                                   : (I + 2056) >> 4),
//                               (B[r + P] = I),
//                               (B[r + P + 8] = I),
//                               (B[r + P + 16] = I),
//                               (B[r + P + 24] = I),
//                               (B[r + P + 32] = I),
//                               (B[r + P + 40] = I),
//                               (B[r + P + 48] = I),
//                               (B[r + P + 56] = I));
//                     }
//                     function g(t, e) {
//                       for (
//                         var i = e.P, r = e.c, n = new Int16Array(64), a = 0;
//                         a < r;
//                         a++
//                       )
//                         for (var s = 0; s < i; s++) m(e, d(e, a, s), n);
//                       return e.D;
//                     }
//                     function _(t, e, i) {
//                       null == i && (i = e);
//                       var n = t.length - 1,
//                         a = i < e ? i : e;
//                       if (e >= n) return null;
//                       var s = r(t, e);
//                       if (s >= 65472 && s <= 65534)
//                         return { u: null, M: s, offset: e };
//                       for (var o = r(t, a); !(o >= 65472 && o <= 65534); ) {
//                         if (++a >= n) return null;
//                         o = r(t, a);
//                       }
//                       return { u: s.toString(16), M: o, offset: a };
//                     }
//                     return (
//                       (f.prototype = {
//                         parse(i, n) {
//                           null == n && (n = {});
//                           var a,
//                             s,
//                             o = n.F,
//                             l = 0,
//                             h = null,
//                             u = null,
//                             f = 0;
//                           function d() {
//                             var t = r(i, l),
//                               e = (l += 2) + t - 2,
//                               n = _(i, e, l);
//                             n && n.u && (e = n.offset);
//                             var a = i.subarray(l, e);
//                             return (l += a.length), a;
//                           }
//                           function m(t) {
//                             for (
//                               var e = Math.ceil(t.o / 8 / t.X),
//                                 i = Math.ceil(t.s / 8 / t.B),
//                                 r = 0;
//                               r < t.W.length;
//                               r++
//                             ) {
//                               G = t.W[r];
//                               var n = Math.ceil(
//                                   (Math.ceil(t.o / 8) * G.h) / t.X
//                                 ),
//                                 a = Math.ceil((Math.ceil(t.s / 8) * G.A) / t.B),
//                                 s = e * G.h,
//                                 o = i * G.A * 64 * (s + 1);
//                               (G.D = new Int16Array(o)), (G.P = n), (G.c = a);
//                             }
//                             (t.m = e), (t.R = i);
//                           }
//                           var b = [],
//                             y = [],
//                             v = [],
//                             w = r(i, 0);
//                           if (((l += 2), 65496 !== w))
//                             throw new e("SOI not found");
//                           (w = r(i, l)), (l += 2);
//                           t: for (; 65497 !== w; ) {
//                             switch (w) {
//                               case 65504:
//                               case 65505:
//                               case 65506:
//                               case 65507:
//                               case 65508:
//                               case 65509:
//                               case 65510:
//                               case 65511:
//                               case 65512:
//                               case 65513:
//                               case 65514:
//                               case 65515:
//                               case 65516:
//                               case 65517:
//                               case 65518:
//                               case 65519:
//                               case 65534:
//                                 var x = d();
//                                 65504 === w &&
//                                   74 === x[0] &&
//                                   70 === x[1] &&
//                                   73 === x[2] &&
//                                   70 === x[3] &&
//                                   0 === x[4] &&
//                                   (h = {
//                                     version: { d: x[5], T: x[6] },
//                                     K: x[7],
//                                     j: (x[8] << 8) | x[9],
//                                     H: (x[10] << 8) | x[11],
//                                     S: x[12],
//                                     I: x[13],
//                                     C: x.subarray(14, 14 + 3 * x[12] * x[13]),
//                                   }),
//                                   65518 === w &&
//                                     65 === x[0] &&
//                                     100 === x[1] &&
//                                     111 === x[2] &&
//                                     98 === x[3] &&
//                                     101 === x[4] &&
//                                     (u = {
//                                       version: (x[5] << 8) | x[6],
//                                       k: (x[7] << 8) | x[8],
//                                       q: (x[9] << 8) | x[10],
//                                       a: x[11],
//                                     });
//                                 break;
//                               case 65499:
//                                 for (var E = r(i, l) + (l += 2) - 2; l < E; ) {
//                                   var k = i[l++],
//                                     M = new Uint16Array(64);
//                                   if (k >> 4) {
//                                     if (k >> 4 != 1)
//                                       throw new e("DQT - invalid table spec");
//                                     for (A = 0; A < 64; A++)
//                                       (M[t[A]] = r(i, l)), (l += 2);
//                                   } else
//                                     for (A = 0; A < 64; A++) M[t[A]] = i[l++];
//                                   b[15 & k] = M;
//                                 }
//                                 break;
//                               case 65472:
//                               case 65473:
//                               case 65474:
//                                 if (a)
//                                   throw new e(
//                                     "Only single frame JPEGs supported"
//                                   );
//                                 (l += 2),
//                                   ((a = {}).G = 65473 === w),
//                                   (a.Z = 65474 === w),
//                                   (a.precision = i[l++]);
//                                 var S,
//                                   A,
//                                   I,
//                                   T,
//                                   B = r(i, l),
//                                   R = 0,
//                                   P = 0;
//                                 (l += 2),
//                                   (a.s = o || B),
//                                   (a.o = r(i, l)),
//                                   (l += 2),
//                                   (a.W = []),
//                                   (a._ = {});
//                                 var O = i[l++];
//                                 for (S = 0; S < O; S++) {
//                                   T = i[l];
//                                   var C = i[l + 1] >> 4,
//                                     z = 15 & i[l + 1];
//                                   R < C && (R = C), P < z && (P = z);
//                                   var L = i[l + 2];
//                                   (I = a.W.push({ h: C, A: z, L: L, $: null })),
//                                     (a._[T] = I - 1),
//                                     (l += 3);
//                                 }
//                                 (a.X = R), (a.B = P), m(a);
//                                 break;
//                               case 65476:
//                                 var U = r(i, l);
//                                 for (l += 2, S = 2; S < U; ) {
//                                   var D = i[l++],
//                                     N = new Uint8Array(16),
//                                     j = 0;
//                                   for (A = 0; A < 16; A++, l++)
//                                     j += N[A] = i[l];
//                                   var F = new Uint8Array(j);
//                                   for (A = 0; A < j; A++, l++) F[A] = i[l];
//                                   (S += 17 + j),
//                                     ((D >> 4 ? y : v)[15 & D] = c(N, F));
//                                 }
//                                 break;
//                               case 65501:
//                                 (s = r(i, (l += 2))), (l += 2);
//                                 break;
//                               case 65498:
//                                 var G,
//                                   Z = 1 == ++f && !o;
//                                 l += 2;
//                                 var H = i[l++],
//                                   W = [];
//                                 for (S = 0; S < H; S++) {
//                                   var q = i[l++],
//                                     Y = a._[q];
//                                   (G = a.W[Y]).index = q;
//                                   var V = i[l++];
//                                   (G.J = v[V >> 4]),
//                                     (G.i = y[15 & V]),
//                                     W.push(G);
//                                 }
//                                 var $ = i[l++],
//                                   K = i[l++],
//                                   X = i[l++];
//                                 try {
//                                   var J = p(
//                                     i,
//                                     l,
//                                     a,
//                                     W,
//                                     s,
//                                     $,
//                                     K,
//                                     X >> 4,
//                                     15 & X,
//                                     Z
//                                   );
//                                   l += J;
//                                 } catch (t) {
//                                   if (t instanceof DNLMarkerError)
//                                     return this.parse(i, { F: t.s });
//                                   if (t instanceof EOIMarkerError) break t;
//                                   throw t;
//                                 }
//                                 break;
//                               case 65500:
//                                 l += 4;
//                                 break;
//                               case 65535:
//                                 255 !== i[l] && l--;
//                                 break;
//                               default:
//                                 var Q = _(i, l - 2, l - 3);
//                                 if (Q && Q.u) {
//                                   l = Q.offset;
//                                   break;
//                                 }
//                                 if (l >= i.length - 1) break t;
//                                 throw new e(
//                                   "JpegImage.parse - unknown marker: " +
//                                     w.toString(16)
//                                 );
//                             }
//                             (w = r(i, l)), (l += 2);
//                           }
//                           for (
//                             this.width = a.o,
//                               this.height = a.s,
//                               this.g = h,
//                               this.b = u,
//                               this.W = [],
//                               S = 0;
//                             S < a.W.length;
//                             S++
//                           ) {
//                             var tt = b[(G = a.W[S]).L];
//                             tt && (G.$ = tt),
//                               this.W.push({
//                                 index: G.index,
//                                 e: g(0, G),
//                                 l: G.h / a.X,
//                                 t: G.A / a.B,
//                                 P: G.P,
//                                 c: G.c,
//                               });
//                           }
//                           this.p = this.W.length;
//                         },
//                         Y(t, e, i) {
//                           null == i && (i = !1);
//                           var r,
//                             n,
//                             a,
//                             s,
//                             o,
//                             l,
//                             h,
//                             u,
//                             f,
//                             c,
//                             d,
//                             p,
//                             m = this.width / t,
//                             g = this.height / e,
//                             _ = 0,
//                             b = this.W.length,
//                             y = t * e * b,
//                             v = new Uint8ClampedArray(y),
//                             w = new Uint32Array(t),
//                             x = 4294967288;
//                           for (h = 0; h < b; h++) {
//                             if (
//                               ((n = (r = this.W[h]).l * m),
//                               (a = r.t * g),
//                               (_ = h),
//                               (d = r.e),
//                               (s = (r.P + 1) << 3),
//                               n !== p)
//                             ) {
//                               for (o = 0; o < t; o++)
//                                 (u = 0 | (o * n)),
//                                   (w[o] = ((u & x) << 3) | (7 & u));
//                               p = n;
//                             }
//                             for (l = 0; l < e; l++)
//                               for (
//                                 c =
//                                   (s * ((u = 0 | (l * a)) & x)) |
//                                   ((7 & u) << 3),
//                                   o = 0;
//                                 o < t;
//                                 o++
//                               )
//                                 (v[_] = d[c + w[o]]), (_ += b);
//                           }
//                           var E = this.V;
//                           if (
//                             (i ||
//                               4 !== b ||
//                               E ||
//                               (E = new Int32Array([
//                                 -256, 255, -256, 255, -256, 255, -256, 255,
//                               ])),
//                             E)
//                           )
//                             for (h = 0; h < y; )
//                               for (u = 0, f = 0; u < b; u++, h++, f += 2)
//                                 v[h] = ((v[h] * E[f]) >> 8) + E[f + 1];
//                           return v;
//                         },
//                         get f() {
//                           return this.b
//                             ? !!this.b.a
//                             : 3 === this.p
//                             ? 0 !== this.N &&
//                               (82 !== this.W[0].index ||
//                                 71 !== this.W[1].index ||
//                                 66 !== this.W[2].index)
//                             : 1 === this.N;
//                         },
//                         z: function (t) {
//                           for (var e, i, r, n = 0, a = t.length; n < a; n += 3)
//                             (e = t[n]),
//                               (i = t[n + 1]),
//                               (r = t[n + 2]),
//                               (t[n] = e - 179.456 + 1.402 * r),
//                               (t[n + 1] = e + 135.459 - 0.344 * i - 0.714 * r),
//                               (t[n + 2] = e - 226.816 + 1.772 * i);
//                           return t;
//                         },
//                         O: function (t) {
//                           for (
//                             var e, i, r, n, a = 0, s = 0, o = t.length;
//                             s < o;
//                             s += 4
//                           )
//                             (e = t[s]),
//                               (i = t[s + 1]),
//                               (r = t[s + 2]),
//                               (n = t[s + 3]),
//                               (t[a++] =
//                                 i *
//                                   (-0.0000660635669420364 * i +
//                                     437130475926232e-18 * r -
//                                     54080610064599e-18 * e +
//                                     48449797120281e-17 * n -
//                                     0.154362151871126) -
//                                 122.67195406894 +
//                                 r *
//                                   (-0.000957964378445773 * r +
//                                     817076911346625e-18 * e -
//                                     0.00477271405408747 * n +
//                                     1.53380253221734) +
//                                 e *
//                                   (961250184130688e-18 * e -
//                                     0.00266257332283933 * n +
//                                     0.48357088451265) +
//                                 n *
//                                   (-0.000336197177618394 * n +
//                                     0.484791561490776)),
//                               (t[a++] =
//                                 107.268039397724 +
//                                 i *
//                                   (219927104525741e-19 * i -
//                                     640992018297945e-18 * r +
//                                     659397001245577e-18 * e +
//                                     426105652938837e-18 * n -
//                                     0.176491792462875) +
//                                 r *
//                                   (-0.000778269941513683 * r +
//                                     0.00130872261408275 * e +
//                                     770482631801132e-18 * n -
//                                     0.151051492775562) +
//                                 e *
//                                   (0.00126935368114843 * e -
//                                     0.00265090189010898 * n +
//                                     0.25802910206845) +
//                                 n *
//                                   (-0.000318913117588328 * n -
//                                     0.213742400323665)),
//                               (t[a++] =
//                                 i *
//                                   (-0.000570115196973677 * i -
//                                     263409051004589e-19 * r +
//                                     0.0020741088115012 * e -
//                                     0.00288260236853442 * n +
//                                     0.814272968359295) -
//                                 20.810012546947 +
//                                 r *
//                                   (-0.0000153496057440975 * r -
//                                     132689043961446e-18 * e +
//                                     560833691242812e-18 * n -
//                                     0.195152027534049) +
//                                 e *
//                                   (0.00174418132927582 * e -
//                                     0.00255243321439347 * n +
//                                     0.116935020465145) +
//                                 n *
//                                   (-0.000343531996510555 * n +
//                                     0.24165260232407));
//                           return t.subarray(0, a);
//                         },
//                         r: function (t) {
//                           for (var e, i, r, n = 0, a = t.length; n < a; n += 4)
//                             (e = t[n]),
//                               (i = t[n + 1]),
//                               (r = t[n + 2]),
//                               (t[n] = 434.456 - e - 1.402 * r),
//                               (t[n + 1] = 119.541 - e + 0.344 * i + 0.714 * r),
//                               (t[n + 2] = 481.816 - e - 1.772 * i);
//                           return t;
//                         },
//                         U: function (t) {
//                           for (
//                             var e, i, r, n, a = 0, s = 0, o = t.length;
//                             s < o;
//                             s += 4
//                           )
//                             (e = t[s]),
//                               (i = t[s + 1]),
//                               (r = t[s + 2]),
//                               (n = t[s + 3]),
//                               (t[a++] =
//                                 255 +
//                                 e *
//                                   (-0.00006747147073602441 * e +
//                                     8379262121013727e-19 * i +
//                                     2894718188643294e-19 * r +
//                                     0.003264231057537806 * n -
//                                     1.1185611867203937) +
//                                 i *
//                                   (26374107616089405e-21 * i -
//                                     8626949158638572e-20 * r -
//                                     2748769067499491e-19 * n -
//                                     0.02155688794978967) +
//                                 r *
//                                   (-0.00003878099212869363 * r -
//                                     3267808279485286e-19 * n +
//                                     0.0686742238595345) -
//                                 n *
//                                   (3361971776183937e-19 * n +
//                                     0.7430659151342254)),
//                               (t[a++] =
//                                 255 +
//                                 e *
//                                   (13596372813588848e-20 * e +
//                                     924537132573585e-18 * i +
//                                     10567359618683593e-20 * r +
//                                     4791864687436512e-19 * n -
//                                     0.3109689587515875) +
//                                 i *
//                                   (-0.00023545346108370344 * i +
//                                     2702845253534714e-19 * r +
//                                     0.0020200308977307156 * n -
//                                     0.7488052167015494) +
//                                 r *
//                                   (6834815998235662e-20 * r +
//                                     15168452363460973e-20 * n -
//                                     0.09751927774728933) -
//                                 n *
//                                   (3189131175883281e-19 * n +
//                                     0.7364883807733168)),
//                               (t[a++] =
//                                 255 +
//                                 e *
//                                   (13598650411385307e-21 * e +
//                                     12423956175490851e-20 * i +
//                                     4751985097583589e-19 * r -
//                                     36729317476630422e-22 * n -
//                                     0.05562186980264034) +
//                                 i *
//                                   (16141380598724676e-20 * i +
//                                     9692239130725186e-19 * r +
//                                     7782692450036253e-19 * n -
//                                     0.44015232367526463) +
//                                 r *
//                                   (5068882914068769e-22 * r +
//                                     0.0017778369011375071 * n -
//                                     0.7591454649749609) -
//                                 n *
//                                   (3435319965105553e-19 * n +
//                                     0.7063770186160144));
//                           return t.subarray(0, a);
//                         },
//                         getData: function (t) {
//                           var i = t.width,
//                             r = t.height,
//                             n = t.forceRGB,
//                             a = t.isSourcePDF;
//                           if (this.p > 4) throw new e("Unsupported color mode");
//                           var s = this.Y(i, r, a);
//                           if (1 === this.p && n) {
//                             for (
//                               var o = s.length,
//                                 l = new Uint8ClampedArray(3 * o),
//                                 h = 0,
//                                 u = 0;
//                               u < o;
//                               u++
//                             ) {
//                               var f = s[u];
//                               (l[h++] = f), (l[h++] = f), (l[h++] = f);
//                             }
//                             return l;
//                           }
//                           if (3 === this.p && this.f) return this.z(s);
//                           if (4 === this.p) {
//                             if (this.f) return n ? this.O(s) : this.r(s);
//                             if (n) return this.U(s);
//                           }
//                           return s;
//                         },
//                       }),
//                       f
//                     );
//                   })();
//                 function r(t, e) {
//                   return (t[e] << 8) | t[e + 1];
//                 }
//                 t.JpegDecoder = i;
//               })(),
//                 (t.encodeImage = function (e, i, r, n) {
//                   var a = {
//                     t256: [i],
//                     t257: [r],
//                     t258: [8, 8, 8, 8],
//                     t259: [1],
//                     t262: [2],
//                     t273: [1e3],
//                     t277: [4],
//                     t278: [r],
//                     t279: [i * r * 4],
//                     t282: [[72, 1]],
//                     t283: [[72, 1]],
//                     t284: [1],
//                     t286: [[0, 1]],
//                     t287: [[0, 1]],
//                     t296: [1],
//                     t305: ["Photopea (UTIF.js)"],
//                     t338: [1],
//                   };
//                   if (n) for (var s in n) a[s] = n[s];
//                   var o = new Uint8Array(t.encode([a])),
//                     l = new Uint8Array(e),
//                     h = new Uint8Array(1e3 + i * r * 4);
//                   for (s = 0; s < o.length; s++) h[s] = o[s];
//                   for (s = 0; s < l.length; s++) h[1e3 + s] = l[s];
//                   return h.buffer;
//                 }),
//                 (t.encode = function (e) {
//                   var i = new Uint8Array(2e4),
//                     r = 4,
//                     n = t._binBE;
//                   (i[0] = i[1] = 77), n.writeUshort(i, 2, 42);
//                   var a = 8;
//                   n.writeUint(i, r, a), (r += 4);
//                   for (var s = 0; s < e.length; s++) {
//                     var o = t._writeIFD(n, t._types.basic, i, a, e[s]);
//                     (a = o[1]),
//                       s < e.length - 1 &&
//                         (3 & a && (a += 4 - (3 & a)), n.writeUint(i, o[0], a));
//                   }
//                   return i.slice(0, a).buffer;
//                 }),
//                 (t.decode = function (e, r) {
//                   null == r && (r = { parseMN: !0, debug: !1 });
//                   var n = new Uint8Array(e),
//                     a = 0,
//                     s = t._binBE.readASCII(n, a, 2);
//                   a += 2;
//                   var o = "II" == s ? t._binLE : t._binBE;
//                   o.readUshort(n, a), (a += 2);
//                   var l = o.readUint(n, a);
//                   a += 4;
//                   for (var h = []; ; ) {
//                     var u = o.readUshort(n, l),
//                       f = o.readUshort(n, l + 4);
//                     if (0 != u && (f < 1 || 13 < f)) {
//                       i("error in TIFF");
//                       break;
//                     }
//                     if (
//                       (t._readIFD(o, n, l, h, 0, r),
//                       0 == (l = o.readUint(n, l + 2 + 12 * u)))
//                     )
//                       break;
//                   }
//                   return h;
//                 }),
//                 (t.decodeImage = function (e, r, n) {
//                   if (!r.data) {
//                     var a = new Uint8Array(e),
//                       s = t._binBE.readASCII(a, 0, 2);
//                     if (null != r.t256) {
//                       (r.isLE = "II" == s),
//                         (r.width = r.t256[0]),
//                         (r.height = r.t257[0]);
//                       var o = r.t259 ? r.t259[0] : 1,
//                         l = r.t266 ? r.t266[0] : 1;
//                       r.t284 &&
//                         2 == r.t284[0] &&
//                         i("PlanarConfiguration 2 should not be used!"),
//                         7 == o &&
//                           r.t258 &&
//                           r.t258.length > 3 &&
//                           (r.t258 = r.t258.slice(0, 3));
//                       var h = r.t277 ? r.t277[0] : 1,
//                         u = (r.t258 ? r.t258[0] : 1) * h;
//                       1 == o &&
//                         null != r.t279 &&
//                         r.t278 &&
//                         32803 == r.t262[0] &&
//                         (u = Math.round(
//                           (8 * r.t279[0]) / (r.width * r.t278[0])
//                         )),
//                         r.t50885 && 4 == r.t50885[0] && (u = 3 * r.t258[0]);
//                       var f = 8 * Math.ceil((r.width * u) / 8),
//                         c = r.t273;
//                       (null == c || r.t322) && (c = r.t324);
//                       var d = r.t279;
//                       1 == o && 1 == c.length && (d = [r.height * (f >>> 3)]),
//                         (null == d || r.t322) && (d = r.t325);
//                       var p = new Uint8Array(r.height * (f >>> 3)),
//                         m = 0;
//                       if (null != r.t322) {
//                         var g = r.t322[0],
//                           _ = r.t323[0],
//                           b = Math.floor((r.width + g - 1) / g),
//                           y = Math.floor((r.height + _ - 1) / _),
//                           v = new Uint8Array(0 | Math.ceil((g * _ * u) / 8));
//                         console.log("====", b, y);
//                         for (var w = 0; w < y; w++)
//                           for (var x = 0; x < b; x++) {
//                             var E = w * b + x;
//                             v.fill(0),
//                               t.decode._decompress(
//                                 r,
//                                 n,
//                                 a,
//                                 c[E],
//                                 d[E],
//                                 o,
//                                 v,
//                                 0,
//                                 l,
//                                 g,
//                                 _
//                               ),
//                               6 == o
//                                 ? (p = v)
//                                 : t._copyTile(
//                                     v,
//                                     0 | Math.ceil((g * u) / 8),
//                                     _,
//                                     p,
//                                     0 | Math.ceil((r.width * u) / 8),
//                                     r.height,
//                                     0 | Math.ceil((x * g * u) / 8),
//                                     w * _
//                                   );
//                           }
//                         m = 8 * p.length;
//                       } else {
//                         if (null == c) return;
//                         var k = r.t278 ? r.t278[0] : r.height;
//                         for (
//                           E = 0, k = Math.min(k, r.height);
//                           E < c.length;
//                           E++
//                         )
//                           t.decode._decompress(
//                             r,
//                             n,
//                             a,
//                             c[E],
//                             d[E],
//                             o,
//                             p,
//                             0 | Math.ceil(m / 8),
//                             l,
//                             r.width,
//                             k
//                           ),
//                             (m += f * k);
//                         m = Math.min(m, 8 * p.length);
//                       }
//                       r.data = new Uint8Array(
//                         p.buffer,
//                         0,
//                         0 | Math.ceil(m / 8)
//                       );
//                     }
//                   }
//                 }),
//                 (t.decode._decompress = function (
//                   r,
//                   n,
//                   a,
//                   s,
//                   o,
//                   l,
//                   h,
//                   u,
//                   f,
//                   c,
//                   d
//                 ) {
//                   if (
//                     (r.t271 &&
//                       "Panasonic" == r.t271[0] &&
//                       r.t45 &&
//                       6 == r.t45[0] &&
//                       (l = 34316),
//                     1 == l)
//                   )
//                     for (var p = 0; p < o; p++) h[u + p] = a[s + p];
//                   else if (2 == l) t.decode._decodeG2(a, s, o, h, u, c, f);
//                   else if (3 == l)
//                     t.decode._decodeG3(
//                       a,
//                       s,
//                       o,
//                       h,
//                       u,
//                       c,
//                       f,
//                       !!r.t292 && !(1 & ~r.t292[0])
//                     );
//                   else if (4 == l) t.decode._decodeG4(a, s, o, h, u, c, f);
//                   else if (5 == l) t.decode._decodeLZW(a, s, o, h, u, 8);
//                   else if (6 == l) t.decode._decodeOldJPEG(r, a, s, o, h, u);
//                   else if (7 == l || 34892 == l)
//                     t.decode._decodeNewJPEG(r, a, s, o, h, u);
//                   else if (8 == l || 32946 == l) {
//                     var m = new Uint8Array(a.buffer, s + 2, o - 6),
//                       g = e.inflateRaw(m);
//                     u + g.length <= h.length && h.set(g, u);
//                   } else
//                     9 == l
//                       ? t.decode._decodeVC5(a, s, o, h, u, r.t33422)
//                       : 32767 == l
//                       ? t.decode._decodeARW(r, a, s, o, h, u)
//                       : 32773 == l
//                       ? t.decode._decodePackBits(a, s, o, h, u)
//                       : 32809 == l
//                       ? t.decode._decodeThunder(a, s, o, h, u)
//                       : 34316 == l
//                       ? t.decode._decodePanasonic(r, a, s, o, h, u)
//                       : 34713 == l
//                       ? t.decode._decodeNikon(r, n, a, s, o, h, u)
//                       : 34676 == l
//                       ? t.decode._decodeLogLuv32(r, a, s, o, h, u)
//                       : i("Unknown compression", l);
//                   var _ = r.t258 ? Math.min(32, r.t258[0]) : 1,
//                     b = r.t277 ? r.t277[0] : 1,
//                     y = (_ * b) >>> 3,
//                     v = Math.ceil((_ * b * c) / 8);
//                   if (16 == _ && !r.isLE && null == r.t33422)
//                     for (var w = 0; w < d; w++)
//                       for (var x = u + w * v, E = 1; E < v; E += 2) {
//                         var k = h[x + E];
//                         (h[x + E] = h[x + E - 1]), (h[x + E - 1] = k);
//                       }
//                   if (r.t317 && 2 == r.t317[0])
//                     for (w = 0; w < d; w++) {
//                       var M = u + w * v;
//                       if (16 == _)
//                         for (p = y; p < v; p += 2) {
//                           var S =
//                             ((h[M + p + 1] << 8) | h[M + p]) +
//                             ((h[M + p - y + 1] << 8) | h[M + p - y]);
//                           (h[M + p] = 255 & S),
//                             (h[M + p + 1] = (S >>> 8) & 255);
//                         }
//                       else if (3 == b)
//                         for (p = 3; p < v; p += 3)
//                           (h[M + p] = (h[M + p] + h[M + p - 3]) & 255),
//                             (h[M + p + 1] =
//                               (h[M + p + 1] + h[M + p - 2]) & 255),
//                             (h[M + p + 2] =
//                               (h[M + p + 2] + h[M + p - 1]) & 255);
//                       else
//                         for (p = y; p < v; p++)
//                           h[M + p] = (h[M + p] + h[M + p - y]) & 255;
//                     }
//                 }),
//                 (t.decode._decodePanasonic = function (t, e, i, r, n, a) {
//                   var s,
//                     o,
//                     l,
//                     h,
//                     u,
//                     f,
//                     c,
//                     d,
//                     p = e.buffer,
//                     m = t.t2[0],
//                     g = t.t3[0],
//                     _ = t.t10[0],
//                     b = t.t45[0],
//                     y = 0,
//                     v = 0,
//                     w = 0,
//                     x = 0,
//                     E = 6 == b ? new Uint32Array(18) : new Uint8Array(16),
//                     k = [0, 0],
//                     M = [0, 0],
//                     S = 0,
//                     A = new Uint8Array(16384),
//                     I = new Uint16Array(n.buffer);
//                   function T(t) {
//                     if (0 == w) {
//                       var e = new Uint8Array(p, i + v + 8184, 8200),
//                         r = new Uint8Array(p, i + v, 8184);
//                       A.set(e), A.set(r, e.length), (v += 16384);
//                     }
//                     if (5 != b)
//                       return (
//                         ((A[(x = ((w = (w - t) & 131071) >> 3) ^ 16368)] |
//                           (A[x + 1] << 8)) >>
//                           (7 & w)) &
//                         ~(-1 << t)
//                       );
//                     for (s = 0; s < 16; s++) (E[s] = A[w++]), (w &= 16383);
//                   }
//                   function B(t) {
//                     return A[w + 15 - t];
//                   }
//                   function R() {
//                     (k[0] = 0), (k[1] = 0), (M[0] = 0), (M[1] = 0);
//                   }
//                   if (7 == b) throw b;
//                   if (6 == b) {
//                     var P = 12 == _,
//                       O = P
//                         ? function () {
//                             (E[0] = (B(0) << 4) | (B(1) >> 4)),
//                               (E[1] = 4095 & (((15 & B(1)) << 8) | B(2))),
//                               (E[2] = (B(3) >> 6) & 3),
//                               (E[3] = ((63 & B(3)) << 2) | (B(4) >> 6)),
//                               (E[4] = ((63 & B(4)) << 2) | (B(5) >> 6)),
//                               (E[5] = ((63 & B(5)) << 2) | (B(6) >> 6)),
//                               (E[6] = (B(6) >> 4) & 3),
//                               (E[7] = ((15 & B(6)) << 4) | (B(7) >> 4)),
//                               (E[8] = ((15 & B(7)) << 4) | (B(8) >> 4)),
//                               (E[9] = ((15 & B(8)) << 4) | (B(9) >> 4)),
//                               (E[10] = (B(9) >> 2) & 3),
//                               (E[11] = ((3 & B(9)) << 6) | (B(10) >> 2)),
//                               (E[12] = ((3 & B(10)) << 6) | (B(11) >> 2)),
//                               (E[13] = ((3 & B(11)) << 6) | (B(12) >> 2)),
//                               (E[14] = 3 & B(12)),
//                               (E[15] = B(13)),
//                               (E[16] = B(14)),
//                               (E[17] = B(15)),
//                               (w += 16),
//                               (x = 0);
//                           }
//                         : function () {
//                             (E[0] = (B(0) << 6) | (B(1) >> 2)),
//                               (E[1] =
//                                 16383 &
//                                 (((3 & B(1)) << 12) |
//                                   (B(2) << 4) |
//                                   (B(3) >> 4))),
//                               (E[2] = (B(3) >> 2) & 3),
//                               (E[3] = ((3 & B(3)) << 8) | B(4)),
//                               (E[4] = (B(5) << 2) | (B(6) >> 6)),
//                               (E[5] = ((63 & B(6)) << 4) | (B(7) >> 4)),
//                               (E[6] = (B(7) >> 2) & 3),
//                               (E[7] = ((3 & B(7)) << 8) | B(8)),
//                               (E[8] = ((B(9) << 2) & 1020) | (B(10) >> 6)),
//                               (E[9] = 1023 & ((B(10) << 4) | (B(11) >> 4))),
//                               (E[10] = (B(11) >> 2) & 3),
//                               (E[11] = ((3 & B(11)) << 8) | B(12)),
//                               (E[12] =
//                                 1023 & (((B(13) << 2) & 1020) | (B(14) >> 6))),
//                               (E[13] = 1023 & ((B(14) << 4) | (B(15) >> 4))),
//                               (w += 16),
//                               (x = 0);
//                           },
//                       C = P ? 14 : 11,
//                       z = P ? 128 : 512,
//                       L = P ? 2048 : 8192,
//                       U = P ? 16383 : 65535,
//                       D = P ? 4095 : 16383,
//                       N = m / C,
//                       j = 16 * N,
//                       F = P ? 18 : 14;
//                     for (f = 0; f < g - 15; f += 16) {
//                       var G = Math.min(16, g - f),
//                         Z = j * G;
//                       for (
//                         A = new Uint8Array(p, i + y, Z),
//                           w = 0,
//                           y += Z,
//                           d = 0,
//                           c = 0;
//                         d < G;
//                         d++, c = 0
//                       ) {
//                         S = (f + d) * m;
//                         for (var H = 0; H < N; H++)
//                           for (O(), R(), l = 0, u = 0, s = 0; s < C; s++) {
//                             if (((h = 1 & s), s % 3 == 2)) {
//                               var W = x < F ? E[x++] : 0;
//                               3 == W && (W = 4), (u = z << W), (l = 1 << W);
//                             }
//                             var q = x < F ? E[x++] : 0;
//                             k[h]
//                               ? ((q *= l),
//                                 u < L && M[h] > u && (q += M[h] - u),
//                                 (M[h] = q))
//                               : ((k[h] = q), q ? (M[h] = q) : (q = M[h])),
//                               (I[S + c++] =
//                                 q - 15 <= U
//                                   ? (q - 15) & U
//                                   : ((q + 2147483633) >> 31) & D);
//                           }
//                       }
//                     }
//                   } else if (5 == b) {
//                     var Y = 12 == _ ? 10 : 9;
//                     for (f = 0; f < g; f++)
//                       for (c = 0; c < m; c += Y)
//                         T(0),
//                           12 == _
//                             ? ((I[S++] = ((15 & E[1]) << 8) + E[0]),
//                               (I[S++] = 16 * E[2] + (E[1] >> 4)),
//                               (I[S++] = ((15 & E[4]) << 8) + E[3]),
//                               (I[S++] = 16 * E[5] + (E[4] >> 4)),
//                               (I[S++] = ((15 & E[7]) << 8) + E[6]),
//                               (I[S++] = 16 * E[8] + (E[7] >> 4)),
//                               (I[S++] = ((15 & E[10]) << 8) + E[9]),
//                               (I[S++] = 16 * E[11] + (E[10] >> 4)),
//                               (I[S++] = ((15 & E[13]) << 8) + E[12]),
//                               (I[S++] = 16 * E[14] + (E[13] >> 4)))
//                             : 14 == _ &&
//                               ((I[S++] = E[0] + ((63 & E[1]) << 8)),
//                               (I[S++] =
//                                 (E[1] >> 6) + 4 * E[2] + ((15 & E[3]) << 10)),
//                               (I[S++] =
//                                 (E[3] >> 4) + 16 * E[4] + ((3 & E[5]) << 12)),
//                               (I[S++] = ((252 & E[5]) >> 2) + (E[6] << 6)),
//                               (I[S++] = E[7] + ((63 & E[8]) << 8)),
//                               (I[S++] =
//                                 (E[8] >> 6) + 4 * E[9] + ((15 & E[10]) << 10)),
//                               (I[S++] =
//                                 (E[10] >> 4) +
//                                 16 * E[11] +
//                                 ((3 & E[12]) << 12)),
//                               (I[S++] = ((252 & E[12]) >> 2) + (E[13] << 6)),
//                               (I[S++] = E[14] + ((63 & E[15]) << 8)));
//                   } else {
//                     if (4 != b) throw b;
//                     for (f = 0; f < g; f++)
//                       for (c = 0; c < m; c++)
//                         (h = 1 & (s = c % 14)),
//                           0 == s && R(),
//                           s % 3 == 2 && (l = 4 >> (3 - T(2))),
//                           M[h]
//                             ? 0 != (o = T(8)) &&
//                               ((k[h] -= 128 << l),
//                               (k[h] < 0 || 4 == l) && (k[h] &= ~(-1 << l)),
//                               (k[h] += o << l))
//                             : ((M[h] = T(8)),
//                               (M[h] || s > 11) && (k[h] = (M[h] << 4) | T(4))),
//                           (I[S++] = k[1 & c]);
//                   }
//                 }),
//                 (t.decode._decodeVC5 = (function () {
//                   var e,
//                     i,
//                     r,
//                     n = [
//                       1, 0, 1, 0, 2, 2, 1, 1, 3, 7, 1, 2, 5, 25, 1, 3, 6, 48, 1,
//                       4, 6, 54, 1, 5, 7, 111, 1, 8, 7, 99, 1, 6, 7, 105, 12, 0,
//                       7, 107, 1, 7, 8, 209, 20, 0, 8, 212, 1, 9, 8, 220, 1, 10,
//                       9, 393, 1, 11, 9, 394, 32, 0, 9, 416, 1, 12, 9, 427, 1,
//                       13, 10, 887, 1, 18, 10, 784, 1, 14, 10, 790, 1, 15, 10,
//                       835, 60, 0, 10, 852, 1, 16, 10, 885, 1, 17, 11, 1571, 1,
//                       19, 11, 1668, 1, 20, 11, 1669, 100, 0, 11, 1707, 1, 21,
//                       11, 1772, 1, 22, 12, 3547, 1, 29, 12, 3164, 1, 24, 12,
//                       3166, 1, 25, 12, 3140, 1, 23, 12, 3413, 1, 26, 12, 3537,
//                       1, 27, 12, 3539, 1, 28, 13, 7093, 1, 35, 13, 6283, 1, 30,
//                       13, 6331, 1, 31, 13, 6335, 180, 0, 13, 6824, 1, 32, 13,
//                       7072, 1, 33, 13, 7077, 320, 0, 13, 7076, 1, 34, 14, 12565,
//                       1, 36, 14, 12661, 1, 37, 14, 12669, 1, 38, 14, 13651, 1,
//                       39, 14, 14184, 1, 40, 15, 28295, 1, 46, 15, 28371, 1, 47,
//                       15, 25320, 1, 42, 15, 25336, 1, 43, 15, 25128, 1, 41, 15,
//                       27300, 1, 44, 15, 28293, 1, 45, 16, 50259, 1, 48, 16,
//                       50643, 1, 49, 16, 50675, 1, 50, 16, 56740, 1, 53, 16,
//                       56584, 1, 51, 16, 56588, 1, 52, 17, 113483, 1, 61, 17,
//                       113482, 1, 60, 17, 101285, 1, 55, 17, 101349, 1, 56, 17,
//                       109205, 1, 57, 17, 109207, 1, 58, 17, 100516, 1, 54, 17,
//                       113171, 1, 59, 18, 202568, 1, 62, 18, 202696, 1, 63, 18,
//                       218408, 1, 64, 18, 218412, 1, 65, 18, 226340, 1, 66, 18,
//                       226356, 1, 67, 18, 226358, 1, 68, 19, 402068, 1, 69, 19,
//                       405138, 1, 70, 19, 405394, 1, 71, 19, 436818, 1, 72, 19,
//                       436826, 1, 73, 19, 452714, 1, 75, 19, 452718, 1, 76, 19,
//                       452682, 1, 74, 20, 804138, 1, 77, 20, 810279, 1, 78, 20,
//                       810790, 1, 79, 20, 873638, 1, 80, 20, 873654, 1, 81, 20,
//                       905366, 1, 82, 20, 905430, 1, 83, 20, 905438, 1, 84, 21,
//                       1608278, 1, 85, 21, 1620557, 1, 86, 21, 1621582, 1, 87,
//                       21, 1621583, 1, 88, 21, 1747310, 1, 89, 21, 1810734, 1,
//                       90, 21, 1810735, 1, 91, 21, 1810863, 1, 92, 21, 1810879,
//                       1, 93, 22, 3621725, 1, 99, 22, 3621757, 1, 100, 22,
//                       3241112, 1, 94, 22, 3494556, 1, 95, 22, 3494557, 1, 96,
//                       22, 3494622, 1, 97, 22, 3494623, 1, 98, 23, 6482227, 1,
//                       102, 23, 6433117, 1, 101, 23, 6989117, 1, 103, 23,
//                       6989119, 1, 105, 23, 6989118, 1, 104, 23, 7243449, 1, 106,
//                       23, 7243512, 1, 107, 24, 13978233, 1, 111, 24, 12964453,
//                       1, 109, 24, 12866232, 1, 108, 24, 14486897, 1, 113, 24,
//                       13978232, 1, 110, 24, 14486896, 1, 112, 24, 14487026, 1,
//                       114, 24, 14487027, 1, 115, 25, 25732598, 1, 225, 25,
//                       25732597, 1, 189, 25, 25732596, 1, 188, 25, 25732595, 1,
//                       203, 25, 25732594, 1, 202, 25, 25732593, 1, 197, 25,
//                       25732592, 1, 207, 25, 25732591, 1, 169, 25, 25732590, 1,
//                       223, 25, 25732589, 1, 159, 25, 25732522, 1, 235, 25,
//                       25732579, 1, 152, 25, 25732575, 1, 192, 25, 25732489, 1,
//                       179, 25, 25732573, 1, 201, 25, 25732472, 1, 172, 25,
//                       25732576, 1, 149, 25, 25732488, 1, 178, 25, 25732566, 1,
//                       120, 25, 25732571, 1, 219, 25, 25732577, 1, 150, 25,
//                       25732487, 1, 127, 25, 25732506, 1, 211, 25, 25732548, 1,
//                       125, 25, 25732588, 1, 158, 25, 25732486, 1, 247, 25,
//                       25732467, 1, 238, 25, 25732508, 1, 163, 25, 25732552, 1,
//                       228, 25, 25732603, 1, 183, 25, 25732513, 1, 217, 25,
//                       25732587, 1, 168, 25, 25732520, 1, 122, 25, 25732484, 1,
//                       128, 25, 25732562, 1, 249, 25, 25732505, 1, 187, 25,
//                       25732504, 1, 186, 25, 25732483, 1, 136, 25, 25928905, 1,
//                       181, 25, 25732560, 1, 255, 25, 25732500, 1, 230, 25,
//                       25732482, 1, 135, 25, 25732555, 1, 233, 25, 25732568, 1,
//                       222, 25, 25732583, 1, 145, 25, 25732481, 1, 134, 25,
//                       25732586, 1, 167, 25, 25732521, 1, 248, 25, 25732518, 1,
//                       209, 25, 25732480, 1, 243, 25, 25732512, 1, 216, 25,
//                       25732509, 1, 164, 25, 25732547, 1, 140, 25, 25732479, 1,
//                       157, 25, 25732544, 1, 239, 25, 25732574, 1, 191, 25,
//                       25732564, 1, 251, 25, 25732478, 1, 156, 25, 25732546, 1,
//                       139, 25, 25732498, 1, 242, 25, 25732557, 1, 133, 25,
//                       25732477, 1, 162, 25, 25732515, 1, 213, 25, 25732584, 1,
//                       165, 25, 25732514, 1, 212, 25, 25732476, 1, 227, 25,
//                       25732494, 1, 198, 25, 25732531, 1, 236, 25, 25732530, 1,
//                       234, 25, 25732529, 1, 117, 25, 25732528, 1, 215, 25,
//                       25732527, 1, 124, 25, 25732526, 1, 123, 25, 25732525, 1,
//                       254, 25, 25732524, 1, 253, 25, 25732523, 1, 148, 25,
//                       25732570, 1, 218, 25, 25732580, 1, 146, 25, 25732581, 1,
//                       147, 25, 25732569, 1, 224, 25, 25732533, 1, 143, 25,
//                       25732540, 1, 184, 25, 25732541, 1, 185, 25, 25732585, 1,
//                       166, 25, 25732556, 1, 132, 25, 25732485, 1, 129, 25,
//                       25732563, 1, 250, 25, 25732578, 1, 151, 25, 25732501, 1,
//                       119, 25, 25732502, 1, 193, 25, 25732536, 1, 176, 25,
//                       25732496, 1, 245, 25, 25732553, 1, 229, 25, 25732516, 1,
//                       206, 25, 25732582, 1, 144, 25, 25732517, 1, 208, 25,
//                       25732558, 1, 137, 25, 25732543, 1, 241, 25, 25732466, 1,
//                       237, 25, 25732507, 1, 190, 25, 25732542, 1, 240, 25,
//                       25732551, 1, 131, 25, 25732554, 1, 232, 25, 25732565, 1,
//                       252, 25, 25732475, 1, 171, 25, 25732493, 1, 205, 25,
//                       25732492, 1, 204, 25, 25732491, 1, 118, 25, 25732490, 1,
//                       214, 25, 25928904, 1, 180, 25, 25732549, 1, 126, 25,
//                       25732602, 1, 182, 25, 25732539, 1, 175, 25, 25732545, 1,
//                       141, 25, 25732559, 1, 138, 25, 25732537, 1, 177, 25,
//                       25732534, 1, 153, 25, 25732503, 1, 194, 25, 25732606, 1,
//                       160, 25, 25732567, 1, 121, 25, 25732538, 1, 174, 25,
//                       25732497, 1, 246, 25, 25732550, 1, 130, 25, 25732572, 1,
//                       200, 25, 25732474, 1, 170, 25, 25732511, 1, 221, 25,
//                       25732601, 1, 196, 25, 25732532, 1, 142, 25, 25732519, 1,
//                       210, 25, 25732495, 1, 199, 25, 25732605, 1, 155, 25,
//                       25732535, 1, 154, 25, 25732499, 1, 244, 25, 25732510, 1,
//                       220, 25, 25732600, 1, 195, 25, 25732607, 1, 161, 25,
//                       25732604, 1, 231, 25, 25732473, 1, 173, 25, 25732599, 1,
//                       226, 26, 51465122, 1, 116, 26, 51465123, 0, 1,
//                     ],
//                     a = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1];
//                   function s(t) {
//                     var e = t[1],
//                       i = (t[0][e >>> 3] >>> (7 - (7 & e))) & 1;
//                     return t[1]++, i;
//                   }
//                   function o(t, i) {
//                     if (null == e) {
//                       e = {};
//                       for (var r = 0; r < n.length; r += 4)
//                         e[n[r + 1]] = n.slice(r, r + 4);
//                     }
//                     for (var a = s(t), o = e[a]; null == o; )
//                       o = e[(a = (a << 1) | s(t))];
//                     var l = o[3];
//                     0 != l && (l = 0 == s(t) ? l : -l),
//                       (i[0] = o[2]),
//                       (i[1] = l);
//                   }
//                   function l(t, e) {
//                     for (var i = 0; i < e; i++) 1 & ~t || t++, (t >>>= 1);
//                     return t;
//                   }
//                   function h(t, e) {
//                     return t >> e;
//                   }
//                   function u(t, e, i, r, n, a) {
//                     (e[i] = h(
//                       h(11 * t[n] - 4 * t[n + a] + t[n + a + a] + 4, 3) + t[r],
//                       1
//                     )),
//                       (e[i + a] = h(
//                         h(5 * t[n] + 4 * t[n + a] - t[n + a + a] + 4, 3) - t[r],
//                         1
//                       ));
//                   }
//                   function f(t, e, i, r, n, a) {
//                     var s = t[n - a] - t[n + a],
//                       o = t[n],
//                       l = t[r];
//                     (e[i] = h(h(s + 4, 3) + o + l, 1)),
//                       (e[i + a] = h(h(4 - s, 3) + o - l, 1));
//                   }
//                   function c(t, e, i, r, n, a) {
//                     (e[i] = h(
//                       h(5 * t[n] + 4 * t[n - a] - t[n - a - a] + 4, 3) + t[r],
//                       1
//                     )),
//                       (e[i + a] = h(
//                         h(11 * t[n] - 4 * t[n - a] + t[n - a - a] + 4, 3) -
//                           t[r],
//                         1
//                       ));
//                   }
//                   function d(t) {
//                     return (t = r[(t = t < 0 ? 0 : t > 4095 ? 4095 : t)] >>> 2);
//                   }
//                   return function (e, n, s, h, p, m) {
//                     h = new Uint16Array(h.buffer);
//                     var g,
//                       _,
//                       b,
//                       y,
//                       v,
//                       w,
//                       x,
//                       E,
//                       k = Date.now(),
//                       M = t._binBE,
//                       S = n + s;
//                     n += 4;
//                     for (var A = 1 == m[0]; n < S; ) {
//                       var I = M.readShort(e, n),
//                         T = M.readUshort(e, n + 2);
//                       if (((n += 4), 12 == I)) L = T;
//                       else if (20 == I) g = T;
//                       else if (21 == I) _ = T;
//                       else if (48 == I) b = T;
//                       else if (53 == I) y = T;
//                       else if (35 == I);
//                       else if (62 == I) v = T;
//                       else if (101 == I);
//                       else if (109 == I) w = T;
//                       else if (84 == I);
//                       else if (106 == I);
//                       else if (107 == I);
//                       else if (108 == I);
//                       else if (102 == I);
//                       else if (104 == I) ti = T;
//                       else if (105 == I);
//                       else {
//                         var B = I < 0 ? -I : I,
//                           R = 65280 & B,
//                           P = 0;
//                         if (
//                           (24576 & B &&
//                             (P =
//                               8192 & B
//                                 ? (65535 & T) + ((255 & B) << 16)
//                                 : 65535 & T),
//                           24576 & ~B)
//                         ) {
//                           if (16388 == B) n += 4 * P;
//                           else if (8192 != R && 8448 != R && 9216 != R)
//                             throw B.toString(16);
//                         } else {
//                           if (null == x) {
//                             x = [];
//                             for (var O = 0; O < 4; O++)
//                               x[O] = new Int16Array((g >>> 1) * (_ >>> 1));
//                             for (
//                               E = new Int16Array((g >>> 1) * (_ >>> 1)),
//                                 i = new Int16Array(1024),
//                                 O = 0;
//                               O < 1024;
//                               O++
//                             ) {
//                               var C = O - 512,
//                                 z = Math.abs(C),
//                                 L =
//                                   Math.floor((768 * z * z * z) / 16581375) + z;
//                               i[O] = Math.sign(C) * L;
//                             }
//                             for (
//                               O = 0, r = new Uint16Array(4096);
//                               O < 4096;
//                               O++
//                             ) {
//                               var U =
//                                 (65535 * (Math.pow(113, O / 4095) - 1)) / 112;
//                               r[O] = Math.min(U, 65535);
//                             }
//                           }
//                           var D = x[v],
//                             N = l(g, 1 + a[b]),
//                             j = l(_, 1 + a[b]);
//                           if (0 == b)
//                             for (var F = 0; F < j; F++)
//                               for (var G = 0; G < N; G++) {
//                                 var Z = n + 2 * (F * N + G);
//                                 D[F * (g >>> 1) + G] = (e[Z] << 8) | e[Z + 1];
//                               }
//                           else {
//                             var H = [e, 8 * n],
//                               W = [],
//                               q = 0,
//                               Y = N * j,
//                               V = [0, 0],
//                               $ = 0;
//                             for (T = 0; q < Y; )
//                               for (o(H, V), $ = V[0], T = V[1]; $ > 0; )
//                                 (W[q++] = T), $--;
//                             var K = (b - 1) % 3,
//                               X = 1 != K ? N : 0,
//                               J = 0 != K ? j : 0;
//                             for (F = 0; F < j; F++) {
//                               var Q = (F + J) * (g >>> 1) + X,
//                                 tt = F * N;
//                               for (G = 0; G < N; G++)
//                                 D[Q + G] = i[W[tt + G] + 512] * y;
//                             }
//                             if (2 == K) {
//                               var te,
//                                 ti = g >>> 1,
//                                 tr = 2 * N,
//                                 tn = 2 * j;
//                               for (F = 0; F < j; F++)
//                                 for (G = 0; G < tr; G++) {
//                                   O = 2 * F * ti + G;
//                                   var ta = j * ti + (te = F * ti + G);
//                                   0 == F
//                                     ? u(D, E, O, ta, te, ti)
//                                     : F == j - 1
//                                     ? c(D, E, O, ta, te, ti)
//                                     : f(D, E, O, ta, te, ti);
//                                 }
//                               var ts = D;
//                               for (D = E, E = ts, F = 0; F < tn; F++)
//                                 for (G = 0; G < N; G++)
//                                   (O = F * ti + 2 * G),
//                                     (ta = N + (te = F * ti + G)),
//                                     0 == G
//                                       ? u(D, E, O, ta, te, 1)
//                                       : G == N - 1
//                                       ? c(D, E, O, ta, te, 1)
//                                       : f(D, E, O, ta, te, 1);
//                               (ts = D), (D = E), (E = ts);
//                               for (
//                                 var to = [], tl = 2 - ~~((b - 1) / 3), th = 0;
//                                 th < 3;
//                                 th++
//                               )
//                                 to[th] = (w >> (14 - 2 * th)) & 3;
//                               var tu = to[tl];
//                               if (0 != tu)
//                                 for (F = 0; F < tn; F++)
//                                   for (G = 0; G < tr; G++)
//                                     D[(O = F * ti + G)] = D[O] << tu;
//                             }
//                           }
//                           if (9 == b && 3 == v) {
//                             var tf = x[0],
//                               tc = x[1],
//                               td = x[2],
//                               tp = x[3];
//                             for (F = 0; F < _; F += 2)
//                               for (G = 0; G < g; G += 2) {
//                                 var tm = F * g + G,
//                                   tg =
//                                     tf[(Z = (F >>> 1) * (g >>> 1) + (G >>> 1))],
//                                   t_ = tc[Z] - 2048,
//                                   tb = td[Z] - 2048,
//                                   ty = tp[Z] - 2048,
//                                   tv = (t_ << 1) + tg,
//                                   tw = (tb << 1) + tg,
//                                   tx = tg + ty,
//                                   tE = tg - ty;
//                                 A
//                                   ? ((h[tm] = d(tx)),
//                                     (h[tm + 1] = d(tw)),
//                                     (h[tm + g] = d(tv)),
//                                     (h[tm + g + 1] = d(tE)))
//                                   : ((h[tm] = d(tv)),
//                                     (h[tm + 1] = d(tx)),
//                                     (h[tm + g] = d(tE)),
//                                     (h[tm + g + 1] = d(tw)));
//                               }
//                           }
//                           n += 4 * P;
//                         }
//                       }
//                     }
//                     console.log(Date.now() - k);
//                   };
//                 })()),
//                 (t.decode._decodeLogLuv32 = function (t, e, i, r, n, a) {
//                   for (
//                     var s = t.width, o = 4 * s, l = 0, h = new Uint8Array(o);
//                     l < r;

//                   ) {
//                     for (var u = 0; u < o; ) {
//                       var f = e[i + l];
//                       if ((l++, f < 128)) {
//                         for (var c = 0; c < f; c++) h[u + c] = e[i + l + c];
//                         (u += f), (l += f);
//                       } else {
//                         for (f -= 126, c = 0; c < f; c++) h[u + c] = e[i + l];
//                         (u += f), l++;
//                       }
//                     }
//                     for (var d = 0; d < s; d++)
//                       (n[a + 0] = h[d]),
//                         (n[a + 1] = h[d + s]),
//                         (n[a + 2] = h[d + 2 * s]),
//                         (n[a + 4] = h[d + 3 * s]),
//                         (a += 6);
//                   }
//                 }),
//                 (t.decode._ljpeg_diff = function (e, i, r) {
//                   var n,
//                     a,
//                     s = t.decode._getbithuff;
//                   return (
//                     (n = s(e, i, r[0], r)),
//                     (a = s(e, i, n, 0)) & (1 << (n - 1)) || (a -= (1 << n) - 1),
//                     a
//                   );
//                 }),
//                 (t.decode._decodeARW = function (e, i, r, n, a, s) {
//                   var o = e.t256[0],
//                     l = e.t257[0],
//                     h = e.t258[0],
//                     u = e.isLE ? t._binLE : t._binBE;
//                   if (o * l == n || o * l * 1.5 == n) {
//                     if (o * l * 1.5 != n) {
//                       var f,
//                         c,
//                         d,
//                         p,
//                         m,
//                         g,
//                         _,
//                         b,
//                         y = new Uint16Array(16),
//                         v = new Uint8Array(o + 1);
//                       for (I = 0; I < l; I++) {
//                         for (var w = 0; w < o; w++) v[w] = i[r++];
//                         for (b = 0, A = 0; A < o - 30; b += 16) {
//                           for (
//                             c = 2047 & (f = u.readUint(v, b)),
//                               d = 2047 & (f >>> 11),
//                               p = 15 & (f >>> 22),
//                               m = 15 & (f >>> 26),
//                               g = 0;
//                             g < 4 && 128 << g <= c - d;
//                             g++
//                           );
//                           for (_ = 30, x = 0; x < 16; x++)
//                             x == p
//                               ? (y[x] = c)
//                               : x == m
//                               ? (y[x] = d)
//                               : ((y[x] =
//                                   (((u.readUshort(v, b + (_ >> 3)) >>>
//                                     (7 & _)) &
//                                     127) <<
//                                     g) +
//                                   d),
//                                 y[x] > 2047 && (y[x] = 2047),
//                                 (_ += 7));
//                           for (x = 0; x < 16; x++, A += 2)
//                             (L = y[x] << 1),
//                               t.decode._putsF(
//                                 a,
//                                 (I * o + A) * h,
//                                 L << (16 - h)
//                               );
//                           A -= 1 & A ? 1 : 31;
//                         }
//                       }
//                     } else
//                       for (var x = 0; x < n; x += 3) {
//                         var E = i[r + x + 0],
//                           k = i[r + x + 1],
//                           M = i[r + x + 2];
//                         (a[s + x] = (k << 4) | (E >>> 4)),
//                           (a[s + x + 1] = (E << 4) | (M >>> 4)),
//                           (a[s + x + 2] = (M << 4) | (k >>> 4));
//                       }
//                   } else {
//                     l += 8;
//                     var S,
//                       A,
//                       I,
//                       T = [r, 0, 0, 0],
//                       B = new Uint16Array(32770),
//                       R = [
//                         3857, 3856, 3599, 3342, 3085, 2828, 2571, 2314, 2057,
//                         1800, 1543, 1286, 1029, 772, 771, 768, 514, 513,
//                       ],
//                       P = 0,
//                       O = t.decode._ljpeg_diff;
//                     for (B[0] = 15, S = x = 0; x < 18; x++)
//                       for (var C = 32768 >>> (R[x] >>> 8), z = 0; z < C; z++)
//                         B[++S] = R[x];
//                     for (A = o; A--; )
//                       for (I = 0; I < l + 1; I += 2)
//                         if ((I == l && (I = 1), (P += O(i, T, B)), I < l)) {
//                           var L = 4095 & P;
//                           t.decode._putsF(a, (I * o + A) * h, L << (16 - h));
//                         }
//                   }
//                 }),
//                 (t.decode._decodeNikon = function (e, i, r, n, a, s, o) {
//                   var l = [
//                       [
//                         0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 5, 4,
//                         3, 6, 2, 7, 1, 0, 8, 9, 11, 10, 12,
//                       ],
//                       [
//                         0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 57,
//                         90, 56, 39, 22, 5, 4, 3, 2, 1, 0, 11, 12, 12,
//                       ],
//                       [
//                         0, 0, 1, 4, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4,
//                         6, 3, 7, 2, 8, 1, 9, 0, 10, 11, 12,
//                       ],
//                       [
//                         0, 0, 1, 4, 3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 5, 6,
//                         4, 7, 8, 3, 9, 2, 1, 0, 10, 11, 12, 13, 14,
//                       ],
//                       [
//                         0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 8,
//                         92, 75, 58, 41, 7, 6, 5, 4, 3, 2, 1, 0, 13, 14,
//                       ],
//                       [
//                         0, 0, 1, 4, 2, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6,
//                         8, 5, 9, 4, 10, 3, 11, 12, 2, 0, 1, 13, 14,
//                       ],
//                     ],
//                     h = e.t256[0],
//                     u = e.t257[0],
//                     f = e.t258[0],
//                     c = 0,
//                     d = 0,
//                     p = t.decode._make_decoder,
//                     m = t.decode._getbithuff,
//                     g = i[0].exifIFD.makerNote,
//                     _ = g.t150 ? g.t150 : g.t140,
//                     b = 0,
//                     y = _[b++],
//                     v = _[b++];
//                   (73 != y && 88 != v) || (b += 2110),
//                     70 == y && (c = 2),
//                     14 == f && (c += 3);
//                   for (
//                     var w = [
//                         [0, 0],
//                         [0, 0],
//                       ],
//                       x = e.isLE ? t._binLE : t._binBE,
//                       E = 0;
//                     E < 2;
//                     E++
//                   )
//                     for (var k = 0; k < 2; k++)
//                       (w[E][k] = x.readShort(_, b)), (b += 2);
//                   var M,
//                     S,
//                     A,
//                     I,
//                     T,
//                     B = (1 << f) & 32767,
//                     R = 0,
//                     P = x.readShort(_, b);
//                   (b += 2),
//                     P > 1 && (R = Math.floor(B / (P - 1))),
//                     68 == y && 32 == v && R > 0 && (d = x.readShort(_, 562));
//                   var O = [0, 0],
//                     C = p(l[c]),
//                     z = [n, 0, 0, 0];
//                   for (M = 0; M < u; M++)
//                     for (d && M == d && (C = p(l[c + 1])), S = 0; S < h; S++) {
//                       (E = m(r, z, C[0], C)),
//                         (T =
//                           ((1 +
//                             (m(r, z, (A = 15 & E) - (I = E >>> 4), 0) << 1)) <<
//                             I) >>>
//                           1) &
//                           (1 << (A - 1)) || (T -= (1 << A) - (0 == I ? 1 : 0)),
//                         S < 2 ? (O[S] = w[1 & M][S] += T) : (O[1 & S] += T);
//                       var L = Math.min(Math.max(O[1 & S], 0), (1 << f) - 1),
//                         U = (M * h + S) * f;
//                       t.decode._putsF(s, U, L << (16 - f));
//                     }
//                 }),
//                 (t.decode._putsF = function (t, e, i) {
//                   i <<= 8 - (7 & e);
//                   var r = e >>> 3;
//                   (t[r] |= i >>> 16), (t[r + 1] |= i >>> 8), (t[r + 2] |= i);
//                 }),
//                 (t.decode._getbithuff = function (e, i, r, n) {
//                   t.decode._get_byte;
//                   var a,
//                     s = i[0],
//                     o = i[1],
//                     l = i[2],
//                     h = i[3];
//                   if (0 == r || l < 0) return 0;
//                   for (; !h && l < r && -1 != (a = e[s++]) && ((h = 0), 1); )
//                     (o = (o << 8) + a), (l += 8);
//                   if (
//                     ((a = (o << (32 - l)) >>> (32 - r)),
//                     n
//                       ? ((l -= n[a + 1] >>> 8), (a = 255 & n[a + 1]))
//                       : (l -= r),
//                     l < 0)
//                   )
//                     throw "e";
//                   return (i[0] = s), (i[1] = o), (i[2] = l), (i[3] = h), a;
//                 }),
//                 (t.decode._make_decoder = function (t) {
//                   var e,
//                     i,
//                     r,
//                     n,
//                     a,
//                     s = [];
//                   for (e = 16; 0 != e && !t[e]; e--);
//                   var o = 17;
//                   for (s[0] = e, r = i = 1; i <= e; i++)
//                     for (n = 0; n < t[i]; n++, ++o)
//                       for (a = 0; a < 1 << (e - i); a++)
//                         r <= 1 << e && (s[r++] = (i << 8) | t[o]);
//                   return s;
//                 }),
//                 (t.decode._decodeNewJPEG = function (e, i, r, n, a, s) {
//                   n = Math.min(n, i.length - r);
//                   var o = e.t347,
//                     l = o ? o.length : 0,
//                     h = new Uint8Array(l + n);
//                   if (o) {
//                     for (
//                       var u = 0, f = 0;
//                       f < l - 1 && (255 != o[f] || 217 != o[f + 1]);
//                       f++
//                     )
//                       h[u++] = o[f];
//                     var c = i[r],
//                       d = i[r + 1];
//                     for (
//                       (255 == c && 216 == d) || ((h[u++] = c), (h[u++] = d)),
//                         f = 2;
//                       f < n;
//                       f++
//                     )
//                       h[u++] = i[r + f];
//                   } else for (f = 0; f < n; f++) h[f] = i[r + f];
//                   if (
//                     32803 == e.t262[0] ||
//                     (7 == e.t259[0] && 34892 == e.t262[0])
//                   ) {
//                     var p = e.t258[0],
//                       m = t.LosslessJpegDecode(h),
//                       g = m.length;
//                     if (16 == p) {
//                       if (e.isLE)
//                         for (f = 0; f < g; f++)
//                           (a[s + (f << 1)] = 255 & m[f]),
//                             (a[s + (f << 1) + 1] = m[f] >>> 8);
//                       else
//                         for (f = 0; f < g; f++)
//                           (a[s + (f << 1)] = m[f] >>> 8),
//                             (a[s + (f << 1) + 1] = 255 & m[f]);
//                     } else if (14 == p || 12 == p || 10 == p) {
//                       var _ = 16 - p;
//                       for (f = 0; f < g; f++)
//                         t.decode._putsF(a, f * p, m[f] << _);
//                     } else {
//                       if (8 != p) throw Error("unsupported bit depth " + p);
//                       for (f = 0; f < g; f++) a[s + f] = m[f];
//                     }
//                   } else {
//                     var b = new t.JpegDecoder();
//                     b.parse(h);
//                     var y = b.getData({
//                       width: b.width,
//                       height: b.height,
//                       forceRGB: !0,
//                       isSourcePDF: !1,
//                     });
//                     for (f = 0; f < y.length; f++) a[s + f] = y[f];
//                   }
//                   6 == e.t262[0] && (e.t262[0] = 2);
//                 }),
//                 (t.decode._decodeOldJPEGInit = function (t, e, r, n) {
//                   var a,
//                     s,
//                     o,
//                     l,
//                     h,
//                     u = 216,
//                     f = 0,
//                     c = 0,
//                     d = !1,
//                     p = t.t513,
//                     m = p ? p[0] : 0,
//                     g = t.t514,
//                     _ = g ? g[0] : 0,
//                     b = t.t324 || t.t273 || p,
//                     y = t.t530,
//                     v = 0,
//                     w = 0,
//                     x = t.t277 ? t.t277[0] : 1,
//                     E = t.t515;
//                   if ((b && ((c = b[0]), (d = b.length > 1)), !d)) {
//                     if (255 == e[r] && e[r + 1] == u) return { jpegOffset: r };
//                     if (
//                       null != p &&
//                       (255 == e[r + m] && e[r + m + 1] == u
//                         ? (f = r + m)
//                         : i("JPEGInterchangeFormat does not point to SOI"),
//                       null == g
//                         ? i("JPEGInterchangeFormatLength field is missing")
//                         : (m >= c || m + _ <= c) &&
//                           i(
//                             "JPEGInterchangeFormatLength field value is invalid"
//                           ),
//                       null != f)
//                     )
//                       return { jpegOffset: f };
//                   }
//                   if (
//                     (null != y && ((v = y[0]), (w = y[1])),
//                     null != p && null != g)
//                   ) {
//                     if (_ >= 2 && m + _ <= c) {
//                       for (
//                         a = new Uint8Array(
//                           255 == e[r + m + _ - 2] && e[r + m + _ - 1] == u
//                             ? _ - 2
//                             : _
//                         ),
//                           o = 0;
//                         o < a.length;
//                         o++
//                       )
//                         a[o] = e[r + m + o];
//                       i(
//                         "Incorrect JPEG interchange format: using JPEGInterchangeFormat offset to derive tables"
//                       );
//                     } else
//                       i(
//                         "JPEGInterchangeFormat+JPEGInterchangeFormatLength > offset to first strip or tile"
//                       );
//                   }
//                   if (null == a) {
//                     var k = 0,
//                       M = [];
//                     (M[k++] = 255), (M[k++] = u);
//                     var S = t.t519;
//                     if (null == S) throw Error("JPEGQTables tag is missing");
//                     for (o = 0; o < S.length; o++)
//                       for (
//                         M[k++] = 255,
//                           M[k++] = 219,
//                           M[k++] = 0,
//                           M[k++] = 67,
//                           M[k++] = o,
//                           l = 0;
//                         l < 64;
//                         l++
//                       )
//                         M[k++] = e[r + S[o] + l];
//                     for (h = 0; h < 2; h++) {
//                       var A = t[0 == h ? "t520" : "t521"];
//                       if (null == A)
//                         throw Error(
//                           (0 == h ? "JPEGDCTables" : "JPEGACTables") +
//                             " tag is missing"
//                         );
//                       for (o = 0; o < A.length; o++) {
//                         (M[k++] = 255), (M[k++] = 196);
//                         var I = 19;
//                         for (l = 0; l < 16; l++) I += e[r + A[o] + l];
//                         for (
//                           M[k++] = I >>> 8,
//                             M[k++] = 255 & I,
//                             M[k++] = o | (h << 4),
//                             l = 0;
//                           l < 16;
//                           l++
//                         )
//                           M[k++] = e[r + A[o] + l];
//                         for (l = 0; l < I; l++) M[k++] = e[r + A[o] + 16 + l];
//                       }
//                     }
//                     if (
//                       ((M[k++] = 255),
//                       (M[k++] = 192),
//                       (M[k++] = 0),
//                       (M[k++] = 8 + 3 * x),
//                       (M[k++] = 8),
//                       (M[k++] = (t.height >>> 8) & 255),
//                       (M[k++] = 255 & t.height),
//                       (M[k++] = (t.width >>> 8) & 255),
//                       (M[k++] = 255 & t.width),
//                       (M[k++] = x),
//                       1 == x)
//                     )
//                       (M[k++] = 1), (M[k++] = 17), (M[k++] = 0);
//                     else
//                       for (o = 0; o < 3; o++)
//                         (M[k++] = o + 1),
//                           (M[k++] = 0 != o ? 17 : ((15 & v) << 4) | (15 & w)),
//                           (M[k++] = o);
//                     null != E &&
//                       0 != E[0] &&
//                       ((M[k++] = 255),
//                       (M[k++] = 221),
//                       (M[k++] = 0),
//                       (M[k++] = 4),
//                       (M[k++] = (E[0] >>> 8) & 255),
//                       (M[k++] = 255 & E[0])),
//                       (a = new Uint8Array(M));
//                   }
//                   var T = -1;
//                   for (o = 0; o < a.length - 1; ) {
//                     if (255 == a[o] && 192 == a[o + 1]) {
//                       T = o;
//                       break;
//                     }
//                     o++;
//                   }
//                   if (-1 == T) {
//                     var B = new Uint8Array(a.length + 10 + 3 * x);
//                     B.set(a);
//                     var R = a.length;
//                     if (
//                       ((T = a.length),
//                       ((a = B)[R++] = 255),
//                       (a[R++] = 192),
//                       (a[R++] = 0),
//                       (a[R++] = 8 + 3 * x),
//                       (a[R++] = 8),
//                       (a[R++] = (t.height >>> 8) & 255),
//                       (a[R++] = 255 & t.height),
//                       (a[R++] = (t.width >>> 8) & 255),
//                       (a[R++] = 255 & t.width),
//                       (a[R++] = x),
//                       1 == x)
//                     )
//                       (a[R++] = 1), (a[R++] = 17), (a[R++] = 0);
//                     else
//                       for (o = 0; o < 3; o++)
//                         (a[R++] = o + 1),
//                           (a[R++] = 0 != o ? 17 : ((15 & v) << 4) | (15 & w)),
//                           (a[R++] = o);
//                   }
//                   if (255 == e[c] && 218 == e[c + 1]) {
//                     var P = (e[c + 2] << 8) | e[c + 3];
//                     for (
//                       (s = new Uint8Array(P + 2))[0] = e[c],
//                         s[1] = e[c + 1],
//                         s[2] = e[c + 2],
//                         s[3] = e[c + 3],
//                         o = 0;
//                       o < P - 2;
//                       o++
//                     )
//                       s[o + 4] = e[c + o + 4];
//                   } else {
//                     var O = 0;
//                     if (
//                       (((s = new Uint8Array(8 + 2 * x))[O++] = 255),
//                       (s[O++] = 218),
//                       (s[O++] = 0),
//                       (s[O++] = 6 + 2 * x),
//                       (s[O++] = x),
//                       1 == x)
//                     )
//                       (s[O++] = 1), (s[O++] = 0);
//                     else
//                       for (o = 0; o < 3; o++)
//                         (s[O++] = o + 1), (s[O++] = (o << 4) | o);
//                     (s[O++] = 0), (s[O++] = 63), (s[O++] = 0);
//                   }
//                   return {
//                     jpegOffset: r,
//                     tables: a,
//                     sosMarker: s,
//                     sofPosition: T,
//                   };
//                 }),
//                 (t.decode._decodeOldJPEG = function (e, i, r, n, a, s) {
//                   var o,
//                     l,
//                     h,
//                     u,
//                     f = t.decode._decodeOldJPEGInit(e, i, r, n);
//                   if (null != f.jpegOffset)
//                     for (
//                       h = new Uint8Array((o = r + n - f.jpegOffset)), p = 0;
//                       p < o;
//                       p++
//                     )
//                       h[p] = i[f.jpegOffset + p];
//                   else {
//                     for (
//                       (h = new Uint8Array(
//                         (l = f.tables.length) + f.sosMarker.length + n + 2
//                       )).set(f.tables),
//                         u = l,
//                         h[f.sofPosition + 5] = (e.height >>> 8) & 255,
//                         h[f.sofPosition + 6] = 255 & e.height,
//                         h[f.sofPosition + 7] = (e.width >>> 8) & 255,
//                         h[f.sofPosition + 8] = 255 & e.width,
//                         (255 == i[r] && i[r + 1] == SOS) ||
//                           (h.set(f.sosMarker, u), (u += sosMarker.length)),
//                         p = 0;
//                       p < n;
//                       p++
//                     )
//                       h[u++] = i[r + p];
//                     (h[u++] = 255), (h[u++] = EOI);
//                   }
//                   var c = new t.JpegDecoder();
//                   c.parse(h);
//                   for (
//                     var d = c.getData({
//                         width: c.width,
//                         height: c.height,
//                         forceRGB: !0,
//                         isSourcePDF: !1,
//                       }),
//                       p = 0;
//                     p < d.length;
//                     p++
//                   )
//                     a[s + p] = d[p];
//                   e.t262 && 6 == e.t262[0] && (e.t262[0] = 2);
//                 }),
//                 (t.decode._decodePackBits = function (t, e, i, r, n) {
//                   for (
//                     var a = new Int8Array(t.buffer),
//                       s = new Int8Array(r.buffer),
//                       o = e + i;
//                     e < o;

//                   ) {
//                     var l = a[e];
//                     if ((e++, l >= 0 && l < 128))
//                       for (var h = 0; h < l + 1; h++) (s[n] = a[e]), n++, e++;
//                     if (l >= -127 && l < 0) {
//                       for (h = 0; h < 1 - l; h++) (s[n] = a[e]), n++;
//                       e++;
//                     }
//                   }
//                   return n;
//                 }),
//                 (t.decode._decodeThunder = function (t, e, i, r, n) {
//                   for (
//                     var a = [0, 1, 0, -1],
//                       s = [0, 1, 2, 3, 0, -3, -2, -1],
//                       o = e + i,
//                       l = 2 * n,
//                       h = 0;
//                     e < o;

//                   ) {
//                     var u,
//                       f = t[e],
//                       c = f >>> 6,
//                       d = 63 & f;
//                     if (
//                       (e++,
//                       3 == c &&
//                         ((h = 15 & d),
//                         (r[l >>> 1] |= h << (4 * ((1 - l) & 1))),
//                         l++),
//                       0 == c)
//                     )
//                       for (var p = 0; p < d; p++)
//                         (r[l >>> 1] |= h << (4 * ((1 - l) & 1))), l++;
//                     if (2 == c)
//                       for (p = 0; p < 2; p++)
//                         4 != (u = (d >>> (3 * (1 - p))) & 7) &&
//                           ((h += s[u]),
//                           (r[l >>> 1] |= h << (4 * ((1 - l) & 1))),
//                           l++);
//                     if (1 == c)
//                       for (p = 0; p < 3; p++)
//                         2 != (u = (d >>> (2 * (2 - p))) & 3) &&
//                           ((h += a[u]),
//                           (r[l >>> 1] |= h << (4 * ((1 - l) & 1))),
//                           l++);
//                   }
//                 }),
//                 (t.decode._dmap = {
//                   1: 0,
//                   "011": 1,
//                   "000011": 2,
//                   "0000011": 3,
//                   "010": -1,
//                   "000010": -2,
//                   "0000010": -3,
//                 }),
//                 (t.decode._lens = (function () {
//                   var t = function (t, e, i, r) {
//                       for (var n = 0; n < e.length; n++) t[e[n]] = i + n * r;
//                     },
//                     e =
//                       "00110101,000111,0111,1000,1011,1100,1110,1111,10011,10100,00111,01000,001000,000011,110100,110101,101010,101011,0100111,0001100,0001000,0010111,0000011,0000100,0101000,0101011,0010011,0100100,0011000,00000010,00000011,00011010,00011011,00010010,00010011,00010100,00010101,00010110,00010111,00101000,00101001,00101010,00101011,00101100,00101101,00000100,00000101,00001010,00001011,01010010,01010011,01010100,01010101,00100100,00100101,01011000,01011001,01011010,01011011,01001010,01001011,00110010,00110011,00110100",
//                     i =
//                       "0000110111,010,11,10,011,0011,0010,00011,000101,000100,0000100,0000101,0000111,00000100,00000111,000011000,0000010111,0000011000,0000001000,00001100111,00001101000,00001101100,00000110111,00000101000,00000010111,00000011000,000011001010,000011001011,000011001100,000011001101,000001101000,000001101001,000001101010,000001101011,000011010010,000011010011,000011010100,000011010101,000011010110,000011010111,000001101100,000001101101,000011011010,000011011011,000001010100,000001010101,000001010110,000001010111,000001100100,000001100101,000001010010,000001010011,000000100100,000000110111,000000111000,000000100111,000000101000,000001011000,000001011001,000000101011,000000101100,000001011010,000001100110,000001100111",
//                     r =
//                       "11011,10010,010111,0110111,00110110,00110111,01100100,01100101,01101000,01100111,011001100,011001101,011010010,011010011,011010100,011010101,011010110,011010111,011011000,011011001,011011010,011011011,010011000,010011001,010011010,011000,010011011",
//                     n =
//                       "0000001111,000011001000,000011001001,000001011011,000000110011,000000110100,000000110101,0000001101100,0000001101101,0000001001010,0000001001011,0000001001100,0000001001101,0000001110010,0000001110011,0000001110100,0000001110101,0000001110110,0000001110111,0000001010010,0000001010011,0000001010100,0000001010101,0000001011010,0000001011011,0000001100100,0000001100101",
//                     a =
//                       "00000001000,00000001100,00000001101,000000010010,000000010011,000000010100,000000010101,000000010110,000000010111,000000011100,000000011101,000000011110,000000011111";
//                   (e = e.split(",")),
//                     (i = i.split(",")),
//                     (r = r.split(",")),
//                     (n = n.split(",")),
//                     (a = a.split(","));
//                   var s = {},
//                     o = {};
//                   return (
//                     t(s, e, 0, 1),
//                     t(s, r, 64, 64),
//                     t(s, a, 1792, 64),
//                     t(o, i, 0, 1),
//                     t(o, n, 64, 64),
//                     t(o, a, 1792, 64),
//                     [s, o]
//                   );
//                 })()),
//                 (t.decode._decodeG4 = function (e, i, r, n, a, s, o) {
//                   for (
//                     var l = t.decode,
//                       h = i << 3,
//                       u = 0,
//                       f = "",
//                       c = [],
//                       d = [],
//                       p = 0;
//                     p < s;
//                     p++
//                   )
//                     d.push(0);
//                   d = l._makeDiff(d);
//                   for (
//                     var m = 0,
//                       g = 0,
//                       _ = 0,
//                       b = 0,
//                       y = 0,
//                       v = 0,
//                       w = "",
//                       x = 0,
//                       E = 8 * Math.ceil(s / 8);
//                     h >>> 3 < i + r;

//                   ) {
//                     (_ = l._findDiff(d, m + (0 == m ? 0 : 1), 1 - y)),
//                       (b = l._findDiff(d, _, y));
//                     var k = 0;
//                     if (
//                       (1 == o && (k = (e[h >>> 3] >>> (7 - (7 & h))) & 1),
//                       2 == o && (k = (e[h >>> 3] >>> (7 & h)) & 1),
//                       h++,
//                       (f += k),
//                       "H" == w)
//                     ) {
//                       if (null != l._lens[y][f]) {
//                         var M = l._lens[y][f];
//                         (f = ""),
//                           (u += M),
//                           M < 64 &&
//                             (l._addNtimes(c, u, y),
//                             (m += u),
//                             (y = 1 - y),
//                             (u = 0),
//                             0 == --x && (w = ""));
//                       }
//                     } else
//                       "0001" == f &&
//                         ((f = ""), l._addNtimes(c, b - m, y), (m = b)),
//                         "001" == f && ((f = ""), (w = "H"), (x = 2)),
//                         null != l._dmap[f] &&
//                           ((g = _ + l._dmap[f]),
//                           l._addNtimes(c, g - m, y),
//                           (m = g),
//                           (f = ""),
//                           (y = 1 - y));
//                     c.length == s &&
//                       "" == w &&
//                       (l._writeBits(c, n, 8 * a + v * E),
//                       (y = 0),
//                       v++,
//                       (m = 0),
//                       (d = l._makeDiff(c)),
//                       (c = []));
//                   }
//                 }),
//                 (t.decode._findDiff = function (t, e, i) {
//                   for (var r = 0; r < t.length; r += 2)
//                     if (t[r] >= e && t[r + 1] == i) return t[r];
//                 }),
//                 (t.decode._makeDiff = function (t) {
//                   var e = [];
//                   1 == t[0] && e.push(0, 1);
//                   for (var i = 1; i < t.length; i++)
//                     t[i - 1] != t[i] && e.push(i, t[i]);
//                   return e.push(t.length, 0, t.length, 1), e;
//                 }),
//                 (t.decode._decodeG2 = function (e, i, r, n, a, s, o) {
//                   for (
//                     var l = t.decode,
//                       h = i << 3,
//                       u = 0,
//                       f = "",
//                       c = [],
//                       d = 0,
//                       p = 0,
//                       m = 8 * Math.ceil(s / 8);
//                     h >>> 3 < i + r;

//                   ) {
//                     var g = 0;
//                     1 == o && (g = (e[h >>> 3] >>> (7 - (7 & h))) & 1),
//                       2 == o && (g = (e[h >>> 3] >>> (7 & h)) & 1),
//                       h++,
//                       (f += g),
//                       null != (u = l._lens[d][f]) &&
//                         (l._addNtimes(c, u, d),
//                         (f = ""),
//                         u < 64 && (d = 1 - d),
//                         c.length == s &&
//                           (l._writeBits(c, n, 8 * a + p * m),
//                           (c = []),
//                           p++,
//                           (d = 0),
//                           7 & h && (h += 8 - (7 & h)),
//                           u >= 64 && (h += 8)));
//                   }
//                 }),
//                 (t.decode._decodeG3 = function (e, i, r, n, a, s, o, l) {
//                   for (
//                     var h = t.decode,
//                       u = i << 3,
//                       f = 0,
//                       c = "",
//                       d = [],
//                       p = [],
//                       m = 0;
//                     m < s;
//                     m++
//                   )
//                     d.push(0);
//                   for (
//                     var g = 0,
//                       _ = 0,
//                       b = 0,
//                       y = 0,
//                       v = 0,
//                       w = -1,
//                       x = "",
//                       E = 0,
//                       k = !0,
//                       M = 8 * Math.ceil(s / 8);
//                     u >>> 3 < i + r;

//                   ) {
//                     (b = h._findDiff(p, g + (0 == g ? 0 : 1), 1 - v)),
//                       (y = h._findDiff(p, b, v));
//                     var S = 0;
//                     if (
//                       (1 == o && (S = (e[u >>> 3] >>> (7 - (7 & u))) & 1),
//                       2 == o && (S = (e[u >>> 3] >>> (7 & u)) & 1),
//                       u++,
//                       (c += S),
//                       k)
//                     ) {
//                       if (null != h._lens[v][c]) {
//                         var A = h._lens[v][c];
//                         (c = ""),
//                           (f += A),
//                           A < 64 &&
//                             (h._addNtimes(d, f, v), (v = 1 - v), (f = 0));
//                       }
//                     } else
//                       "H" == x
//                         ? null != h._lens[v][c] &&
//                           ((A = h._lens[v][c]),
//                           (c = ""),
//                           (f += A),
//                           A < 64 &&
//                             (h._addNtimes(d, f, v),
//                             (g += f),
//                             (v = 1 - v),
//                             (f = 0),
//                             0 == --E && (x = "")))
//                         : ("0001" == c &&
//                             ((c = ""), h._addNtimes(d, y - g, v), (g = y)),
//                           "001" == c && ((c = ""), (x = "H"), (E = 2)),
//                           null != h._dmap[c] &&
//                             ((_ = b + h._dmap[c]),
//                             h._addNtimes(d, _ - g, v),
//                             (g = _),
//                             (c = ""),
//                             (v = 1 - v)));
//                     c.endsWith("000000000001") &&
//                       (w >= 0 && h._writeBits(d, n, 8 * a + w * M),
//                       l &&
//                         (1 == o &&
//                           (k = 1 == ((e[u >>> 3] >>> (7 - (7 & u))) & 1)),
//                         2 == o && (k = 1 == ((e[u >>> 3] >>> (7 & u)) & 1)),
//                         u++),
//                       (c = ""),
//                       (v = 0),
//                       w++,
//                       (g = 0),
//                       (p = h._makeDiff(d)),
//                       (d = []));
//                   }
//                   d.length == s && h._writeBits(d, n, 8 * a + w * M);
//                 }),
//                 (t.decode._addNtimes = function (t, e, i) {
//                   for (var r = 0; r < e; r++) t.push(i);
//                 }),
//                 (t.decode._writeBits = function (t, e, i) {
//                   for (var r = 0; r < t.length; r++)
//                     e[(i + r) >>> 3] |= t[r] << (7 - ((i + r) & 7));
//                 }),
//                 (t.decode._decodeLZW = t.decode._decodeLZW =
//                   (function () {
//                     var t,
//                       e,
//                       i,
//                       r,
//                       n = 0,
//                       a = 0,
//                       s = 0,
//                       o = 0,
//                       l = function () {
//                         var i = t >>> 3,
//                           r =
//                             (((e[i] << 16) | (e[i + 1] << 8) | e[i + 2]) >>>
//                               (24 - (7 & t) - a)) &
//                             ((1 << a) - 1);
//                         return (t += a), r;
//                       },
//                       h = new Uint32Array(16384),
//                       u = 0,
//                       f = function (t) {
//                         (a = t + 1), (n = o + 1);
//                       },
//                       c = function (t) {
//                         for (
//                           var e = t << 2, n = h[e + 2], a = r + n - 1;
//                           65535 != e;

//                         )
//                           (i[a--] = h[e]), (e = h[e + 1]);
//                         r += n;
//                       },
//                       d = function (t, e) {
//                         var i = n << 2,
//                           r = t << 2;
//                         (h[i] = h[3 + (e << 2)]),
//                           (h[i + 1] = r),
//                           (h[i + 2] = h[r + 2] + 1),
//                           (h[i + 3] = h[r + 3]),
//                           ++n + 1 == 1 << a && 12 != a && a++;
//                       };
//                     return function (a, p, m, g, _, b) {
//                       (t = p << 3), (e = a), (i = g), (r = _);
//                       var y = (p + m) << 3,
//                         v = 0,
//                         w = 0;
//                       for (
//                         (function (t) {
//                           if (t != u) {
//                             (u = t), (o = 1 + (s = 1 << t));
//                             for (var e = 0; e < o + 1; e++)
//                               (h[4 * e] = h[4 * e + 3] = e),
//                                 (h[4 * e + 1] = 65535),
//                                 (h[4 * e + 2] = 1);
//                           }
//                         })(b),
//                           f(b);
//                         t < y && (v = l()) != o;

//                       ) {
//                         if (v == s) {
//                           if ((f(b), (v = l()) == o)) break;
//                           c(v);
//                         } else v < n ? (c(v), d(w, v)) : (d(w, w), c(n - 1));
//                         w = v;
//                       }
//                       return r;
//                     };
//                   })()),
//                 (t.tags = {}),
//                 (t._types = (function () {
//                   var t = Array(250);
//                   return (
//                     t.fill(0),
//                     {
//                       basic: {
//                         main: (t = t.concat([
//                           0, 0, 0, 0, 4, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 3, 0,
//                           0, 2, 2, 2, 2, 4, 3, 0, 0, 3, 4, 4, 3, 3, 5, 5, 3, 2,
//                           5, 5, 0, 0, 0, 0, 4, 4, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0,
//                           0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 5, 5, 3, 0,
//                           3, 3, 4, 4, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3,
//                           0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 5, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                         ])),
//                         rest: {
//                           33432: 2,
//                           33434: 5,
//                           33437: 5,
//                           34665: 4,
//                           34850: 3,
//                           34853: 4,
//                           34855: 3,
//                           34864: 3,
//                           34866: 4,
//                           36864: 7,
//                           36867: 2,
//                           36868: 2,
//                           37121: 7,
//                           37377: 10,
//                           37378: 5,
//                           37380: 10,
//                           37381: 5,
//                           37383: 3,
//                           37384: 3,
//                           37385: 3,
//                           37386: 5,
//                           37510: 7,
//                           37520: 2,
//                           37521: 2,
//                           37522: 2,
//                           40960: 7,
//                           40961: 3,
//                           40962: 4,
//                           40963: 4,
//                           40965: 4,
//                           41486: 5,
//                           41487: 5,
//                           41488: 3,
//                           41985: 3,
//                           41986: 3,
//                           41987: 3,
//                           41988: 5,
//                           41989: 3,
//                           41990: 3,
//                           41993: 3,
//                           41994: 3,
//                           41995: 7,
//                           41996: 3,
//                           42032: 2,
//                           42033: 2,
//                           42034: 5,
//                           42036: 2,
//                           42037: 2,
//                           59932: 7,
//                         },
//                       },
//                       gps: {
//                         main: [1, 2, 5, 2, 5, 1, 5, 5, 0, 9],
//                         rest: { 18: 2, 29: 2 },
//                       },
//                     }
//                   );
//                 })()),
//                 (t._readIFD = function (e, r, n, a, s, o) {
//                   var l = e.readUshort(r, n);
//                   n += 2;
//                   var h = {};
//                   o.debug &&
//                     i("   ".repeat(s), a.length - 1, ">>>----------------");
//                   for (var u = 0; u < l; u++) {
//                     var f = e.readUshort(r, n);
//                     n += 2;
//                     var c = e.readUshort(r, n);
//                     n += 2;
//                     var d = e.readUint(r, n);
//                     n += 4;
//                     var p = e.readUint(r, n);
//                     n += 4;
//                     var m = [];
//                     if (1 == c || 7 == c) {
//                       var g = d < 5 ? n - 4 : p;
//                       g + d > r.buffer.byteLength &&
//                         (d = r.buffer.byteLength - g),
//                         (m = new Uint8Array(r.buffer, g, d));
//                     }
//                     if (2 == c) {
//                       var _ = d < 5 ? n - 4 : p,
//                         b = r[_],
//                         y = Math.max(0, Math.min(d - 1, r.length - _));
//                       b < 128 || 0 == y
//                         ? m.push(e.readASCII(r, _, y))
//                         : (m = new Uint8Array(r.buffer, _, y));
//                     }
//                     if (3 == c)
//                       for (var v = 0; v < d; v++)
//                         m.push(e.readUshort(r, (d < 3 ? n - 4 : p) + 2 * v));
//                     if (4 == c || 13 == c)
//                       for (v = 0; v < d; v++)
//                         m.push(e.readUint(r, (d < 2 ? n - 4 : p) + 4 * v));
//                     if (5 == c || 10 == c) {
//                       var w = 5 == c ? e.readUint : e.readInt;
//                       for (v = 0; v < d; v++)
//                         m.push([w(r, p + 8 * v), w(r, p + 8 * v + 4)]);
//                     }
//                     if (8 == c)
//                       for (v = 0; v < d; v++)
//                         m.push(e.readShort(r, (d < 3 ? n - 4 : p) + 2 * v));
//                     if (9 == c)
//                       for (v = 0; v < d; v++)
//                         m.push(e.readInt(r, (d < 2 ? n - 4 : p) + 4 * v));
//                     if (11 == c)
//                       for (v = 0; v < d; v++) m.push(e.readFloat(r, p + 4 * v));
//                     if (12 == c)
//                       for (v = 0; v < d; v++)
//                         m.push(e.readDouble(r, p + 8 * v));
//                     if (0 == d || 0 != m.length) {
//                       if (
//                         (o.debug && i("   ".repeat(s), f, c, t.tags[f], m),
//                         (h["t" + f] = m),
//                         330 == f && h.t272 && "DSLR-A100" == h.t272[0])
//                       );
//                       else if (
//                         330 == f ||
//                         34665 == f ||
//                         34853 == f ||
//                         (50740 == f &&
//                           300 > e.readUshort(r, e.readUint(m, 0))) ||
//                         61440 == f
//                       ) {
//                         var x = 50740 == f ? [e.readUint(m, 0)] : m,
//                           E = [];
//                         for (v = 0; v < x.length; v++)
//                           t._readIFD(e, r, x[v], E, s + 1, o);
//                         330 == f && (h.subIFD = E),
//                           34665 == f && (h.exifIFD = E[0]),
//                           34853 == f && (h.gpsiIFD = E[0]),
//                           50740 == f && (h.dngPrvt = E[0]),
//                           61440 == f && (h.fujiIFD = E[0]);
//                       }
//                       if (37500 == f && o.parseMN) {
//                         var k = m;
//                         if ("Nikon" == e.readASCII(k, 0, 5))
//                           h.makerNote = t.decode(k.slice(10).buffer)[0];
//                         else if (
//                           "OLYMP" == e.readASCII(k, 0, 5) ||
//                           "OM SYSTEM" == e.readASCII(k, 0, 9)
//                         ) {
//                           var M = [8208, 8224, 8240, 8256, 8272],
//                             S = [];
//                           t._readIFD(
//                             e,
//                             k,
//                             77 == k[1] ? 16 : 85 == k[5] ? 12 : 8,
//                             S,
//                             s + 1,
//                             o
//                           );
//                           var A = (h.makerNote = S.pop());
//                           for (v = 0; v < M.length; v++) {
//                             var I = "t" + M[v];
//                             null != A[I] &&
//                               (t._readIFD(e, k, A[I][0], S, s + 1, o),
//                               (A[I] = S.pop()));
//                           }
//                           A.t12288 &&
//                             (t._readIFD(e, A.t12288, 0, S, s + 1, o),
//                             (A.t12288 = S.pop()));
//                         } else
//                           300 > e.readUshort(r, p) &&
//                             12 >= e.readUshort(r, p + 4) &&
//                             ((S = []),
//                             t._readIFD(e, r, p, S, s + 1, o),
//                             (h.makerNote = S[0]));
//                       }
//                     } else if (
//                       (i(f, "unknown TIFF tag type: ", c, "num:", d), 0 == u)
//                     )
//                       return;
//                   }
//                   return (
//                     a.push(h),
//                     o.debug && i("   ".repeat(s), "<<<---------------"),
//                     n
//                   );
//                 }),
//                 (t._writeIFD = function (e, i, r, n, a) {
//                   var s = Object.keys(a),
//                     o = s.length;
//                   a.exifIFD && o--, a.gpsiIFD && o--, e.writeUshort(r, n, o);
//                   for (
//                     var l = (n += 2) + 12 * o + 4, h = 0;
//                     h < s.length;
//                     h++
//                   ) {
//                     var u = s[h];
//                     if ("t34665" != u && "t34853" != u) {
//                       "exifIFD" == u && (u = "t34665"),
//                         "gpsiIFD" == u && (u = "t34853");
//                       var f = parseInt(u.slice(1)),
//                         c = i.main[f];
//                       if ((null == c && (c = i.rest[f]), null == c || 0 == c))
//                         throw Error("unknown type of tag: " + f);
//                       var d = a[u];
//                       34665 == f &&
//                         ((d = [l]),
//                         (l = t._writeIFD(e, i, r, l, a.exifIFD)[1])),
//                         34853 == f &&
//                           ((d = [l]),
//                           (l = t._writeIFD(
//                             e,
//                             t._types.gps,
//                             r,
//                             l,
//                             a.gpsiIFD
//                           )[1])),
//                         2 == c && (d = d[0] + "\0");
//                       var p = d.length;
//                       e.writeUshort(r, n, f),
//                         (n += 2),
//                         e.writeUshort(r, n, c),
//                         (n += 2),
//                         e.writeUint(r, n, p);
//                       var m = [-1, 1, 1, 2, 4, 8, 0, 1, 0, 4, 8, 0, 8][c] * p,
//                         g = (n += 4);
//                       if (
//                         (m > 4 && (e.writeUint(r, n, l), (g = l)),
//                         1 == c || 7 == c)
//                       )
//                         for (var _ = 0; _ < p; _++) r[g + _] = d[_];
//                       else if (2 == c) e.writeASCII(r, g, d);
//                       else if (3 == c)
//                         for (_ = 0; _ < p; _++)
//                           e.writeUshort(r, g + 2 * _, d[_]);
//                       else if (4 == c)
//                         for (_ = 0; _ < p; _++) e.writeUint(r, g + 4 * _, d[_]);
//                       else if (5 == c || 10 == c) {
//                         var b = 5 == c ? e.writeUint : e.writeInt;
//                         for (_ = 0; _ < p; _++) {
//                           var y = d[_],
//                             v = y[0],
//                             w = y[1];
//                           if (null == v) throw "e";
//                           b(r, g + 8 * _, v), b(r, g + 8 * _ + 4, w);
//                         }
//                       } else if (9 == c)
//                         for (_ = 0; _ < p; _++) e.writeInt(r, g + 4 * _, d[_]);
//                       else {
//                         if (12 != c) throw c;
//                         for (_ = 0; _ < p; _++)
//                           e.writeDouble(r, g + 8 * _, d[_]);
//                       }
//                       m > 4 && (l += m += 1 & m), (n += 4);
//                     }
//                   }
//                   return [n, l];
//                 }),
//                 (t.toRGBA8 = function (t, e) {
//                   function r(t) {
//                     return t < 0.0031308
//                       ? 12.92 * t
//                       : 1.055 * Math.pow(t, 1 / 2.4) - 0.055;
//                   }
//                   var n = t.width,
//                     a = t.height,
//                     s = n * a,
//                     o = t.data,
//                     l = new Uint8Array(4 * s),
//                     h = t.t262 ? t.t262[0] : 2,
//                     u = t.t258 ? Math.min(32, t.t258[0]) : 1;
//                   null == t.t262 && 1 == u && (h = 0);
//                   var f = t.t277
//                       ? t.t277[0]
//                       : t.t258
//                       ? t.t258.length
//                       : [1, 1, 3, 1, 1, 4, 3][h],
//                     c = t.t339 ? t.t339[0] : null;
//                   if (1 == h && 32 == u && 3 != c) throw "e";
//                   var d = Math.ceil((f * u * n) / 8);
//                   if (0 == h) {
//                     e = 1 / 256;
//                     for (var p = 0; p < a; p++) {
//                       var m = p * d,
//                         g = p * n;
//                       if (1 == u)
//                         for (var _ = 0; _ < n; _++) {
//                           var b = (g + _) << 2,
//                             y = (o[m + (_ >> 3)] >> (7 - (7 & _))) & 1;
//                           (l[b] = l[b + 1] = l[b + 2] = 255 * (1 - y)),
//                             (l[b + 3] = 255);
//                         }
//                       if (4 == u)
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = (o[m + (_ >> 1)] >> (4 - 4 * (1 & _))) & 15),
//                             (l[b] = l[b + 1] = l[b + 2] = 17 * (15 - y)),
//                             (l[b + 3] = 255);
//                       if (8 == u)
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = o[m + _]),
//                             (l[b] = l[b + 1] = l[b + 2] = 255 - y),
//                             (l[b + 3] = 255);
//                       if (16 == u)
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = (o[(v = m + 2 * _) + 1] << 8) | o[v]),
//                             (l[b] =
//                               l[b + 1] =
//                               l[b + 2] =
//                                 Math.min(255, 255 - ~~(y * e))),
//                             (l[b + 3] = 255);
//                     }
//                   } else if (1 == h) {
//                     null == e && (e = 1 / 256);
//                     var v,
//                       w = 3 & o.length ? null : new Float32Array(o.buffer);
//                     for (p = 0; p < a; p++) {
//                       if (((m = p * d), (g = p * n), 1 == u))
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = (o[m + (_ >> 3)] >> (7 - (7 & _))) & 1),
//                             (l[b] = l[b + 1] = l[b + 2] = 255 * y),
//                             (l[b + 3] = 255);
//                       if (2 == u)
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = (o[m + (_ >> 2)] >> (6 - 2 * (3 & _))) & 3),
//                             (l[b] = l[b + 1] = l[b + 2] = 85 * y),
//                             (l[b + 3] = 255);
//                       if (8 == u)
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = o[m + _ * f]),
//                             (l[b] = l[b + 1] = l[b + 2] = y),
//                             (l[b + 3] = 255);
//                       if (16 == u)
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = (o[(v = m + 2 * _) + 1] << 8) | o[v]),
//                             (l[b] =
//                               l[b + 1] =
//                               l[b + 2] =
//                                 Math.min(255, ~~(y * e))),
//                             (l[b + 3] = 255);
//                       if (32 == u)
//                         for (_ = 0; _ < n; _++)
//                           (b = (g + _) << 2),
//                             (y = w[(v = (m >>> 2) + _)]),
//                             (l[b] = l[b + 1] = l[b + 2] = ~~(0.5 + 255 * y)),
//                             (l[b + 3] = 255);
//                     }
//                   } else if (2 == h) {
//                     if (8 == u) {
//                       if (1 == f)
//                         for (_ = 0; _ < s; _++)
//                           (l[4 * _] = l[4 * _ + 1] = l[4 * _ + 2] = o[_]),
//                             (l[4 * _ + 3] = 255);
//                       if (3 == f)
//                         for (_ = 0; _ < s; _++) {
//                           var x = 3 * _;
//                           (l[(b = _ << 2)] = o[x]),
//                             (l[b + 1] = o[x + 1]),
//                             (l[b + 2] = o[x + 2]),
//                             (l[b + 3] = 255);
//                         }
//                       if (f >= 4)
//                         for (_ = 0; _ < s; _++)
//                           (x = _ * f),
//                             (l[(b = _ << 2)] = o[x]),
//                             (l[b + 1] = o[x + 1]),
//                             (l[b + 2] = o[x + 2]),
//                             (l[b + 3] = o[x + 3]);
//                     } else if (16 == u) {
//                       if (4 == f)
//                         for (_ = 0; _ < s; _++)
//                           (x = 8 * _ + 1),
//                             (l[(b = _ << 2)] = o[x]),
//                             (l[b + 1] = o[x + 2]),
//                             (l[b + 2] = o[x + 4]),
//                             (l[b + 3] = o[x + 6]);
//                       if (3 == f)
//                         for (_ = 0; _ < s; _++)
//                           (x = 6 * _ + 1),
//                             (l[(b = _ << 2)] = o[x]),
//                             (l[b + 1] = o[x + 2]),
//                             (l[b + 2] = o[x + 4]),
//                             (l[b + 3] = 255);
//                     } else {
//                       if (32 != u) throw u;
//                       var E = new Float32Array(o.buffer),
//                         k = 0;
//                       for (_ = 0; _ < E.length; _++) k = Math.min(k, E[_]);
//                       if (k < 0)
//                         for (_ = 0; _ < o.length; _ += 4) {
//                           var M = o[_];
//                           (o[_] = o[_ + 3]),
//                             (o[_ + 3] = M),
//                             (M = o[_ + 1]),
//                             (o[_ + 1] = o[_ + 2]),
//                             (o[_ + 2] = M);
//                         }
//                       var S = [];
//                       for (_ = 0; _ < 65536; _++) S.push(r(_ / 65535));
//                       for (_ = 0; _ < E.length; _++) {
//                         var A = Math.max(0, Math.min(1, E[_]));
//                         E[_] = S[~~(0.5 + 65535 * A)];
//                       }
//                       if (3 == f)
//                         for (_ = 0; _ < s; _++)
//                           (x = 3 * _),
//                             (l[(b = _ << 2)] = ~~(0.5 + 255 * E[x])),
//                             (l[b + 1] = ~~(0.5 + 255 * E[x + 1])),
//                             (l[b + 2] = ~~(0.5 + 255 * E[x + 2])),
//                             (l[b + 3] = 255);
//                       else {
//                         if (4 != f) throw f;
//                         for (_ = 0; _ < s; _++)
//                           (x = 4 * _),
//                             (l[(b = _ << 2)] = ~~(0.5 + 255 * E[x])),
//                             (l[b + 1] = ~~(0.5 + 255 * E[x + 1])),
//                             (l[b + 2] = ~~(0.5 + 255 * E[x + 2])),
//                             (l[b + 3] = ~~(0.5 + 255 * E[x + 3]));
//                       }
//                     }
//                   } else if (3 == h) {
//                     var I = t.t320,
//                       T = 1 << u,
//                       B = 8 == u && f > 1 && t.t338 && 0 != t.t338[0];
//                     for (p = 0; p < a; p++)
//                       for (var R = 0; R < n; R++) {
//                         b = (_ = p * n + R) << 2;
//                         var P = 0,
//                           O = p * d;
//                         if (1 == u)
//                           P = (o[O + (R >>> 3)] >>> (7 - (7 & R))) & 1;
//                         else if (2 == u)
//                           P = (o[O + (R >>> 2)] >>> (6 - 2 * (3 & R))) & 3;
//                         else if (4 == u)
//                           P = (o[O + (R >>> 1)] >>> (4 - 4 * (1 & R))) & 15;
//                         else {
//                           if (8 != u) throw u;
//                           P = o[O + R * f];
//                         }
//                         (l[b] = I[P] >> 8),
//                           (l[b + 1] = I[T + P] >> 8),
//                           (l[b + 2] = I[T + T + P] >> 8),
//                           (l[b + 3] = B ? o[O + R * f + 1] : 255);
//                       }
//                   } else if (5 == h) {
//                     var C = f > 4 ? 1 : 0;
//                     for (_ = 0; _ < s; _++) {
//                       b = _ << 2;
//                       var z = _ * f;
//                       if (window.UDOC) {
//                         var L = o[z],
//                           U = o[z + 1],
//                           D = o[z + 2],
//                           N = o[z + 3],
//                           j = UDOC.C.cmykToRgb([
//                             (1 / 255) * L,
//                             (1 / 255) * U,
//                             (1 / 255) * D,
//                             (1 / 255) * N,
//                           ]);
//                         (l[b] = ~~(0.5 + 255 * j[0])),
//                           (l[b + 1] = ~~(0.5 + 255 * j[1])),
//                           (l[b + 2] = ~~(0.5 + 255 * j[2]));
//                       } else
//                         (L = 255 - o[z]),
//                           (U = 255 - o[z + 1]),
//                           (D = 255 - o[z + 2]),
//                           (N = (255 - o[z + 3]) * (1 / 255)),
//                           (l[b] = ~~(L * N + 0.5)),
//                           (l[b + 1] = ~~(U * N + 0.5)),
//                           (l[b + 2] = ~~(D * N + 0.5));
//                       l[b + 3] = 255 * (1 - C) + o[z + 4] * C;
//                     }
//                   } else if (6 == h && t.t278) {
//                     var F = t.t278[0];
//                     for (p = 0; p < a; p += F) {
//                       _ = p * n;
//                       for (var G = F * n, Z = 0; Z < G; Z++) {
//                         (b = 4 * (_ + Z)),
//                           (D = o[(z = 3 * _ + 4 * (Z >>> 1)) + (1 & Z)]);
//                         var H = o[z + 2] - 128,
//                           W = o[z + 3] - 128,
//                           q = D + ((W >> 2) + (W >> 3) + (W >> 5)),
//                           Y =
//                             D -
//                             ((H >> 2) + (H >> 4) + (H >> 5)) -
//                             ((W >> 1) + (W >> 3) + (W >> 4) + (W >> 5)),
//                           V = D + (H + (H >> 1) + (H >> 2) + (H >> 6));
//                         (l[b] = Math.max(0, Math.min(255, q))),
//                           (l[b + 1] = Math.max(0, Math.min(255, Y))),
//                           (l[b + 2] = Math.max(0, Math.min(255, V))),
//                           (l[b + 3] = 255);
//                       }
//                     }
//                   } else if (32845 == h)
//                     for (p = 0; p < a; p++)
//                       for (R = 0; R < n; R++) {
//                         b = 4 * (p * n + R);
//                         var $ = (o[(z = 6 * (p * n + R)) + 1] << 8) | o[z],
//                           K =
//                             (($ = Math.pow(2, ($ + 0.5) / 256 - 64)),
//                             (o[z + 3] + 0.5) / 410),
//                           X = (o[z + 5] + 0.5) / 410,
//                           J = (9 * K) / (6 * K - 16 * X + 12),
//                           Q = (4 * X) / (6 * K - 16 * X + 12),
//                           tt = (J * $) / Q,
//                           te = ((1 - J - Q) * $) / Q;
//                         (q = 2.69 * tt - 1.276 * (D = $) - 0.414 * te),
//                           (Y = -1.022 * tt + 1.978 * D + 0.044 * te),
//                           (V = 0.061 * tt - 0.224 * D + 1.163 * te),
//                           (l[b] = 255 * r(Math.min(q, 1))),
//                           (l[b + 1] = 255 * r(Math.min(Y, 1))),
//                           (l[b + 2] = 255 * r(Math.min(V, 1))),
//                           (l[b + 3] = 255);
//                       }
//                   else i("Unknown Photometric interpretation: " + h);
//                   return l;
//                 }),
//                 (t.replaceIMG = function (e) {
//                   null == e && (e = document.getElementsByTagName("img"));
//                   for (
//                     var i = ["tif", "tiff", "dng", "cr2", "nef"], r = 0;
//                     r < e.length;
//                     r++
//                   ) {
//                     var n = e[r],
//                       a = n.getAttribute("src");
//                     if (null != a) {
//                       var s = a.split(".").pop().toLowerCase();
//                       if (-1 != i.indexOf(s)) {
//                         var o = new XMLHttpRequest();
//                         t._xhrs.push(o),
//                           t._imgs.push(n),
//                           o.open("GET", a),
//                           (o.responseType = "arraybuffer"),
//                           (o.onload = t._imgLoaded),
//                           o.send();
//                       }
//                     }
//                   }
//                 }),
//                 (t._xhrs = []),
//                 (t._imgs = []),
//                 (t._imgLoaded = function (e) {
//                   var i = t._xhrs.indexOf(e.target),
//                     r = t._imgs[i];
//                   t._xhrs.splice(i, 1),
//                     t._imgs.splice(i, 1),
//                     r.setAttribute("src", t.bufferToURI(e.target.response));
//                 }),
//                 (t.bufferToURI = function (e) {
//                   var i = t.decode(e),
//                     r = i,
//                     n = 0,
//                     a = r[0];
//                   i[0].subIFD && (r = r.concat(i[0].subIFD));
//                   for (var s = 0; s < r.length; s++) {
//                     var o = r[s];
//                     if (!(null == o.t258 || o.t258.length < 3)) {
//                       var l = o.t256 * o.t257;
//                       l > n && ((n = l), (a = o));
//                     }
//                   }
//                   t.decodeImage(e, a, i);
//                   var h = t.toRGBA8(a),
//                     u = a.width,
//                     f = a.height,
//                     c = document.createElement("canvas");
//                   (c.width = u), (c.height = f);
//                   var d = c.getContext("2d"),
//                     p = new ImageData(new Uint8ClampedArray(h.buffer), u, f);
//                   return d.putImageData(p, 0, 0), c.toDataURL();
//                 }),
//                 (t._binBE = {
//                   nextZero: function (t, e) {
//                     for (; 0 != t[e]; ) e++;
//                     return e;
//                   },
//                   readUshort: function (t, e) {
//                     return (t[e] << 8) | t[e + 1];
//                   },
//                   readShort: function (e, i) {
//                     var r = t._binBE.ui8;
//                     return (
//                       (r[0] = e[i + 1]), (r[1] = e[i + 0]), t._binBE.i16[0]
//                     );
//                   },
//                   readInt: function (e, i) {
//                     var r = t._binBE.ui8;
//                     return (
//                       (r[0] = e[i + 3]),
//                       (r[1] = e[i + 2]),
//                       (r[2] = e[i + 1]),
//                       (r[3] = e[i + 0]),
//                       t._binBE.i32[0]
//                     );
//                   },
//                   readUint: function (e, i) {
//                     var r = t._binBE.ui8;
//                     return (
//                       (r[0] = e[i + 3]),
//                       (r[1] = e[i + 2]),
//                       (r[2] = e[i + 1]),
//                       (r[3] = e[i + 0]),
//                       t._binBE.ui32[0]
//                     );
//                   },
//                   readASCII: function (t, e, i) {
//                     for (var r = "", n = 0; n < i; n++)
//                       r += String.fromCharCode(t[e + n]);
//                     return r;
//                   },
//                   readFloat: function (e, i) {
//                     for (var r = t._binBE.ui8, n = 0; n < 4; n++)
//                       r[n] = e[i + 3 - n];
//                     return t._binBE.fl32[0];
//                   },
//                   readDouble: function (e, i) {
//                     for (var r = t._binBE.ui8, n = 0; n < 8; n++)
//                       r[n] = e[i + 7 - n];
//                     return t._binBE.fl64[0];
//                   },
//                   writeUshort: function (t, e, i) {
//                     (t[e] = (i >> 8) & 255), (t[e + 1] = 255 & i);
//                   },
//                   writeInt: function (e, i, r) {
//                     var n = t._binBE.ui8;
//                     (t._binBE.i32[0] = r),
//                       (e[i + 3] = n[0]),
//                       (e[i + 2] = n[1]),
//                       (e[i + 1] = n[2]),
//                       (e[i + 0] = n[3]);
//                   },
//                   writeUint: function (t, e, i) {
//                     (t[e] = (i >> 24) & 255),
//                       (t[e + 1] = (i >> 16) & 255),
//                       (t[e + 2] = (i >> 8) & 255),
//                       (t[e + 3] = 255 & i);
//                   },
//                   writeASCII: function (t, e, i) {
//                     for (var r = 0; r < i.length; r++)
//                       t[e + r] = i.charCodeAt(r);
//                   },
//                   writeDouble: function (e, i, r) {
//                     t._binBE.fl64[0] = r;
//                     for (var n = 0; n < 8; n++) e[i + n] = t._binBE.ui8[7 - n];
//                   },
//                 }),
//                 (t._binBE.ui8 = new Uint8Array(8)),
//                 (t._binBE.i16 = new Int16Array(t._binBE.ui8.buffer)),
//                 (t._binBE.i32 = new Int32Array(t._binBE.ui8.buffer)),
//                 (t._binBE.ui32 = new Uint32Array(t._binBE.ui8.buffer)),
//                 (t._binBE.fl32 = new Float32Array(t._binBE.ui8.buffer)),
//                 (t._binBE.fl64 = new Float64Array(t._binBE.ui8.buffer)),
//                 (t._binLE = {
//                   nextZero: t._binBE.nextZero,
//                   readUshort: function (t, e) {
//                     return (t[e + 1] << 8) | t[e];
//                   },
//                   readShort: function (e, i) {
//                     var r = t._binBE.ui8;
//                     return (
//                       (r[0] = e[i + 0]), (r[1] = e[i + 1]), t._binBE.i16[0]
//                     );
//                   },
//                   readInt: function (e, i) {
//                     var r = t._binBE.ui8;
//                     return (
//                       (r[0] = e[i + 0]),
//                       (r[1] = e[i + 1]),
//                       (r[2] = e[i + 2]),
//                       (r[3] = e[i + 3]),
//                       t._binBE.i32[0]
//                     );
//                   },
//                   readUint: function (e, i) {
//                     var r = t._binBE.ui8;
//                     return (
//                       (r[0] = e[i + 0]),
//                       (r[1] = e[i + 1]),
//                       (r[2] = e[i + 2]),
//                       (r[3] = e[i + 3]),
//                       t._binBE.ui32[0]
//                     );
//                   },
//                   readASCII: t._binBE.readASCII,
//                   readFloat: function (e, i) {
//                     for (var r = t._binBE.ui8, n = 0; n < 4; n++)
//                       r[n] = e[i + n];
//                     return t._binBE.fl32[0];
//                   },
//                   readDouble: function (e, i) {
//                     for (var r = t._binBE.ui8, n = 0; n < 8; n++)
//                       r[n] = e[i + n];
//                     return t._binBE.fl64[0];
//                   },
//                   writeUshort: function (t, e, i) {
//                     (t[e] = 255 & i), (t[e + 1] = (i >> 8) & 255);
//                   },
//                   writeInt: function (e, i, r) {
//                     var n = t._binBE.ui8;
//                     (t._binBE.i32[0] = r),
//                       (e[i + 0] = n[0]),
//                       (e[i + 1] = n[1]),
//                       (e[i + 2] = n[2]),
//                       (e[i + 3] = n[3]);
//                   },
//                   writeUint: function (t, e, i) {
//                     (t[e] = (i >>> 0) & 255),
//                       (t[e + 1] = (i >>> 8) & 255),
//                       (t[e + 2] = (i >>> 16) & 255),
//                       (t[e + 3] = (i >>> 24) & 255);
//                   },
//                   writeASCII: t._binBE.writeASCII,
//                 }),
//                 (t._copyTile = function (t, e, i, r, n, a, s, o) {
//                   for (
//                     var l = Math.min(e, n - s), h = Math.min(i, a - o), u = 0;
//                     u < h;
//                     u++
//                   )
//                     for (var f = (o + u) * n + s, c = u * e, d = 0; d < l; d++)
//                       r[f + d] = t[c + d];
//                 }),
//                 (t.LosslessJpegDecode = (function () {
//                   var t, e;
//                   function i() {
//                     return t[e++];
//                   }
//                   function r() {
//                     return (t[e++] << 8) | t[e++];
//                   }
//                   function n(t) {
//                     for (
//                       var e = i(), r = [0, 0, 0, 255], n = [], s = 0;
//                       s < 16;
//                       s++
//                     )
//                       n[s] = i();
//                     for (s = 0; s < 16; s++)
//                       for (var o = 0; o < n[s]; o++)
//                         r[a(r, 0, s + 1, 1) + 3] = i();
//                     var l = new Uint8Array(256);
//                     for (s = 0, t[e] = [new Uint8Array(r), l]; s < 256; s++) {
//                       for (var h = 8, u = s, f = 0; 255 == r[f + 3] && 0 != h; )
//                         f = r[f + ((u >> --h) & 1)];
//                       l[s] = f;
//                     }
//                   }
//                   function a(t, e, i, r) {
//                     if (255 != t[e + 3]) return 0;
//                     if (0 == i) return e;
//                     for (var n = 0; n < 2; n++) {
//                       0 == t[e + n] &&
//                         ((t[e + n] = t.length), t.push(0, 0, r, 255));
//                       var s = a(t, t[e + n], i - 1, r + 1);
//                       if (0 != s) return s;
//                     }
//                     return 0;
//                   }
//                   function s(t) {
//                     for (var e = t.b, i = t.f; e < 25 && t.a < t.d; ) {
//                       var r = t.data[t.a++];
//                       255 != r || t.c || t.a++, (i = (i << 8) | r), (e += 8);
//                     }
//                     if (e < 0) throw "e";
//                     (t.b = e), (t.f = i);
//                   }
//                   function o(t, e) {
//                     return (
//                       e.b < t && s(e), (e.f >> (e.b -= t)) & (65535 >> (16 - t))
//                     );
//                   }
//                   function l(t, e) {
//                     var i = t[0],
//                       r = 0,
//                       n = 255;
//                     e.b < 16 && s(e);
//                     var a = (e.f >> (e.b - 8)) & 255;
//                     for (n = i[(r = t[1][a]) + 3], e.b -= i[r + 2]; 255 == n; )
//                       n = i[(r = i[r + ((e.f >> --e.b) & 1)]) + 3];
//                     return n;
//                   }
//                   function h(t, e) {
//                     return t < 32768 >> (16 - e) && (t += 1 - (1 << e)), t;
//                   }
//                   function u(t, e) {
//                     var i = l(t, e);
//                     return 0 == i ? 0 : 16 == i ? -32768 : h(o(i, e), i);
//                   }
//                   function f(t, e, i, r, n, a) {
//                     for (var s = 0, o = 0; o < a; o++) {
//                       for (var l = o * e, h = 0; h < e; h += n) {
//                         s++;
//                         for (var f = 0; f < n; f++) t[l + h + f] = u(r[f], i);
//                       }
//                       if (0 != i.e && s % i.e == 0 && 0 != o) {
//                         for (
//                           var c = i.a, d = i.data;
//                           255 != d[c] || !(208 <= d[c + 1] && d[c + 1] <= 215);

//                         )
//                           c--;
//                         (i.a = c + 2), (i.f = 0), (i.b = 0);
//                       }
//                     }
//                   }
//                   function c(t, e) {
//                     return h(o(t, e), t);
//                   }
//                   function d(t, e, i, r, n, a, s, o) {
//                     for (var l = i * s, h = n; h < a; h++) t[h] += 1 << (o - 1);
//                     for (var u = s; u < l; u += s)
//                       for (h = n; h < a; h++) t[u + h] += t[u + h - s];
//                     for (var f = 1; f < r; f++) {
//                       var c = f * l;
//                       for (h = n; h < a; h++) t[c + h] += t[c + h - l];
//                       for (u = s; u < l; u += s)
//                         for (h = n; h < a; h++) {
//                           var d = c + u + h,
//                             p = d - l,
//                             m = t[d - s],
//                             g = 0;
//                           if (0 == e) g = 0;
//                           else if (1 == e) g = m;
//                           else if (2 == e) g = t[p];
//                           else if (3 == e) g = t[p - s];
//                           else if (4 == e) g = m + (t[p] - t[p - s]);
//                           else if (5 == e) g = m + ((t[p] - t[p - s]) >>> 1);
//                           else if (6 == e) g = t[p] + ((m - t[p - s]) >>> 1);
//                           else {
//                             if (7 != e) throw e;
//                             g = (m + t[p]) >>> 1;
//                           }
//                           t[d] += g;
//                         }
//                     }
//                   }
//                   return function (a) {
//                     if (((t = a), (e = 0), 65496 != r())) throw "e";
//                     for (
//                       var s = [],
//                         o = 0,
//                         h = 0,
//                         u = 0,
//                         p = [],
//                         m = [],
//                         g = [],
//                         _ = 0,
//                         b = 0,
//                         y = 0;
//                       ;

//                     ) {
//                       var v = r();
//                       if (65535 != v) {
//                         var w = r();
//                         if (65475 == v) {
//                           (h = i()), (b = r()), (y = r()), (_ = i());
//                           for (var x = 0; x < _; x++) {
//                             var E = i(),
//                               k = i();
//                             if (0 != i()) throw "e";
//                             s[E] = [x, k >> 4, 15 & k];
//                           }
//                         } else if (65476 == v)
//                           for (var M = e + w - 2; e < M; ) n(m);
//                         else {
//                           if (65498 == v) {
//                             for (e++, x = 0; x < _; x++) {
//                               var S = s[i()];
//                               (g[S[0]] = m[i() >>> 4]), (p[S[0]] = S.slice(1));
//                             }
//                             (o = i()), (e += 2);
//                             break;
//                           }
//                           65501 == v ? (u = r()) : (e += w - 2);
//                         }
//                       } else e--;
//                     }
//                     var A = new (h > 8 ? Uint16Array : Uint8Array)(b * y * _),
//                       I = {
//                         b: 0,
//                         f: 0,
//                         c: 8 == o,
//                         a: e,
//                         data: t,
//                         d: t.length,
//                         e: u,
//                       };
//                     if (I.c)
//                       !(function (i, r, n, a, s) {
//                         for (var o = t.length - e, h = 0; h < o; h += 4) {
//                           var u = t[e + h];
//                           (t[e + h] = t[e + h + 3]),
//                             (t[e + h + 3] = u),
//                             (u = t[e + h + 1]),
//                             (t[e + h + 1] = t[e + h + 2]),
//                             (t[e + h + 2] = u);
//                         }
//                         for (var f = 0; f < s; f++)
//                           for (var d = 32768, p = 32768, m = 0; m < r; m += 2) {
//                             var g = l(a, n),
//                               _ = l(a, n);
//                             0 != g && (d += c(g, n)),
//                               0 != _ && (p += c(_, n)),
//                               (i[f * r + m] = 65535 & d),
//                               (i[f * r + m + 1] = 65535 & p);
//                           }
//                       })(A, y * _, I, g[0], b);
//                     else {
//                       var T = [],
//                         B = 0,
//                         R = 0;
//                       for (x = 0; x < _; x++) {
//                         var P = p[x];
//                         (Z = P[0]) > B && (B = Z),
//                           (G = P[1]) > R && (R = G),
//                           T.push(Z * G);
//                       }
//                       if (1 != B || 1 != R) {
//                         if (
//                           3 != _ ||
//                           1 != T[1] ||
//                           1 != T[2] ||
//                           2 != B ||
//                           (1 != R && 2 != R)
//                         )
//                           throw "e";
//                         var O,
//                           C = [],
//                           z = 0;
//                         for (x = 0; x < _; x++) {
//                           for (var L = 0; L < T[x]; L++) C.push(g[x]);
//                           z += T[x];
//                         }
//                         var U = y / B,
//                           D = b / R,
//                           N = U * D;
//                         f(A, U * z, I, C, z, D), d(A, o, U, D, z - 2, z, z, h);
//                         var j = new Uint16Array(N * T[0]);
//                         if (2 == B && 2 == R) {
//                           for (x = 0; x < N; x++)
//                             (j[4 * x] = A[6 * x]),
//                               (j[4 * x + 1] = A[6 * x + 1]),
//                               (j[4 * x + 2] = A[6 * x + 2]),
//                               (j[4 * x + 3] = A[6 * x + 3]);
//                           for (d(j, o, 4 * U, D, 0, 1, 1, h), x = 0; x < N; x++)
//                             (A[6 * x] = j[4 * x]),
//                               (A[6 * x + 1] = j[4 * x + 1]),
//                               (A[6 * x + 2] = j[4 * x + 2]),
//                               (A[6 * x + 3] = j[4 * x + 3]);
//                         }
//                         if (2 == B && 1 == R) {
//                           for (x = 0; x < N; x++)
//                             (j[2 * x] = A[4 * x]),
//                               (j[2 * x + 1] = A[4 * x + 1]);
//                           for (d(j, o, 2 * U, D, 0, 1, 1, h), x = 0; x < N; x++)
//                             (A[4 * x] = j[2 * x]),
//                               (A[4 * x + 1] = j[2 * x + 1]);
//                         }
//                         for (var F = A.slice(0), G = 0; G < b; G++)
//                           if (2 == R)
//                             for (var Z = 0; Z < y; Z++) {
//                               var H = ((G >>> 1) * U + (Z >>> 1)) * z,
//                                 W = 2 * (1 & G) + (1 & Z);
//                               (A[(O = (G * y + Z) * _)] = F[H + W]),
//                                 (A[O + 1] = F[H + 4]),
//                                 (A[O + 2] = F[H + 5]);
//                             }
//                           else
//                             for (Z = 0; Z < y; Z++)
//                               (H = (G * U + (Z >>> 1)) * z),
//                                 (W = 1 & Z),
//                                 (A[(O = (G * y + Z) * _)] = F[H + W]),
//                                 (A[O + 1] = F[H + 2]),
//                                 (A[O + 2] = F[H + 3]);
//                       } else if ((f(A, y * _, I, g, _, b), 0 == u))
//                         d(A, o, y, b, 0, _, _, h);
//                       else {
//                         var q = Math.floor(u / y);
//                         for (G = 0; G < b; G += q) {
//                           var Y = A.slice(G * y * _, (G + q) * y * _);
//                           d(Y, o, y, q, 0, _, _, h), A.set(Y, G * y * _);
//                         }
//                       }
//                     }
//                     return A;
//                   };
//                 })()),
//                 (function () {
//                   var e = 2,
//                     i = 4,
//                     r = 5,
//                     n = 6,
//                     a = 7,
//                     s = 12,
//                     o = 13,
//                     l = 14,
//                     h = 15,
//                     u = 17;
//                   function f(t) {
//                     var e = { c: new Int8Array(2 << t.u) };
//                     return (
//                       (function (t, e, i) {
//                         var r = [0, 18, 67, 7 * e + 276, i];
//                         (t.o = e),
//                           (t.w = ((r[4] + 2 * e) / (2 * e + 1) + 1) | 0),
//                           (t.v = Math.ceil(Math.log2(t.w))),
//                           (t.t = 9),
//                           (function (t, e) {
//                             for (var i = -e[4], r = 0; i <= e[4]; r++, i++)
//                               t[r] =
//                                 i <= -e[3]
//                                   ? -4
//                                   : i <= -e[2]
//                                   ? -3
//                                   : i <= -e[1]
//                                   ? -2
//                                   : i < -e[0]
//                                   ? -1
//                                   : i <= e[0]
//                                   ? 0
//                                   : i < e[1]
//                                   ? 1
//                                   : i < e[2]
//                                   ? 2
//                                   : i < e[3]
//                                   ? 3
//                                   : 4;
//                           })(t.c, r);
//                       })(e, 0, t.g),
//                       e
//                     );
//                   }
//                   function c(t) {
//                     for (
//                       var e = [[], [], []],
//                         i = Math.max(2, (t.w + 32) >>> 6),
//                         r = 0;
//                       r < 3;
//                       r++
//                     )
//                       for (var n = 0; n < 41; n++) e[r][n] = [i, 1];
//                     return e;
//                   }
//                   function d(t, e) {
//                     var i = 0,
//                       r = 8 - t.a;
//                     if ((t.j, t.a, e)) {
//                       if (e >= r)
//                         do
//                           (i <<= r),
//                             (e -= r),
//                             (i |= t[t.j] & ((1 << r) - 1)),
//                             t.j++,
//                             (r = 8);
//                         while (e >= 8);
//                       e &&
//                         ((i <<= e),
//                         (r -= e),
//                         (i |= (t[t.j] >>> r) & ((1 << e) - 1))),
//                         (t.a = 8 - r);
//                     }
//                     return i;
//                   }
//                   function p(t, e, i, r, n, a, s, o) {
//                     null == o && (o = 0);
//                     var l,
//                       h,
//                       u,
//                       f,
//                       c,
//                       p,
//                       m = a + 1,
//                       g = m % 2,
//                       _ = 0,
//                       b = r[n],
//                       y = r[n - 1],
//                       v = r[n - 2][m],
//                       w = y[m - 1],
//                       x = y[m],
//                       E = y[m + 1],
//                       k = b[m - 1],
//                       M = b[m + 1],
//                       S = Math.abs;
//                     if (
//                       (g && ((u = S(E - x)), (f = S(v - x)), (c = S(w - x))), g)
//                     ) {
//                       if (
//                         ((p =
//                           ((p =
//                             u > c && f < u
//                               ? v + w
//                               : u < c && f < c
//                               ? v + E
//                               : E + w) +
//                             2 * x) >>>
//                           2),
//                         o)
//                       )
//                         return void (b[m] = p);
//                       l = e.t * e.c[t.g + x - v] + e.c[t.g + w - x];
//                     } else
//                       (p =
//                         (x > w && x > E) || (x < w && x < E)
//                           ? (M + k + 2 * x) >>> 2
//                           : (k + M) >>> 1),
//                         (l = e.t * e.c[t.g + x - w] + e.c[t.g + w - k]);
//                     h = S(l);
//                     var A = (function (t) {
//                       for (var e = -1, i = 0; !i; e++)
//                         (i = (t[t.j] >>> (7 - t.a)) & 1),
//                           t.a++,
//                           (t.a &= 7),
//                           t.a || t.j++;
//                       return e;
//                     })(i);
//                     if (A < t.n - e.v - 1) {
//                       var I = (function (t, e) {
//                         var i = 0;
//                         if (e < t) for (; i <= 14 && e << ++i < t; );
//                         return i;
//                       })(s[h][0], s[h][1]);
//                       _ = d(i, I) + (A << I);
//                     } else _ = d(i, e.v) + 1;
//                     (_ = 1 & _ ? -1 - (_ >>> 1) : _ >>> 1),
//                       (s[h][0] += S(_)),
//                       s[h][1] == t.f && ((s[h][0] >>>= 1), (s[h][1] >>>= 1)),
//                       s[h][1]++,
//                       (p = l < 0 ? p - _ : p + _),
//                       t.i && (p < 0 ? (p += e.w) : p > t.g && (p -= e.w)),
//                       (b[m] = p >= 0 ? Math.min(p, t.g) : 0);
//                   }
//                   function m(t, e, i) {
//                     for (var r = t[0].length, n = e; n <= i; n++)
//                       (t[n][0] = t[n - 1][1]), (t[n][r - 1] = t[n - 1][r - 2]);
//                   }
//                   function g(t) {
//                     m(t, a, s), m(t, e, i), m(t, h, u);
//                   }
//                   function _(t, e, r, n, a, s, l, h, u, f, c, d, m) {
//                     for (var _ = 0, b = 1, y = a < o && a > i; b < t.m; )
//                       _ < t.m &&
//                         (p(
//                           t,
//                           e,
//                           r,
//                           n,
//                           a,
//                           _,
//                           l[u],
//                           t.h && ((y && f) || (!y && (c || (_ & d) == m)))
//                         ),
//                         p(
//                           t,
//                           e,
//                           r,
//                           n,
//                           s,
//                           _,
//                           l[u],
//                           t.h && ((!y && f) || (y && (c || (_ & d) == m)))
//                         ),
//                         (_ += 2)),
//                         _ > 8 &&
//                           (p(t, e, r, n, a, b, h[u]),
//                           p(t, e, r, n, s, b, h[u]),
//                           (b += 2));
//                     g(n);
//                   }
//                   function b(t, r, n, o, l, f) {
//                     _(t, r, n, o, e, a, l, f, 0, 0, 1, 0, 8),
//                       _(t, r, n, o, 8, h, l, f, 1, 0, 1, 0, 8),
//                       _(t, r, n, o, 3, 9, l, f, 2, 1, 0, 3, 0),
//                       _(t, r, n, o, 10, 16, l, f, 0, 0, 0, 3, 2),
//                       _(t, r, n, o, i, 11, l, f, 1, 0, 0, 3, 2),
//                       _(t, r, n, o, s, u, l, f, 2, 1, 0, 3, 0);
//                   }
//                   function y(t, i, r, n, s, o) {
//                     var l = o.length,
//                       u = t.l;
//                     s + 1 == t.s && (u = t.e - s * t.l);
//                     for (var f = 6 * t.e * n + s * t.l, c = 0; c < 6; c++) {
//                       for (var d = 0; d < u; d++) {
//                         var p,
//                           m = o[c % l][d % l];
//                         p =
//                           0 == m
//                             ? e + (c >>> 1)
//                             : 2 == m
//                             ? h + (c >>> 1)
//                             : a + c;
//                         var g = t.h
//                           ? ((((2 * d) / 3) & 2147483646) | (d % 3 & 1)) +
//                             (d % 3 >>> 1)
//                           : d >>> 1;
//                         i[f + d] = r[p][g + 1];
//                       }
//                       f += t.e;
//                     }
//                   }
//                   t._decompressRAF = function (a, h) {
//                     var d = (function (e) {
//                         var i = t._binBE.readUshort,
//                           r = {
//                             b: i(e, 0),
//                             i: e[2],
//                             C: e[3],
//                             u: e[4],
//                             q: i(e, 5),
//                             k: i(e, 7),
//                             e: i(e, 9),
//                             l: i(e, 11),
//                             s: e[13],
//                             d: i(e, 14),
//                           };
//                         if (
//                           18771 != r.b ||
//                           r.i > 1 ||
//                           r.q < 6 ||
//                           r.q % 6 ||
//                           r.e < 768 ||
//                           r.e % 24 ||
//                           768 != r.l ||
//                           r.k < r.l ||
//                           r.k % r.l ||
//                           r.k - r.e >= r.l ||
//                           r.s > 16 ||
//                           r.s != r.k / r.l ||
//                           r.s != Math.ceil(r.e / r.l) ||
//                           r.d != r.q / 6 ||
//                           (12 != r.u && 14 != r.u && 16 != r.u) ||
//                           (16 != r.C && 0 != r.C)
//                         )
//                           throw "Invalid data";
//                         if (0 == r.i)
//                           throw "Not implemented. We need this file!";
//                         return (
//                           (r.h = 16 == r.C),
//                           (r.m = 0 | (r.h ? (2 * r.l) / 3 : r.l >>> 1)),
//                           (r.A = r.m + 2),
//                           (r.f = 64),
//                           (r.g = (1 << r.u) - 1),
//                           (r.n = 4 * r.u),
//                           r
//                         );
//                       })(a),
//                       p = (function (e, i) {
//                         var r = Array(i.s),
//                           n = 4 * i.s,
//                           a = 16 + n;
//                         12 & n && (a += 16 - (12 & n));
//                         for (var s = 0, o = 16; s < i.s; o += 4) {
//                           var l = t._binBE.readUint(e, o);
//                           (r[s] = e.slice(a, a + l)),
//                             (r[s].j = 0),
//                             (r[s].a = 0),
//                             (a += l),
//                             s++;
//                         }
//                         if (a != e.length) throw "Invalid data";
//                         return r;
//                       })(a, d),
//                       m = f(d),
//                       _ = new Int16Array(d.e * d.q);
//                     null == h &&
//                       (h = d.h
//                         ? [
//                             [1, 1, 0, 1, 1, 2],
//                             [1, 1, 2, 1, 1, 0],
//                             [2, 0, 1, 0, 2, 1],
//                             [1, 1, 2, 1, 1, 0],
//                             [1, 1, 0, 1, 1, 2],
//                             [0, 2, 1, 2, 0, 1],
//                           ]
//                         : [
//                             [0, 1],
//                             [3, 2],
//                           ]);
//                     for (
//                       var v = [
//                           [0, 3],
//                           [1, i],
//                           [r, 11],
//                           [n, s],
//                           [o, 16],
//                           [l, u],
//                         ],
//                         w = [],
//                         x = 0;
//                       x < 18;
//                       x++
//                     )
//                       w[x] = new Uint16Array(d.A);
//                     for (var E = 0; E < d.s; E++) {
//                       var k = c(m),
//                         M = c(m);
//                       for (x = 0; x < 18; x++)
//                         for (var S = 0; S < d.A; S++) w[x][S] = 0;
//                       for (var A = 0; A < d.d; A++) {
//                         for (b(d, m, p[E], w, k, M), x = 0; x < 6; x++)
//                           for (S = 0; S < d.A; S++)
//                             w[v[x][0]][S] = w[v[x][1]][S];
//                         for (y(d, _, w, A, E, h), x = e; x < 18; x++)
//                           if (-1 == [r, n, o, l].indexOf(x))
//                             for (S = 0; S < d.A; S++) w[x][S] = 0;
//                         g(w);
//                       }
//                     }
//                     return _;
//                   };
//                 })();
//             })(e, requirePako());
//         })();
//       })(UTIF);
//       var util$1,
//         objectUtil,
//         UTIFExports = UTIF.exports,
//         utif = getDefaultExportFromCjs(UTIFExports);
//       function getDimensionValue(t) {
//         return "number" == typeof t
//           ? t
//           : t instanceof Uint8Array
//           ? t[0]
//           : "string" == typeof t[0]
//           ? parseInt(t[0])
//           : t[0];
//       }
//       function tiff() {
//         return {
//           mime: "image/tiff",
//           encode: (t) => {
//             let e = utif.encodeImage(t.data, t.width, t.height);
//             return Buffer.from(e);
//           },
//           decode: (t) => {
//             let e = utif.decode(t),
//               i = e[0];
//             if (!i) throw Error("No page found in TIFF");
//             if (!i.t256) throw Error("No image width found in TIFF");
//             if (!i.t257) throw Error("No image height found in TIFF");
//             e.forEach((e) => {
//               utif.decodeImage(t, e);
//             });
//             let r = utif.toRGBA8(i);
//             return {
//               data: Buffer.from(r),
//               width: getDimensionValue(i.t256),
//               height: getDimensionValue(i.t257),
//             };
//           },
//         };
//       }
//       !(function (t) {
//         (t.assertEqual = (t) => t),
//           (t.assertIs = function (t) {}),
//           (t.assertNever = function (t) {
//             throw Error();
//           }),
//           (t.arrayToEnum = (t) => {
//             let e = {};
//             for (let i of t) e[i] = i;
//             return e;
//           }),
//           (t.getValidEnumValues = (e) => {
//             let i = t.objectKeys(e).filter((t) => "number" != typeof e[e[t]]),
//               r = {};
//             for (let t of i) r[t] = e[t];
//             return t.objectValues(r);
//           }),
//           (t.objectValues = (e) =>
//             t.objectKeys(e).map(function (t) {
//               return e[t];
//             })),
//           (t.objectKeys =
//             "function" == typeof Object.keys
//               ? (t) => Object.keys(t)
//               : (t) => {
//                   let e = [];
//                   for (let i in t)
//                     Object.prototype.hasOwnProperty.call(t, i) && e.push(i);
//                   return e;
//                 }),
//           (t.find = (t, e) => {
//             for (let i of t) if (e(i)) return i;
//           }),
//           (t.isInteger =
//             "function" == typeof Number.isInteger
//               ? (t) => Number.isInteger(t)
//               : (t) =>
//                   "number" == typeof t && isFinite(t) && Math.floor(t) === t),
//           (t.joinValues = function (t, e = " | ") {
//             return t.map((t) => ("string" == typeof t ? `'${t}'` : t)).join(e);
//           }),
//           (t.jsonStringifyReplacer = (t, e) =>
//             "bigint" == typeof e ? e.toString() : e);
//       })(util$1 || (util$1 = {})),
//         (function (t) {
//           t.mergeShapes = (t, e) => ({ ...t, ...e });
//         })(objectUtil || (objectUtil = {}));
//       let ZodParsedType = util$1.arrayToEnum([
//           "string",
//           "nan",
//           "number",
//           "integer",
//           "float",
//           "boolean",
//           "date",
//           "bigint",
//           "symbol",
//           "function",
//           "undefined",
//           "null",
//           "array",
//           "object",
//           "unknown",
//           "promise",
//           "void",
//           "never",
//           "map",
//           "set",
//         ]),
//         getParsedType = (t) => {
//           switch (typeof t) {
//             case "undefined":
//               return ZodParsedType.undefined;
//             case "string":
//               return ZodParsedType.string;
//             case "number":
//               return isNaN(t) ? ZodParsedType.nan : ZodParsedType.number;
//             case "boolean":
//               return ZodParsedType.boolean;
//             case "function":
//               return ZodParsedType.function;
//             case "bigint":
//               return ZodParsedType.bigint;
//             case "symbol":
//               return ZodParsedType.symbol;
//             case "object":
//               return Array.isArray(t)
//                 ? ZodParsedType.array
//                 : null === t
//                 ? ZodParsedType.null
//                 : t.then &&
//                   "function" == typeof t.then &&
//                   t.catch &&
//                   "function" == typeof t.catch
//                 ? ZodParsedType.promise
//                 : "undefined" != typeof Map && t instanceof Map
//                 ? ZodParsedType.map
//                 : "undefined" != typeof Set && t instanceof Set
//                 ? ZodParsedType.set
//                 : "undefined" != typeof Date && t instanceof Date
//                 ? ZodParsedType.date
//                 : ZodParsedType.object;
//             default:
//               return ZodParsedType.unknown;
//           }
//         },
//         ZodIssueCode = util$1.arrayToEnum([
//           "invalid_type",
//           "invalid_literal",
//           "custom",
//           "invalid_union",
//           "invalid_union_discriminator",
//           "invalid_enum_value",
//           "unrecognized_keys",
//           "invalid_arguments",
//           "invalid_return_type",
//           "invalid_date",
//           "invalid_string",
//           "too_small",
//           "too_big",
//           "invalid_intersection_types",
//           "not_multiple_of",
//           "not_finite",
//         ]),
//         quotelessJson = (t) =>
//           JSON.stringify(t, null, 2).replace(/"([^"]+)":/g, "$1:");
//       class ZodError extends Error {
//         constructor(t) {
//           super(),
//             (this.issues = []),
//             (this.addIssue = (t) => {
//               this.issues = [...this.issues, t];
//             }),
//             (this.addIssues = (t = []) => {
//               this.issues = [...this.issues, ...t];
//             });
//           let e = new.target.prototype;
//           Object.setPrototypeOf
//             ? Object.setPrototypeOf(this, e)
//             : (this.__proto__ = e),
//             (this.name = "ZodError"),
//             (this.issues = t);
//         }
//         get errors() {
//           return this.issues;
//         }
//         format(t) {
//           let e =
//               t ||
//               function (t) {
//                 return t.message;
//               },
//             i = { _errors: [] },
//             r = (t) => {
//               for (let n of t.issues)
//                 if ("invalid_union" === n.code) n.unionErrors.map(r);
//                 else if ("invalid_return_type" === n.code) r(n.returnTypeError);
//                 else if ("invalid_arguments" === n.code) r(n.argumentsError);
//                 else if (0 === n.path.length) i._errors.push(e(n));
//                 else {
//                   let t = i,
//                     r = 0;
//                   for (; r < n.path.length; ) {
//                     let i = n.path[r];
//                     r === n.path.length - 1
//                       ? ((t[i] = t[i] || { _errors: [] }),
//                         t[i]._errors.push(e(n)))
//                       : (t[i] = t[i] || { _errors: [] }),
//                       (t = t[i]),
//                       r++;
//                   }
//                 }
//             };
//           return r(this), i;
//         }
//         static assert(t) {
//           if (!(t instanceof ZodError)) throw Error(`Not a ZodError: ${t}`);
//         }
//         toString() {
//           return this.message;
//         }
//         get message() {
//           return JSON.stringify(this.issues, util$1.jsonStringifyReplacer, 2);
//         }
//         get isEmpty() {
//           return 0 === this.issues.length;
//         }
//         flatten(t = (t) => t.message) {
//           let e = {},
//             i = [];
//           for (let r of this.issues)
//             r.path.length > 0
//               ? ((e[r.path[0]] = e[r.path[0]] || []), e[r.path[0]].push(t(r)))
//               : i.push(t(r));
//           return { formErrors: i, fieldErrors: e };
//         }
//         get formErrors() {
//           return this.flatten();
//         }
//       }
//       ZodError.create = (t) => new ZodError(t);
//       let errorMap = (t, e) => {
//           let i;
//           switch (t.code) {
//             case ZodIssueCode.invalid_type:
//               i =
//                 t.received === ZodParsedType.undefined
//                   ? "Required"
//                   : `Expected ${t.expected}, received ${t.received}`;
//               break;
//             case ZodIssueCode.invalid_literal:
//               i = `Invalid literal value, expected ${JSON.stringify(
//                 t.expected,
//                 util$1.jsonStringifyReplacer
//               )}`;
//               break;
//             case ZodIssueCode.unrecognized_keys:
//               i = `Unrecognized key(s) in object: ${util$1.joinValues(
//                 t.keys,
//                 ", "
//               )}`;
//               break;
//             case ZodIssueCode.invalid_union:
//               i = "Invalid input";
//               break;
//             case ZodIssueCode.invalid_union_discriminator:
//               i = `Invalid discriminator value. Expected ${util$1.joinValues(
//                 t.options
//               )}`;
//               break;
//             case ZodIssueCode.invalid_enum_value:
//               i = `Invalid enum value. Expected ${util$1.joinValues(
//                 t.options
//               )}, received '${t.received}'`;
//               break;
//             case ZodIssueCode.invalid_arguments:
//               i = "Invalid function arguments";
//               break;
//             case ZodIssueCode.invalid_return_type:
//               i = "Invalid function return type";
//               break;
//             case ZodIssueCode.invalid_date:
//               i = "Invalid date";
//               break;
//             case ZodIssueCode.invalid_string:
//               "object" == typeof t.validation
//                 ? "includes" in t.validation
//                   ? ((i = `Invalid input: must include "${t.validation.includes}"`),
//                     "number" == typeof t.validation.position &&
//                       (i = `${i} at one or more positions greater than or equal to ${t.validation.position}`))
//                   : "startsWith" in t.validation
//                   ? (i = `Invalid input: must start with "${t.validation.startsWith}"`)
//                   : "endsWith" in t.validation
//                   ? (i = `Invalid input: must end with "${t.validation.endsWith}"`)
//                   : util$1.assertNever(t.validation)
//                 : (i =
//                     "regex" !== t.validation
//                       ? `Invalid ${t.validation}`
//                       : "Invalid");
//               break;
//             case ZodIssueCode.too_small:
//               i =
//                 "array" === t.type
//                   ? `Array must contain ${
//                       t.exact
//                         ? "exactly"
//                         : t.inclusive
//                         ? "at least"
//                         : "more than"
//                     } ${t.minimum} element(s)`
//                   : "string" === t.type
//                   ? `String must contain ${
//                       t.exact ? "exactly" : t.inclusive ? "at least" : "over"
//                     } ${t.minimum} character(s)`
//                   : "number" === t.type
//                   ? `Number must be ${
//                       t.exact
//                         ? "exactly equal to "
//                         : t.inclusive
//                         ? "greater than or equal to "
//                         : "greater than "
//                     }${t.minimum}`
//                   : "date" === t.type
//                   ? `Date must be ${
//                       t.exact
//                         ? "exactly equal to "
//                         : t.inclusive
//                         ? "greater than or equal to "
//                         : "greater than "
//                     }${new Date(Number(t.minimum))}`
//                   : "Invalid input";
//               break;
//             case ZodIssueCode.too_big:
//               i =
//                 "array" === t.type
//                   ? `Array must contain ${
//                       t.exact
//                         ? "exactly"
//                         : t.inclusive
//                         ? "at most"
//                         : "less than"
//                     } ${t.maximum} element(s)`
//                   : "string" === t.type
//                   ? `String must contain ${
//                       t.exact ? "exactly" : t.inclusive ? "at most" : "under"
//                     } ${t.maximum} character(s)`
//                   : "number" === t.type
//                   ? `Number must be ${
//                       t.exact
//                         ? "exactly"
//                         : t.inclusive
//                         ? "less than or equal to"
//                         : "less than"
//                     } ${t.maximum}`
//                   : "bigint" === t.type
//                   ? `BigInt must be ${
//                       t.exact
//                         ? "exactly"
//                         : t.inclusive
//                         ? "less than or equal to"
//                         : "less than"
//                     } ${t.maximum}`
//                   : "date" === t.type
//                   ? `Date must be ${
//                       t.exact
//                         ? "exactly"
//                         : t.inclusive
//                         ? "smaller than or equal to"
//                         : "smaller than"
//                     } ${new Date(Number(t.maximum))}`
//                   : "Invalid input";
//               break;
//             case ZodIssueCode.custom:
//               i = "Invalid input";
//               break;
//             case ZodIssueCode.invalid_intersection_types:
//               i = "Intersection results could not be merged";
//               break;
//             case ZodIssueCode.not_multiple_of:
//               i = `Number must be a multiple of ${t.multipleOf}`;
//               break;
//             case ZodIssueCode.not_finite:
//               i = "Number must be finite";
//               break;
//             default:
//               (i = e.defaultError), util$1.assertNever(t);
//           }
//           return { message: i };
//         },
//         overrideErrorMap = errorMap;
//       function setErrorMap(t) {
//         overrideErrorMap = t;
//       }
//       function getErrorMap() {
//         return overrideErrorMap;
//       }
//       let makeIssue = (t) => {
//           let { data: e, path: i, errorMaps: r, issueData: n } = t,
//             a = [...i, ...(n.path || [])],
//             s = { ...n, path: a };
//           if (void 0 !== n.message)
//             return { ...n, path: a, message: n.message };
//           let o = "";
//           for (let t of r
//             .filter((t) => !!t)
//             .slice()
//             .reverse())
//             o = t(s, { data: e, defaultError: o }).message;
//           return { ...n, path: a, message: o };
//         },
//         EMPTY_PATH = [];
//       function addIssueToContext(t, e) {
//         let i = getErrorMap(),
//           r = makeIssue({
//             issueData: e,
//             data: t.data,
//             path: t.path,
//             errorMaps: [
//               t.common.contextualErrorMap,
//               t.schemaErrorMap,
//               i,
//               i === errorMap ? void 0 : errorMap,
//             ].filter((t) => !!t),
//           });
//         t.common.issues.push(r);
//       }
//       class ParseStatus {
//         constructor() {
//           this.value = "valid";
//         }
//         dirty() {
//           "valid" === this.value && (this.value = "dirty");
//         }
//         abort() {
//           "aborted" !== this.value && (this.value = "aborted");
//         }
//         static mergeArray(t, e) {
//           let i = [];
//           for (let r of e) {
//             if ("aborted" === r.status) return INVALID;
//             "dirty" === r.status && t.dirty(), i.push(r.value);
//           }
//           return { status: t.value, value: i };
//         }
//         static async mergeObjectAsync(t, e) {
//           let i = [];
//           for (let t of e) {
//             let e = await t.key,
//               r = await t.value;
//             i.push({ key: e, value: r });
//           }
//           return ParseStatus.mergeObjectSync(t, i);
//         }
//         static mergeObjectSync(t, e) {
//           let i = {};
//           for (let r of e) {
//             let { key: e, value: n } = r;
//             if ("aborted" === e.status || "aborted" === n.status)
//               return INVALID;
//             "dirty" === e.status && t.dirty(),
//               "dirty" === n.status && t.dirty(),
//               "__proto__" !== e.value &&
//                 (void 0 !== n.value || r.alwaysSet) &&
//                 (i[e.value] = n.value);
//           }
//           return { status: t.value, value: i };
//         }
//       }
//       let INVALID = Object.freeze({ status: "aborted" }),
//         DIRTY = (t) => ({ status: "dirty", value: t }),
//         OK = (t) => ({ status: "valid", value: t }),
//         isAborted = (t) => "aborted" === t.status,
//         isDirty = (t) => "dirty" === t.status,
//         isValid = (t) => "valid" === t.status,
//         isAsync = (t) => "undefined" != typeof Promise && t instanceof Promise;
//       function __classPrivateFieldGet(t, e, i, r) {
//         if ("function" == typeof e ? t !== e || !r : !e.has(t))
//           throw TypeError(
//             "Cannot read private member from an object whose class did not declare it"
//           );
//         return e.get(t);
//       }
//       function __classPrivateFieldSet(t, e, i, r, n) {
//         if ("function" == typeof e ? t !== e || !n : !e.has(t))
//           throw TypeError(
//             "Cannot write private member to an object whose class did not declare it"
//           );
//         return e.set(t, i), i;
//       }
//       "function" == typeof SuppressedError && SuppressedError,
//         (function (t) {
//           (t.errToObj = (t) =>
//             "string" == typeof t ? { message: t } : t || {}),
//             (t.toString = (t) =>
//               "string" == typeof t ? t : null == t ? void 0 : t.message);
//         })(errorUtil || (errorUtil = {}));
//       class ParseInputLazyPath {
//         constructor(t, e, i, r) {
//           (this._cachedPath = []),
//             (this.parent = t),
//             (this.data = e),
//             (this._path = i),
//             (this._key = r);
//         }
//         get path() {
//           return (
//             this._cachedPath.length ||
//               (this._key instanceof Array
//                 ? this._cachedPath.push(...this._path, ...this._key)
//                 : this._cachedPath.push(...this._path, this._key)),
//             this._cachedPath
//           );
//         }
//       }
//       let handleResult = (t, e) => {
//         if (isValid(e)) return { success: !0, data: e.value };
//         if (!t.common.issues.length)
//           throw Error("Validation failed but no issues detected.");
//         return {
//           success: !1,
//           get error() {
//             if (this._error) return this._error;
//             let e = new ZodError(t.common.issues);
//             return (this._error = e), this._error;
//           },
//         };
//       };
//       function processCreateParams(t) {
//         if (!t) return {};
//         let {
//           errorMap: e,
//           invalid_type_error: i,
//           required_error: r,
//           description: n,
//         } = t;
//         if (e && (i || r))
//           throw Error(
//             'Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.'
//           );
//         return e
//           ? { errorMap: e, description: n }
//           : {
//               errorMap: (e, n) => {
//                 var a, s;
//                 let { message: o } = t;
//                 return "invalid_enum_value" === e.code
//                   ? { message: null != o ? o : n.defaultError }
//                   : void 0 === n.data
//                   ? {
//                       message:
//                         null !== (a = null != o ? o : r) && void 0 !== a
//                           ? a
//                           : n.defaultError,
//                     }
//                   : "invalid_type" !== e.code
//                   ? { message: n.defaultError }
//                   : {
//                       message:
//                         null !== (s = null != o ? o : i) && void 0 !== s
//                           ? s
//                           : n.defaultError,
//                     };
//               },
//               description: n,
//             };
//       }
//       class ZodType {
//         constructor(t) {
//           (this.spa = this.safeParseAsync),
//             (this._def = t),
//             (this.parse = this.parse.bind(this)),
//             (this.safeParse = this.safeParse.bind(this)),
//             (this.parseAsync = this.parseAsync.bind(this)),
//             (this.safeParseAsync = this.safeParseAsync.bind(this)),
//             (this.spa = this.spa.bind(this)),
//             (this.refine = this.refine.bind(this)),
//             (this.refinement = this.refinement.bind(this)),
//             (this.superRefine = this.superRefine.bind(this)),
//             (this.optional = this.optional.bind(this)),
//             (this.nullable = this.nullable.bind(this)),
//             (this.nullish = this.nullish.bind(this)),
//             (this.array = this.array.bind(this)),
//             (this.promise = this.promise.bind(this)),
//             (this.or = this.or.bind(this)),
//             (this.and = this.and.bind(this)),
//             (this.transform = this.transform.bind(this)),
//             (this.brand = this.brand.bind(this)),
//             (this.default = this.default.bind(this)),
//             (this.catch = this.catch.bind(this)),
//             (this.describe = this.describe.bind(this)),
//             (this.pipe = this.pipe.bind(this)),
//             (this.readonly = this.readonly.bind(this)),
//             (this.isNullable = this.isNullable.bind(this)),
//             (this.isOptional = this.isOptional.bind(this));
//         }
//         get description() {
//           return this._def.description;
//         }
//         _getType(t) {
//           return getParsedType(t.data);
//         }
//         _getOrReturnCtx(t, e) {
//           return (
//             e || {
//               common: t.parent.common,
//               data: t.data,
//               parsedType: getParsedType(t.data),
//               schemaErrorMap: this._def.errorMap,
//               path: t.path,
//               parent: t.parent,
//             }
//           );
//         }
//         _processInputParams(t) {
//           return {
//             status: new ParseStatus(),
//             ctx: {
//               common: t.parent.common,
//               data: t.data,
//               parsedType: getParsedType(t.data),
//               schemaErrorMap: this._def.errorMap,
//               path: t.path,
//               parent: t.parent,
//             },
//           };
//         }
//         _parseSync(t) {
//           let e = this._parse(t);
//           if (isAsync(e)) throw Error("Synchronous parse encountered promise.");
//           return e;
//         }
//         _parseAsync(t) {
//           return Promise.resolve(this._parse(t));
//         }
//         parse(t, e) {
//           let i = this.safeParse(t, e);
//           if (i.success) return i.data;
//           throw i.error;
//         }
//         safeParse(t, e) {
//           var i;
//           let r = {
//               common: {
//                 issues: [],
//                 async:
//                   null !== (i = null == e ? void 0 : e.async) &&
//                   void 0 !== i &&
//                   i,
//                 contextualErrorMap: null == e ? void 0 : e.errorMap,
//               },
//               path: (null == e ? void 0 : e.path) || [],
//               schemaErrorMap: this._def.errorMap,
//               parent: null,
//               data: t,
//               parsedType: getParsedType(t),
//             },
//             n = this._parseSync({ data: t, path: r.path, parent: r });
//           return handleResult(r, n);
//         }
//         async parseAsync(t, e) {
//           let i = await this.safeParseAsync(t, e);
//           if (i.success) return i.data;
//           throw i.error;
//         }
//         async safeParseAsync(t, e) {
//           let i = {
//               common: {
//                 issues: [],
//                 contextualErrorMap: null == e ? void 0 : e.errorMap,
//                 async: !0,
//               },
//               path: (null == e ? void 0 : e.path) || [],
//               schemaErrorMap: this._def.errorMap,
//               parent: null,
//               data: t,
//               parsedType: getParsedType(t),
//             },
//             r = this._parse({ data: t, path: i.path, parent: i });
//           return handleResult(i, await (isAsync(r) ? r : Promise.resolve(r)));
//         }
//         refine(t, e) {
//           let i = (t) =>
//             "string" == typeof e || void 0 === e
//               ? { message: e }
//               : "function" == typeof e
//               ? e(t)
//               : e;
//           return this._refinement((e, r) => {
//             let n = t(e),
//               a = () => r.addIssue({ code: ZodIssueCode.custom, ...i(e) });
//             return "undefined" != typeof Promise && n instanceof Promise
//               ? n.then((t) => !!t || (a(), !1))
//               : !!n || (a(), !1);
//           });
//         }
//         refinement(t, e) {
//           return this._refinement(
//             (i, r) =>
//               !!t(i) || (r.addIssue("function" == typeof e ? e(i, r) : e), !1)
//           );
//         }
//         _refinement(t) {
//           return new ZodEffects({
//             schema: this,
//             typeName: ZodFirstPartyTypeKind.ZodEffects,
//             effect: { type: "refinement", refinement: t },
//           });
//         }
//         superRefine(t) {
//           return this._refinement(t);
//         }
//         optional() {
//           return ZodOptional.create(this, this._def);
//         }
//         nullable() {
//           return ZodNullable.create(this, this._def);
//         }
//         nullish() {
//           return this.nullable().optional();
//         }
//         array() {
//           return ZodArray.create(this, this._def);
//         }
//         promise() {
//           return ZodPromise.create(this, this._def);
//         }
//         or(t) {
//           return ZodUnion.create([this, t], this._def);
//         }
//         and(t) {
//           return ZodIntersection.create(this, t, this._def);
//         }
//         transform(t) {
//           return new ZodEffects({
//             ...processCreateParams(this._def),
//             schema: this,
//             typeName: ZodFirstPartyTypeKind.ZodEffects,
//             effect: { type: "transform", transform: t },
//           });
//         }
//         default(t) {
//           let e = "function" == typeof t ? t : () => t;
//           return new ZodDefault({
//             ...processCreateParams(this._def),
//             innerType: this,
//             defaultValue: e,
//             typeName: ZodFirstPartyTypeKind.ZodDefault,
//           });
//         }
//         brand() {
//           return new ZodBranded({
//             typeName: ZodFirstPartyTypeKind.ZodBranded,
//             type: this,
//             ...processCreateParams(this._def),
//           });
//         }
//         catch(t) {
//           let e = "function" == typeof t ? t : () => t;
//           return new ZodCatch({
//             ...processCreateParams(this._def),
//             innerType: this,
//             catchValue: e,
//             typeName: ZodFirstPartyTypeKind.ZodCatch,
//           });
//         }
//         describe(t) {
//           return new this.constructor({ ...this._def, description: t });
//         }
//         pipe(t) {
//           return ZodPipeline.create(this, t);
//         }
//         readonly() {
//           return ZodReadonly.create(this);
//         }
//         isOptional() {
//           return this.safeParse(void 0).success;
//         }
//         isNullable() {
//           return this.safeParse(null).success;
//         }
//       }
//       let cuidRegex = /^c[^\s-]{8,}$/i,
//         cuid2Regex = /^[0-9a-z]+$/,
//         ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/,
//         uuidRegex =
//           /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,
//         nanoidRegex = /^[a-z0-9_-]{21}$/i,
//         durationRegex =
//           /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,
//         emailRegex =
//           /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,
//         _emojiRegex = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$",
//         ipv4Regex =
//           /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
//         ipv6Regex =
//           /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
//         base64Regex =
//           /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
//         dateRegexSource =
//           "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",
//         dateRegex = RegExp(`^${dateRegexSource}$`);
//       function timeRegexSource(t) {
//         let e = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
//         return (
//           t.precision
//             ? (e = `${e}\\.\\d{${t.precision}}`)
//             : null == t.precision && (e = `${e}(\\.\\d+)?`),
//           e
//         );
//       }
//       function timeRegex(t) {
//         return RegExp(`^${timeRegexSource(t)}$`);
//       }
//       function datetimeRegex(t) {
//         let e = `${dateRegexSource}T${timeRegexSource(t)}`,
//           i = [];
//         return (
//           i.push(t.local ? "Z?" : "Z"),
//           t.offset && i.push("([+-]\\d{2}:?\\d{2})"),
//           (e = `${e}(${i.join("|")})`),
//           RegExp(`^${e}$`)
//         );
//       }
//       function isValidIP(t, e) {
//         return (
//           !(("v4" !== e && e) || !ipv4Regex.test(t)) ||
//           !(("v6" !== e && e) || !ipv6Regex.test(t))
//         );
//       }
//       class ZodString extends ZodType {
//         _parse(t) {
//           let e;
//           if (
//             (this._def.coerce && (t.data = String(t.data)),
//             this._getType(t) !== ZodParsedType.string)
//           ) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.string,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           let i = new ParseStatus();
//           for (let r of this._def.checks)
//             if ("min" === r.kind)
//               t.data.length < r.value &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_small,
//                   minimum: r.value,
//                   type: "string",
//                   inclusive: !0,
//                   exact: !1,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("max" === r.kind)
//               t.data.length > r.value &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_big,
//                   maximum: r.value,
//                   type: "string",
//                   inclusive: !0,
//                   exact: !1,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("length" === r.kind) {
//               let n = t.data.length > r.value,
//                 a = t.data.length < r.value;
//               (n || a) &&
//                 ((e = this._getOrReturnCtx(t, e)),
//                 n
//                   ? addIssueToContext(e, {
//                       code: ZodIssueCode.too_big,
//                       maximum: r.value,
//                       type: "string",
//                       inclusive: !0,
//                       exact: !0,
//                       message: r.message,
//                     })
//                   : a &&
//                     addIssueToContext(e, {
//                       code: ZodIssueCode.too_small,
//                       minimum: r.value,
//                       type: "string",
//                       inclusive: !0,
//                       exact: !0,
//                       message: r.message,
//                     }),
//                 i.dirty());
//             } else if ("email" === r.kind)
//               emailRegex.test(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   validation: "email",
//                   code: ZodIssueCode.invalid_string,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("emoji" === r.kind)
//               emojiRegex || (emojiRegex = RegExp(_emojiRegex, "u")),
//                 emojiRegex.test(t.data) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     validation: "emoji",
//                     code: ZodIssueCode.invalid_string,
//                     message: r.message,
//                   }),
//                   i.dirty());
//             else if ("uuid" === r.kind)
//               uuidRegex.test(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   validation: "uuid",
//                   code: ZodIssueCode.invalid_string,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("nanoid" === r.kind)
//               nanoidRegex.test(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   validation: "nanoid",
//                   code: ZodIssueCode.invalid_string,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("cuid" === r.kind)
//               cuidRegex.test(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   validation: "cuid",
//                   code: ZodIssueCode.invalid_string,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("cuid2" === r.kind)
//               cuid2Regex.test(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   validation: "cuid2",
//                   code: ZodIssueCode.invalid_string,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("ulid" === r.kind)
//               ulidRegex.test(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   validation: "ulid",
//                   code: ZodIssueCode.invalid_string,
//                   message: r.message,
//                 }),
//                 i.dirty());
//             else if ("url" === r.kind)
//               try {
//                 new URL(t.data);
//               } catch (n) {
//                 addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   validation: "url",
//                   code: ZodIssueCode.invalid_string,
//                   message: r.message,
//                 }),
//                   i.dirty();
//               }
//             else
//               "regex" === r.kind
//                 ? ((r.regex.lastIndex = 0),
//                   r.regex.test(t.data) ||
//                     (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                       validation: "regex",
//                       code: ZodIssueCode.invalid_string,
//                       message: r.message,
//                     }),
//                     i.dirty()))
//                 : "trim" === r.kind
//                 ? (t.data = t.data.trim())
//                 : "includes" === r.kind
//                 ? t.data.includes(r.value, r.position) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     code: ZodIssueCode.invalid_string,
//                     validation: { includes: r.value, position: r.position },
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "toLowerCase" === r.kind
//                 ? (t.data = t.data.toLowerCase())
//                 : "toUpperCase" === r.kind
//                 ? (t.data = t.data.toUpperCase())
//                 : "startsWith" === r.kind
//                 ? t.data.startsWith(r.value) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     code: ZodIssueCode.invalid_string,
//                     validation: { startsWith: r.value },
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "endsWith" === r.kind
//                 ? t.data.endsWith(r.value) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     code: ZodIssueCode.invalid_string,
//                     validation: { endsWith: r.value },
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "datetime" === r.kind
//                 ? datetimeRegex(r).test(t.data) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     code: ZodIssueCode.invalid_string,
//                     validation: "datetime",
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "date" === r.kind
//                 ? dateRegex.test(t.data) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     code: ZodIssueCode.invalid_string,
//                     validation: "date",
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "time" === r.kind
//                 ? timeRegex(r).test(t.data) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     code: ZodIssueCode.invalid_string,
//                     validation: "time",
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "duration" === r.kind
//                 ? durationRegex.test(t.data) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     validation: "duration",
//                     code: ZodIssueCode.invalid_string,
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "ip" === r.kind
//                 ? isValidIP(t.data, r.version) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     validation: "ip",
//                     code: ZodIssueCode.invalid_string,
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : "base64" === r.kind
//                 ? base64Regex.test(t.data) ||
//                   (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                     validation: "base64",
//                     code: ZodIssueCode.invalid_string,
//                     message: r.message,
//                   }),
//                   i.dirty())
//                 : util$1.assertNever(r);
//           return { status: i.value, value: t.data };
//         }
//         _regex(t, e, i) {
//           return this.refinement((e) => t.test(e), {
//             validation: e,
//             code: ZodIssueCode.invalid_string,
//             ...errorUtil.errToObj(i),
//           });
//         }
//         _addCheck(t) {
//           return new ZodString({
//             ...this._def,
//             checks: [...this._def.checks, t],
//           });
//         }
//         email(t) {
//           return this._addCheck({ kind: "email", ...errorUtil.errToObj(t) });
//         }
//         url(t) {
//           return this._addCheck({ kind: "url", ...errorUtil.errToObj(t) });
//         }
//         emoji(t) {
//           return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(t) });
//         }
//         uuid(t) {
//           return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(t) });
//         }
//         nanoid(t) {
//           return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(t) });
//         }
//         cuid(t) {
//           return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(t) });
//         }
//         cuid2(t) {
//           return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(t) });
//         }
//         ulid(t) {
//           return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(t) });
//         }
//         base64(t) {
//           return this._addCheck({ kind: "base64", ...errorUtil.errToObj(t) });
//         }
//         ip(t) {
//           return this._addCheck({ kind: "ip", ...errorUtil.errToObj(t) });
//         }
//         datetime(t) {
//           var e, i;
//           return "string" == typeof t
//             ? this._addCheck({
//                 kind: "datetime",
//                 precision: null,
//                 offset: !1,
//                 local: !1,
//                 message: t,
//               })
//             : this._addCheck({
//                 kind: "datetime",
//                 precision:
//                   void 0 === (null == t ? void 0 : t.precision)
//                     ? null
//                     : null == t
//                     ? void 0
//                     : t.precision,
//                 offset:
//                   null !== (e = null == t ? void 0 : t.offset) &&
//                   void 0 !== e &&
//                   e,
//                 local:
//                   null !== (i = null == t ? void 0 : t.local) &&
//                   void 0 !== i &&
//                   i,
//                 ...errorUtil.errToObj(null == t ? void 0 : t.message),
//               });
//         }
//         date(t) {
//           return this._addCheck({ kind: "date", message: t });
//         }
//         time(t) {
//           return "string" == typeof t
//             ? this._addCheck({ kind: "time", precision: null, message: t })
//             : this._addCheck({
//                 kind: "time",
//                 precision:
//                   void 0 === (null == t ? void 0 : t.precision)
//                     ? null
//                     : null == t
//                     ? void 0
//                     : t.precision,
//                 ...errorUtil.errToObj(null == t ? void 0 : t.message),
//               });
//         }
//         duration(t) {
//           return this._addCheck({ kind: "duration", ...errorUtil.errToObj(t) });
//         }
//         regex(t, e) {
//           return this._addCheck({
//             kind: "regex",
//             regex: t,
//             ...errorUtil.errToObj(e),
//           });
//         }
//         includes(t, e) {
//           return this._addCheck({
//             kind: "includes",
//             value: t,
//             position: null == e ? void 0 : e.position,
//             ...errorUtil.errToObj(null == e ? void 0 : e.message),
//           });
//         }
//         startsWith(t, e) {
//           return this._addCheck({
//             kind: "startsWith",
//             value: t,
//             ...errorUtil.errToObj(e),
//           });
//         }
//         endsWith(t, e) {
//           return this._addCheck({
//             kind: "endsWith",
//             value: t,
//             ...errorUtil.errToObj(e),
//           });
//         }
//         min(t, e) {
//           return this._addCheck({
//             kind: "min",
//             value: t,
//             ...errorUtil.errToObj(e),
//           });
//         }
//         max(t, e) {
//           return this._addCheck({
//             kind: "max",
//             value: t,
//             ...errorUtil.errToObj(e),
//           });
//         }
//         length(t, e) {
//           return this._addCheck({
//             kind: "length",
//             value: t,
//             ...errorUtil.errToObj(e),
//           });
//         }
//         nonempty(t) {
//           return this.min(1, errorUtil.errToObj(t));
//         }
//         trim() {
//           return new ZodString({
//             ...this._def,
//             checks: [...this._def.checks, { kind: "trim" }],
//           });
//         }
//         toLowerCase() {
//           return new ZodString({
//             ...this._def,
//             checks: [...this._def.checks, { kind: "toLowerCase" }],
//           });
//         }
//         toUpperCase() {
//           return new ZodString({
//             ...this._def,
//             checks: [...this._def.checks, { kind: "toUpperCase" }],
//           });
//         }
//         get isDatetime() {
//           return !!this._def.checks.find((t) => "datetime" === t.kind);
//         }
//         get isDate() {
//           return !!this._def.checks.find((t) => "date" === t.kind);
//         }
//         get isTime() {
//           return !!this._def.checks.find((t) => "time" === t.kind);
//         }
//         get isDuration() {
//           return !!this._def.checks.find((t) => "duration" === t.kind);
//         }
//         get isEmail() {
//           return !!this._def.checks.find((t) => "email" === t.kind);
//         }
//         get isURL() {
//           return !!this._def.checks.find((t) => "url" === t.kind);
//         }
//         get isEmoji() {
//           return !!this._def.checks.find((t) => "emoji" === t.kind);
//         }
//         get isUUID() {
//           return !!this._def.checks.find((t) => "uuid" === t.kind);
//         }
//         get isNANOID() {
//           return !!this._def.checks.find((t) => "nanoid" === t.kind);
//         }
//         get isCUID() {
//           return !!this._def.checks.find((t) => "cuid" === t.kind);
//         }
//         get isCUID2() {
//           return !!this._def.checks.find((t) => "cuid2" === t.kind);
//         }
//         get isULID() {
//           return !!this._def.checks.find((t) => "ulid" === t.kind);
//         }
//         get isIP() {
//           return !!this._def.checks.find((t) => "ip" === t.kind);
//         }
//         get isBase64() {
//           return !!this._def.checks.find((t) => "base64" === t.kind);
//         }
//         get minLength() {
//           let t = null;
//           for (let e of this._def.checks)
//             "min" === e.kind && (null === t || e.value > t) && (t = e.value);
//           return t;
//         }
//         get maxLength() {
//           let t = null;
//           for (let e of this._def.checks)
//             "max" === e.kind && (null === t || e.value < t) && (t = e.value);
//           return t;
//         }
//       }
//       function floatSafeRemainder(t, e) {
//         let i = (t.toString().split(".")[1] || "").length,
//           r = (e.toString().split(".")[1] || "").length,
//           n = i > r ? i : r;
//         return (
//           (parseInt(t.toFixed(n).replace(".", "")) %
//             parseInt(e.toFixed(n).replace(".", ""))) /
//           Math.pow(10, n)
//         );
//       }
//       ZodString.create = (t) => {
//         var e;
//         return new ZodString({
//           checks: [],
//           typeName: ZodFirstPartyTypeKind.ZodString,
//           coerce:
//             null !== (e = null == t ? void 0 : t.coerce) && void 0 !== e && e,
//           ...processCreateParams(t),
//         });
//       };
//       class ZodNumber extends ZodType {
//         constructor() {
//           super(...arguments),
//             (this.min = this.gte),
//             (this.max = this.lte),
//             (this.step = this.multipleOf);
//         }
//         _parse(t) {
//           let e;
//           if (
//             (this._def.coerce && (t.data = Number(t.data)),
//             this._getType(t) !== ZodParsedType.number)
//           ) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.number,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           let i = new ParseStatus();
//           for (let r of this._def.checks)
//             "int" === r.kind
//               ? util$1.isInteger(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.invalid_type,
//                   expected: "integer",
//                   received: "float",
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : "min" === r.kind
//               ? (r.inclusive ? t.data < r.value : t.data <= r.value) &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_small,
//                   minimum: r.value,
//                   type: "number",
//                   inclusive: r.inclusive,
//                   exact: !1,
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : "max" === r.kind
//               ? (r.inclusive ? t.data > r.value : t.data >= r.value) &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_big,
//                   maximum: r.value,
//                   type: "number",
//                   inclusive: r.inclusive,
//                   exact: !1,
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : "multipleOf" === r.kind
//               ? 0 !== floatSafeRemainder(t.data, r.value) &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.not_multiple_of,
//                   multipleOf: r.value,
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : "finite" === r.kind
//               ? Number.isFinite(t.data) ||
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.not_finite,
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : util$1.assertNever(r);
//           return { status: i.value, value: t.data };
//         }
//         gte(t, e) {
//           return this.setLimit("min", t, !0, errorUtil.toString(e));
//         }
//         gt(t, e) {
//           return this.setLimit("min", t, !1, errorUtil.toString(e));
//         }
//         lte(t, e) {
//           return this.setLimit("max", t, !0, errorUtil.toString(e));
//         }
//         lt(t, e) {
//           return this.setLimit("max", t, !1, errorUtil.toString(e));
//         }
//         setLimit(t, e, i, r) {
//           return new ZodNumber({
//             ...this._def,
//             checks: [
//               ...this._def.checks,
//               {
//                 kind: t,
//                 value: e,
//                 inclusive: i,
//                 message: errorUtil.toString(r),
//               },
//             ],
//           });
//         }
//         _addCheck(t) {
//           return new ZodNumber({
//             ...this._def,
//             checks: [...this._def.checks, t],
//           });
//         }
//         int(t) {
//           return this._addCheck({
//             kind: "int",
//             message: errorUtil.toString(t),
//           });
//         }
//         positive(t) {
//           return this._addCheck({
//             kind: "min",
//             value: 0,
//             inclusive: !1,
//             message: errorUtil.toString(t),
//           });
//         }
//         negative(t) {
//           return this._addCheck({
//             kind: "max",
//             value: 0,
//             inclusive: !1,
//             message: errorUtil.toString(t),
//           });
//         }
//         nonpositive(t) {
//           return this._addCheck({
//             kind: "max",
//             value: 0,
//             inclusive: !0,
//             message: errorUtil.toString(t),
//           });
//         }
//         nonnegative(t) {
//           return this._addCheck({
//             kind: "min",
//             value: 0,
//             inclusive: !0,
//             message: errorUtil.toString(t),
//           });
//         }
//         multipleOf(t, e) {
//           return this._addCheck({
//             kind: "multipleOf",
//             value: t,
//             message: errorUtil.toString(e),
//           });
//         }
//         finite(t) {
//           return this._addCheck({
//             kind: "finite",
//             message: errorUtil.toString(t),
//           });
//         }
//         safe(t) {
//           return this._addCheck({
//             kind: "min",
//             inclusive: !0,
//             value: Number.MIN_SAFE_INTEGER,
//             message: errorUtil.toString(t),
//           })._addCheck({
//             kind: "max",
//             inclusive: !0,
//             value: Number.MAX_SAFE_INTEGER,
//             message: errorUtil.toString(t),
//           });
//         }
//         get minValue() {
//           let t = null;
//           for (let e of this._def.checks)
//             "min" === e.kind && (null === t || e.value > t) && (t = e.value);
//           return t;
//         }
//         get maxValue() {
//           let t = null;
//           for (let e of this._def.checks)
//             "max" === e.kind && (null === t || e.value < t) && (t = e.value);
//           return t;
//         }
//         get isInt() {
//           return !!this._def.checks.find(
//             (t) =>
//               "int" === t.kind ||
//               ("multipleOf" === t.kind && util$1.isInteger(t.value))
//           );
//         }
//         get isFinite() {
//           let t = null,
//             e = null;
//           for (let i of this._def.checks) {
//             if (
//               "finite" === i.kind ||
//               "int" === i.kind ||
//               "multipleOf" === i.kind
//             )
//               return !0;
//             "min" === i.kind
//               ? (null === e || i.value > e) && (e = i.value)
//               : "max" === i.kind &&
//                 (null === t || i.value < t) &&
//                 (t = i.value);
//           }
//           return Number.isFinite(e) && Number.isFinite(t);
//         }
//       }
//       ZodNumber.create = (t) =>
//         new ZodNumber({
//           checks: [],
//           typeName: ZodFirstPartyTypeKind.ZodNumber,
//           coerce: (null == t ? void 0 : t.coerce) || !1,
//           ...processCreateParams(t),
//         });
//       class ZodBigInt extends ZodType {
//         constructor() {
//           super(...arguments), (this.min = this.gte), (this.max = this.lte);
//         }
//         _parse(t) {
//           let e;
//           if (
//             (this._def.coerce && (t.data = BigInt(t.data)),
//             this._getType(t) !== ZodParsedType.bigint)
//           ) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.bigint,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           let i = new ParseStatus();
//           for (let r of this._def.checks)
//             "min" === r.kind
//               ? (r.inclusive ? t.data < r.value : t.data <= r.value) &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_small,
//                   type: "bigint",
//                   minimum: r.value,
//                   inclusive: r.inclusive,
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : "max" === r.kind
//               ? (r.inclusive ? t.data > r.value : t.data >= r.value) &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_big,
//                   type: "bigint",
//                   maximum: r.value,
//                   inclusive: r.inclusive,
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : "multipleOf" === r.kind
//               ? t.data % r.value !== BigInt(0) &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.not_multiple_of,
//                   multipleOf: r.value,
//                   message: r.message,
//                 }),
//                 i.dirty())
//               : util$1.assertNever(r);
//           return { status: i.value, value: t.data };
//         }
//         gte(t, e) {
//           return this.setLimit("min", t, !0, errorUtil.toString(e));
//         }
//         gt(t, e) {
//           return this.setLimit("min", t, !1, errorUtil.toString(e));
//         }
//         lte(t, e) {
//           return this.setLimit("max", t, !0, errorUtil.toString(e));
//         }
//         lt(t, e) {
//           return this.setLimit("max", t, !1, errorUtil.toString(e));
//         }
//         setLimit(t, e, i, r) {
//           return new ZodBigInt({
//             ...this._def,
//             checks: [
//               ...this._def.checks,
//               {
//                 kind: t,
//                 value: e,
//                 inclusive: i,
//                 message: errorUtil.toString(r),
//               },
//             ],
//           });
//         }
//         _addCheck(t) {
//           return new ZodBigInt({
//             ...this._def,
//             checks: [...this._def.checks, t],
//           });
//         }
//         positive(t) {
//           return this._addCheck({
//             kind: "min",
//             value: BigInt(0),
//             inclusive: !1,
//             message: errorUtil.toString(t),
//           });
//         }
//         negative(t) {
//           return this._addCheck({
//             kind: "max",
//             value: BigInt(0),
//             inclusive: !1,
//             message: errorUtil.toString(t),
//           });
//         }
//         nonpositive(t) {
//           return this._addCheck({
//             kind: "max",
//             value: BigInt(0),
//             inclusive: !0,
//             message: errorUtil.toString(t),
//           });
//         }
//         nonnegative(t) {
//           return this._addCheck({
//             kind: "min",
//             value: BigInt(0),
//             inclusive: !0,
//             message: errorUtil.toString(t),
//           });
//         }
//         multipleOf(t, e) {
//           return this._addCheck({
//             kind: "multipleOf",
//             value: t,
//             message: errorUtil.toString(e),
//           });
//         }
//         get minValue() {
//           let t = null;
//           for (let e of this._def.checks)
//             "min" === e.kind && (null === t || e.value > t) && (t = e.value);
//           return t;
//         }
//         get maxValue() {
//           let t = null;
//           for (let e of this._def.checks)
//             "max" === e.kind && (null === t || e.value < t) && (t = e.value);
//           return t;
//         }
//       }
//       ZodBigInt.create = (t) => {
//         var e;
//         return new ZodBigInt({
//           checks: [],
//           typeName: ZodFirstPartyTypeKind.ZodBigInt,
//           coerce:
//             null !== (e = null == t ? void 0 : t.coerce) && void 0 !== e && e,
//           ...processCreateParams(t),
//         });
//       };
//       class ZodBoolean extends ZodType {
//         _parse(t) {
//           if (
//             (this._def.coerce && (t.data = !!t.data),
//             this._getType(t) !== ZodParsedType.boolean)
//           ) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.boolean,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           return OK(t.data);
//         }
//       }
//       ZodBoolean.create = (t) =>
//         new ZodBoolean({
//           typeName: ZodFirstPartyTypeKind.ZodBoolean,
//           coerce: (null == t ? void 0 : t.coerce) || !1,
//           ...processCreateParams(t),
//         });
//       class ZodDate extends ZodType {
//         _parse(t) {
//           let e;
//           if (
//             (this._def.coerce && (t.data = new Date(t.data)),
//             this._getType(t) !== ZodParsedType.date)
//           ) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.date,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           if (isNaN(t.data.getTime()))
//             return (
//               addIssueToContext(this._getOrReturnCtx(t), {
//                 code: ZodIssueCode.invalid_date,
//               }),
//               INVALID
//             );
//           let i = new ParseStatus();
//           for (let r of this._def.checks)
//             "min" === r.kind
//               ? t.data.getTime() < r.value &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_small,
//                   message: r.message,
//                   inclusive: !0,
//                   exact: !1,
//                   minimum: r.value,
//                   type: "date",
//                 }),
//                 i.dirty())
//               : "max" === r.kind
//               ? t.data.getTime() > r.value &&
//                 (addIssueToContext((e = this._getOrReturnCtx(t, e)), {
//                   code: ZodIssueCode.too_big,
//                   message: r.message,
//                   inclusive: !0,
//                   exact: !1,
//                   maximum: r.value,
//                   type: "date",
//                 }),
//                 i.dirty())
//               : util$1.assertNever(r);
//           return { status: i.value, value: new Date(t.data.getTime()) };
//         }
//         _addCheck(t) {
//           return new ZodDate({
//             ...this._def,
//             checks: [...this._def.checks, t],
//           });
//         }
//         min(t, e) {
//           return this._addCheck({
//             kind: "min",
//             value: t.getTime(),
//             message: errorUtil.toString(e),
//           });
//         }
//         max(t, e) {
//           return this._addCheck({
//             kind: "max",
//             value: t.getTime(),
//             message: errorUtil.toString(e),
//           });
//         }
//         get minDate() {
//           let t = null;
//           for (let e of this._def.checks)
//             "min" === e.kind && (null === t || e.value > t) && (t = e.value);
//           return null != t ? new Date(t) : null;
//         }
//         get maxDate() {
//           let t = null;
//           for (let e of this._def.checks)
//             "max" === e.kind && (null === t || e.value < t) && (t = e.value);
//           return null != t ? new Date(t) : null;
//         }
//       }
//       ZodDate.create = (t) =>
//         new ZodDate({
//           checks: [],
//           coerce: (null == t ? void 0 : t.coerce) || !1,
//           typeName: ZodFirstPartyTypeKind.ZodDate,
//           ...processCreateParams(t),
//         });
//       class ZodSymbol extends ZodType {
//         _parse(t) {
//           if (this._getType(t) !== ZodParsedType.symbol) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.symbol,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           return OK(t.data);
//         }
//       }
//       ZodSymbol.create = (t) =>
//         new ZodSymbol({
//           typeName: ZodFirstPartyTypeKind.ZodSymbol,
//           ...processCreateParams(t),
//         });
//       class ZodUndefined extends ZodType {
//         _parse(t) {
//           if (this._getType(t) !== ZodParsedType.undefined) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.undefined,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           return OK(t.data);
//         }
//       }
//       ZodUndefined.create = (t) =>
//         new ZodUndefined({
//           typeName: ZodFirstPartyTypeKind.ZodUndefined,
//           ...processCreateParams(t),
//         });
//       class ZodNull extends ZodType {
//         _parse(t) {
//           if (this._getType(t) !== ZodParsedType.null) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.null,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           return OK(t.data);
//         }
//       }
//       ZodNull.create = (t) =>
//         new ZodNull({
//           typeName: ZodFirstPartyTypeKind.ZodNull,
//           ...processCreateParams(t),
//         });
//       class ZodAny extends ZodType {
//         constructor() {
//           super(...arguments), (this._any = !0);
//         }
//         _parse(t) {
//           return OK(t.data);
//         }
//       }
//       ZodAny.create = (t) =>
//         new ZodAny({
//           typeName: ZodFirstPartyTypeKind.ZodAny,
//           ...processCreateParams(t),
//         });
//       class ZodUnknown extends ZodType {
//         constructor() {
//           super(...arguments), (this._unknown = !0);
//         }
//         _parse(t) {
//           return OK(t.data);
//         }
//       }
//       ZodUnknown.create = (t) =>
//         new ZodUnknown({
//           typeName: ZodFirstPartyTypeKind.ZodUnknown,
//           ...processCreateParams(t),
//         });
//       class ZodNever extends ZodType {
//         _parse(t) {
//           let e = this._getOrReturnCtx(t);
//           return (
//             addIssueToContext(e, {
//               code: ZodIssueCode.invalid_type,
//               expected: ZodParsedType.never,
//               received: e.parsedType,
//             }),
//             INVALID
//           );
//         }
//       }
//       ZodNever.create = (t) =>
//         new ZodNever({
//           typeName: ZodFirstPartyTypeKind.ZodNever,
//           ...processCreateParams(t),
//         });
//       class ZodVoid extends ZodType {
//         _parse(t) {
//           if (this._getType(t) !== ZodParsedType.undefined) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.void,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           return OK(t.data);
//         }
//       }
//       ZodVoid.create = (t) =>
//         new ZodVoid({
//           typeName: ZodFirstPartyTypeKind.ZodVoid,
//           ...processCreateParams(t),
//         });
//       class ZodArray extends ZodType {
//         _parse(t) {
//           let { ctx: e, status: i } = this._processInputParams(t),
//             r = this._def;
//           if (e.parsedType !== ZodParsedType.array)
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.array,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           if (null !== r.exactLength) {
//             let t = e.data.length > r.exactLength.value,
//               n = e.data.length < r.exactLength.value;
//             (t || n) &&
//               (addIssueToContext(e, {
//                 code: t ? ZodIssueCode.too_big : ZodIssueCode.too_small,
//                 minimum: n ? r.exactLength.value : void 0,
//                 maximum: t ? r.exactLength.value : void 0,
//                 type: "array",
//                 inclusive: !0,
//                 exact: !0,
//                 message: r.exactLength.message,
//               }),
//               i.dirty());
//           }
//           if (
//             (null !== r.minLength &&
//               e.data.length < r.minLength.value &&
//               (addIssueToContext(e, {
//                 code: ZodIssueCode.too_small,
//                 minimum: r.minLength.value,
//                 type: "array",
//                 inclusive: !0,
//                 exact: !1,
//                 message: r.minLength.message,
//               }),
//               i.dirty()),
//             null !== r.maxLength &&
//               e.data.length > r.maxLength.value &&
//               (addIssueToContext(e, {
//                 code: ZodIssueCode.too_big,
//                 maximum: r.maxLength.value,
//                 type: "array",
//                 inclusive: !0,
//                 exact: !1,
//                 message: r.maxLength.message,
//               }),
//               i.dirty()),
//             e.common.async)
//           )
//             return Promise.all(
//               [...e.data].map((t, i) =>
//                 r.type._parseAsync(new ParseInputLazyPath(e, t, e.path, i))
//               )
//             ).then((t) => ParseStatus.mergeArray(i, t));
//           let n = [...e.data].map((t, i) =>
//             r.type._parseSync(new ParseInputLazyPath(e, t, e.path, i))
//           );
//           return ParseStatus.mergeArray(i, n);
//         }
//         get element() {
//           return this._def.type;
//         }
//         min(t, e) {
//           return new ZodArray({
//             ...this._def,
//             minLength: { value: t, message: errorUtil.toString(e) },
//           });
//         }
//         max(t, e) {
//           return new ZodArray({
//             ...this._def,
//             maxLength: { value: t, message: errorUtil.toString(e) },
//           });
//         }
//         length(t, e) {
//           return new ZodArray({
//             ...this._def,
//             exactLength: { value: t, message: errorUtil.toString(e) },
//           });
//         }
//         nonempty(t) {
//           return this.min(1, t);
//         }
//       }
//       function deepPartialify(t) {
//         if (t instanceof ZodObject) {
//           let e = {};
//           for (let i in t.shape) {
//             let r = t.shape[i];
//             e[i] = ZodOptional.create(deepPartialify(r));
//           }
//           return new ZodObject({ ...t._def, shape: () => e });
//         }
//         return t instanceof ZodArray
//           ? new ZodArray({ ...t._def, type: deepPartialify(t.element) })
//           : t instanceof ZodOptional
//           ? ZodOptional.create(deepPartialify(t.unwrap()))
//           : t instanceof ZodNullable
//           ? ZodNullable.create(deepPartialify(t.unwrap()))
//           : t instanceof ZodTuple
//           ? ZodTuple.create(t.items.map((t) => deepPartialify(t)))
//           : t;
//       }
//       ZodArray.create = (t, e) =>
//         new ZodArray({
//           type: t,
//           minLength: null,
//           maxLength: null,
//           exactLength: null,
//           typeName: ZodFirstPartyTypeKind.ZodArray,
//           ...processCreateParams(e),
//         });
//       class ZodObject extends ZodType {
//         constructor() {
//           super(...arguments),
//             (this._cached = null),
//             (this.nonstrict = this.passthrough),
//             (this.augment = this.extend);
//         }
//         _getCached() {
//           if (null !== this._cached) return this._cached;
//           let t = this._def.shape(),
//             e = util$1.objectKeys(t);
//           return (this._cached = { shape: t, keys: e });
//         }
//         _parse(t) {
//           if (this._getType(t) !== ZodParsedType.object) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.object,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           let { status: e, ctx: i } = this._processInputParams(t),
//             { shape: r, keys: n } = this._getCached(),
//             a = [];
//           if (
//             !(
//               this._def.catchall instanceof ZodNever &&
//               "strip" === this._def.unknownKeys
//             )
//           )
//             for (let t in i.data) n.includes(t) || a.push(t);
//           let s = [];
//           for (let t of n) {
//             let e = r[t],
//               n = i.data[t];
//             s.push({
//               key: { status: "valid", value: t },
//               value: e._parse(new ParseInputLazyPath(i, n, i.path, t)),
//               alwaysSet: t in i.data,
//             });
//           }
//           if (this._def.catchall instanceof ZodNever) {
//             let t = this._def.unknownKeys;
//             if ("passthrough" === t)
//               for (let t of a)
//                 s.push({
//                   key: { status: "valid", value: t },
//                   value: { status: "valid", value: i.data[t] },
//                 });
//             else if ("strict" === t)
//               a.length > 0 &&
//                 (addIssueToContext(i, {
//                   code: ZodIssueCode.unrecognized_keys,
//                   keys: a,
//                 }),
//                 e.dirty());
//             else if ("strip" !== t)
//               throw Error(
//                 "Internal ZodObject error: invalid unknownKeys value."
//               );
//           } else {
//             let t = this._def.catchall;
//             for (let e of a) {
//               let r = i.data[e];
//               s.push({
//                 key: { status: "valid", value: e },
//                 value: t._parse(new ParseInputLazyPath(i, r, i.path, e)),
//                 alwaysSet: e in i.data,
//               });
//             }
//           }
//           return i.common.async
//             ? Promise.resolve()
//                 .then(async () => {
//                   let t = [];
//                   for (let e of s) {
//                     let i = await e.key,
//                       r = await e.value;
//                     t.push({ key: i, value: r, alwaysSet: e.alwaysSet });
//                   }
//                   return t;
//                 })
//                 .then((t) => ParseStatus.mergeObjectSync(e, t))
//             : ParseStatus.mergeObjectSync(e, s);
//         }
//         get shape() {
//           return this._def.shape();
//         }
//         strict(t) {
//           return (
//             errorUtil.errToObj,
//             new ZodObject({
//               ...this._def,
//               unknownKeys: "strict",
//               ...(void 0 !== t
//                 ? {
//                     errorMap: (e, i) => {
//                       var r, n, a, s;
//                       let o =
//                         null !==
//                           (a =
//                             null === (n = (r = this._def).errorMap) ||
//                             void 0 === n
//                               ? void 0
//                               : n.call(r, e, i).message) && void 0 !== a
//                           ? a
//                           : i.defaultError;
//                       return "unrecognized_keys" === e.code
//                         ? {
//                             message:
//                               null !== (s = errorUtil.errToObj(t).message) &&
//                               void 0 !== s
//                                 ? s
//                                 : o,
//                           }
//                         : { message: o };
//                     },
//                   }
//                 : {}),
//             })
//           );
//         }
//         strip() {
//           return new ZodObject({ ...this._def, unknownKeys: "strip" });
//         }
//         passthrough() {
//           return new ZodObject({ ...this._def, unknownKeys: "passthrough" });
//         }
//         extend(t) {
//           return new ZodObject({
//             ...this._def,
//             shape: () => ({ ...this._def.shape(), ...t }),
//           });
//         }
//         merge(t) {
//           return new ZodObject({
//             unknownKeys: t._def.unknownKeys,
//             catchall: t._def.catchall,
//             shape: () => ({ ...this._def.shape(), ...t._def.shape() }),
//             typeName: ZodFirstPartyTypeKind.ZodObject,
//           });
//         }
//         setKey(t, e) {
//           return this.augment({ [t]: e });
//         }
//         catchall(t) {
//           return new ZodObject({ ...this._def, catchall: t });
//         }
//         pick(t) {
//           let e = {};
//           return (
//             util$1.objectKeys(t).forEach((i) => {
//               t[i] && this.shape[i] && (e[i] = this.shape[i]);
//             }),
//             new ZodObject({ ...this._def, shape: () => e })
//           );
//         }
//         omit(t) {
//           let e = {};
//           return (
//             util$1.objectKeys(this.shape).forEach((i) => {
//               t[i] || (e[i] = this.shape[i]);
//             }),
//             new ZodObject({ ...this._def, shape: () => e })
//           );
//         }
//         deepPartial() {
//           return deepPartialify(this);
//         }
//         partial(t) {
//           let e = {};
//           return (
//             util$1.objectKeys(this.shape).forEach((i) => {
//               let r = this.shape[i];
//               t && !t[i] ? (e[i] = r) : (e[i] = r.optional());
//             }),
//             new ZodObject({ ...this._def, shape: () => e })
//           );
//         }
//         required(t) {
//           let e = {};
//           return (
//             util$1.objectKeys(this.shape).forEach((i) => {
//               if (t && !t[i]) e[i] = this.shape[i];
//               else {
//                 let t = this.shape[i];
//                 for (; t instanceof ZodOptional; ) t = t._def.innerType;
//                 e[i] = t;
//               }
//             }),
//             new ZodObject({ ...this._def, shape: () => e })
//           );
//         }
//         keyof() {
//           return createZodEnum(util$1.objectKeys(this.shape));
//         }
//       }
//       (ZodObject.create = (t, e) =>
//         new ZodObject({
//           shape: () => t,
//           unknownKeys: "strip",
//           catchall: ZodNever.create(),
//           typeName: ZodFirstPartyTypeKind.ZodObject,
//           ...processCreateParams(e),
//         })),
//         (ZodObject.strictCreate = (t, e) =>
//           new ZodObject({
//             shape: () => t,
//             unknownKeys: "strict",
//             catchall: ZodNever.create(),
//             typeName: ZodFirstPartyTypeKind.ZodObject,
//             ...processCreateParams(e),
//           })),
//         (ZodObject.lazycreate = (t, e) =>
//           new ZodObject({
//             shape: t,
//             unknownKeys: "strip",
//             catchall: ZodNever.create(),
//             typeName: ZodFirstPartyTypeKind.ZodObject,
//             ...processCreateParams(e),
//           }));
//       class ZodUnion extends ZodType {
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t),
//             i = this._def.options;
//           if (e.common.async)
//             return Promise.all(
//               i.map(async (t) => {
//                 let i = {
//                   ...e,
//                   common: { ...e.common, issues: [] },
//                   parent: null,
//                 };
//                 return {
//                   result: await t._parseAsync({
//                     data: e.data,
//                     path: e.path,
//                     parent: i,
//                   }),
//                   ctx: i,
//                 };
//               })
//             ).then(function (t) {
//               for (let e of t) if ("valid" === e.result.status) return e.result;
//               for (let i of t)
//                 if ("dirty" === i.result.status)
//                   return e.common.issues.push(...i.ctx.common.issues), i.result;
//               let i = t.map((t) => new ZodError(t.ctx.common.issues));
//               return (
//                 addIssueToContext(e, {
//                   code: ZodIssueCode.invalid_union,
//                   unionErrors: i,
//                 }),
//                 INVALID
//               );
//             });
//           {
//             let t;
//             let r = [];
//             for (let n of i) {
//               let i = {
//                   ...e,
//                   common: { ...e.common, issues: [] },
//                   parent: null,
//                 },
//                 a = n._parseSync({ data: e.data, path: e.path, parent: i });
//               if ("valid" === a.status) return a;
//               "dirty" !== a.status || t || (t = { result: a, ctx: i }),
//                 i.common.issues.length && r.push(i.common.issues);
//             }
//             if (t)
//               return e.common.issues.push(...t.ctx.common.issues), t.result;
//             let n = r.map((t) => new ZodError(t));
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_union,
//                 unionErrors: n,
//               }),
//               INVALID
//             );
//           }
//         }
//         get options() {
//           return this._def.options;
//         }
//       }
//       ZodUnion.create = (t, e) =>
//         new ZodUnion({
//           options: t,
//           typeName: ZodFirstPartyTypeKind.ZodUnion,
//           ...processCreateParams(e),
//         });
//       let getDiscriminator = (t) =>
//         t instanceof ZodLazy
//           ? getDiscriminator(t.schema)
//           : t instanceof ZodEffects
//           ? getDiscriminator(t.innerType())
//           : t instanceof ZodLiteral
//           ? [t.value]
//           : t instanceof ZodEnum
//           ? t.options
//           : t instanceof ZodNativeEnum
//           ? util$1.objectValues(t.enum)
//           : t instanceof ZodDefault
//           ? getDiscriminator(t._def.innerType)
//           : t instanceof ZodUndefined
//           ? [void 0]
//           : t instanceof ZodNull
//           ? [null]
//           : t instanceof ZodOptional
//           ? [void 0, ...getDiscriminator(t.unwrap())]
//           : t instanceof ZodNullable
//           ? [null, ...getDiscriminator(t.unwrap())]
//           : t instanceof ZodBranded || t instanceof ZodReadonly
//           ? getDiscriminator(t.unwrap())
//           : t instanceof ZodCatch
//           ? getDiscriminator(t._def.innerType)
//           : [];
//       class ZodDiscriminatedUnion extends ZodType {
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t);
//           if (e.parsedType !== ZodParsedType.object)
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.object,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           let i = this.discriminator,
//             r = e.data[i],
//             n = this.optionsMap.get(r);
//           return n
//             ? e.common.async
//               ? n._parseAsync({ data: e.data, path: e.path, parent: e })
//               : n._parseSync({ data: e.data, path: e.path, parent: e })
//             : (addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_union_discriminator,
//                 options: Array.from(this.optionsMap.keys()),
//                 path: [i],
//               }),
//               INVALID);
//         }
//         get discriminator() {
//           return this._def.discriminator;
//         }
//         get options() {
//           return this._def.options;
//         }
//         get optionsMap() {
//           return this._def.optionsMap;
//         }
//         static create(t, e, i) {
//           let r = new Map();
//           for (let i of e) {
//             let e = getDiscriminator(i.shape[t]);
//             if (!e.length)
//               throw Error(
//                 `A discriminator value for key \`${t}\` could not be extracted from all schema options`
//               );
//             for (let n of e) {
//               if (r.has(n))
//                 throw Error(
//                   `Discriminator property ${String(
//                     t
//                   )} has duplicate value ${String(n)}`
//                 );
//               r.set(n, i);
//             }
//           }
//           return new ZodDiscriminatedUnion({
//             typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
//             discriminator: t,
//             options: e,
//             optionsMap: r,
//             ...processCreateParams(i),
//           });
//         }
//       }
//       function mergeValues(t, e) {
//         let i = getParsedType(t),
//           r = getParsedType(e);
//         if (t === e) return { valid: !0, data: t };
//         if (i === ZodParsedType.object && r === ZodParsedType.object) {
//           let i = util$1.objectKeys(e),
//             r = util$1.objectKeys(t).filter((t) => -1 !== i.indexOf(t)),
//             n = { ...t, ...e };
//           for (let i of r) {
//             let r = mergeValues(t[i], e[i]);
//             if (!r.valid) return { valid: !1 };
//             n[i] = r.data;
//           }
//           return { valid: !0, data: n };
//         }
//         if (i === ZodParsedType.array && r === ZodParsedType.array) {
//           if (t.length !== e.length) return { valid: !1 };
//           let i = [];
//           for (let r = 0; r < t.length; r++) {
//             let n = mergeValues(t[r], e[r]);
//             if (!n.valid) return { valid: !1 };
//             i.push(n.data);
//           }
//           return { valid: !0, data: i };
//         }
//         return i === ZodParsedType.date && r === ZodParsedType.date && +t == +e
//           ? { valid: !0, data: t }
//           : { valid: !1 };
//       }
//       class ZodIntersection extends ZodType {
//         _parse(t) {
//           let { status: e, ctx: i } = this._processInputParams(t),
//             r = (t, r) => {
//               if (isAborted(t) || isAborted(r)) return INVALID;
//               let n = mergeValues(t.value, r.value);
//               return n.valid
//                 ? ((isDirty(t) || isDirty(r)) && e.dirty(),
//                   { status: e.value, value: n.data })
//                 : (addIssueToContext(i, {
//                     code: ZodIssueCode.invalid_intersection_types,
//                   }),
//                   INVALID);
//             };
//           return i.common.async
//             ? Promise.all([
//                 this._def.left._parseAsync({
//                   data: i.data,
//                   path: i.path,
//                   parent: i,
//                 }),
//                 this._def.right._parseAsync({
//                   data: i.data,
//                   path: i.path,
//                   parent: i,
//                 }),
//               ]).then(([t, e]) => r(t, e))
//             : r(
//                 this._def.left._parseSync({
//                   data: i.data,
//                   path: i.path,
//                   parent: i,
//                 }),
//                 this._def.right._parseSync({
//                   data: i.data,
//                   path: i.path,
//                   parent: i,
//                 })
//               );
//         }
//       }
//       ZodIntersection.create = (t, e, i) =>
//         new ZodIntersection({
//           left: t,
//           right: e,
//           typeName: ZodFirstPartyTypeKind.ZodIntersection,
//           ...processCreateParams(i),
//         });
//       class ZodTuple extends ZodType {
//         _parse(t) {
//           let { status: e, ctx: i } = this._processInputParams(t);
//           if (i.parsedType !== ZodParsedType.array)
//             return (
//               addIssueToContext(i, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.array,
//                 received: i.parsedType,
//               }),
//               INVALID
//             );
//           if (i.data.length < this._def.items.length)
//             return (
//               addIssueToContext(i, {
//                 code: ZodIssueCode.too_small,
//                 minimum: this._def.items.length,
//                 inclusive: !0,
//                 exact: !1,
//                 type: "array",
//               }),
//               INVALID
//             );
//           !this._def.rest &&
//             i.data.length > this._def.items.length &&
//             (addIssueToContext(i, {
//               code: ZodIssueCode.too_big,
//               maximum: this._def.items.length,
//               inclusive: !0,
//               exact: !1,
//               type: "array",
//             }),
//             e.dirty());
//           let r = [...i.data]
//             .map((t, e) => {
//               let r = this._def.items[e] || this._def.rest;
//               return r
//                 ? r._parse(new ParseInputLazyPath(i, t, i.path, e))
//                 : null;
//             })
//             .filter((t) => !!t);
//           return i.common.async
//             ? Promise.all(r).then((t) => ParseStatus.mergeArray(e, t))
//             : ParseStatus.mergeArray(e, r);
//         }
//         get items() {
//           return this._def.items;
//         }
//         rest(t) {
//           return new ZodTuple({ ...this._def, rest: t });
//         }
//       }
//       ZodTuple.create = (t, e) => {
//         if (!Array.isArray(t))
//           throw Error("You must pass an array of schemas to z.tuple([ ... ])");
//         return new ZodTuple({
//           items: t,
//           typeName: ZodFirstPartyTypeKind.ZodTuple,
//           rest: null,
//           ...processCreateParams(e),
//         });
//       };
//       class ZodRecord extends ZodType {
//         get keySchema() {
//           return this._def.keyType;
//         }
//         get valueSchema() {
//           return this._def.valueType;
//         }
//         _parse(t) {
//           let { status: e, ctx: i } = this._processInputParams(t);
//           if (i.parsedType !== ZodParsedType.object)
//             return (
//               addIssueToContext(i, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.object,
//                 received: i.parsedType,
//               }),
//               INVALID
//             );
//           let r = [],
//             n = this._def.keyType,
//             a = this._def.valueType;
//           for (let t in i.data)
//             r.push({
//               key: n._parse(new ParseInputLazyPath(i, t, i.path, t)),
//               value: a._parse(new ParseInputLazyPath(i, i.data[t], i.path, t)),
//               alwaysSet: t in i.data,
//             });
//           return i.common.async
//             ? ParseStatus.mergeObjectAsync(e, r)
//             : ParseStatus.mergeObjectSync(e, r);
//         }
//         get element() {
//           return this._def.valueType;
//         }
//         static create(t, e, i) {
//           return new ZodRecord(
//             e instanceof ZodType
//               ? {
//                   keyType: t,
//                   valueType: e,
//                   typeName: ZodFirstPartyTypeKind.ZodRecord,
//                   ...processCreateParams(i),
//                 }
//               : {
//                   keyType: ZodString.create(),
//                   valueType: t,
//                   typeName: ZodFirstPartyTypeKind.ZodRecord,
//                   ...processCreateParams(e),
//                 }
//           );
//         }
//       }
//       class ZodMap extends ZodType {
//         get keySchema() {
//           return this._def.keyType;
//         }
//         get valueSchema() {
//           return this._def.valueType;
//         }
//         _parse(t) {
//           let { status: e, ctx: i } = this._processInputParams(t);
//           if (i.parsedType !== ZodParsedType.map)
//             return (
//               addIssueToContext(i, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.map,
//                 received: i.parsedType,
//               }),
//               INVALID
//             );
//           let r = this._def.keyType,
//             n = this._def.valueType,
//             a = [...i.data.entries()].map(([t, e], a) => ({
//               key: r._parse(new ParseInputLazyPath(i, t, i.path, [a, "key"])),
//               value: n._parse(
//                 new ParseInputLazyPath(i, e, i.path, [a, "value"])
//               ),
//             }));
//           if (i.common.async) {
//             let t = new Map();
//             return Promise.resolve().then(async () => {
//               for (let i of a) {
//                 let r = await i.key,
//                   n = await i.value;
//                 if ("aborted" === r.status || "aborted" === n.status)
//                   return INVALID;
//                 ("dirty" !== r.status && "dirty" !== n.status) || e.dirty(),
//                   t.set(r.value, n.value);
//               }
//               return { status: e.value, value: t };
//             });
//           }
//           {
//             let t = new Map();
//             for (let i of a) {
//               let r = i.key,
//                 n = i.value;
//               if ("aborted" === r.status || "aborted" === n.status)
//                 return INVALID;
//               ("dirty" !== r.status && "dirty" !== n.status) || e.dirty(),
//                 t.set(r.value, n.value);
//             }
//             return { status: e.value, value: t };
//           }
//         }
//       }
//       ZodMap.create = (t, e, i) =>
//         new ZodMap({
//           valueType: e,
//           keyType: t,
//           typeName: ZodFirstPartyTypeKind.ZodMap,
//           ...processCreateParams(i),
//         });
//       class ZodSet extends ZodType {
//         _parse(t) {
//           let { status: e, ctx: i } = this._processInputParams(t);
//           if (i.parsedType !== ZodParsedType.set)
//             return (
//               addIssueToContext(i, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.set,
//                 received: i.parsedType,
//               }),
//               INVALID
//             );
//           let r = this._def;
//           null !== r.minSize &&
//             i.data.size < r.minSize.value &&
//             (addIssueToContext(i, {
//               code: ZodIssueCode.too_small,
//               minimum: r.minSize.value,
//               type: "set",
//               inclusive: !0,
//               exact: !1,
//               message: r.minSize.message,
//             }),
//             e.dirty()),
//             null !== r.maxSize &&
//               i.data.size > r.maxSize.value &&
//               (addIssueToContext(i, {
//                 code: ZodIssueCode.too_big,
//                 maximum: r.maxSize.value,
//                 type: "set",
//                 inclusive: !0,
//                 exact: !1,
//                 message: r.maxSize.message,
//               }),
//               e.dirty());
//           let n = this._def.valueType;
//           function a(t) {
//             let i = new Set();
//             for (let r of t) {
//               if ("aborted" === r.status) return INVALID;
//               "dirty" === r.status && e.dirty(), i.add(r.value);
//             }
//             return { status: e.value, value: i };
//           }
//           let s = [...i.data.values()].map((t, e) =>
//             n._parse(new ParseInputLazyPath(i, t, i.path, e))
//           );
//           return i.common.async ? Promise.all(s).then((t) => a(t)) : a(s);
//         }
//         min(t, e) {
//           return new ZodSet({
//             ...this._def,
//             minSize: { value: t, message: errorUtil.toString(e) },
//           });
//         }
//         max(t, e) {
//           return new ZodSet({
//             ...this._def,
//             maxSize: { value: t, message: errorUtil.toString(e) },
//           });
//         }
//         size(t, e) {
//           return this.min(t, e).max(t, e);
//         }
//         nonempty(t) {
//           return this.min(1, t);
//         }
//       }
//       ZodSet.create = (t, e) =>
//         new ZodSet({
//           valueType: t,
//           minSize: null,
//           maxSize: null,
//           typeName: ZodFirstPartyTypeKind.ZodSet,
//           ...processCreateParams(e),
//         });
//       class ZodFunction extends ZodType {
//         constructor() {
//           super(...arguments), (this.validate = this.implement);
//         }
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t);
//           if (e.parsedType !== ZodParsedType.function)
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.function,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           function i(t, i) {
//             return makeIssue({
//               data: t,
//               path: e.path,
//               errorMaps: [
//                 e.common.contextualErrorMap,
//                 e.schemaErrorMap,
//                 getErrorMap(),
//                 errorMap,
//               ].filter((t) => !!t),
//               issueData: {
//                 code: ZodIssueCode.invalid_arguments,
//                 argumentsError: i,
//               },
//             });
//           }
//           function r(t, i) {
//             return makeIssue({
//               data: t,
//               path: e.path,
//               errorMaps: [
//                 e.common.contextualErrorMap,
//                 e.schemaErrorMap,
//                 getErrorMap(),
//                 errorMap,
//               ].filter((t) => !!t),
//               issueData: {
//                 code: ZodIssueCode.invalid_return_type,
//                 returnTypeError: i,
//               },
//             });
//           }
//           let n = { errorMap: e.common.contextualErrorMap },
//             a = e.data;
//           if (this._def.returns instanceof ZodPromise) {
//             let t = this;
//             return OK(async function (...e) {
//               let s = new ZodError([]),
//                 o = await t._def.args.parseAsync(e, n).catch((t) => {
//                   throw (s.addIssue(i(e, t)), s);
//                 }),
//                 l = await Reflect.apply(a, this, o);
//               return await t._def.returns._def.type
//                 .parseAsync(l, n)
//                 .catch((t) => {
//                   throw (s.addIssue(r(l, t)), s);
//                 });
//             });
//           }
//           {
//             let t = this;
//             return OK(function (...e) {
//               let s = t._def.args.safeParse(e, n);
//               if (!s.success) throw new ZodError([i(e, s.error)]);
//               let o = Reflect.apply(a, this, s.data),
//                 l = t._def.returns.safeParse(o, n);
//               if (!l.success) throw new ZodError([r(o, l.error)]);
//               return l.data;
//             });
//           }
//         }
//         parameters() {
//           return this._def.args;
//         }
//         returnType() {
//           return this._def.returns;
//         }
//         args(...t) {
//           return new ZodFunction({
//             ...this._def,
//             args: ZodTuple.create(t).rest(ZodUnknown.create()),
//           });
//         }
//         returns(t) {
//           return new ZodFunction({ ...this._def, returns: t });
//         }
//         implement(t) {
//           return this.parse(t);
//         }
//         strictImplement(t) {
//           return this.parse(t);
//         }
//         static create(t, e, i) {
//           return new ZodFunction({
//             args: t || ZodTuple.create([]).rest(ZodUnknown.create()),
//             returns: e || ZodUnknown.create(),
//             typeName: ZodFirstPartyTypeKind.ZodFunction,
//             ...processCreateParams(i),
//           });
//         }
//       }
//       class ZodLazy extends ZodType {
//         get schema() {
//           return this._def.getter();
//         }
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t);
//           return this._def
//             .getter()
//             ._parse({ data: e.data, path: e.path, parent: e });
//         }
//       }
//       ZodLazy.create = (t, e) =>
//         new ZodLazy({
//           getter: t,
//           typeName: ZodFirstPartyTypeKind.ZodLazy,
//           ...processCreateParams(e),
//         });
//       class ZodLiteral extends ZodType {
//         _parse(t) {
//           if (t.data !== this._def.value) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 received: e.data,
//                 code: ZodIssueCode.invalid_literal,
//                 expected: this._def.value,
//               }),
//               INVALID
//             );
//           }
//           return { status: "valid", value: t.data };
//         }
//         get value() {
//           return this._def.value;
//         }
//       }
//       function createZodEnum(t, e) {
//         return new ZodEnum({
//           values: t,
//           typeName: ZodFirstPartyTypeKind.ZodEnum,
//           ...processCreateParams(e),
//         });
//       }
//       ZodLiteral.create = (t, e) =>
//         new ZodLiteral({
//           value: t,
//           typeName: ZodFirstPartyTypeKind.ZodLiteral,
//           ...processCreateParams(e),
//         });
//       class ZodEnum extends ZodType {
//         constructor() {
//           super(...arguments), _ZodEnum_cache.set(this, void 0);
//         }
//         _parse(t) {
//           if ("string" != typeof t.data) {
//             let e = this._getOrReturnCtx(t),
//               i = this._def.values;
//             return (
//               addIssueToContext(e, {
//                 expected: util$1.joinValues(i),
//                 received: e.parsedType,
//                 code: ZodIssueCode.invalid_type,
//               }),
//               INVALID
//             );
//           }
//           if (
//             (__classPrivateFieldGet(this, _ZodEnum_cache) ||
//               __classPrivateFieldSet(
//                 this,
//                 _ZodEnum_cache,
//                 new Set(this._def.values)
//               ),
//             !__classPrivateFieldGet(this, _ZodEnum_cache).has(t.data))
//           ) {
//             let e = this._getOrReturnCtx(t),
//               i = this._def.values;
//             return (
//               addIssueToContext(e, {
//                 received: e.data,
//                 code: ZodIssueCode.invalid_enum_value,
//                 options: i,
//               }),
//               INVALID
//             );
//           }
//           return OK(t.data);
//         }
//         get options() {
//           return this._def.values;
//         }
//         get enum() {
//           let t = {};
//           for (let e of this._def.values) t[e] = e;
//           return t;
//         }
//         get Values() {
//           let t = {};
//           for (let e of this._def.values) t[e] = e;
//           return t;
//         }
//         get Enum() {
//           let t = {};
//           for (let e of this._def.values) t[e] = e;
//           return t;
//         }
//         extract(t, e = this._def) {
//           return ZodEnum.create(t, { ...this._def, ...e });
//         }
//         exclude(t, e = this._def) {
//           return ZodEnum.create(
//             this.options.filter((e) => !t.includes(e)),
//             { ...this._def, ...e }
//           );
//         }
//       }
//       (_ZodEnum_cache = new WeakMap()), (ZodEnum.create = createZodEnum);
//       class ZodNativeEnum extends ZodType {
//         constructor() {
//           super(...arguments), _ZodNativeEnum_cache.set(this, void 0);
//         }
//         _parse(t) {
//           let e = util$1.getValidEnumValues(this._def.values),
//             i = this._getOrReturnCtx(t);
//           if (
//             i.parsedType !== ZodParsedType.string &&
//             i.parsedType !== ZodParsedType.number
//           ) {
//             let t = util$1.objectValues(e);
//             return (
//               addIssueToContext(i, {
//                 expected: util$1.joinValues(t),
//                 received: i.parsedType,
//                 code: ZodIssueCode.invalid_type,
//               }),
//               INVALID
//             );
//           }
//           if (
//             (__classPrivateFieldGet(this, _ZodNativeEnum_cache) ||
//               __classPrivateFieldSet(
//                 this,
//                 _ZodNativeEnum_cache,
//                 new Set(util$1.getValidEnumValues(this._def.values))
//               ),
//             !__classPrivateFieldGet(this, _ZodNativeEnum_cache).has(t.data))
//           ) {
//             let t = util$1.objectValues(e);
//             return (
//               addIssueToContext(i, {
//                 received: i.data,
//                 code: ZodIssueCode.invalid_enum_value,
//                 options: t,
//               }),
//               INVALID
//             );
//           }
//           return OK(t.data);
//         }
//         get enum() {
//           return this._def.values;
//         }
//       }
//       (_ZodNativeEnum_cache = new WeakMap()),
//         (ZodNativeEnum.create = (t, e) =>
//           new ZodNativeEnum({
//             values: t,
//             typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
//             ...processCreateParams(e),
//           }));
//       class ZodPromise extends ZodType {
//         unwrap() {
//           return this._def.type;
//         }
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t);
//           return e.parsedType !== ZodParsedType.promise && !1 === e.common.async
//             ? (addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.promise,
//                 received: e.parsedType,
//               }),
//               INVALID)
//             : OK(
//                 (e.parsedType === ZodParsedType.promise
//                   ? e.data
//                   : Promise.resolve(e.data)
//                 ).then((t) =>
//                   this._def.type.parseAsync(t, {
//                     path: e.path,
//                     errorMap: e.common.contextualErrorMap,
//                   })
//                 )
//               );
//         }
//       }
//       ZodPromise.create = (t, e) =>
//         new ZodPromise({
//           type: t,
//           typeName: ZodFirstPartyTypeKind.ZodPromise,
//           ...processCreateParams(e),
//         });
//       class ZodEffects extends ZodType {
//         innerType() {
//           return this._def.schema;
//         }
//         sourceType() {
//           return this._def.schema._def.typeName ===
//             ZodFirstPartyTypeKind.ZodEffects
//             ? this._def.schema.sourceType()
//             : this._def.schema;
//         }
//         _parse(t) {
//           let { status: e, ctx: i } = this._processInputParams(t),
//             r = this._def.effect || null,
//             n = {
//               addIssue: (t) => {
//                 addIssueToContext(i, t), t.fatal ? e.abort() : e.dirty();
//               },
//               get path() {
//                 return i.path;
//               },
//             };
//           if (((n.addIssue = n.addIssue.bind(n)), "preprocess" === r.type)) {
//             let t = r.transform(i.data, n);
//             if (i.common.async)
//               return Promise.resolve(t).then(async (t) => {
//                 if ("aborted" === e.value) return INVALID;
//                 let r = await this._def.schema._parseAsync({
//                   data: t,
//                   path: i.path,
//                   parent: i,
//                 });
//                 return "aborted" === r.status
//                   ? INVALID
//                   : "dirty" === r.status || "dirty" === e.value
//                   ? DIRTY(r.value)
//                   : r;
//               });
//             {
//               if ("aborted" === e.value) return INVALID;
//               let r = this._def.schema._parseSync({
//                 data: t,
//                 path: i.path,
//                 parent: i,
//               });
//               return "aborted" === r.status
//                 ? INVALID
//                 : "dirty" === r.status || "dirty" === e.value
//                 ? DIRTY(r.value)
//                 : r;
//             }
//           }
//           if ("refinement" === r.type) {
//             let t = (t) => {
//               let e = r.refinement(t, n);
//               if (i.common.async) return Promise.resolve(e);
//               if (e instanceof Promise)
//                 throw Error(
//                   "Async refinement encountered during synchronous parse operation. Use .parseAsync instead."
//                 );
//               return t;
//             };
//             if (!1 === i.common.async) {
//               let r = this._def.schema._parseSync({
//                 data: i.data,
//                 path: i.path,
//                 parent: i,
//               });
//               return "aborted" === r.status
//                 ? INVALID
//                 : ("dirty" === r.status && e.dirty(),
//                   t(r.value),
//                   { status: e.value, value: r.value });
//             }
//             return this._def.schema
//               ._parseAsync({ data: i.data, path: i.path, parent: i })
//               .then((i) =>
//                 "aborted" === i.status
//                   ? INVALID
//                   : ("dirty" === i.status && e.dirty(),
//                     t(i.value).then(() => ({
//                       status: e.value,
//                       value: i.value,
//                     })))
//               );
//           }
//           if ("transform" === r.type) {
//             if (!1 === i.common.async) {
//               let t = this._def.schema._parseSync({
//                 data: i.data,
//                 path: i.path,
//                 parent: i,
//               });
//               if (!isValid(t)) return t;
//               let a = r.transform(t.value, n);
//               if (a instanceof Promise)
//                 throw Error(
//                   "Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead."
//                 );
//               return { status: e.value, value: a };
//             }
//             return this._def.schema
//               ._parseAsync({ data: i.data, path: i.path, parent: i })
//               .then((t) =>
//                 isValid(t)
//                   ? Promise.resolve(r.transform(t.value, n)).then((t) => ({
//                       status: e.value,
//                       value: t,
//                     }))
//                   : t
//               );
//           }
//           util$1.assertNever(r);
//         }
//       }
//       (ZodEffects.create = (t, e, i) =>
//         new ZodEffects({
//           schema: t,
//           typeName: ZodFirstPartyTypeKind.ZodEffects,
//           effect: e,
//           ...processCreateParams(i),
//         })),
//         (ZodEffects.createWithPreprocess = (t, e, i) =>
//           new ZodEffects({
//             schema: e,
//             effect: { type: "preprocess", transform: t },
//             typeName: ZodFirstPartyTypeKind.ZodEffects,
//             ...processCreateParams(i),
//           }));
//       class ZodOptional extends ZodType {
//         _parse(t) {
//           return this._getType(t) === ZodParsedType.undefined
//             ? OK(void 0)
//             : this._def.innerType._parse(t);
//         }
//         unwrap() {
//           return this._def.innerType;
//         }
//       }
//       ZodOptional.create = (t, e) =>
//         new ZodOptional({
//           innerType: t,
//           typeName: ZodFirstPartyTypeKind.ZodOptional,
//           ...processCreateParams(e),
//         });
//       class ZodNullable extends ZodType {
//         _parse(t) {
//           return this._getType(t) === ZodParsedType.null
//             ? OK(null)
//             : this._def.innerType._parse(t);
//         }
//         unwrap() {
//           return this._def.innerType;
//         }
//       }
//       ZodNullable.create = (t, e) =>
//         new ZodNullable({
//           innerType: t,
//           typeName: ZodFirstPartyTypeKind.ZodNullable,
//           ...processCreateParams(e),
//         });
//       class ZodDefault extends ZodType {
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t),
//             i = e.data;
//           return (
//             e.parsedType === ZodParsedType.undefined &&
//               (i = this._def.defaultValue()),
//             this._def.innerType._parse({ data: i, path: e.path, parent: e })
//           );
//         }
//         removeDefault() {
//           return this._def.innerType;
//         }
//       }
//       ZodDefault.create = (t, e) =>
//         new ZodDefault({
//           innerType: t,
//           typeName: ZodFirstPartyTypeKind.ZodDefault,
//           defaultValue:
//             "function" == typeof e.default ? e.default : () => e.default,
//           ...processCreateParams(e),
//         });
//       class ZodCatch extends ZodType {
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t),
//             i = { ...e, common: { ...e.common, issues: [] } },
//             r = this._def.innerType._parse({
//               data: i.data,
//               path: i.path,
//               parent: { ...i },
//             });
//           return isAsync(r)
//             ? r.then((t) => ({
//                 status: "valid",
//                 value:
//                   "valid" === t.status
//                     ? t.value
//                     : this._def.catchValue({
//                         get error() {
//                           return new ZodError(i.common.issues);
//                         },
//                         input: i.data,
//                       }),
//               }))
//             : {
//                 status: "valid",
//                 value:
//                   "valid" === r.status
//                     ? r.value
//                     : this._def.catchValue({
//                         get error() {
//                           return new ZodError(i.common.issues);
//                         },
//                         input: i.data,
//                       }),
//               };
//         }
//         removeCatch() {
//           return this._def.innerType;
//         }
//       }
//       ZodCatch.create = (t, e) =>
//         new ZodCatch({
//           innerType: t,
//           typeName: ZodFirstPartyTypeKind.ZodCatch,
//           catchValue: "function" == typeof e.catch ? e.catch : () => e.catch,
//           ...processCreateParams(e),
//         });
//       class ZodNaN extends ZodType {
//         _parse(t) {
//           if (this._getType(t) !== ZodParsedType.nan) {
//             let e = this._getOrReturnCtx(t);
//             return (
//               addIssueToContext(e, {
//                 code: ZodIssueCode.invalid_type,
//                 expected: ZodParsedType.nan,
//                 received: e.parsedType,
//               }),
//               INVALID
//             );
//           }
//           return { status: "valid", value: t.data };
//         }
//       }
//       ZodNaN.create = (t) =>
//         new ZodNaN({
//           typeName: ZodFirstPartyTypeKind.ZodNaN,
//           ...processCreateParams(t),
//         });
//       let BRAND = Symbol("zod_brand");
//       class ZodBranded extends ZodType {
//         _parse(t) {
//           let { ctx: e } = this._processInputParams(t),
//             i = e.data;
//           return this._def.type._parse({ data: i, path: e.path, parent: e });
//         }
//         unwrap() {
//           return this._def.type;
//         }
//       }
//       class ZodPipeline extends ZodType {
//         _parse(t) {
//           let { status: e, ctx: i } = this._processInputParams(t);
//           if (i.common.async)
//             return (async () => {
//               let t = await this._def.in._parseAsync({
//                 data: i.data,
//                 path: i.path,
//                 parent: i,
//               });
//               return "aborted" === t.status
//                 ? INVALID
//                 : "dirty" === t.status
//                 ? (e.dirty(), DIRTY(t.value))
//                 : this._def.out._parseAsync({
//                     data: t.value,
//                     path: i.path,
//                     parent: i,
//                   });
//             })();
//           {
//             let t = this._def.in._parseSync({
//               data: i.data,
//               path: i.path,
//               parent: i,
//             });
//             return "aborted" === t.status
//               ? INVALID
//               : "dirty" === t.status
//               ? (e.dirty(), { status: "dirty", value: t.value })
//               : this._def.out._parseSync({
//                   data: t.value,
//                   path: i.path,
//                   parent: i,
//                 });
//           }
//         }
//         static create(t, e) {
//           return new ZodPipeline({
//             in: t,
//             out: e,
//             typeName: ZodFirstPartyTypeKind.ZodPipeline,
//           });
//         }
//       }
//       class ZodReadonly extends ZodType {
//         _parse(t) {
//           let e = this._def.innerType._parse(t),
//             i = (t) => (isValid(t) && (t.value = Object.freeze(t.value)), t);
//           return isAsync(e) ? e.then((t) => i(t)) : i(e);
//         }
//         unwrap() {
//           return this._def.innerType;
//         }
//       }
//       function custom(t, e = {}, i) {
//         return t
//           ? ZodAny.create().superRefine((r, n) => {
//               var a, s;
//               if (!t(r)) {
//                 let t =
//                     "function" == typeof e
//                       ? e(r)
//                       : "string" == typeof e
//                       ? { message: e }
//                       : e,
//                   o =
//                     null ===
//                       (s = null !== (a = t.fatal) && void 0 !== a ? a : i) ||
//                     void 0 === s ||
//                     s,
//                   l = "string" == typeof t ? { message: t } : t;
//                 n.addIssue({ code: "custom", ...l, fatal: o });
//               }
//             })
//           : ZodAny.create();
//       }
//       ZodReadonly.create = (t, e) =>
//         new ZodReadonly({
//           innerType: t,
//           typeName: ZodFirstPartyTypeKind.ZodReadonly,
//           ...processCreateParams(e),
//         });
//       let late = { object: ZodObject.lazycreate };
//       !(function (t) {
//         (t.ZodString = "ZodString"),
//           (t.ZodNumber = "ZodNumber"),
//           (t.ZodNaN = "ZodNaN"),
//           (t.ZodBigInt = "ZodBigInt"),
//           (t.ZodBoolean = "ZodBoolean"),
//           (t.ZodDate = "ZodDate"),
//           (t.ZodSymbol = "ZodSymbol"),
//           (t.ZodUndefined = "ZodUndefined"),
//           (t.ZodNull = "ZodNull"),
//           (t.ZodAny = "ZodAny"),
//           (t.ZodUnknown = "ZodUnknown"),
//           (t.ZodNever = "ZodNever"),
//           (t.ZodVoid = "ZodVoid"),
//           (t.ZodArray = "ZodArray"),
//           (t.ZodObject = "ZodObject"),
//           (t.ZodUnion = "ZodUnion"),
//           (t.ZodDiscriminatedUnion = "ZodDiscriminatedUnion"),
//           (t.ZodIntersection = "ZodIntersection"),
//           (t.ZodTuple = "ZodTuple"),
//           (t.ZodRecord = "ZodRecord"),
//           (t.ZodMap = "ZodMap"),
//           (t.ZodSet = "ZodSet"),
//           (t.ZodFunction = "ZodFunction"),
//           (t.ZodLazy = "ZodLazy"),
//           (t.ZodLiteral = "ZodLiteral"),
//           (t.ZodEnum = "ZodEnum"),
//           (t.ZodEffects = "ZodEffects"),
//           (t.ZodNativeEnum = "ZodNativeEnum"),
//           (t.ZodOptional = "ZodOptional"),
//           (t.ZodNullable = "ZodNullable"),
//           (t.ZodDefault = "ZodDefault"),
//           (t.ZodCatch = "ZodCatch"),
//           (t.ZodPromise = "ZodPromise"),
//           (t.ZodBranded = "ZodBranded"),
//           (t.ZodPipeline = "ZodPipeline"),
//           (t.ZodReadonly = "ZodReadonly");
//       })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
//       let instanceOfType = (
//           t,
//           e = { message: `Input not instance of ${t.name}` }
//         ) => custom((e) => e instanceof t, e),
//         stringType = ZodString.create,
//         numberType = ZodNumber.create,
//         nanType = ZodNaN.create,
//         bigIntType = ZodBigInt.create,
//         booleanType = ZodBoolean.create,
//         dateType = ZodDate.create,
//         symbolType = ZodSymbol.create,
//         undefinedType = ZodUndefined.create,
//         nullType = ZodNull.create,
//         anyType = ZodAny.create,
//         unknownType = ZodUnknown.create,
//         neverType = ZodNever.create,
//         voidType = ZodVoid.create,
//         arrayType = ZodArray.create,
//         objectType = ZodObject.create,
//         strictObjectType = ZodObject.strictCreate,
//         unionType = ZodUnion.create,
//         discriminatedUnionType = ZodDiscriminatedUnion.create,
//         intersectionType = ZodIntersection.create,
//         tupleType = ZodTuple.create,
//         recordType = ZodRecord.create,
//         mapType = ZodMap.create,
//         setType = ZodSet.create,
//         functionType = ZodFunction.create,
//         lazyType = ZodLazy.create,
//         literalType = ZodLiteral.create,
//         enumType = ZodEnum.create,
//         nativeEnumType = ZodNativeEnum.create,
//         promiseType = ZodPromise.create,
//         effectsType = ZodEffects.create,
//         optionalType = ZodOptional.create,
//         nullableType = ZodNullable.create,
//         preprocessType = ZodEffects.createWithPreprocess,
//         pipelineType = ZodPipeline.create,
//         ostring = () => stringType().optional(),
//         onumber = () => numberType().optional(),
//         oboolean = () => booleanType().optional(),
//         coerce = {
//           string: (t) => ZodString.create({ ...t, coerce: !0 }),
//           number: (t) => ZodNumber.create({ ...t, coerce: !0 }),
//           boolean: (t) => ZodBoolean.create({ ...t, coerce: !0 }),
//           bigint: (t) => ZodBigInt.create({ ...t, coerce: !0 }),
//           date: (t) => ZodDate.create({ ...t, coerce: !0 }),
//         },
//         NEVER = INVALID;
//       var errorUtil,
//         _ZodEnum_cache,
//         _ZodNativeEnum_cache,
//         ZodFirstPartyTypeKind,
//         Edge,
//         Edge2,
//         z = Object.freeze({
//           __proto__: null,
//           defaultErrorMap: errorMap,
//           setErrorMap: setErrorMap,
//           getErrorMap: getErrorMap,
//           makeIssue: makeIssue,
//           EMPTY_PATH: EMPTY_PATH,
//           addIssueToContext: addIssueToContext,
//           ParseStatus: ParseStatus,
//           INVALID: INVALID,
//           DIRTY: DIRTY,
//           OK: OK,
//           isAborted: isAborted,
//           isDirty: isDirty,
//           isValid: isValid,
//           isAsync: isAsync,
//           get util() {
//             return util$1;
//           },
//           get objectUtil() {
//             return objectUtil;
//           },
//           ZodParsedType: ZodParsedType,
//           getParsedType: getParsedType,
//           ZodType: ZodType,
//           datetimeRegex: datetimeRegex,
//           ZodString: ZodString,
//           ZodNumber: ZodNumber,
//           ZodBigInt: ZodBigInt,
//           ZodBoolean: ZodBoolean,
//           ZodDate: ZodDate,
//           ZodSymbol: ZodSymbol,
//           ZodUndefined: ZodUndefined,
//           ZodNull: ZodNull,
//           ZodAny: ZodAny,
//           ZodUnknown: ZodUnknown,
//           ZodNever: ZodNever,
//           ZodVoid: ZodVoid,
//           ZodArray: ZodArray,
//           ZodObject: ZodObject,
//           ZodUnion: ZodUnion,
//           ZodDiscriminatedUnion: ZodDiscriminatedUnion,
//           ZodIntersection: ZodIntersection,
//           ZodTuple: ZodTuple,
//           ZodRecord: ZodRecord,
//           ZodMap: ZodMap,
//           ZodSet: ZodSet,
//           ZodFunction: ZodFunction,
//           ZodLazy: ZodLazy,
//           ZodLiteral: ZodLiteral,
//           ZodEnum: ZodEnum,
//           ZodNativeEnum: ZodNativeEnum,
//           ZodPromise: ZodPromise,
//           ZodEffects: ZodEffects,
//           ZodTransformer: ZodEffects,
//           ZodOptional: ZodOptional,
//           ZodNullable: ZodNullable,
//           ZodDefault: ZodDefault,
//           ZodCatch: ZodCatch,
//           ZodNaN: ZodNaN,
//           BRAND: BRAND,
//           ZodBranded: ZodBranded,
//           ZodPipeline: ZodPipeline,
//           ZodReadonly: ZodReadonly,
//           custom: custom,
//           Schema: ZodType,
//           ZodSchema: ZodType,
//           late: late,
//           get ZodFirstPartyTypeKind() {
//             return ZodFirstPartyTypeKind;
//           },
//           coerce: coerce,
//           any: anyType,
//           array: arrayType,
//           bigint: bigIntType,
//           boolean: booleanType,
//           date: dateType,
//           discriminatedUnion: discriminatedUnionType,
//           effect: effectsType,
//           enum: enumType,
//           function: functionType,
//           instanceof: instanceOfType,
//           intersection: intersectionType,
//           lazy: lazyType,
//           literal: literalType,
//           map: mapType,
//           nan: nanType,
//           nativeEnum: nativeEnumType,
//           never: neverType,
//           null: nullType,
//           nullable: nullableType,
//           number: numberType,
//           object: objectType,
//           oboolean: oboolean,
//           onumber: onumber,
//           optional: optionalType,
//           ostring: ostring,
//           pipeline: pipelineType,
//           preprocess: preprocessType,
//           promise: promiseType,
//           record: recordType,
//           set: setType,
//           strictObject: strictObjectType,
//           string: stringType,
//           symbol: symbolType,
//           transformer: effectsType,
//           tuple: tupleType,
//           undefined: undefinedType,
//           union: unionType,
//           unknown: unknownType,
//           void: voidType,
//           NEVER: NEVER,
//           ZodIssueCode: ZodIssueCode,
//           quotelessJson: quotelessJson,
//           ZodError: ZodError,
//         });
//       (Edge2 = Edge || (Edge = {})),
//         (Edge2[(Edge2.EXTEND = 1)] = "EXTEND"),
//         (Edge2[(Edge2.WRAP = 2)] = "WRAP"),
//         (Edge2[(Edge2.CROP = 3)] = "CROP");
//       let JimpClassSchema = z.object({
//           bitmap: z.object({
//             data: z.union([z.instanceof(Buffer), z.instanceof(Uint8Array)]),
//             width: z.number(),
//             height: z.number(),
//           }),
//         }),
//         BlitOptionsSchemaComplex = z.object({
//           src: JimpClassSchema,
//           x: z.number().optional(),
//           y: z.number().optional(),
//           srcX: z.number().optional(),
//           srcY: z.number().optional(),
//           srcW: z.number().optional(),
//           srcH: z.number().optional(),
//         }),
//         BlitOptionsSchema = z.union([
//           JimpClassSchema,
//           BlitOptionsSchemaComplex,
//         ]),
//         methods$h = {
//           blit(t, e) {
//             let i = BlitOptionsSchema.parse(e),
//               {
//                 src: r,
//                 x: n = 0,
//                 y: a = 0,
//                 srcX: s = 0,
//                 srcY: o = 0,
//                 srcW: l = r.bitmap.width,
//                 srcH: h = r.bitmap.height,
//               } = "bitmap" in i ? { src: i } : i;
//             if (!("bitmap" in r))
//               throw Error("The source must be a Jimp image");
//             if ("number" != typeof n || "number" != typeof a)
//               throw Error("x and y must be numbers");
//             (n = Math.round(n)),
//               (a = Math.round(a)),
//               (s = Math.round(s)),
//               (o = Math.round(o)),
//               (l = Math.round(l)),
//               (h = Math.round(h));
//             let u = t.bitmap.width,
//               f = t.bitmap.height;
//             return (
//               scan(r, s, o, l, h, function (e, i, l) {
//                 let h = n + e - s,
//                   c = a + i - o;
//                 if (h >= 0 && c >= 0 && u - h > 0 && f - c > 0) {
//                   let e = t.getPixelIndex(h, c),
//                     i = {
//                       r: r.bitmap.data[l] || 0,
//                       g: r.bitmap.data[l + 1] || 0,
//                       b: r.bitmap.data[l + 2] || 0,
//                       a: r.bitmap.data[l + 3] || 0,
//                     },
//                     n = {
//                       r: t.bitmap.data[e] || 0,
//                       g: t.bitmap.data[e + 1] || 0,
//                       b: t.bitmap.data[e + 2] || 0,
//                       a: t.bitmap.data[e + 3] || 0,
//                     };
//                   (t.bitmap.data[e] =
//                     ((i.a * (i.r - n.r) - n.r + 255) >> 8) + n.r),
//                     (t.bitmap.data[e + 1] =
//                       ((i.a * (i.g - n.g) - n.g + 255) >> 8) + n.g),
//                     (t.bitmap.data[e + 2] =
//                       ((i.a * (i.b - n.b) - n.b + 255) >> 8) + n.b),
//                     (t.bitmap.data[e + 3] = limit255(n.a + i.a));
//                 }
//               }),
//               t
//             );
//           },
//         },
//         mulTable = [
//           1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137,
//           241, 107, 3, 173, 39, 71, 65, 238, 219, 101, 187, 87, 81, 151, 141,
//           133, 249, 117, 221, 209, 197, 187, 177, 169, 5, 153, 73, 139, 133,
//           127, 243, 233, 223, 107, 103, 99, 191, 23, 177, 171, 165, 159, 77,
//           149, 9, 139, 135, 131, 253, 245, 119, 231, 224, 109, 211, 103, 25,
//           195, 189, 23, 45, 175, 171, 83, 81, 79, 155, 151, 147, 9, 141, 137,
//           67, 131, 129, 251, 123, 30, 235, 115, 113, 221, 217, 53, 13, 51, 50,
//           49, 193, 189, 185, 91, 179, 175, 43, 169, 83, 163, 5, 79, 155, 19, 75,
//           147, 145, 143, 35, 69, 17, 67, 33, 65, 255, 251, 247, 243, 239, 59,
//           29, 229, 113, 111, 219, 27, 213, 105, 207, 51, 201, 199, 49, 193, 191,
//           47, 93, 183, 181, 179, 11, 87, 43, 85, 167, 165, 163, 161, 159, 157,
//           155, 77, 19, 75, 37, 73, 145, 143, 141, 35, 138, 137, 135, 67, 33,
//           131, 129, 255, 63, 250, 247, 61, 121, 239, 237, 117, 29, 229, 227,
//           225, 111, 55, 109, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197,
//           195, 193, 48, 190, 47, 93, 185, 183, 181, 179, 178, 176, 175, 173,
//           171, 85, 21, 167, 165, 41, 163, 161, 5, 79, 157, 78, 154, 153, 19, 75,
//           149, 74, 147, 73, 144, 143, 71, 141, 140, 139, 137, 17, 135, 134, 133,
//           66, 131, 65, 129, 1,
//         ],
//         shgTable = [
//           0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17, 18, 17,
//           12, 18, 16, 17, 17, 19, 19, 18, 19, 18, 18, 19, 19, 19, 20, 19, 20,
//           20, 20, 20, 20, 20, 15, 20, 19, 20, 20, 20, 21, 21, 21, 20, 20, 20,
//           21, 18, 21, 21, 21, 21, 20, 21, 17, 21, 21, 21, 22, 22, 21, 22, 22,
//           21, 22, 21, 19, 22, 22, 19, 20, 22, 22, 21, 21, 21, 22, 22, 22, 18,
//           22, 22, 21, 22, 22, 23, 22, 20, 23, 22, 22, 23, 23, 21, 19, 21, 21,
//           21, 23, 23, 23, 22, 23, 23, 21, 23, 22, 23, 18, 22, 23, 20, 22, 23,
//           23, 23, 21, 22, 20, 22, 21, 22, 24, 24, 24, 24, 24, 22, 21, 24, 23,
//           23, 24, 21, 24, 23, 24, 22, 24, 24, 22, 24, 24, 22, 23, 24, 24, 24,
//           20, 23, 22, 23, 24, 24, 24, 24, 24, 24, 24, 23, 21, 23, 22, 23, 24,
//           24, 24, 22, 24, 24, 24, 23, 22, 24, 24, 25, 23, 25, 25, 23, 24, 25,
//           25, 24, 22, 25, 25, 25, 24, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25,
//           25, 25, 25, 25, 23, 25, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25,
//           24, 22, 25, 25, 23, 25, 25, 20, 24, 25, 24, 25, 25, 22, 24, 25, 24,
//           25, 24, 25, 25, 24, 25, 25, 25, 25, 22, 25, 25, 25, 24, 25, 24, 25,
//           18,
//         ],
//         methods$g = {
//           blur(t, e) {
//             let i, r, n, a, s, o, l, h, u, f, c, d, p;
//             if ("number" != typeof e) throw Error("r must be a number");
//             if (e < 1) throw Error("r must be greater than 0");
//             let m = t.bitmap.width - 1,
//               g = t.bitmap.height - 1,
//               _ = e + 1,
//               b = mulTable[e],
//               y = shgTable[e],
//               v = [],
//               w = [],
//               x = [],
//               E = [],
//               k = [],
//               M = [],
//               S = 2;
//             for (; S-- > 0; ) {
//               for (d = 0, p = 0, o = 0; o < t.bitmap.height; o++) {
//                 for (
//                   i = t.bitmap.data[p] * _,
//                     r = t.bitmap.data[p + 1] * _,
//                     n = t.bitmap.data[p + 2] * _,
//                     a = t.bitmap.data[p + 3] * _,
//                     l = 1;
//                   l <= e;
//                   l++
//                 )
//                   (h = p + ((l > m ? m : l) << 2)),
//                     (i += t.bitmap.data[h++]),
//                     (r += t.bitmap.data[h++]),
//                     (n += t.bitmap.data[h++]),
//                     (a += t.bitmap.data[h]);
//                 for (s = 0; s < t.bitmap.width; s++)
//                   (v[d] = i),
//                     (w[d] = r),
//                     (x[d] = n),
//                     (E[d] = a),
//                     0 === o &&
//                       ((k[s] = ((h = s + _) < m ? h : m) << 2),
//                       (M[s] = (h = s - e) > 0 ? h << 2 : 0)),
//                     (u = p + k[s]),
//                     (f = p + M[s]),
//                     (i += t.bitmap.data[u++] - t.bitmap.data[f++]),
//                     (r += t.bitmap.data[u++] - t.bitmap.data[f++]),
//                     (n += t.bitmap.data[u++] - t.bitmap.data[f++]),
//                     (a += t.bitmap.data[u] - t.bitmap.data[f++]),
//                     d++;
//                 p += t.bitmap.width << 2;
//               }
//               for (s = 0; s < t.bitmap.width; s++) {
//                 for (
//                   i = v[(c = s)] * _,
//                     r = w[c] * _,
//                     n = x[c] * _,
//                     a = E[c] * _,
//                     l = 1;
//                   l <= e;
//                   l++
//                 )
//                   (c += l > g ? 0 : t.bitmap.width),
//                     (i += v[c]),
//                     (r += w[c]),
//                     (n += x[c]),
//                     (a += E[c]);
//                 for (d = s << 2, o = 0; o < t.bitmap.height; o++)
//                   (t.bitmap.data[d] = limit255((i * b) >>> y)),
//                     (t.bitmap.data[d + 1] = limit255((r * b) >>> y)),
//                     (t.bitmap.data[d + 2] = limit255((n * b) >>> y)),
//                     (t.bitmap.data[d + 3] = limit255((a * b) >>> y)),
//                     0 === s &&
//                       ((k[o] = ((h = o + _) < g ? h : g) * t.bitmap.width),
//                       (M[o] = (h = o - e) > 0 ? h * t.bitmap.width : 0)),
//                     (u = s + k[o]),
//                     (f = s + M[o]),
//                     (i += v[u] - v[f]),
//                     (r += w[u] - w[f]),
//                     (n += x[u] - x[f]),
//                     (a += E[u] - E[f]),
//                     (d += t.bitmap.width << 2);
//               }
//             }
//             return t;
//           },
//           gaussian(t, e) {
//             if ("number" != typeof e) throw Error("r must be a number");
//             if (e < 1) throw Error("r must be greater than 0");
//             let i = Math.ceil(2.57 * e),
//               r = 2 * i + 1,
//               n = e * e * 2,
//               a = n * Math.PI,
//               s = [];
//             for (let t = 0; t < r; t++) {
//               let e = [];
//               for (let s = 0; s < r; s++) {
//                 let r = (s - i) ** 2 + (t - i) ** 2;
//                 e[s] = Math.exp(-r / n) / a;
//               }
//               s.push(e);
//             }
//             for (let e = 0; e < t.bitmap.height; e++)
//               for (let n = 0; n < t.bitmap.width; n++) {
//                 let a = 0,
//                   o = 0,
//                   l = 0,
//                   h = 0,
//                   u = 0;
//                 for (let f = 0; f < r; f++) {
//                   for (let c = 0; c < r; c++) {
//                     let r = Math.min(
//                         t.bitmap.width - 1,
//                         Math.max(0, c + n - i)
//                       ),
//                       d = Math.min(t.bitmap.height - 1, Math.max(0, f + e - i)),
//                       p = s[f][c],
//                       m = (d * t.bitmap.width + r) << 2;
//                     (a += t.bitmap.data[m] * p),
//                       (o += t.bitmap.data[m + 1] * p),
//                       (l += t.bitmap.data[m + 2] * p),
//                       (h += t.bitmap.data[m + 3] * p),
//                       (u += p);
//                   }
//                   let c = (e * t.bitmap.width + n) << 2;
//                   (t.bitmap.data[c] = Math.round(a / u)),
//                     (t.bitmap.data[c + 1] = Math.round(o / u)),
//                     (t.bitmap.data[c + 2] = Math.round(l / u)),
//                     (t.bitmap.data[c + 3] = Math.round(h / u));
//                 }
//               }
//             return t;
//           },
//         },
//         CircleOptionsSchema = z.object({
//           x: z.number().optional(),
//           y: z.number().optional(),
//           radius: z.number().min(0).optional(),
//         }),
//         methods$f = {
//           circle(t, e = {}) {
//             let i = CircleOptionsSchema.parse(e),
//               r =
//                 i.radius ||
//                 (t.bitmap.width > t.bitmap.height
//                   ? t.bitmap.height
//                   : t.bitmap.width) / 2,
//               n = "number" == typeof i.x ? i.x : t.bitmap.width / 2,
//               a = "number" == typeof i.y ? i.y : t.bitmap.height / 2;
//             return (
//               t.scan((e, i, s) => {
//                 let o = Math.sqrt(Math.pow(e - n, 2) + Math.pow(i - a, 2));
//                 r - o <= 0
//                   ? (t.bitmap.data[s + 3] = 0)
//                   : r - o < 1 && (t.bitmap.data[s + 3] = 255 * (r - o));
//               }),
//               t
//             );
//           },
//         },
//         ConvolutionMatrixSchema = z.array(z.number()).min(1).array(),
//         ConvolutionComplexOptionsSchema = z.object({
//           kernel: ConvolutionMatrixSchema,
//           edgeHandling: z.nativeEnum(Edge).optional(),
//         }),
//         ConvolutionOptionsSchema = z.union([
//           ConvolutionMatrixSchema,
//           ConvolutionComplexOptionsSchema,
//         ]),
//         ConvoluteComplexOptionsSchema = z.object({
//           kernel: ConvolutionMatrixSchema,
//           x: z.number().optional(),
//           y: z.number().optional(),
//           w: z.number().optional(),
//           h: z.number().optional(),
//         }),
//         ConvoluteOptionsSchema = z.union([
//           ConvolutionMatrixSchema,
//           ConvoluteComplexOptionsSchema,
//         ]),
//         PixelateSize = z
//           .number()
//           .min(1)
//           .max(1 / 0),
//         PixelateComplexOptionsSchema = z.object({
//           size: PixelateSize,
//           x: z.number().optional(),
//           y: z.number().optional(),
//           w: z.number().optional(),
//           h: z.number().optional(),
//         }),
//         PixelateOptionsSchema = z.union([
//           PixelateSize,
//           PixelateComplexOptionsSchema,
//         ]);
//       function applyKernel(t, e, i, r) {
//         let n = [0, 0, 0, 0],
//           a = (e.length - 1) / 2;
//         for (let s = 0; s < e.length; s += 1)
//           for (let o = 0; o < e[s].length; o += 1) {
//             let l = t.getPixelIndex(i + s - a, r + o - a);
//             (n[0] += t.bitmap.data[l] * e[s][o]),
//               (n[1] += t.bitmap.data[l + 1] * e[s][o]),
//               (n[2] += t.bitmap.data[l + 2] * e[s][o]),
//               (n[3] += t.bitmap.data[l + 3] * e[s][o]);
//           }
//         return n;
//       }
//       function mix(t, e, i = 50) {
//         return {
//           r: (e.r - t.r) * (i / 100) + t.r,
//           g: (e.g - t.g) * (i / 100) + t.g,
//           b: (e.b - t.b) * (i / 100) + t.b,
//         };
//       }
//       let HueActionSchema = z.object({
//           apply: z.literal("hue"),
//           params: z.tuple([z.number().min(-360).max(360)]),
//         }),
//         SpinActionSchema = z.object({
//           apply: z.literal("spin"),
//           params: z.tuple([z.number().min(-360).max(360)]),
//         }),
//         LightenActionSchema = z.object({
//           apply: z.literal("lighten"),
//           params: z.tuple([z.number().min(0).max(100)]).optional(),
//         }),
//         RGBColorSchema = z.object({
//           r: z.number().min(0).max(255),
//           g: z.number().min(0).max(255),
//           b: z.number().min(0).max(255),
//         }),
//         MixActionSchema = z.object({
//           apply: z.literal("mix"),
//           params: z.union([
//             z.tuple([RGBColorSchema]),
//             z.tuple([RGBColorSchema, z.number().min(0).max(100)]),
//           ]),
//         }),
//         TintActionSchema = z.object({
//           apply: z.literal("tint"),
//           params: z.tuple([z.number().min(0).max(100)]).optional(),
//         }),
//         ShadeActionSchema = z.object({
//           apply: z.literal("shade"),
//           params: z.tuple([z.number().min(0).max(100)]).optional(),
//         }),
//         XorActionSchema = z.object({
//           apply: z.literal("xor"),
//           params: z.tuple([RGBColorSchema]),
//         }),
//         RedActionSchema = z.object({
//           apply: z.literal("red"),
//           params: z.tuple([z.number().min(-255).max(255)]),
//         }),
//         GreenActionSchema = z.object({
//           apply: z.literal("green"),
//           params: z.tuple([z.number().min(-255).max(255)]),
//         }),
//         BlueActionSchema = z.object({
//           apply: z.literal("blue"),
//           params: z.tuple([z.number().min(-255).max(255)]),
//         }),
//         BrightenActionSchema = z.object({
//           apply: z.literal("brighten"),
//           params: z.tuple([z.number().min(0).max(100)]).optional(),
//         }),
//         DarkenActionSchema = z.object({
//           apply: z.literal("darken"),
//           params: z.tuple([z.number().min(0).max(100)]).optional(),
//         }),
//         DesaturateActionSchema = z.object({
//           apply: z.literal("desaturate"),
//           params: z.tuple([z.number().min(0).max(100)]).optional(),
//         }),
//         SaturateActionSchema = z.object({
//           apply: z.literal("saturate"),
//           params: z.tuple([z.number().min(0).max(100)]).optional(),
//         }),
//         GrayscaleActionSchema = z.object({
//           apply: z.literal("greyscale"),
//           params: z.tuple([]).optional(),
//         }),
//         ColorActionNameSchema = z.union([
//           HueActionSchema,
//           SpinActionSchema,
//           LightenActionSchema,
//           MixActionSchema,
//           TintActionSchema,
//           ShadeActionSchema,
//           XorActionSchema,
//           RedActionSchema,
//           GreenActionSchema,
//           BlueActionSchema,
//           BrightenActionSchema,
//           DarkenActionSchema,
//           DesaturateActionSchema,
//           SaturateActionSchema,
//           GrayscaleActionSchema,
//         ]);
//       function histogram(t) {
//         let e = {
//           r: Array(256).fill(0),
//           g: Array(256).fill(0),
//           b: Array(256).fill(0),
//         };
//         return (
//           t.scan((i, r, n) => {
//             e.r[t.bitmap.data[n + 0]]++,
//               e.g[t.bitmap.data[n + 1]]++,
//               e.b[t.bitmap.data[n + 2]]++;
//           }),
//           e
//         );
//       }
//       let normalizeValue = function (t, e, i) {
//           return (255 * (t - e)) / (i - e);
//         },
//         getBounds = function (t) {
//           return [
//             t.findIndex((t) => t > 0),
//             255 -
//               t
//                 .slice()
//                 .reverse()
//                 .findIndex((t) => t > 0),
//           ];
//         },
//         methods$e = {
//           normalize(t) {
//             let e = histogram(t),
//               i = { r: getBounds(e.r), g: getBounds(e.g), b: getBounds(e.b) };
//             return (
//               t.scan((e, r, n) => {
//                 let a = t.bitmap.data[n + 0],
//                   s = t.bitmap.data[n + 1],
//                   o = t.bitmap.data[n + 2];
//                 (t.bitmap.data[n + 0] = normalizeValue(a, i.r[0], i.r[1])),
//                   (t.bitmap.data[n + 1] = normalizeValue(s, i.g[0], i.g[1])),
//                   (t.bitmap.data[n + 2] = normalizeValue(o, i.b[0], i.b[1]));
//               }),
//               t
//             );
//           },
//           invert: (t) => (
//             t.scan((e, i, r) => {
//               (t.bitmap.data[r] = 255 - t.bitmap.data[r]),
//                 (t.bitmap.data[r + 1] = 255 - t.bitmap.data[r + 1]),
//                 (t.bitmap.data[r + 2] = 255 - t.bitmap.data[r + 2]);
//             }),
//             t
//           ),
//           brightness(t, e) {
//             if ("number" != typeof e) throw Error("val must be numbers");
//             return (
//               t.scan((i, r, n) => {
//                 (t.bitmap.data[n] = limit255(t.bitmap.data[n] * e)),
//                   (t.bitmap.data[n + 1] = limit255(t.bitmap.data[n + 1] * e)),
//                   (t.bitmap.data[n + 2] = limit255(t.bitmap.data[n + 2] * e));
//               }),
//               t
//             );
//           },
//           contrast(t, e) {
//             if ("number" != typeof e) throw Error("val must be numbers");
//             if (e < -1 || e > 1)
//               throw Error("val must be a number between -1 and +1");
//             let i = (e + 1) / (1 - e);
//             function r(t) {
//               return (t = Math.floor(i * (t - 127) + 127)) < 0
//                 ? 0
//                 : t > 255
//                 ? 255
//                 : t;
//             }
//             return (
//               t.scan((e, i, n) => {
//                 (t.bitmap.data[n] = r(t.bitmap.data[n])),
//                   (t.bitmap.data[n + 1] = r(t.bitmap.data[n + 1])),
//                   (t.bitmap.data[n + 2] = r(t.bitmap.data[n + 2]));
//               }),
//               t
//             );
//           },
//           posterize(t, e) {
//             if ("number" != typeof e) throw Error("n must be numbers");
//             return (
//               e < 2 && (e = 2),
//               t.scan((i, r, n) => {
//                 let a = t.bitmap.data[n],
//                   s = t.bitmap.data[n + 1],
//                   o = t.bitmap.data[n + 2];
//                 (t.bitmap.data[n] =
//                   (Math.floor((a / 255) * (e - 1)) / (e - 1)) * 255),
//                   (t.bitmap.data[n + 1] =
//                     (Math.floor((s / 255) * (e - 1)) / (e - 1)) * 255),
//                   (t.bitmap.data[n + 2] =
//                     (Math.floor((o / 255) * (e - 1)) / (e - 1)) * 255);
//               }),
//               t
//             );
//           },
//           greyscale: (t) => (
//             t.scan((e, i, r) => {
//               let n =
//                 0.2126 * t.bitmap.data[r] +
//                 0.7152 * t.bitmap.data[r + 1] +
//                 0.0722 * t.bitmap.data[r + 2];
//               (t.bitmap.data[r] = n),
//                 (t.bitmap.data[r + 1] = n),
//                 (t.bitmap.data[r + 2] = n);
//             }),
//             t
//           ),
//           opacity(t, e) {
//             if ("number" != typeof e) throw Error("f must be a number");
//             if (e < 0 || e > 1) throw Error("f must be a number from 0 to 1");
//             return (
//               t.scan((i, r, n) => {
//                 let a = t.bitmap.data[n + 3] * e;
//                 t.bitmap.data[n + 3] = a;
//               }),
//               t
//             );
//           },
//           sepia: (t) => (
//             t.scan((e, i, r) => {
//               let n = t.bitmap.data[r],
//                 a = t.bitmap.data[r + 1],
//                 s = t.bitmap.data[r + 2];
//               (a =
//                 0.349 * (n = 0.393 * n + 0.769 * a + 0.189 * s) +
//                 0.686 * a +
//                 0.168 * s),
//                 (s = 0.272 * n + 0.534 * a + 0.131 * s),
//                 (t.bitmap.data[r] = n < 255 ? n : 255),
//                 (t.bitmap.data[r + 1] = a < 255 ? a : 255),
//                 (t.bitmap.data[r + 2] = s < 255 ? s : 255);
//             }),
//             t
//           ),
//           fade(t, e) {
//             if ("number" != typeof e) throw Error("f must be a number");
//             if (e < 0 || e > 1) throw Error("f must be a number from 0 to 1");
//             return this.opacity(t, 1 - e);
//           },
//           convolution(t, e) {
//             let i, r, n, a, s, o, l, h, u, f;
//             let c = ConvolutionOptionsSchema.parse(e),
//               { kernel: d, edgeHandling: p = Edge.EXTEND } =
//                 "kernel" in c ? c : { kernel: c, edgeHandling: void 0 };
//             if (!d[0]) throw Error("kernel must be a matrix");
//             let m = Buffer.from(t.bitmap.data),
//               g = d.length,
//               _ = d[0].length,
//               b = Math.floor(g / 2),
//               y = Math.floor(_ / 2),
//               v = -b,
//               w = -y;
//             return (
//               t.scan((e, c, g) => {
//                 (a = 0), (n = 0), (r = 0);
//                 for (let m = v; m <= b; m++)
//                   for (let g = w; g <= y; g++)
//                     (h = e + g),
//                       (u = c + m),
//                       (i = d[m + b][g + y]),
//                       -1 === (f = t.getPixelIndex(h, u, p))
//                         ? ((l = 0), (o = 0), (s = 0))
//                         : ((s = t.bitmap.data[f + 0]),
//                           (o = t.bitmap.data[f + 1]),
//                           (l = t.bitmap.data[f + 2])),
//                       (r += i * s),
//                       (n += i * o),
//                       (a += i * l);
//                 r < 0 && (r = 0),
//                   n < 0 && (n = 0),
//                   a < 0 && (a = 0),
//                   r > 255 && (r = 255),
//                   n > 255 && (n = 255),
//                   a > 255 && (a = 255),
//                   (m[g + 0] = r),
//                   (m[g + 1] = n),
//                   (m[g + 2] = a);
//               }),
//               (t.bitmap.data = m),
//               t
//             );
//           },
//           opaque: (t) => (
//             t.scan((e, i, r) => {
//               t.bitmap.data[r + 3] = 255;
//             }),
//             t
//           ),
//           pixelate(t, e) {
//             let i = PixelateOptionsSchema.parse(e),
//               {
//                 size: r,
//                 x: n = 0,
//                 y: a = 0,
//                 w: s = t.bitmap.width - n,
//                 h: o = t.bitmap.height - a,
//               } = "number" == typeof i ? { size: i } : i,
//               l = [
//                 [1 / 16, 2 / 16, 1 / 16],
//                 [2 / 16, 0.25, 2 / 16],
//                 [1 / 16, 2 / 16, 1 / 16],
//               ],
//               h = clone(t);
//             return (
//               scan(h, n, a, s, o, (e, i, n) => {
//                 let a = applyKernel(
//                   h,
//                   l,
//                   (e = r * Math.floor(e / r)),
//                   (i = r * Math.floor(i / r))
//                 );
//                 (t.bitmap.data[n] = a[0]),
//                   (t.bitmap.data[n + 1] = a[1]),
//                   (t.bitmap.data[n + 2] = a[2]),
//                   (t.bitmap.data[n + 3] = a[3]);
//               }),
//               t
//             );
//           },
//           convolute(t, e) {
//             let i = ConvoluteOptionsSchema.parse(e),
//               {
//                 kernel: r,
//                 x: n = 0,
//                 y: a = 0,
//                 w: s = t.bitmap.width - n,
//                 h: o = t.bitmap.height - a,
//               } = "kernel" in i ? i : { kernel: i },
//               l = clone(t);
//             return (
//               scan(l, n, a, s, o, (e, i, n) => {
//                 let a = applyKernel(l, r, e, i);
//                 (t.bitmap.data[n] = limit255(a[0])),
//                   (t.bitmap.data[n + 1] = limit255(a[1])),
//                   (t.bitmap.data[n + 2] = limit255(a[2])),
//                   (t.bitmap.data[n + 3] = limit255(a[3]));
//               }),
//               t
//             );
//           },
//           color(t, e) {
//             if (!e || !Array.isArray(e))
//               throw Error("actions must be an array");
//             return (
//               e.forEach((t) => ColorActionNameSchema.parse(t)),
//               (e = e.map(
//                 (t) => (
//                   ("xor" !== t.apply && "mix" !== t.apply) ||
//                     (t.params[0] = tinycolor(t.params[0]).toRgb()),
//                   t
//                 )
//               )),
//               t.scan((i, r, n) => {
//                 let a = {
//                     r: t.bitmap.data[n],
//                     g: t.bitmap.data[n + 1],
//                     b: t.bitmap.data[n + 2],
//                   },
//                   s = (t, e) => limit255(a[t] + e);
//                 e.forEach((t) => {
//                   if ("mix" === t.apply) a = mix(a, t.params[0], t.params[1]);
//                   else if ("tint" === t.apply)
//                     a = mix(a, { r: 255, g: 255, b: 255 }, t.params?.[0]);
//                   else if ("shade" === t.apply)
//                     a = mix(a, { r: 0, g: 0, b: 0 }, t.params?.[0]);
//                   else if ("xor" === t.apply)
//                     a = {
//                       r: a.r ^ t.params[0].r,
//                       g: a.g ^ t.params[0].g,
//                       b: a.b ^ t.params[0].b,
//                     };
//                   else if ("red" === t.apply) a.r = s("r", t.params[0]);
//                   else if ("green" === t.apply) a.g = s("g", t.params[0]);
//                   else if ("blue" === t.apply) a.b = s("b", t.params[0]);
//                   else {
//                     "hue" === t.apply && (t.apply = "spin");
//                     let e = tinycolor(a),
//                       i = e[t.apply].bind(e);
//                     if (!i) throw Error("action " + t.apply + " not supported");
//                     a = i(...(t.params || [])).toRgb();
//                   }
//                 }),
//                   (t.bitmap.data[n] = a.r),
//                   (t.bitmap.data[n + 1] = a.g),
//                   (t.bitmap.data[n + 2] = a.b);
//               }),
//               t
//             );
//           },
//         };
//       var lib$1 = {},
//         ieee754 = {
//           read: function (t, e, i, r, n) {
//             var a,
//               s,
//               o = 8 * n - r - 1,
//               l = (1 << o) - 1,
//               h = l >> 1,
//               u = -7,
//               f = i ? n - 1 : 0,
//               c = i ? -1 : 1,
//               d = t[e + f];
//             for (
//               f += c, a = d & ((1 << -u) - 1), d >>= -u, u += o;
//               u > 0;
//               a = 256 * a + t[e + f], f += c, u -= 8
//             );
//             for (
//               s = a & ((1 << -u) - 1), a >>= -u, u += r;
//               u > 0;
//               s = 256 * s + t[e + f], f += c, u -= 8
//             );
//             if (0 === a) a = 1 - h;
//             else {
//               if (a === l) return s ? NaN : (1 / 0) * (d ? -1 : 1);
//               (s += Math.pow(2, r)), (a -= h);
//             }
//             return (d ? -1 : 1) * s * Math.pow(2, a - r);
//           },
//           write: function (t, e, i, r, n, a) {
//             var s,
//               o,
//               l,
//               h = 8 * a - n - 1,
//               u = (1 << h) - 1,
//               f = u >> 1,
//               c = 23 === n ? 5960464477539062e-23 : 0,
//               d = r ? 0 : a - 1,
//               p = r ? 1 : -1,
//               m = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
//             for (
//               isNaN((e = Math.abs(e))) || e === 1 / 0
//                 ? ((o = isNaN(e) ? 1 : 0), (s = u))
//                 : ((s = Math.floor(Math.log(e) / Math.LN2)),
//                   e * (l = Math.pow(2, -s)) < 1 && (s--, (l *= 2)),
//                   (e += s + f >= 1 ? c / l : c * Math.pow(2, 1 - f)) * l >= 2 &&
//                     (s++, (l /= 2)),
//                   s + f >= u
//                     ? ((o = 0), (s = u))
//                     : s + f >= 1
//                     ? ((o = (e * l - 1) * Math.pow(2, n)), (s += f))
//                     : ((o = e * Math.pow(2, f - 1) * Math.pow(2, n)), (s = 0)));
//               n >= 8;
//               t[i + d] = 255 & o, d += p, o /= 256, n -= 8
//             );
//             for (
//               s = (s << n) | o, h += n;
//               h > 0;
//               t[i + d] = 255 & s, d += p, s /= 256, h -= 8
//             );
//             t[i + d - p] |= 128 * m;
//           },
//         };
//       !(function (t) {
//         Object.defineProperty(t, "__esModule", { value: !0 }),
//           (t.AnsiStringType =
//             t.StringType =
//             t.BufferType =
//             t.Uint8ArrayType =
//             t.IgnoreType =
//             t.Float80_LE =
//             t.Float80_BE =
//             t.Float64_LE =
//             t.Float64_BE =
//             t.Float32_LE =
//             t.Float32_BE =
//             t.Float16_LE =
//             t.Float16_BE =
//             t.INT64_BE =
//             t.UINT64_BE =
//             t.INT64_LE =
//             t.UINT64_LE =
//             t.INT32_LE =
//             t.INT32_BE =
//             t.INT24_BE =
//             t.INT24_LE =
//             t.INT16_LE =
//             t.INT16_BE =
//             t.INT8 =
//             t.UINT32_BE =
//             t.UINT32_LE =
//             t.UINT24_BE =
//             t.UINT24_LE =
//             t.UINT16_BE =
//             t.UINT16_LE =
//             t.UINT8 =
//               void 0);
//         let e = ieee754;
//         function i(t) {
//           return new DataView(t.buffer, t.byteOffset);
//         }
//         (t.UINT8 = {
//           len: 1,
//           get: (t, e) => i(t).getUint8(e),
//           put: (t, e, r) => (i(t).setUint8(e, r), e + 1),
//         }),
//           (t.UINT16_LE = {
//             len: 2,
//             get: (t, e) => i(t).getUint16(e, !0),
//             put: (t, e, r) => (i(t).setUint16(e, r, !0), e + 2),
//           }),
//           (t.UINT16_BE = {
//             len: 2,
//             get: (t, e) => i(t).getUint16(e),
//             put: (t, e, r) => (i(t).setUint16(e, r), e + 2),
//           }),
//           (t.UINT24_LE = {
//             len: 3,
//             get(t, e) {
//               let r = i(t);
//               return r.getUint8(e) + (r.getUint16(e + 1, !0) << 8);
//             },
//             put(t, e, r) {
//               let n = i(t);
//               return (
//                 n.setUint8(e, 255 & r), n.setUint16(e + 1, r >> 8, !0), e + 3
//               );
//             },
//           }),
//           (t.UINT24_BE = {
//             len: 3,
//             get(t, e) {
//               let r = i(t);
//               return (r.getUint16(e) << 8) + r.getUint8(e + 2);
//             },
//             put(t, e, r) {
//               let n = i(t);
//               return n.setUint16(e, r >> 8), n.setUint8(e + 2, 255 & r), e + 3;
//             },
//           }),
//           (t.UINT32_LE = {
//             len: 4,
//             get: (t, e) => i(t).getUint32(e, !0),
//             put: (t, e, r) => (i(t).setUint32(e, r, !0), e + 4),
//           }),
//           (t.UINT32_BE = {
//             len: 4,
//             get: (t, e) => i(t).getUint32(e),
//             put: (t, e, r) => (i(t).setUint32(e, r), e + 4),
//           }),
//           (t.INT8 = {
//             len: 1,
//             get: (t, e) => i(t).getInt8(e),
//             put: (t, e, r) => (i(t).setInt8(e, r), e + 1),
//           }),
//           (t.INT16_BE = {
//             len: 2,
//             get: (t, e) => i(t).getInt16(e),
//             put: (t, e, r) => (i(t).setInt16(e, r), e + 2),
//           }),
//           (t.INT16_LE = {
//             len: 2,
//             get: (t, e) => i(t).getInt16(e, !0),
//             put: (t, e, r) => (i(t).setInt16(e, r, !0), e + 2),
//           }),
//           (t.INT24_LE = {
//             len: 3,
//             get(e, i) {
//               let r = t.UINT24_LE.get(e, i);
//               return r > 8388607 ? r - 16777216 : r;
//             },
//             put(t, e, r) {
//               let n = i(t);
//               return (
//                 n.setUint8(e, 255 & r), n.setUint16(e + 1, r >> 8, !0), e + 3
//               );
//             },
//           }),
//           (t.INT24_BE = {
//             len: 3,
//             get(e, i) {
//               let r = t.UINT24_BE.get(e, i);
//               return r > 8388607 ? r - 16777216 : r;
//             },
//             put(t, e, r) {
//               let n = i(t);
//               return n.setUint16(e, r >> 8), n.setUint8(e + 2, 255 & r), e + 3;
//             },
//           }),
//           (t.INT32_BE = {
//             len: 4,
//             get: (t, e) => i(t).getInt32(e),
//             put: (t, e, r) => (i(t).setInt32(e, r), e + 4),
//           }),
//           (t.INT32_LE = {
//             len: 4,
//             get: (t, e) => i(t).getInt32(e, !0),
//             put: (t, e, r) => (i(t).setInt32(e, r, !0), e + 4),
//           }),
//           (t.UINT64_LE = {
//             len: 8,
//             get: (t, e) => i(t).getBigUint64(e, !0),
//             put: (t, e, r) => (i(t).setBigUint64(e, r, !0), e + 8),
//           }),
//           (t.INT64_LE = {
//             len: 8,
//             get: (t, e) => i(t).getBigInt64(e, !0),
//             put: (t, e, r) => (i(t).setBigInt64(e, r, !0), e + 8),
//           }),
//           (t.UINT64_BE = {
//             len: 8,
//             get: (t, e) => i(t).getBigUint64(e),
//             put: (t, e, r) => (i(t).setBigUint64(e, r), e + 8),
//           }),
//           (t.INT64_BE = {
//             len: 8,
//             get: (t, e) => i(t).getBigInt64(e),
//             put: (t, e, r) => (i(t).setBigInt64(e, r), e + 8),
//           }),
//           (t.Float16_BE = {
//             len: 2,
//             get(t, i) {
//               return e.read(t, i, !1, 10, this.len);
//             },
//             put(t, i, r) {
//               return e.write(t, r, i, !1, 10, this.len), i + this.len;
//             },
//           }),
//           (t.Float16_LE = {
//             len: 2,
//             get(t, i) {
//               return e.read(t, i, !0, 10, this.len);
//             },
//             put(t, i, r) {
//               return e.write(t, r, i, !0, 10, this.len), i + this.len;
//             },
//           }),
//           (t.Float32_BE = {
//             len: 4,
//             get: (t, e) => i(t).getFloat32(e),
//             put: (t, e, r) => (i(t).setFloat32(e, r), e + 4),
//           }),
//           (t.Float32_LE = {
//             len: 4,
//             get: (t, e) => i(t).getFloat32(e, !0),
//             put: (t, e, r) => (i(t).setFloat32(e, r, !0), e + 4),
//           }),
//           (t.Float64_BE = {
//             len: 8,
//             get: (t, e) => i(t).getFloat64(e),
//             put: (t, e, r) => (i(t).setFloat64(e, r), e + 8),
//           }),
//           (t.Float64_LE = {
//             len: 8,
//             get: (t, e) => i(t).getFloat64(e, !0),
//             put: (t, e, r) => (i(t).setFloat64(e, r, !0), e + 8),
//           }),
//           (t.Float80_BE = {
//             len: 10,
//             get(t, i) {
//               return e.read(t, i, !1, 63, this.len);
//             },
//             put(t, i, r) {
//               return e.write(t, r, i, !1, 63, this.len), i + this.len;
//             },
//           }),
//           (t.Float80_LE = {
//             len: 10,
//             get(t, i) {
//               return e.read(t, i, !0, 63, this.len);
//             },
//             put(t, i, r) {
//               return e.write(t, r, i, !0, 63, this.len), i + this.len;
//             },
//           }),
//           (t.IgnoreType = class {
//             constructor(t) {
//               this.len = t;
//             }
//             get(t, e) {}
//           }),
//           (t.Uint8ArrayType = class {
//             constructor(t) {
//               this.len = t;
//             }
//             get(t, e) {
//               return t.subarray(e, e + this.len);
//             }
//           }),
//           (t.BufferType = class {
//             constructor(t) {
//               this.len = t;
//             }
//             get(t, e) {
//               return Buffer.from(t.subarray(e, e + this.len));
//             }
//           }),
//           (t.StringType = class {
//             constructor(t, e) {
//               (this.len = t), (this.encoding = e);
//             }
//             get(t, e) {
//               return Buffer.from(t).toString(this.encoding, e, e + this.len);
//             }
//           });
//         class r {
//           constructor(t) {
//             this.len = t;
//           }
//           static decode(t, e, i) {
//             let n = "";
//             for (let a = e; a < i; ++a)
//               n += r.codePointToString(r.singleByteDecoder(t[a]));
//             return n;
//           }
//           static inRange(t, e, i) {
//             return e <= t && t <= i;
//           }
//           static codePointToString(t) {
//             return t <= 65535
//               ? String.fromCharCode(t)
//               : String.fromCharCode(
//                   55296 + ((t -= 65536) >> 10),
//                   56320 + (1023 & t)
//                 );
//           }
//           static singleByteDecoder(t) {
//             if (r.inRange(t, 0, 127)) return t;
//             let e = r.windows1252[t - 128];
//             if (null === e) throw Error("invaliding encoding");
//             return e;
//           }
//           get(t, e = 0) {
//             return r.decode(t, e, e + this.len);
//           }
//         }
//         (t.AnsiStringType = r),
//           (r.windows1252 = [
//             8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249,
//             338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212,
//             732, 8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164,
//             165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
//             178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
//             191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
//             204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
//             217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
//             230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
//             243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
//           ]);
//       })(lib$1);
//       var core$1 = {},
//         ReadStreamTokenizer$1 = {},
//         AbstractTokenizer$1 = {},
//         lib = {},
//         EndOfFileStream = {};
//       !(function (t) {
//         Object.defineProperty(t, "__esModule", { value: !0 }),
//           (t.EndOfStreamError = t.defaultMessages = void 0),
//           (t.defaultMessages = "End-Of-Stream");
//         class e extends Error {
//           constructor() {
//             super(t.defaultMessages);
//           }
//         }
//         t.EndOfStreamError = e;
//       })(EndOfFileStream);
//       var StreamReader = {},
//         Deferred$1 = {};
//       Object.defineProperty(Deferred$1, "__esModule", { value: !0 }),
//         (Deferred$1.Deferred = void 0);
//       class Deferred {
//         constructor() {
//           (this.resolve = () => null),
//             (this.reject = () => null),
//             (this.promise = new Promise((t, e) => {
//               (this.reject = e), (this.resolve = t);
//             }));
//         }
//       }
//       (Deferred$1.Deferred = Deferred),
//         (function (t) {
//           Object.defineProperty(t, "__esModule", { value: !0 }),
//             (t.StreamReader = t.EndOfStreamError = void 0);
//           let e = EndOfFileStream,
//             i = Deferred$1;
//           var r = EndOfFileStream;
//           Object.defineProperty(t, "EndOfStreamError", {
//             enumerable: !0,
//             get: function () {
//               return r.EndOfStreamError;
//             },
//           }),
//             (t.StreamReader = class {
//               constructor(t) {
//                 if (
//                   ((this.s = t),
//                   (this.deferred = null),
//                   (this.endOfStream = !1),
//                   (this.peekQueue = []),
//                   !t.read || !t.once)
//                 )
//                   throw Error("Expected an instance of stream.Readable");
//                 this.s.once("end", () => this.reject(new e.EndOfStreamError())),
//                   this.s.once("error", (t) => this.reject(t)),
//                   this.s.once("close", () =>
//                     this.reject(Error("Stream closed"))
//                   );
//               }
//               async peek(t, e, i) {
//                 let r = await this.read(t, e, i);
//                 return this.peekQueue.push(t.subarray(e, e + r)), r;
//               }
//               async read(t, i, r) {
//                 if (0 === r) return 0;
//                 if (0 === this.peekQueue.length && this.endOfStream)
//                   throw new e.EndOfStreamError();
//                 let n = r,
//                   a = 0;
//                 for (; this.peekQueue.length > 0 && n > 0; ) {
//                   let e = this.peekQueue.pop();
//                   if (!e) throw Error("peekData should be defined");
//                   let r = Math.min(e.length, n);
//                   t.set(e.subarray(0, r), i + a),
//                     (a += r),
//                     (n -= r),
//                     r < e.length && this.peekQueue.push(e.subarray(r));
//                 }
//                 for (; n > 0 && !this.endOfStream; ) {
//                   let e = Math.min(n, 1048576),
//                     r = await this.readFromStream(t, i + a, e);
//                   if (((a += r), r < e)) break;
//                   n -= r;
//                 }
//                 return a;
//               }
//               async readFromStream(t, e, r) {
//                 let n = this.s.read(r);
//                 if (n) return t.set(n, e), n.length;
//                 {
//                   let n = {
//                     buffer: t,
//                     offset: e,
//                     length: r,
//                     deferred: new i.Deferred(),
//                   };
//                   return (
//                     (this.deferred = n.deferred),
//                     this.s.once("readable", () => {
//                       this.readDeferred(n);
//                     }),
//                     n.deferred.promise
//                   );
//                 }
//               }
//               readDeferred(t) {
//                 let e = this.s.read(t.length);
//                 e
//                   ? (t.buffer.set(e, t.offset),
//                     t.deferred.resolve(e.length),
//                     (this.deferred = null))
//                   : this.s.once("readable", () => {
//                       this.readDeferred(t);
//                     });
//               }
//               reject(t) {
//                 (this.endOfStream = !0),
//                   this.deferred &&
//                     (this.deferred.reject(t), (this.deferred = null));
//               }
//             });
//         })(StreamReader),
//         (function (t) {
//           Object.defineProperty(t, "__esModule", { value: !0 }),
//             (t.StreamReader = t.EndOfStreamError = void 0);
//           var e = EndOfFileStream;
//           Object.defineProperty(t, "EndOfStreamError", {
//             enumerable: !0,
//             get: function () {
//               return e.EndOfStreamError;
//             },
//           });
//           var i = StreamReader;
//           Object.defineProperty(t, "StreamReader", {
//             enumerable: !0,
//             get: function () {
//               return i.StreamReader;
//             },
//           });
//         })(lib),
//         Object.defineProperty(AbstractTokenizer$1, "__esModule", { value: !0 }),
//         (AbstractTokenizer$1.AbstractTokenizer = void 0);
//       let peek_readable_1$2 = lib;
//       class AbstractTokenizer {
//         constructor(t) {
//           (this.position = 0),
//             (this.numBuffer = new Uint8Array(8)),
//             (this.fileInfo = t || {});
//         }
//         async readToken(t, e = this.position) {
//           let i = Buffer.alloc(t.len);
//           if ((await this.readBuffer(i, { position: e })) < t.len)
//             throw new peek_readable_1$2.EndOfStreamError();
//           return t.get(i, 0);
//         }
//         async peekToken(t, e = this.position) {
//           let i = Buffer.alloc(t.len);
//           if ((await this.peekBuffer(i, { position: e })) < t.len)
//             throw new peek_readable_1$2.EndOfStreamError();
//           return t.get(i, 0);
//         }
//         async readNumber(t) {
//           if (
//             (await this.readBuffer(this.numBuffer, { length: t.len })) < t.len
//           )
//             throw new peek_readable_1$2.EndOfStreamError();
//           return t.get(this.numBuffer, 0);
//         }
//         async peekNumber(t) {
//           if (
//             (await this.peekBuffer(this.numBuffer, { length: t.len })) < t.len
//           )
//             throw new peek_readable_1$2.EndOfStreamError();
//           return t.get(this.numBuffer, 0);
//         }
//         async ignore(t) {
//           if (void 0 !== this.fileInfo.size) {
//             let e = this.fileInfo.size - this.position;
//             if (t > e) return (this.position += e), e;
//           }
//           return (this.position += t), t;
//         }
//         async close() {}
//         normalizeOptions(t, e) {
//           if (e && void 0 !== e.position && e.position < this.position)
//             throw Error(
//               "`options.position` must be equal or greater than `tokenizer.position`"
//             );
//           return e
//             ? {
//                 mayBeLess: !0 === e.mayBeLess,
//                 offset: e.offset ? e.offset : 0,
//                 length: e.length
//                   ? e.length
//                   : t.length - (e.offset ? e.offset : 0),
//                 position: e.position ? e.position : this.position,
//               }
//             : {
//                 mayBeLess: !1,
//                 offset: 0,
//                 length: t.length,
//                 position: this.position,
//               };
//         }
//       }
//       (AbstractTokenizer$1.AbstractTokenizer = AbstractTokenizer),
//         Object.defineProperty(ReadStreamTokenizer$1, "__esModule", {
//           value: !0,
//         }),
//         (ReadStreamTokenizer$1.ReadStreamTokenizer = void 0);
//       let AbstractTokenizer_1$1 = AbstractTokenizer$1,
//         peek_readable_1$1 = lib,
//         maxBufferSize = 256e3;
//       class ReadStreamTokenizer extends AbstractTokenizer_1$1.AbstractTokenizer {
//         constructor(t, e) {
//           super(e), (this.streamReader = new peek_readable_1$1.StreamReader(t));
//         }
//         async getFileInfo() {
//           return this.fileInfo;
//         }
//         async readBuffer(t, e) {
//           let i = this.normalizeOptions(t, e),
//             r = i.position - this.position;
//           if (r > 0) return await this.ignore(r), this.readBuffer(t, e);
//           if (r < 0)
//             throw Error(
//               "`options.position` must be equal or greater than `tokenizer.position`"
//             );
//           if (0 === i.length) return 0;
//           let n = await this.streamReader.read(t, i.offset, i.length);
//           if (((this.position += n), (!e || !e.mayBeLess) && n < i.length))
//             throw new peek_readable_1$1.EndOfStreamError();
//           return n;
//         }
//         async peekBuffer(t, e) {
//           let i = this.normalizeOptions(t, e),
//             r = 0;
//           if (i.position) {
//             let e = i.position - this.position;
//             if (e > 0) {
//               let n = new Uint8Array(i.length + e);
//               return (
//                 (r = await this.peekBuffer(n, { mayBeLess: i.mayBeLess })),
//                 t.set(n.subarray(e), i.offset),
//                 r - e
//               );
//             }
//             if (e < 0)
//               throw Error("Cannot peek from a negative offset in a stream");
//           }
//           if (i.length > 0) {
//             try {
//               r = await this.streamReader.peek(t, i.offset, i.length);
//             } catch (t) {
//               if (
//                 e &&
//                 e.mayBeLess &&
//                 t instanceof peek_readable_1$1.EndOfStreamError
//               )
//                 return 0;
//               throw t;
//             }
//             if (!i.mayBeLess && r < i.length)
//               throw new peek_readable_1$1.EndOfStreamError();
//           }
//           return r;
//         }
//         async ignore(t) {
//           let e = Math.min(maxBufferSize, t),
//             i = new Uint8Array(e),
//             r = 0;
//           for (; r < t; ) {
//             let n = t - r,
//               a = await this.readBuffer(i, { length: Math.min(e, n) });
//             if (a < 0) return a;
//             r += a;
//           }
//           return r;
//         }
//       }
//       ReadStreamTokenizer$1.ReadStreamTokenizer = ReadStreamTokenizer;
//       var BufferTokenizer$1 = {};
//       Object.defineProperty(BufferTokenizer$1, "__esModule", { value: !0 }),
//         (BufferTokenizer$1.BufferTokenizer = void 0);
//       let peek_readable_1 = lib,
//         AbstractTokenizer_1 = AbstractTokenizer$1;
//       class BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {
//         constructor(t, e) {
//           super(e),
//             (this.uint8Array = t),
//             (this.fileInfo.size = this.fileInfo.size
//               ? this.fileInfo.size
//               : t.length);
//         }
//         async readBuffer(t, e) {
//           if (e && e.position) {
//             if (e.position < this.position)
//               throw Error(
//                 "`options.position` must be equal or greater than `tokenizer.position`"
//               );
//             this.position = e.position;
//           }
//           let i = await this.peekBuffer(t, e);
//           return (this.position += i), i;
//         }
//         async peekBuffer(t, e) {
//           let i = this.normalizeOptions(t, e),
//             r = Math.min(this.uint8Array.length - i.position, i.length);
//           if (!i.mayBeLess && r < i.length)
//             throw new peek_readable_1.EndOfStreamError();
//           return (
//             t.set(
//               this.uint8Array.subarray(i.position, i.position + r),
//               i.offset
//             ),
//             r
//           );
//         }
//         async close() {}
//       }
//       (BufferTokenizer$1.BufferTokenizer = BufferTokenizer),
//         (function (t) {
//           Object.defineProperty(t, "__esModule", { value: !0 }),
//             (t.fromBuffer = t.fromStream = t.EndOfStreamError = void 0);
//           let e = ReadStreamTokenizer$1,
//             i = BufferTokenizer$1;
//           var r = lib;
//           Object.defineProperty(t, "EndOfStreamError", {
//             enumerable: !0,
//             get: function () {
//               return r.EndOfStreamError;
//             },
//           }),
//             (t.fromStream = function (t, i) {
//               return (i = i || {}), new e.ReadStreamTokenizer(t, i);
//             }),
//             (t.fromBuffer = function (t, e) {
//               return new i.BufferTokenizer(t, e);
//             });
//         })(core$1);
//       var util = {
//           stringToBytes: (t) => [...t].map((t) => t.charCodeAt(0)),
//           tarHeaderChecksumMatches: (t, e = 0) => {
//             let i = parseInt(
//               t.toString("utf8", 148, 154).replace(/\0.*$/, "").trim(),
//               8
//             );
//             if (isNaN(i)) return !1;
//             let r = 256;
//             for (let i = e; i < e + 148; i++) r += t[i];
//             for (let i = e + 156; i < e + 512; i++) r += t[i];
//             return i === r;
//           },
//           uint32SyncSafeToken: {
//             get: (t, e) =>
//               (127 & t[e + 3]) |
//               (t[e + 2] << 7) |
//               (t[e + 1] << 14) |
//               (t[e] << 21),
//             len: 4,
//           },
//         },
//         supported$1 = {
//           extensions: [
//             "jpg",
//             "png",
//             "apng",
//             "gif",
//             "webp",
//             "flif",
//             "xcf",
//             "cr2",
//             "cr3",
//             "orf",
//             "arw",
//             "dng",
//             "nef",
//             "rw2",
//             "raf",
//             "tif",
//             "bmp",
//             "icns",
//             "jxr",
//             "psd",
//             "indd",
//             "zip",
//             "tar",
//             "rar",
//             "gz",
//             "bz2",
//             "7z",
//             "dmg",
//             "mp4",
//             "mid",
//             "mkv",
//             "webm",
//             "mov",
//             "avi",
//             "mpg",
//             "mp2",
//             "mp3",
//             "m4a",
//             "oga",
//             "ogg",
//             "ogv",
//             "opus",
//             "flac",
//             "wav",
//             "spx",
//             "amr",
//             "pdf",
//             "epub",
//             "exe",
//             "swf",
//             "rtf",
//             "wasm",
//             "woff",
//             "woff2",
//             "eot",
//             "ttf",
//             "otf",
//             "ico",
//             "flv",
//             "ps",
//             "xz",
//             "sqlite",
//             "nes",
//             "crx",
//             "xpi",
//             "cab",
//             "deb",
//             "ar",
//             "rpm",
//             "Z",
//             "lz",
//             "cfb",
//             "mxf",
//             "mts",
//             "blend",
//             "bpg",
//             "docx",
//             "pptx",
//             "xlsx",
//             "3gp",
//             "3g2",
//             "jp2",
//             "jpm",
//             "jpx",
//             "mj2",
//             "aif",
//             "qcp",
//             "odt",
//             "ods",
//             "odp",
//             "xml",
//             "mobi",
//             "heic",
//             "cur",
//             "ktx",
//             "ape",
//             "wv",
//             "dcm",
//             "ics",
//             "glb",
//             "pcap",
//             "dsf",
//             "lnk",
//             "alias",
//             "voc",
//             "ac3",
//             "m4v",
//             "m4p",
//             "m4b",
//             "f4v",
//             "f4p",
//             "f4b",
//             "f4a",
//             "mie",
//             "asf",
//             "ogm",
//             "ogx",
//             "mpc",
//             "arrow",
//             "shp",
//             "aac",
//             "mp1",
//             "it",
//             "s3m",
//             "xm",
//             "ai",
//             "skp",
//             "avif",
//             "eps",
//             "lzh",
//             "pgp",
//             "asar",
//             "stl",
//             "chm",
//             "3mf",
//             "zst",
//             "jxl",
//             "vcf",
//           ],
//           mimeTypes: [
//             "image/jpeg",
//             "image/png",
//             "image/gif",
//             "image/webp",
//             "image/flif",
//             "image/x-xcf",
//             "image/x-canon-cr2",
//             "image/x-canon-cr3",
//             "image/tiff",
//             "image/bmp",
//             "image/vnd.ms-photo",
//             "image/vnd.adobe.photoshop",
//             "application/x-indesign",
//             "application/epub+zip",
//             "application/x-xpinstall",
//             "application/vnd.oasis.opendocument.text",
//             "application/vnd.oasis.opendocument.spreadsheet",
//             "application/vnd.oasis.opendocument.presentation",
//             "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
//             "application/vnd.openxmlformats-officedocument.presentationml.presentation",
//             "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
//             "application/zip",
//             "application/x-tar",
//             "application/x-rar-compressed",
//             "application/gzip",
//             "application/x-bzip2",
//             "application/x-7z-compressed",
//             "application/x-apple-diskimage",
//             "application/x-apache-arrow",
//             "video/mp4",
//             "audio/midi",
//             "video/x-matroska",
//             "video/webm",
//             "video/quicktime",
//             "video/vnd.avi",
//             "audio/vnd.wave",
//             "audio/qcelp",
//             "audio/x-ms-asf",
//             "video/x-ms-asf",
//             "application/vnd.ms-asf",
//             "video/mpeg",
//             "video/3gpp",
//             "audio/mpeg",
//             "audio/mp4",
//             "audio/opus",
//             "video/ogg",
//             "audio/ogg",
//             "application/ogg",
//             "audio/x-flac",
//             "audio/ape",
//             "audio/wavpack",
//             "audio/amr",
//             "application/pdf",
//             "application/x-msdownload",
//             "application/x-shockwave-flash",
//             "application/rtf",
//             "application/wasm",
//             "font/woff",
//             "font/woff2",
//             "application/vnd.ms-fontobject",
//             "font/ttf",
//             "font/otf",
//             "image/x-icon",
//             "video/x-flv",
//             "application/postscript",
//             "application/eps",
//             "application/x-xz",
//             "application/x-sqlite3",
//             "application/x-nintendo-nes-rom",
//             "application/x-google-chrome-extension",
//             "application/vnd.ms-cab-compressed",
//             "application/x-deb",
//             "application/x-unix-archive",
//             "application/x-rpm",
//             "application/x-compress",
//             "application/x-lzip",
//             "application/x-cfb",
//             "application/x-mie",
//             "application/mxf",
//             "video/mp2t",
//             "application/x-blender",
//             "image/bpg",
//             "image/jp2",
//             "image/jpx",
//             "image/jpm",
//             "image/mj2",
//             "audio/aiff",
//             "application/xml",
//             "application/x-mobipocket-ebook",
//             "image/heif",
//             "image/heif-sequence",
//             "image/heic",
//             "image/heic-sequence",
//             "image/icns",
//             "image/ktx",
//             "application/dicom",
//             "audio/x-musepack",
//             "text/calendar",
//             "text/vcard",
//             "model/gltf-binary",
//             "application/vnd.tcpdump.pcap",
//             "audio/x-dsf",
//             "application/x.ms.shortcut",
//             "application/x.apple.alias",
//             "audio/x-voc",
//             "audio/vnd.dolby.dd-raw",
//             "audio/x-m4a",
//             "image/apng",
//             "image/x-olympus-orf",
//             "image/x-sony-arw",
//             "image/x-adobe-dng",
//             "image/x-nikon-nef",
//             "image/x-panasonic-rw2",
//             "image/x-fujifilm-raf",
//             "video/x-m4v",
//             "video/3gpp2",
//             "application/x-esri-shape",
//             "audio/aac",
//             "audio/x-it",
//             "audio/x-s3m",
//             "audio/x-xm",
//             "video/MP1S",
//             "video/MP2P",
//             "application/vnd.sketchup.skp",
//             "image/avif",
//             "application/x-lzh-compressed",
//             "application/pgp-encrypted",
//             "application/x-asar",
//             "model/stl",
//             "application/vnd.ms-htmlhelp",
//             "model/3mf",
//             "image/jxl",
//             "application/zstd",
//           ],
//         };
//       let Token = lib$1,
//         strtok3 = core$1,
//         {
//           stringToBytes: stringToBytes,
//           tarHeaderChecksumMatches: tarHeaderChecksumMatches,
//           uint32SyncSafeToken: uint32SyncSafeToken,
//         } = util,
//         supported = supported$1,
//         minimumBytes = 4100;
//       async function fromStream(t) {
//         let e = await strtok3.fromStream(t);
//         try {
//           return await fromTokenizer(e);
//         } finally {
//           await e.close();
//         }
//       }
//       async function fromBuffer(t) {
//         if (
//           !(
//             t instanceof Uint8Array ||
//             t instanceof ArrayBuffer ||
//             Buffer.isBuffer(t)
//           )
//         )
//           throw TypeError(
//             `Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof t}\``
//           );
//         let e = t instanceof Buffer ? t : Buffer.from(t);
//         if (e && e.length > 1) return fromTokenizer(strtok3.fromBuffer(e));
//       }
//       function _check(t, e, i) {
//         for (let [r, n] of ((i = { offset: 0, ...i }), e.entries()))
//           if (i.mask) {
//             if (n !== (i.mask[r] & t[r + i.offset])) return !1;
//           } else if (n !== t[r + i.offset]) return !1;
//         return !0;
//       }
//       async function fromTokenizer(t) {
//         try {
//           return _fromTokenizer(t);
//         } catch (t) {
//           if (!(t instanceof strtok3.EndOfStreamError)) throw t;
//         }
//       }
//       async function _fromTokenizer(t) {
//         let e = Buffer.alloc(minimumBytes),
//           i = (t, i) => _check(e, t, i),
//           r = (t, e) => i(stringToBytes(t), e);
//         if (
//           (t.fileInfo.size || (t.fileInfo.size = Number.MAX_SAFE_INTEGER),
//           await t.peekBuffer(e, { length: 12, mayBeLess: !0 }),
//           i([66, 77]))
//         )
//           return { ext: "bmp", mime: "image/bmp" };
//         if (i([11, 119])) return { ext: "ac3", mime: "audio/vnd.dolby.dd-raw" };
//         if (i([120, 1]))
//           return { ext: "dmg", mime: "application/x-apple-diskimage" };
//         if (i([77, 90]))
//           return { ext: "exe", mime: "application/x-msdownload" };
//         if (i([37, 33]))
//           return (
//             await t.peekBuffer(e, { length: 24, mayBeLess: !0 }),
//             r("PS-Adobe-", { offset: 2 }) && r(" EPSF-", { offset: 14 })
//               ? { ext: "eps", mime: "application/eps" }
//               : { ext: "ps", mime: "application/postscript" }
//           );
//         if (i([31, 160]) || i([31, 157]))
//           return { ext: "Z", mime: "application/x-compress" };
//         if (i([255, 216, 255])) return { ext: "jpg", mime: "image/jpeg" };
//         if (i([73, 73, 188])) return { ext: "jxr", mime: "image/vnd.ms-photo" };
//         if (i([31, 139, 8])) return { ext: "gz", mime: "application/gzip" };
//         if (i([66, 90, 104]))
//           return { ext: "bz2", mime: "application/x-bzip2" };
//         if (r("ID3")) {
//           await t.ignore(6);
//           let e = await t.readToken(uint32SyncSafeToken);
//           return t.position + e > t.fileInfo.size
//             ? { ext: "mp3", mime: "audio/mpeg" }
//             : (await t.ignore(e), fromTokenizer(t));
//         }
//         if (r("MP+")) return { ext: "mpc", mime: "audio/x-musepack" };
//         if ((67 === e[0] || 70 === e[0]) && i([87, 83], { offset: 1 }))
//           return { ext: "swf", mime: "application/x-shockwave-flash" };
//         if (i([71, 73, 70])) return { ext: "gif", mime: "image/gif" };
//         if (r("FLIF")) return { ext: "flif", mime: "image/flif" };
//         if (r("8BPS")) return { ext: "psd", mime: "image/vnd.adobe.photoshop" };
//         if (r("WEBP", { offset: 8 }))
//           return { ext: "webp", mime: "image/webp" };
//         if (r("MPCK")) return { ext: "mpc", mime: "audio/x-musepack" };
//         if (r("FORM")) return { ext: "aif", mime: "audio/aiff" };
//         if (r("icns", { offset: 0 }))
//           return { ext: "icns", mime: "image/icns" };
//         if (i([80, 75, 3, 4])) {
//           try {
//             for (; t.position + 30 < t.fileInfo.size; ) {
//               await t.readBuffer(e, { length: 30 });
//               let i = {
//                 compressedSize: e.readUInt32LE(18),
//                 uncompressedSize: e.readUInt32LE(22),
//                 filenameLength: e.readUInt16LE(26),
//                 extraFieldLength: e.readUInt16LE(28),
//               };
//               if (
//                 ((i.filename = await t.readToken(
//                   new Token.StringType(i.filenameLength, "utf-8")
//                 )),
//                 await t.ignore(i.extraFieldLength),
//                 "META-INF/mozilla.rsa" === i.filename)
//               )
//                 return { ext: "xpi", mime: "application/x-xpinstall" };
//               if (i.filename.endsWith(".rels") || i.filename.endsWith(".xml"))
//                 switch (i.filename.split("/")[0]) {
//                   case "_rels":
//                   default:
//                     break;
//                   case "word":
//                     return {
//                       ext: "docx",
//                       mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
//                     };
//                   case "ppt":
//                     return {
//                       ext: "pptx",
//                       mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
//                     };
//                   case "xl":
//                     return {
//                       ext: "xlsx",
//                       mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
//                     };
//                 }
//               if (i.filename.startsWith("xl/"))
//                 return {
//                   ext: "xlsx",
//                   mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
//                 };
//               if (i.filename.startsWith("3D/") && i.filename.endsWith(".model"))
//                 return { ext: "3mf", mime: "model/3mf" };
//               if (
//                 "mimetype" === i.filename &&
//                 i.compressedSize === i.uncompressedSize
//               )
//                 switch (
//                   await t.readToken(
//                     new Token.StringType(i.compressedSize, "utf-8")
//                   )
//                 ) {
//                   case "application/epub+zip":
//                     return { ext: "epub", mime: "application/epub+zip" };
//                   case "application/vnd.oasis.opendocument.text":
//                     return {
//                       ext: "odt",
//                       mime: "application/vnd.oasis.opendocument.text",
//                     };
//                   case "application/vnd.oasis.opendocument.spreadsheet":
//                     return {
//                       ext: "ods",
//                       mime: "application/vnd.oasis.opendocument.spreadsheet",
//                     };
//                   case "application/vnd.oasis.opendocument.presentation":
//                     return {
//                       ext: "odp",
//                       mime: "application/vnd.oasis.opendocument.presentation",
//                     };
//                 }
//               if (0 === i.compressedSize) {
//                 let i = -1;
//                 for (; i < 0 && t.position < t.fileInfo.size; )
//                   await t.peekBuffer(e, { mayBeLess: !0 }),
//                     (i = e.indexOf("504B0304", 0, "hex")),
//                     await t.ignore(i >= 0 ? i : e.length);
//               } else await t.ignore(i.compressedSize);
//             }
//           } catch (t) {
//             if (!(t instanceof strtok3.EndOfStreamError)) throw t;
//           }
//           return { ext: "zip", mime: "application/zip" };
//         }
//         if (r("OggS")) {
//           await t.ignore(28);
//           let e = Buffer.alloc(8);
//           return (
//             await t.readBuffer(e),
//             _check(e, [79, 112, 117, 115, 72, 101, 97, 100])
//               ? { ext: "opus", mime: "audio/opus" }
//               : _check(e, [128, 116, 104, 101, 111, 114, 97])
//               ? { ext: "ogv", mime: "video/ogg" }
//               : _check(e, [1, 118, 105, 100, 101, 111, 0])
//               ? { ext: "ogm", mime: "video/ogg" }
//               : _check(e, [127, 70, 76, 65, 67])
//               ? { ext: "oga", mime: "audio/ogg" }
//               : _check(e, [83, 112, 101, 101, 120, 32, 32])
//               ? { ext: "spx", mime: "audio/ogg" }
//               : _check(e, [1, 118, 111, 114, 98, 105, 115])
//               ? { ext: "ogg", mime: "audio/ogg" }
//               : { ext: "ogx", mime: "application/ogg" }
//           );
//         }
//         if (
//           i([80, 75]) &&
//           (3 === e[2] || 5 === e[2] || 7 === e[2]) &&
//           (4 === e[3] || 6 === e[3] || 8 === e[3])
//         )
//           return { ext: "zip", mime: "application/zip" };
//         if (r("ftyp", { offset: 4 }) && 96 & e[8]) {
//           let t = e.toString("binary", 8, 12).replace("\0", " ").trim();
//           switch (t) {
//             case "avif":
//               return { ext: "avif", mime: "image/avif" };
//             case "mif1":
//               return { ext: "heic", mime: "image/heif" };
//             case "msf1":
//               return { ext: "heic", mime: "image/heif-sequence" };
//             case "heic":
//             case "heix":
//               return { ext: "heic", mime: "image/heic" };
//             case "hevc":
//             case "hevx":
//               return { ext: "heic", mime: "image/heic-sequence" };
//             case "qt":
//               return { ext: "mov", mime: "video/quicktime" };
//             case "M4V":
//             case "M4VH":
//             case "M4VP":
//               return { ext: "m4v", mime: "video/x-m4v" };
//             case "M4P":
//               return { ext: "m4p", mime: "video/mp4" };
//             case "M4B":
//               return { ext: "m4b", mime: "audio/mp4" };
//             case "M4A":
//               return { ext: "m4a", mime: "audio/x-m4a" };
//             case "F4V":
//               return { ext: "f4v", mime: "video/mp4" };
//             case "F4P":
//               return { ext: "f4p", mime: "video/mp4" };
//             case "F4A":
//               return { ext: "f4a", mime: "audio/mp4" };
//             case "F4B":
//               return { ext: "f4b", mime: "audio/mp4" };
//             case "crx":
//               return { ext: "cr3", mime: "image/x-canon-cr3" };
//             default:
//               return t.startsWith("3g")
//                 ? t.startsWith("3g2")
//                   ? { ext: "3g2", mime: "video/3gpp2" }
//                   : { ext: "3gp", mime: "video/3gpp" }
//                 : { ext: "mp4", mime: "video/mp4" };
//           }
//         }
//         if (r("MThd")) return { ext: "mid", mime: "audio/midi" };
//         if (
//           r("wOFF") &&
//           (i([0, 1, 0, 0], { offset: 4 }) || r("OTTO", { offset: 4 }))
//         )
//           return { ext: "woff", mime: "font/woff" };
//         if (
//           r("wOF2") &&
//           (i([0, 1, 0, 0], { offset: 4 }) || r("OTTO", { offset: 4 }))
//         )
//           return { ext: "woff2", mime: "font/woff2" };
//         if (i([212, 195, 178, 161]) || i([161, 178, 195, 212]))
//           return { ext: "pcap", mime: "application/vnd.tcpdump.pcap" };
//         if (r("DSD ")) return { ext: "dsf", mime: "audio/x-dsf" };
//         if (r("LZIP")) return { ext: "lz", mime: "application/x-lzip" };
//         if (r("fLaC")) return { ext: "flac", mime: "audio/x-flac" };
//         if (i([66, 80, 71, 251])) return { ext: "bpg", mime: "image/bpg" };
//         if (r("wvpk")) return { ext: "wv", mime: "audio/wavpack" };
//         if (r("%PDF")) {
//           await t.ignore(1350);
//           let e = 10485760,
//             i = Buffer.alloc(Math.min(e, t.fileInfo.size));
//           return (
//             await t.readBuffer(i, { mayBeLess: !0 }),
//             i.includes(Buffer.from("AIPrivateData"))
//               ? { ext: "ai", mime: "application/postscript" }
//               : { ext: "pdf", mime: "application/pdf" }
//           );
//         }
//         if (i([0, 97, 115, 109]))
//           return { ext: "wasm", mime: "application/wasm" };
//         if (i([73, 73, 42, 0]))
//           return r("CR", { offset: 8 })
//             ? { ext: "cr2", mime: "image/x-canon-cr2" }
//             : i([28, 0, 254, 0], { offset: 8 }) ||
//               i([31, 0, 11, 0], { offset: 8 })
//             ? { ext: "nef", mime: "image/x-nikon-nef" }
//             : i([8, 0, 0, 0], { offset: 4 }) &&
//               (i([45, 0, 254, 0], { offset: 8 }) ||
//                 i([39, 0, 254, 0], { offset: 8 }))
//             ? { ext: "dng", mime: "image/x-adobe-dng" }
//             : ((e = Buffer.alloc(24)),
//               await t.peekBuffer(e),
//               (i([16, 251, 134, 1], { offset: 4 }) ||
//                 i([8, 0, 0, 0], { offset: 4 })) &&
//               i([0, 254, 0, 4, 0, 1, 0, 0, 0, 1, 0, 0, 0, 3, 1], { offset: 9 })
//                 ? { ext: "arw", mime: "image/x-sony-arw" }
//                 : { ext: "tif", mime: "image/tiff" });
//         if (i([77, 77, 0, 42])) return { ext: "tif", mime: "image/tiff" };
//         if (r("MAC ")) return { ext: "ape", mime: "audio/ape" };
//         if (i([26, 69, 223, 163])) {
//           async function n() {
//             let e = await t.peekNumber(Token.UINT8),
//               i = 128,
//               r = 0;
//             for (; !(e & i) && 0 !== i; ) ++r, (i >>= 1);
//             let n = Buffer.alloc(r + 1);
//             return await t.readBuffer(n), n;
//           }
//           async function a() {
//             let t = await n(),
//               e = await n();
//             e[0] ^= 128 >> (e.length - 1);
//             let i = Math.min(6, e.length);
//             return {
//               id: t.readUIntBE(0, t.length),
//               len: e.readUIntBE(e.length - i, i),
//             };
//           }
//           async function s(e, i) {
//             for (; i > 0; ) {
//               let e = await a();
//               if (17026 === e.id)
//                 return t.readToken(new Token.StringType(e.len, "utf-8"));
//               await t.ignore(e.len), --i;
//             }
//           }
//           let e = await a();
//           switch (await s(0, e.len)) {
//             case "webm":
//               return { ext: "webm", mime: "video/webm" };
//             case "matroska":
//               return { ext: "mkv", mime: "video/x-matroska" };
//             default:
//               return;
//           }
//         }
//         if (i([82, 73, 70, 70])) {
//           if (i([65, 86, 73], { offset: 8 }))
//             return { ext: "avi", mime: "video/vnd.avi" };
//           if (i([87, 65, 86, 69], { offset: 8 }))
//             return { ext: "wav", mime: "audio/vnd.wave" };
//           if (i([81, 76, 67, 77], { offset: 8 }))
//             return { ext: "qcp", mime: "audio/qcelp" };
//         }
//         if (r("SQLi")) return { ext: "sqlite", mime: "application/x-sqlite3" };
//         if (i([78, 69, 83, 26]))
//           return { ext: "nes", mime: "application/x-nintendo-nes-rom" };
//         if (r("Cr24"))
//           return { ext: "crx", mime: "application/x-google-chrome-extension" };
//         if (r("MSCF") || r("ISc("))
//           return { ext: "cab", mime: "application/vnd.ms-cab-compressed" };
//         if (i([237, 171, 238, 219]))
//           return { ext: "rpm", mime: "application/x-rpm" };
//         if (i([197, 208, 211, 198]))
//           return { ext: "eps", mime: "application/eps" };
//         if (i([40, 181, 47, 253]))
//           return { ext: "zst", mime: "application/zstd" };
//         if (i([79, 84, 84, 79, 0])) return { ext: "otf", mime: "font/otf" };
//         if (r("#!AMR")) return { ext: "amr", mime: "audio/amr" };
//         if (r("{\\rtf")) return { ext: "rtf", mime: "application/rtf" };
//         if (i([70, 76, 86, 1])) return { ext: "flv", mime: "video/x-flv" };
//         if (r("IMPM")) return { ext: "it", mime: "audio/x-it" };
//         if (
//           r("-lh0-", { offset: 2 }) ||
//           r("-lh1-", { offset: 2 }) ||
//           r("-lh2-", { offset: 2 }) ||
//           r("-lh3-", { offset: 2 }) ||
//           r("-lh4-", { offset: 2 }) ||
//           r("-lh5-", { offset: 2 }) ||
//           r("-lh6-", { offset: 2 }) ||
//           r("-lh7-", { offset: 2 }) ||
//           r("-lzs-", { offset: 2 }) ||
//           r("-lz4-", { offset: 2 }) ||
//           r("-lz5-", { offset: 2 }) ||
//           r("-lhd-", { offset: 2 })
//         )
//           return { ext: "lzh", mime: "application/x-lzh-compressed" };
//         if (i([0, 0, 1, 186])) {
//           if (i([33], { offset: 4, mask: [241] }))
//             return { ext: "mpg", mime: "video/MP1S" };
//           if (i([68], { offset: 4, mask: [196] }))
//             return { ext: "mpg", mime: "video/MP2P" };
//         }
//         if (r("ITSF"))
//           return { ext: "chm", mime: "application/vnd.ms-htmlhelp" };
//         if (i([253, 55, 122, 88, 90, 0]))
//           return { ext: "xz", mime: "application/x-xz" };
//         if (r("<?xml ")) return { ext: "xml", mime: "application/xml" };
//         if (i([55, 122, 188, 175, 39, 28]))
//           return { ext: "7z", mime: "application/x-7z-compressed" };
//         if (i([82, 97, 114, 33, 26, 7]) && (0 === e[6] || 1 === e[6]))
//           return { ext: "rar", mime: "application/x-rar-compressed" };
//         if (r("solid ")) return { ext: "stl", mime: "model/stl" };
//         if (r("BLENDER"))
//           return { ext: "blend", mime: "application/x-blender" };
//         if (r("!<arch>"))
//           return (
//             await t.ignore(8),
//             "debian-binary" ===
//             (await t.readToken(new Token.StringType(13, "ascii")))
//               ? { ext: "deb", mime: "application/x-deb" }
//               : { ext: "ar", mime: "application/x-unix-archive" }
//           );
//         if (i([137, 80, 78, 71, 13, 10, 26, 10])) {
//           async function o() {
//             return {
//               length: await t.readToken(Token.INT32_BE),
//               type: await t.readToken(new Token.StringType(4, "binary")),
//             };
//           }
//           await t.ignore(8);
//           do {
//             let e = await o();
//             if (e.length < 0) return;
//             switch (e.type) {
//               case "IDAT":
//                 return { ext: "png", mime: "image/png" };
//               case "acTL":
//                 return { ext: "apng", mime: "image/apng" };
//               default:
//                 await t.ignore(e.length + 4);
//             }
//           } while (t.position + 8 < t.fileInfo.size);
//           return { ext: "png", mime: "image/png" };
//         }
//         if (i([65, 82, 82, 79, 87, 49, 0, 0]))
//           return { ext: "arrow", mime: "application/x-apache-arrow" };
//         if (i([103, 108, 84, 70, 2, 0, 0, 0]))
//           return { ext: "glb", mime: "model/gltf-binary" };
//         if (
//           i([102, 114, 101, 101], { offset: 4 }) ||
//           i([109, 100, 97, 116], { offset: 4 }) ||
//           i([109, 111, 111, 118], { offset: 4 }) ||
//           i([119, 105, 100, 101], { offset: 4 })
//         )
//           return { ext: "mov", mime: "video/quicktime" };
//         if (i([73, 73, 82, 79, 8, 0, 0, 0, 24]))
//           return { ext: "orf", mime: "image/x-olympus-orf" };
//         if (r("gimp xcf ")) return { ext: "xcf", mime: "image/x-xcf" };
//         if (i([73, 73, 85, 0, 24, 0, 0, 0, 136, 231, 116, 216]))
//           return { ext: "rw2", mime: "image/x-panasonic-rw2" };
//         if (i([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
//           async function l() {
//             let e = Buffer.alloc(16);
//             return (
//               await t.readBuffer(e),
//               { id: e, size: Number(await t.readToken(Token.UINT64_LE)) }
//             );
//           }
//           for (await t.ignore(30); t.position + 24 < t.fileInfo.size; ) {
//             let e = await l(),
//               i = e.size - 24;
//             if (
//               _check(
//                 e.id,
//                 [
//                   145, 7, 220, 183, 183, 169, 207, 17, 142, 230, 0, 192, 12, 32,
//                   83, 101,
//                 ]
//               )
//             ) {
//               let e = Buffer.alloc(16);
//               if (
//                 ((i -= await t.readBuffer(e)),
//                 _check(
//                   e,
//                   [
//                     64, 158, 105, 248, 77, 91, 207, 17, 168, 253, 0, 128, 95,
//                     92, 68, 43,
//                   ]
//                 ))
//               )
//                 return { ext: "asf", mime: "audio/x-ms-asf" };
//               if (
//                 _check(
//                   e,
//                   [
//                     192, 239, 25, 188, 77, 91, 207, 17, 168, 253, 0, 128, 95,
//                     92, 68, 43,
//                   ]
//                 )
//               )
//                 return { ext: "asf", mime: "video/x-ms-asf" };
//               break;
//             }
//             await t.ignore(i);
//           }
//           return { ext: "asf", mime: "application/vnd.ms-asf" };
//         }
//         if (i([171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10]))
//           return { ext: "ktx", mime: "image/ktx" };
//         if (
//           (i([126, 16, 4]) || i([126, 24, 4])) &&
//           i([48, 77, 73, 69], { offset: 4 })
//         )
//           return { ext: "mie", mime: "application/x-mie" };
//         if (i([39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], { offset: 2 }))
//           return { ext: "shp", mime: "application/x-esri-shape" };
//         if (i([0, 0, 0, 12, 106, 80, 32, 32, 13, 10, 135, 10]))
//           switch (
//             (await t.ignore(20),
//             await t.readToken(new Token.StringType(4, "ascii")))
//           ) {
//             case "jp2 ":
//               return { ext: "jp2", mime: "image/jp2" };
//             case "jpx ":
//               return { ext: "jpx", mime: "image/jpx" };
//             case "jpm ":
//               return { ext: "jpm", mime: "image/jpm" };
//             case "mjp2":
//               return { ext: "mj2", mime: "image/mj2" };
//             default:
//               return;
//           }
//         if (i([255, 10]) || i([0, 0, 0, 12, 74, 88, 76, 32, 13, 10, 135, 10]))
//           return { ext: "jxl", mime: "image/jxl" };
//         if (i([0, 0, 1, 186]) || i([0, 0, 1, 179]))
//           return { ext: "mpg", mime: "video/mpeg" };
//         if (i([0, 1, 0, 0, 0])) return { ext: "ttf", mime: "font/ttf" };
//         if (i([0, 0, 1, 0])) return { ext: "ico", mime: "image/x-icon" };
//         if (i([0, 0, 2, 0])) return { ext: "cur", mime: "image/x-icon" };
//         if (i([208, 207, 17, 224, 161, 177, 26, 225]))
//           return { ext: "cfb", mime: "application/x-cfb" };
//         if (
//           (await t.peekBuffer(e, {
//             length: Math.min(256, t.fileInfo.size),
//             mayBeLess: !0,
//           }),
//           r("BEGIN:"))
//         ) {
//           if (r("VCARD", { offset: 6 }))
//             return { ext: "vcf", mime: "text/vcard" };
//           if (r("VCALENDAR", { offset: 6 }))
//             return { ext: "ics", mime: "text/calendar" };
//         }
//         if (r("FUJIFILMCCD-RAW"))
//           return { ext: "raf", mime: "image/x-fujifilm-raf" };
//         if (r("Extended Module:")) return { ext: "xm", mime: "audio/x-xm" };
//         if (r("Creative Voice File"))
//           return { ext: "voc", mime: "audio/x-voc" };
//         if (i([4, 0, 0, 0]) && e.length >= 16) {
//           let t = e.readUInt32LE(12);
//           if (t > 12 && e.length >= t + 16)
//             try {
//               let i = e.slice(16, t + 16).toString();
//               if (JSON.parse(i).files)
//                 return { ext: "asar", mime: "application/x-asar" };
//             } catch (t) {}
//         }
//         if (i([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2]))
//           return { ext: "mxf", mime: "application/mxf" };
//         if (r("SCRM", { offset: 44 }))
//           return { ext: "s3m", mime: "audio/x-s3m" };
//         if (
//           i([71], { offset: 4 }) &&
//           (i([71], { offset: 192 }) || i([71], { offset: 196 }))
//         )
//           return { ext: "mts", mime: "video/mp2t" };
//         if (i([66, 79, 79, 75, 77, 79, 66, 73], { offset: 60 }))
//           return { ext: "mobi", mime: "application/x-mobipocket-ebook" };
//         if (i([68, 73, 67, 77], { offset: 128 }))
//           return { ext: "dcm", mime: "application/dicom" };
//         if (
//           i([76, 0, 0, 0, 1, 20, 2, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 70])
//         )
//           return { ext: "lnk", mime: "application/x.ms.shortcut" };
//         if (i([98, 111, 111, 107, 0, 0, 0, 0, 109, 97, 114, 107, 0, 0, 0, 0]))
//           return { ext: "alias", mime: "application/x.apple.alias" };
//         if (
//           i([76, 80], { offset: 34 }) &&
//           (i([0, 0, 1], { offset: 8 }) ||
//             i([1, 0, 2], { offset: 8 }) ||
//             i([2, 0, 2], { offset: 8 }))
//         )
//           return { ext: "eot", mime: "application/vnd.ms-fontobject" };
//         if (
//           i([
//             6, 6, 237, 245, 216, 29, 70, 229, 189, 49, 239, 231, 254, 116, 183,
//             29,
//           ])
//         )
//           return { ext: "indd", mime: "application/x-indesign" };
//         if (
//           (await t.peekBuffer(e, {
//             length: Math.min(512, t.fileInfo.size),
//             mayBeLess: !0,
//           }),
//           tarHeaderChecksumMatches(e))
//         )
//           return { ext: "tar", mime: "application/x-tar" };
//         if (
//           i([
//             255, 254, 255, 14, 83, 0, 107, 0, 101, 0, 116, 0, 99, 0, 104, 0, 85,
//             0, 112, 0, 32, 0, 77, 0, 111, 0, 100, 0, 101, 0, 108, 0,
//           ])
//         )
//           return { ext: "skp", mime: "application/vnd.sketchup.skp" };
//         if (r("-----BEGIN PGP MESSAGE-----"))
//           return { ext: "pgp", mime: "application/pgp-encrypted" };
//         if (e.length >= 2 && i([255, 224], { offset: 0, mask: [255, 224] })) {
//           if (i([16], { offset: 1, mask: [22] }))
//             return (
//               i([8], { offset: 1, mask: [8] }),
//               { ext: "aac", mime: "audio/aac" }
//             );
//           if (i([2], { offset: 1, mask: [6] }))
//             return { ext: "mp3", mime: "audio/mpeg" };
//           if (i([4], { offset: 1, mask: [6] }))
//             return { ext: "mp2", mime: "audio/mpeg" };
//           if (i([6], { offset: 1, mask: [6] }))
//             return { ext: "mp1", mime: "audio/mpeg" };
//         }
//       }
//       let stream = (readableStream) =>
//           new Promise((resolve, reject) => {
//             let stream = eval("require")("stream");
//             readableStream.on("error", reject),
//               readableStream.once("readable", async () => {
//                 let t;
//                 let e = new stream.PassThrough();
//                 t = stream.pipeline
//                   ? stream.pipeline(readableStream, e, () => {})
//                   : readableStream.pipe(e);
//                 let i =
//                   readableStream.read(minimumBytes) ||
//                   readableStream.read() ||
//                   Buffer.alloc(0);
//                 try {
//                   let t = await fromBuffer(i);
//                   e.fileType = t;
//                 } catch (t) {
//                   reject(t);
//                 }
//                 resolve(t);
//               });
//           }),
//         fileType = {
//           fromStream: fromStream,
//           fromTokenizer: fromTokenizer,
//           fromBuffer: fromBuffer,
//           stream: stream,
//         };
//       Object.defineProperty(fileType, "extensions", {
//         get: () => new Set(supported.extensions),
//       }),
//         Object.defineProperty(fileType, "mimeTypes", {
//           get: () => new Set(supported.mimeTypes),
//         });
//       var core = fileType,
//         fileType$1 = getDefaultExportFromCjs(core);
//       function to(t, e) {
//         return t
//           .then(function (t) {
//             return [null, t];
//           })
//           .catch(function (t) {
//             return [t, void 0];
//           });
//       }
//       let writeFile = async () => {
//         throw Error("Not supported");
//       };
//       function Mime$1() {
//         (this._types = Object.create(null)),
//           (this._extensions = Object.create(null));
//         for (let t = 0; t < arguments.length; t++) this.define(arguments[t]);
//         (this.define = this.define.bind(this)),
//           (this.getType = this.getType.bind(this)),
//           (this.getExtension = this.getExtension.bind(this));
//       }
//       (Mime$1.prototype.define = function (t, e) {
//         for (let i in t) {
//           let r = t[i].map(function (t) {
//             return t.toLowerCase();
//           });
//           i = i.toLowerCase();
//           for (let t = 0; t < r.length; t++) {
//             let n = r[t];
//             if ("*" !== n[0]) {
//               if (!e && n in this._types)
//                 throw Error(
//                   'Attempt to change mapping for "' +
//                     n +
//                     '" extension from "' +
//                     this._types[n] +
//                     '" to "' +
//                     i +
//                     '". Pass `force=true` to allow this, otherwise remove "' +
//                     n +
//                     '" from the list of extensions for "' +
//                     i +
//                     '".'
//                 );
//               this._types[n] = i;
//             }
//           }
//           if (e || !this._extensions[i]) {
//             let t = r[0];
//             this._extensions[i] = "*" !== t[0] ? t : t.substr(1);
//           }
//         }
//       }),
//         (Mime$1.prototype.getType = function (t) {
//           let e = (t = String(t)).replace(/^.*[/\\]/, "").toLowerCase(),
//             i = e.replace(/^.*\./, "").toLowerCase(),
//             r = e.length < t.length;
//           return ((i.length < e.length - 1 || !r) && this._types[i]) || null;
//         }),
//         (Mime$1.prototype.getExtension = function (t) {
//           return (
//             ((t = /^\s*([^;\s]*)/.test(t) && RegExp.$1) &&
//               this._extensions[t.toLowerCase()]) ||
//             null
//           );
//         });
//       var Mime_1 = Mime$1,
//         standard = {
//           "application/andrew-inset": ["ez"],
//           "application/applixware": ["aw"],
//           "application/atom+xml": ["atom"],
//           "application/atomcat+xml": ["atomcat"],
//           "application/atomdeleted+xml": ["atomdeleted"],
//           "application/atomsvc+xml": ["atomsvc"],
//           "application/atsc-dwd+xml": ["dwd"],
//           "application/atsc-held+xml": ["held"],
//           "application/atsc-rsat+xml": ["rsat"],
//           "application/bdoc": ["bdoc"],
//           "application/calendar+xml": ["xcs"],
//           "application/ccxml+xml": ["ccxml"],
//           "application/cdfx+xml": ["cdfx"],
//           "application/cdmi-capability": ["cdmia"],
//           "application/cdmi-container": ["cdmic"],
//           "application/cdmi-domain": ["cdmid"],
//           "application/cdmi-object": ["cdmio"],
//           "application/cdmi-queue": ["cdmiq"],
//           "application/cu-seeme": ["cu"],
//           "application/dash+xml": ["mpd"],
//           "application/davmount+xml": ["davmount"],
//           "application/docbook+xml": ["dbk"],
//           "application/dssc+der": ["dssc"],
//           "application/dssc+xml": ["xdssc"],
//           "application/ecmascript": ["es", "ecma"],
//           "application/emma+xml": ["emma"],
//           "application/emotionml+xml": ["emotionml"],
//           "application/epub+zip": ["epub"],
//           "application/exi": ["exi"],
//           "application/express": ["exp"],
//           "application/fdt+xml": ["fdt"],
//           "application/font-tdpfr": ["pfr"],
//           "application/geo+json": ["geojson"],
//           "application/gml+xml": ["gml"],
//           "application/gpx+xml": ["gpx"],
//           "application/gxf": ["gxf"],
//           "application/gzip": ["gz"],
//           "application/hjson": ["hjson"],
//           "application/hyperstudio": ["stk"],
//           "application/inkml+xml": ["ink", "inkml"],
//           "application/ipfix": ["ipfix"],
//           "application/its+xml": ["its"],
//           "application/java-archive": ["jar", "war", "ear"],
//           "application/java-serialized-object": ["ser"],
//           "application/java-vm": ["class"],
//           "application/javascript": ["js", "mjs"],
//           "application/json": ["json", "map"],
//           "application/json5": ["json5"],
//           "application/jsonml+json": ["jsonml"],
//           "application/ld+json": ["jsonld"],
//           "application/lgr+xml": ["lgr"],
//           "application/lost+xml": ["lostxml"],
//           "application/mac-binhex40": ["hqx"],
//           "application/mac-compactpro": ["cpt"],
//           "application/mads+xml": ["mads"],
//           "application/manifest+json": ["webmanifest"],
//           "application/marc": ["mrc"],
//           "application/marcxml+xml": ["mrcx"],
//           "application/mathematica": ["ma", "nb", "mb"],
//           "application/mathml+xml": ["mathml"],
//           "application/mbox": ["mbox"],
//           "application/mediaservercontrol+xml": ["mscml"],
//           "application/metalink+xml": ["metalink"],
//           "application/metalink4+xml": ["meta4"],
//           "application/mets+xml": ["mets"],
//           "application/mmt-aei+xml": ["maei"],
//           "application/mmt-usd+xml": ["musd"],
//           "application/mods+xml": ["mods"],
//           "application/mp21": ["m21", "mp21"],
//           "application/mp4": ["mp4s", "m4p"],
//           "application/msword": ["doc", "dot"],
//           "application/mxf": ["mxf"],
//           "application/n-quads": ["nq"],
//           "application/n-triples": ["nt"],
//           "application/node": ["cjs"],
//           "application/octet-stream": [
//             "bin",
//             "dms",
//             "lrf",
//             "mar",
//             "so",
//             "dist",
//             "distz",
//             "pkg",
//             "bpk",
//             "dump",
//             "elc",
//             "deploy",
//             "exe",
//             "dll",
//             "deb",
//             "dmg",
//             "iso",
//             "img",
//             "msi",
//             "msp",
//             "msm",
//             "buffer",
//           ],
//           "application/oda": ["oda"],
//           "application/oebps-package+xml": ["opf"],
//           "application/ogg": ["ogx"],
//           "application/omdoc+xml": ["omdoc"],
//           "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"],
//           "application/oxps": ["oxps"],
//           "application/p2p-overlay+xml": ["relo"],
//           "application/patch-ops-error+xml": ["xer"],
//           "application/pdf": ["pdf"],
//           "application/pgp-encrypted": ["pgp"],
//           "application/pgp-signature": ["asc", "sig"],
//           "application/pics-rules": ["prf"],
//           "application/pkcs10": ["p10"],
//           "application/pkcs7-mime": ["p7m", "p7c"],
//           "application/pkcs7-signature": ["p7s"],
//           "application/pkcs8": ["p8"],
//           "application/pkix-attr-cert": ["ac"],
//           "application/pkix-cert": ["cer"],
//           "application/pkix-crl": ["crl"],
//           "application/pkix-pkipath": ["pkipath"],
//           "application/pkixcmp": ["pki"],
//           "application/pls+xml": ["pls"],
//           "application/postscript": ["ai", "eps", "ps"],
//           "application/provenance+xml": ["provx"],
//           "application/pskc+xml": ["pskcxml"],
//           "application/raml+yaml": ["raml"],
//           "application/rdf+xml": ["rdf", "owl"],
//           "application/reginfo+xml": ["rif"],
//           "application/relax-ng-compact-syntax": ["rnc"],
//           "application/resource-lists+xml": ["rl"],
//           "application/resource-lists-diff+xml": ["rld"],
//           "application/rls-services+xml": ["rs"],
//           "application/route-apd+xml": ["rapd"],
//           "application/route-s-tsid+xml": ["sls"],
//           "application/route-usd+xml": ["rusd"],
//           "application/rpki-ghostbusters": ["gbr"],
//           "application/rpki-manifest": ["mft"],
//           "application/rpki-roa": ["roa"],
//           "application/rsd+xml": ["rsd"],
//           "application/rss+xml": ["rss"],
//           "application/rtf": ["rtf"],
//           "application/sbml+xml": ["sbml"],
//           "application/scvp-cv-request": ["scq"],
//           "application/scvp-cv-response": ["scs"],
//           "application/scvp-vp-request": ["spq"],
//           "application/scvp-vp-response": ["spp"],
//           "application/sdp": ["sdp"],
//           "application/senml+xml": ["senmlx"],
//           "application/sensml+xml": ["sensmlx"],
//           "application/set-payment-initiation": ["setpay"],
//           "application/set-registration-initiation": ["setreg"],
//           "application/shf+xml": ["shf"],
//           "application/sieve": ["siv", "sieve"],
//           "application/smil+xml": ["smi", "smil"],
//           "application/sparql-query": ["rq"],
//           "application/sparql-results+xml": ["srx"],
//           "application/srgs": ["gram"],
//           "application/srgs+xml": ["grxml"],
//           "application/sru+xml": ["sru"],
//           "application/ssdl+xml": ["ssdl"],
//           "application/ssml+xml": ["ssml"],
//           "application/swid+xml": ["swidtag"],
//           "application/tei+xml": ["tei", "teicorpus"],
//           "application/thraud+xml": ["tfi"],
//           "application/timestamped-data": ["tsd"],
//           "application/toml": ["toml"],
//           "application/trig": ["trig"],
//           "application/ttml+xml": ["ttml"],
//           "application/ubjson": ["ubj"],
//           "application/urc-ressheet+xml": ["rsheet"],
//           "application/urc-targetdesc+xml": ["td"],
//           "application/voicexml+xml": ["vxml"],
//           "application/wasm": ["wasm"],
//           "application/widget": ["wgt"],
//           "application/winhlp": ["hlp"],
//           "application/wsdl+xml": ["wsdl"],
//           "application/wspolicy+xml": ["wspolicy"],
//           "application/xaml+xml": ["xaml"],
//           "application/xcap-att+xml": ["xav"],
//           "application/xcap-caps+xml": ["xca"],
//           "application/xcap-diff+xml": ["xdf"],
//           "application/xcap-el+xml": ["xel"],
//           "application/xcap-ns+xml": ["xns"],
//           "application/xenc+xml": ["xenc"],
//           "application/xhtml+xml": ["xhtml", "xht"],
//           "application/xliff+xml": ["xlf"],
//           "application/xml": ["xml", "xsl", "xsd", "rng"],
//           "application/xml-dtd": ["dtd"],
//           "application/xop+xml": ["xop"],
//           "application/xproc+xml": ["xpl"],
//           "application/xslt+xml": ["*xsl", "xslt"],
//           "application/xspf+xml": ["xspf"],
//           "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"],
//           "application/yang": ["yang"],
//           "application/yin+xml": ["yin"],
//           "application/zip": ["zip"],
//           "audio/3gpp": ["*3gpp"],
//           "audio/adpcm": ["adp"],
//           "audio/amr": ["amr"],
//           "audio/basic": ["au", "snd"],
//           "audio/midi": ["mid", "midi", "kar", "rmi"],
//           "audio/mobile-xmf": ["mxmf"],
//           "audio/mp3": ["*mp3"],
//           "audio/mp4": ["m4a", "mp4a"],
//           "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"],
//           "audio/ogg": ["oga", "ogg", "spx", "opus"],
//           "audio/s3m": ["s3m"],
//           "audio/silk": ["sil"],
//           "audio/wav": ["wav"],
//           "audio/wave": ["*wav"],
//           "audio/webm": ["weba"],
//           "audio/xm": ["xm"],
//           "font/collection": ["ttc"],
//           "font/otf": ["otf"],
//           "font/ttf": ["ttf"],
//           "font/woff": ["woff"],
//           "font/woff2": ["woff2"],
//           "image/aces": ["exr"],
//           "image/apng": ["apng"],
//           "image/avif": ["avif"],
//           "image/bmp": ["bmp"],
//           "image/cgm": ["cgm"],
//           "image/dicom-rle": ["drle"],
//           "image/emf": ["emf"],
//           "image/fits": ["fits"],
//           "image/g3fax": ["g3"],
//           "image/gif": ["gif"],
//           "image/heic": ["heic"],
//           "image/heic-sequence": ["heics"],
//           "image/heif": ["heif"],
//           "image/heif-sequence": ["heifs"],
//           "image/hej2k": ["hej2"],
//           "image/hsj2": ["hsj2"],
//           "image/ief": ["ief"],
//           "image/jls": ["jls"],
//           "image/jp2": ["jp2", "jpg2"],
//           "image/jpeg": ["jpeg", "jpg", "jpe"],
//           "image/jph": ["jph"],
//           "image/jphc": ["jhc"],
//           "image/jpm": ["jpm"],
//           "image/jpx": ["jpx", "jpf"],
//           "image/jxr": ["jxr"],
//           "image/jxra": ["jxra"],
//           "image/jxrs": ["jxrs"],
//           "image/jxs": ["jxs"],
//           "image/jxsc": ["jxsc"],
//           "image/jxsi": ["jxsi"],
//           "image/jxss": ["jxss"],
//           "image/ktx": ["ktx"],
//           "image/ktx2": ["ktx2"],
//           "image/png": ["png"],
//           "image/sgi": ["sgi"],
//           "image/svg+xml": ["svg", "svgz"],
//           "image/t38": ["t38"],
//           "image/tiff": ["tif", "tiff"],
//           "image/tiff-fx": ["tfx"],
//           "image/webp": ["webp"],
//           "image/wmf": ["wmf"],
//           "message/disposition-notification": ["disposition-notification"],
//           "message/global": ["u8msg"],
//           "message/global-delivery-status": ["u8dsn"],
//           "message/global-disposition-notification": ["u8mdn"],
//           "message/global-headers": ["u8hdr"],
//           "message/rfc822": ["eml", "mime"],
//           "model/3mf": ["3mf"],
//           "model/gltf+json": ["gltf"],
//           "model/gltf-binary": ["glb"],
//           "model/iges": ["igs", "iges"],
//           "model/mesh": ["msh", "mesh", "silo"],
//           "model/mtl": ["mtl"],
//           "model/obj": ["obj"],
//           "model/step+xml": ["stpx"],
//           "model/step+zip": ["stpz"],
//           "model/step-xml+zip": ["stpxz"],
//           "model/stl": ["stl"],
//           "model/vrml": ["wrl", "vrml"],
//           "model/x3d+binary": ["*x3db", "x3dbz"],
//           "model/x3d+fastinfoset": ["x3db"],
//           "model/x3d+vrml": ["*x3dv", "x3dvz"],
//           "model/x3d+xml": ["x3d", "x3dz"],
//           "model/x3d-vrml": ["x3dv"],
//           "text/cache-manifest": ["appcache", "manifest"],
//           "text/calendar": ["ics", "ifb"],
//           "text/coffeescript": ["coffee", "litcoffee"],
//           "text/css": ["css"],
//           "text/csv": ["csv"],
//           "text/html": ["html", "htm", "shtml"],
//           "text/jade": ["jade"],
//           "text/jsx": ["jsx"],
//           "text/less": ["less"],
//           "text/markdown": ["markdown", "md"],
//           "text/mathml": ["mml"],
//           "text/mdx": ["mdx"],
//           "text/n3": ["n3"],
//           "text/plain": [
//             "txt",
//             "text",
//             "conf",
//             "def",
//             "list",
//             "log",
//             "in",
//             "ini",
//           ],
//           "text/richtext": ["rtx"],
//           "text/rtf": ["*rtf"],
//           "text/sgml": ["sgml", "sgm"],
//           "text/shex": ["shex"],
//           "text/slim": ["slim", "slm"],
//           "text/spdx": ["spdx"],
//           "text/stylus": ["stylus", "styl"],
//           "text/tab-separated-values": ["tsv"],
//           "text/troff": ["t", "tr", "roff", "man", "me", "ms"],
//           "text/turtle": ["ttl"],
//           "text/uri-list": ["uri", "uris", "urls"],
//           "text/vcard": ["vcard"],
//           "text/vtt": ["vtt"],
//           "text/xml": ["*xml"],
//           "text/yaml": ["yaml", "yml"],
//           "video/3gpp": ["3gp", "3gpp"],
//           "video/3gpp2": ["3g2"],
//           "video/h261": ["h261"],
//           "video/h263": ["h263"],
//           "video/h264": ["h264"],
//           "video/iso.segment": ["m4s"],
//           "video/jpeg": ["jpgv"],
//           "video/jpm": ["*jpm", "jpgm"],
//           "video/mj2": ["mj2", "mjp2"],
//           "video/mp2t": ["ts"],
//           "video/mp4": ["mp4", "mp4v", "mpg4"],
//           "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"],
//           "video/ogg": ["ogv"],
//           "video/quicktime": ["qt", "mov"],
//           "video/webm": ["webm"],
//         };
//       let Mime = Mime_1;
//       var HorizontalAlign,
//         HorizontalAlign2,
//         VerticalAlign,
//         VerticalAlign2,
//         BlendMode,
//         BlendMode2,
//         lite = new Mime(standard),
//         mime = getDefaultExportFromCjs(lite);
//       function srcOver(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a;
//         return {
//           r: (t.r * t.a + e.r * e.a * (1 - t.a)) / r,
//           g: (t.g * t.a + e.g * e.a * (1 - t.a)) / r,
//           b: (t.b * t.a + e.b * e.a * (1 - t.a)) / r,
//           a: r,
//         };
//       }
//       function dstOver(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a;
//         return {
//           r: (e.r * e.a + t.r * t.a * (1 - e.a)) / r,
//           g: (e.g * e.a + t.g * t.a * (1 - e.a)) / r,
//           b: (e.b * e.a + t.b * t.a * (1 - e.a)) / r,
//           a: r,
//         };
//       }
//       function multiply(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r: (n * o + n * (1 - e.a) + o * (1 - t.a)) / r,
//           g: (a * l + a * (1 - e.a) + l * (1 - t.a)) / r,
//           b: (s * h + s * (1 - e.a) + h * (1 - t.a)) / r,
//           a: r,
//         };
//       }
//       function add(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a;
//         return {
//           r: (n + e.r * e.a) / r,
//           g: (a + e.g * e.a) / r,
//           b: (s + e.b * e.a) / r,
//           a: r,
//         };
//       }
//       function screen(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r: (n * e.a + o * t.a - n * o + n * (1 - e.a) + o * (1 - t.a)) / r,
//           g: (a * e.a + l * t.a - a * l + a * (1 - e.a) + l * (1 - t.a)) / r,
//           b: (s * e.a + h * t.a - s * h + s * (1 - e.a) + h * (1 - t.a)) / r,
//           a: r,
//         };
//       }
//       function overlay(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r:
//             (2 * o <= e.a
//               ? 2 * n * o + n * (1 - e.a) + o * (1 - t.a)
//               : n * (1 + e.a) + o * (1 + t.a) - 2 * o * n - e.a * t.a) / r,
//           g:
//             (2 * l <= e.a
//               ? 2 * a * l + a * (1 - e.a) + l * (1 - t.a)
//               : a * (1 + e.a) + l * (1 + t.a) - 2 * l * a - e.a * t.a) / r,
//           b:
//             (2 * h <= e.a
//               ? 2 * s * h + s * (1 - e.a) + h * (1 - t.a)
//               : s * (1 + e.a) + h * (1 + t.a) - 2 * h * s - e.a * t.a) / r,
//           a: r,
//         };
//       }
//       function darken(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r: (Math.min(n * e.a, o * t.a) + n * (1 - e.a) + o * (1 - t.a)) / r,
//           g: (Math.min(a * e.a, l * t.a) + a * (1 - e.a) + l * (1 - t.a)) / r,
//           b: (Math.min(s * e.a, h * t.a) + s * (1 - e.a) + h * (1 - t.a)) / r,
//           a: r,
//         };
//       }
//       function lighten(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r: (Math.max(n * e.a, o * t.a) + n * (1 - e.a) + o * (1 - t.a)) / r,
//           g: (Math.max(a * e.a, l * t.a) + a * (1 - e.a) + l * (1 - t.a)) / r,
//           b: (Math.max(s * e.a, h * t.a) + s * (1 - e.a) + h * (1 - t.a)) / r,
//           a: r,
//         };
//       }
//       function hardLight(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r:
//             (2 * n <= t.a
//               ? 2 * n * o + n * (1 - e.a) + o * (1 - t.a)
//               : n * (1 + e.a) + o * (1 + t.a) - 2 * o * n - e.a * t.a) / r,
//           g:
//             (2 * a <= t.a
//               ? 2 * a * l + a * (1 - e.a) + l * (1 - t.a)
//               : a * (1 + e.a) + l * (1 + t.a) - 2 * l * a - e.a * t.a) / r,
//           b:
//             (2 * s <= t.a
//               ? 2 * s * h + s * (1 - e.a) + h * (1 - t.a)
//               : s * (1 + e.a) + h * (1 + t.a) - 2 * h * s - e.a * t.a) / r,
//           a: r,
//         };
//       }
//       function difference(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r: (n + o - 2 * Math.min(n * e.a, o * t.a)) / r,
//           g: (a + l - 2 * Math.min(a * e.a, l * t.a)) / r,
//           b: (s + h - 2 * Math.min(s * e.a, h * t.a)) / r,
//           a: r,
//         };
//       }
//       function exclusion(t, e, i = 1) {
//         t.a *= i;
//         let r = e.a + t.a - e.a * t.a,
//           n = t.r * t.a,
//           a = t.g * t.a,
//           s = t.b * t.a,
//           o = e.r * e.a,
//           l = e.g * e.a,
//           h = e.b * e.a;
//         return {
//           r:
//             (n * e.a + o * t.a - 2 * n * o + n * (1 - e.a) + o * (1 - t.a)) / r,
//           g:
//             (a * e.a + l * t.a - 2 * a * l + a * (1 - e.a) + l * (1 - t.a)) / r,
//           b:
//             (s * e.a + h * t.a - 2 * s * h + s * (1 - e.a) + h * (1 - t.a)) / r,
//           a: r,
//         };
//       }
//       (HorizontalAlign2 = HorizontalAlign || (HorizontalAlign = {})),
//         (HorizontalAlign2[(HorizontalAlign2.LEFT = 1)] = "LEFT"),
//         (HorizontalAlign2[(HorizontalAlign2.CENTER = 2)] = "CENTER"),
//         (HorizontalAlign2[(HorizontalAlign2.RIGHT = 4)] = "RIGHT"),
//         (VerticalAlign2 = VerticalAlign || (VerticalAlign = {})),
//         (VerticalAlign2[(VerticalAlign2.TOP = 8)] = "TOP"),
//         (VerticalAlign2[(VerticalAlign2.MIDDLE = 16)] = "MIDDLE"),
//         (VerticalAlign2[(VerticalAlign2.BOTTOM = 32)] = "BOTTOM"),
//         (BlendMode2 = BlendMode || (BlendMode = {})),
//         (BlendMode2.SRC_OVER = "srcOver"),
//         (BlendMode2.DST_OVER = "dstOver"),
//         (BlendMode2.MULTIPLY = "multiply"),
//         (BlendMode2.ADD = "add"),
//         (BlendMode2.SCREEN = "screen"),
//         (BlendMode2.OVERLAY = "overlay"),
//         (BlendMode2.DARKEN = "darken"),
//         (BlendMode2.LIGHTEN = "lighten"),
//         (BlendMode2.HARD_LIGHT = "hardLight"),
//         (BlendMode2.DIFFERENCE = "difference"),
//         (BlendMode2.EXCLUSION = "exclusion");
//       let names = [
//         srcOver,
//         dstOver,
//         multiply,
//         add,
//         screen,
//         overlay,
//         darken,
//         lighten,
//         hardLight,
//         difference,
//         exclusion,
//       ];
//       var compositeModes = Object.freeze({
//         __proto__: null,
//         add: add,
//         darken: darken,
//         difference: difference,
//         dstOver: dstOver,
//         exclusion: exclusion,
//         hardLight: hardLight,
//         lighten: lighten,
//         multiply: multiply,
//         names: names,
//         overlay: overlay,
//         screen: screen,
//         srcOver: srcOver,
//       });
//       function composite(t, e, i = 0, r = 0, n = {}) {
//         if (!(e instanceof t.constructor))
//           throw Error("The source must be a Jimp image");
//         if ("number" != typeof i || "number" != typeof r)
//           throw Error("x and y must be numbers");
//         let { mode: a = BlendMode.SRC_OVER } = n,
//           { opacitySource: s = 1, opacityDest: o = 1 } = n;
//         ("number" != typeof s || s < 0 || s > 1) && (s = 1),
//           ("number" != typeof o || o < 0 || o > 1) && (o = 1);
//         let l = compositeModes[a];
//         return (
//           (i = Math.round(i)),
//           (r = Math.round(r)),
//           1 !== o &&
//             t.scan((e, i, r) => {
//               let n = t.bitmap.data[r + 3] * o;
//               t.bitmap.data[r + 3] = n;
//             }),
//           e.scan((n, a, o) => {
//             let h = t.getPixelIndex(i + n, r + a, Edge.CROP);
//             if (-1 === h) return;
//             let u = l(
//               {
//                 r: e.bitmap.data[o + 0] / 255,
//                 g: e.bitmap.data[o + 1] / 255,
//                 b: e.bitmap.data[o + 2] / 255,
//                 a: e.bitmap.data[o + 3] / 255,
//               },
//               {
//                 r: t.bitmap.data[h + 0] / 255,
//                 g: t.bitmap.data[h + 1] / 255,
//                 b: t.bitmap.data[h + 2] / 255,
//                 a: t.bitmap.data[h + 3] / 255,
//               },
//               s
//             );
//             (t.bitmap.data[h + 0] = limit255(255 * u.r)),
//               (t.bitmap.data[h + 1] = limit255(255 * u.g)),
//               (t.bitmap.data[h + 2] = limit255(255 * u.b)),
//               (t.bitmap.data[h + 3] = limit255(255 * u.a));
//           }),
//           t
//         );
//       }
//       var jpeg$1 = {
//         parseSections: function (t, e) {
//           var i, r;
//           for (t.setBigEndian(!0); t.remainingLength() > 0 && 218 !== r; ) {
//             if (255 !== t.nextUInt8())
//               throw Error("Invalid JPEG section offset");
//             (i =
//               ((r = t.nextUInt8()) >= 208 && r <= 217) || 218 === r
//                 ? 0
//                 : t.nextUInt16() - 2),
//               e(r, t.branch(0, i)),
//               t.skip(i);
//           }
//         },
//         getSizeFromSOFSection: function (t) {
//           return t.skip(1), { height: t.nextUInt16(), width: t.nextUInt16() };
//         },
//         getSectionName: function (t) {
//           switch (t) {
//             case 216:
//               e = "SOI";
//               break;
//             case 196:
//               e = "DHT";
//               break;
//             case 219:
//               e = "DQT";
//               break;
//             case 221:
//               e = "DRI";
//               break;
//             case 218:
//               e = "SOS";
//               break;
//             case 254:
//               e = "COM";
//               break;
//             case 217:
//               e = "EOI";
//               break;
//             default:
//               t >= 224 && t <= 239
//                 ? ((e = "APP"), (i = t - 224))
//                 : t >= 192 && t <= 207 && 196 !== t && 200 !== t && 204 !== t
//                 ? ((e = "SOF"), (i = t - 192))
//                 : t >= 208 && t <= 215 && ((e = "RST"), (i = t - 208));
//           }
//           var e,
//             i,
//             r = { name: e };
//           return "number" == typeof i && (r.index = i), r;
//         },
//       };
//       function readExifValue(t, e) {
//         switch (t) {
//           case 1:
//             return e.nextUInt8();
//           case 3:
//           case 8:
//             return e.nextUInt16();
//           case 4:
//           case 9:
//             return e.nextUInt32();
//           case 5:
//             return [e.nextUInt32(), e.nextUInt32()];
//           case 6:
//             return e.nextInt8();
//           case 10:
//             return [e.nextInt32(), e.nextInt32()];
//           case 11:
//             return e.nextFloat();
//           case 12:
//             return e.nextDouble();
//           default:
//             throw Error("Invalid format while decoding: " + t);
//         }
//       }
//       function getBytesPerComponent(t) {
//         switch (t) {
//           case 1:
//           case 2:
//           case 6:
//           case 7:
//             return 1;
//           case 3:
//           case 8:
//             return 2;
//           case 4:
//           case 9:
//           case 11:
//             return 4;
//           case 5:
//           case 10:
//           case 12:
//             return 8;
//           default:
//             return 0;
//         }
//       }
//       function readExifTag(t, e) {
//         var i,
//           r,
//           n = e.nextUInt16(),
//           a = e.nextUInt16(),
//           s = getBytesPerComponent(a),
//           o = e.nextUInt32(),
//           l = s * o;
//         if ((l > 4 && (e = t.openWithOffset(e.nextUInt32())), 2 === a)) {
//           var h = (i = e.nextString(o)).indexOf("\0");
//           -1 !== h && (i = i.substr(0, h));
//         } else if (7 === a) i = e.nextBuffer(o);
//         else if (0 !== a)
//           for (i = [], r = 0; r < o; ++r) i.push(readExifValue(a, e));
//         return l < 4 && e.skip(4 - l), [n, i, a];
//       }
//       function readIFDSection(t, e, i) {
//         var r,
//           n,
//           a = e.nextUInt16();
//         for (n = 0; n < a; ++n) i((r = readExifTag(t, e))[0], r[1], r[2]);
//       }
//       function readHeader(t) {
//         if ("Exif\0\0" !== t.nextString(6)) throw Error("Invalid EXIF header");
//         var e = t.mark(),
//           i = t.nextUInt16();
//         if (18761 === i) t.setBigEndian(!1);
//         else {
//           if (19789 !== i) throw Error("Invalid TIFF header");
//           t.setBigEndian(!0);
//         }
//         if (42 !== t.nextUInt16()) throw Error("Invalid TIFF data");
//         return e;
//       }
//       var exif$2 = {
//         IFD0: 1,
//         IFD1: 2,
//         GPSIFD: 3,
//         SubIFD: 4,
//         InteropIFD: 5,
//         parseTags: function (t, e) {
//           try {
//             i = readHeader(t);
//           } catch (t) {
//             return !1;
//           }
//           var i,
//             r,
//             n,
//             a,
//             s = i.openWithOffset(t.nextUInt32()),
//             o = this.IFD0;
//           readIFDSection(i, s, function (t, i, a) {
//             switch (t) {
//               case 34853:
//                 n = i[0];
//                 break;
//               case 34665:
//                 r = i[0];
//                 break;
//               default:
//                 e(o, t, i, a);
//             }
//           });
//           var l = s.nextUInt32();
//           if (0 !== l) {
//             var h = i.openWithOffset(l);
//             readIFDSection(i, h, e.bind(null, this.IFD1));
//           }
//           if (n) {
//             var u = i.openWithOffset(n);
//             readIFDSection(i, u, e.bind(null, this.GPSIFD));
//           }
//           if (r) {
//             var f = i.openWithOffset(r),
//               c = this.InteropIFD;
//             readIFDSection(i, f, function (t, i, r) {
//               40965 === t ? (a = i[0]) : e(c, t, i, r);
//             });
//           }
//           if (a) {
//             var d = i.openWithOffset(a);
//             readIFDSection(i, d, e.bind(null, this.InteropIFD));
//           }
//           return !0;
//         },
//       };
//       function parseNumber(t) {
//         return parseInt(t, 10);
//       }
//       var hours = 3600,
//         minutes = 60;
//       function parseDateTimeParts(t, e) {
//         return (
//           (t = t.map(parseNumber)),
//           (e = e.map(parseNumber)),
//           Date.UTC(t[0], t[1] - 1, t[2], e[0], e[1], e[2], 0) / 1e3
//         );
//       }
//       function parseDateWithTimezoneFormat(t) {
//         var e = t.substr(0, 10).split("-"),
//           i = t.substr(11, 8).split(":"),
//           r = t.substr(19, 6).split(":").map(parseNumber),
//           n = r[0] * hours + r[1] * minutes,
//           a = parseDateTimeParts(e, i);
//         if ("number" == typeof (a -= n) && !isNaN(a)) return a;
//       }
//       function parseDateWithSpecFormat(t) {
//         var e = t.split(" "),
//           i = parseDateTimeParts(e[0].split(":"), e[1].split(":"));
//         if ("number" == typeof i && !isNaN(i)) return i;
//       }
//       function parseExifDate(t) {
//         var e = 19 === t.length && ":" === t.charAt(4);
//         return 25 === t.length && "T" === t.charAt(10)
//           ? parseDateWithTimezoneFormat(t)
//           : e
//           ? parseDateWithSpecFormat(t)
//           : void 0;
//       }
//       var exifTags,
//         hasRequiredExifTags,
//         date$1 = {
//           parseDateWithSpecFormat: parseDateWithSpecFormat,
//           parseDateWithTimezoneFormat: parseDateWithTimezoneFormat,
//           parseExifDate: parseExifDate,
//         },
//         exif$1 = exif$2,
//         date = date$1,
//         degreeTags = [
//           {
//             section: exif$1.GPSIFD,
//             type: 2,
//             name: "GPSLatitude",
//             refType: 1,
//             refName: "GPSLatitudeRef",
//             posVal: "N",
//           },
//           {
//             section: exif$1.GPSIFD,
//             type: 4,
//             name: "GPSLongitude",
//             refType: 3,
//             refName: "GPSLongitudeRef",
//             posVal: "E",
//           },
//         ],
//         dateTags = [
//           { section: exif$1.SubIFD, type: 306, name: "ModifyDate" },
//           { section: exif$1.SubIFD, type: 36867, name: "DateTimeOriginal" },
//           { section: exif$1.SubIFD, type: 36868, name: "CreateDate" },
//           { section: exif$1.SubIFD, type: 306, name: "ModifyDate" },
//         ],
//         simplify$1 = {
//           castDegreeValues: function (t, e) {
//             degreeTags.forEach(function (i) {
//               var r = t(i);
//               if (r) {
//                 var n =
//                   t({
//                     section: i.section,
//                     type: i.refType,
//                     name: i.refName,
//                   }) === i.posVal
//                     ? 1
//                     : -1;
//                 e(i, (r[0] + r[1] / 60 + r[2] / 3600) * n);
//               }
//             });
//           },
//           castDateValues: function (t, e) {
//             dateTags.forEach(function (i) {
//               var r = t(i);
//               if (r) {
//                 var n = date.parseExifDate(r);
//                 void 0 !== n && e(i, n);
//               }
//             });
//           },
//           simplifyValue: function (t, e) {
//             return (
//               Array.isArray(t) &&
//                 1 ===
//                   (t = t.map(function (t) {
//                     return 10 === e || 5 === e ? t[0] / t[1] : t;
//                   })).length &&
//                 (t = t[0]),
//               t
//             );
//           },
//         };
//       function requireExifTags() {
//         return hasRequiredExifTags
//           ? exifTags
//           : ((hasRequiredExifTags = 1),
//             (exifTags = {
//               exif: {
//                 1: "InteropIndex",
//                 2: "InteropVersion",
//                 11: "ProcessingSoftware",
//                 254: "SubfileType",
//                 255: "OldSubfileType",
//                 256: "ImageWidth",
//                 257: "ImageHeight",
//                 258: "BitsPerSample",
//                 259: "Compression",
//                 262: "PhotometricInterpretation",
//                 263: "Thresholding",
//                 264: "CellWidth",
//                 265: "CellLength",
//                 266: "FillOrder",
//                 269: "DocumentName",
//                 270: "ImageDescription",
//                 271: "Make",
//                 272: "Model",
//                 273: "StripOffsets",
//                 274: "Orientation",
//                 277: "SamplesPerPixel",
//                 278: "RowsPerStrip",
//                 279: "StripByteCounts",
//                 280: "MinSampleValue",
//                 281: "MaxSampleValue",
//                 282: "XResolution",
//                 283: "YResolution",
//                 284: "PlanarConfiguration",
//                 285: "PageName",
//                 286: "XPosition",
//                 287: "YPosition",
//                 288: "FreeOffsets",
//                 289: "FreeByteCounts",
//                 290: "GrayResponseUnit",
//                 291: "GrayResponseCurve",
//                 292: "T4Options",
//                 293: "T6Options",
//                 296: "ResolutionUnit",
//                 297: "PageNumber",
//                 300: "ColorResponseUnit",
//                 301: "TransferFunction",
//                 305: "Software",
//                 306: "ModifyDate",
//                 315: "Artist",
//                 316: "HostComputer",
//                 317: "Predictor",
//                 318: "WhitePoint",
//                 319: "PrimaryChromaticities",
//                 320: "ColorMap",
//                 321: "HalftoneHints",
//                 322: "TileWidth",
//                 323: "TileLength",
//                 324: "TileOffsets",
//                 325: "TileByteCounts",
//                 326: "BadFaxLines",
//                 327: "CleanFaxData",
//                 328: "ConsecutiveBadFaxLines",
//                 330: "SubIFD",
//                 332: "InkSet",
//                 333: "InkNames",
//                 334: "NumberofInks",
//                 336: "DotRange",
//                 337: "TargetPrinter",
//                 338: "ExtraSamples",
//                 339: "SampleFormat",
//                 340: "SMinSampleValue",
//                 341: "SMaxSampleValue",
//                 342: "TransferRange",
//                 343: "ClipPath",
//                 344: "XClipPathUnits",
//                 345: "YClipPathUnits",
//                 346: "Indexed",
//                 347: "JPEGTables",
//                 351: "OPIProxy",
//                 400: "GlobalParametersIFD",
//                 401: "ProfileType",
//                 402: "FaxProfile",
//                 403: "CodingMethods",
//                 404: "VersionYear",
//                 405: "ModeNumber",
//                 433: "Decode",
//                 434: "DefaultImageColor",
//                 435: "T82Options",
//                 437: "JPEGTables",
//                 512: "JPEGProc",
//                 513: "ThumbnailOffset",
//                 514: "ThumbnailLength",
//                 515: "JPEGRestartInterval",
//                 517: "JPEGLosslessPredictors",
//                 518: "JPEGPointTransforms",
//                 519: "JPEGQTables",
//                 520: "JPEGDCTables",
//                 521: "JPEGACTables",
//                 529: "YCbCrCoefficients",
//                 530: "YCbCrSubSampling",
//                 531: "YCbCrPositioning",
//                 532: "ReferenceBlackWhite",
//                 559: "StripRowCounts",
//                 700: "ApplicationNotes",
//                 999: "USPTOMiscellaneous",
//                 4096: "RelatedImageFileFormat",
//                 4097: "RelatedImageWidth",
//                 4098: "RelatedImageHeight",
//                 18246: "Rating",
//                 18247: "XP_DIP_XML",
//                 18248: "StitchInfo",
//                 18249: "RatingPercent",
//                 32781: "ImageID",
//                 32931: "WangTag1",
//                 32932: "WangAnnotation",
//                 32933: "WangTag3",
//                 32934: "WangTag4",
//                 32995: "Matteing",
//                 32996: "DataType",
//                 32997: "ImageDepth",
//                 32998: "TileDepth",
//                 33405: "Model2",
//                 33421: "CFARepeatPatternDim",
//                 33422: "CFAPattern2",
//                 33423: "BatteryLevel",
//                 33424: "KodakIFD",
//                 33432: "Copyright",
//                 33434: "ExposureTime",
//                 33437: "FNumber",
//                 33445: "MDFileTag",
//                 33446: "MDScalePixel",
//                 33447: "MDColorTable",
//                 33448: "MDLabName",
//                 33449: "MDSampleInfo",
//                 33450: "MDPrepDate",
//                 33451: "MDPrepTime",
//                 33452: "MDFileUnits",
//                 33550: "PixelScale",
//                 33589: "AdventScale",
//                 33590: "AdventRevision",
//                 33628: "UIC1Tag",
//                 33629: "UIC2Tag",
//                 33630: "UIC3Tag",
//                 33631: "UIC4Tag",
//                 33723: "IPTC-NAA",
//                 33918: "IntergraphPacketData",
//                 33919: "IntergraphFlagRegisters",
//                 33920: "IntergraphMatrix",
//                 33921: "INGRReserved",
//                 33922: "ModelTiePoint",
//                 34016: "Site",
//                 34017: "ColorSequence",
//                 34018: "IT8Header",
//                 34019: "RasterPadding",
//                 34020: "BitsPerRunLength",
//                 34021: "BitsPerExtendedRunLength",
//                 34022: "ColorTable",
//                 34023: "ImageColorIndicator",
//                 34024: "BackgroundColorIndicator",
//                 34025: "ImageColorValue",
//                 34026: "BackgroundColorValue",
//                 34027: "PixelIntensityRange",
//                 34028: "TransparencyIndicator",
//                 34029: "ColorCharacterization",
//                 34030: "HCUsage",
//                 34031: "TrapIndicator",
//                 34032: "CMYKEquivalent",
//                 34118: "SEMInfo",
//                 34152: "AFCP_IPTC",
//                 34232: "PixelMagicJBIGOptions",
//                 34264: "ModelTransform",
//                 34306: "WB_GRGBLevels",
//                 34310: "LeafData",
//                 34377: "PhotoshopSettings",
//                 34665: "ExifOffset",
//                 34675: "ICC_Profile",
//                 34687: "TIFF_FXExtensions",
//                 34688: "MultiProfiles",
//                 34689: "SharedData",
//                 34690: "T88Options",
//                 34732: "ImageLayer",
//                 34735: "GeoTiffDirectory",
//                 34736: "GeoTiffDoubleParams",
//                 34737: "GeoTiffAsciiParams",
//                 34850: "ExposureProgram",
//                 34852: "SpectralSensitivity",
//                 34853: "GPSInfo",
//                 34855: "ISO",
//                 34856: "Opto-ElectricConvFactor",
//                 34857: "Interlace",
//                 34858: "TimeZoneOffset",
//                 34859: "SelfTimerMode",
//                 34864: "SensitivityType",
//                 34865: "StandardOutputSensitivity",
//                 34866: "RecommendedExposureIndex",
//                 34867: "ISOSpeed",
//                 34868: "ISOSpeedLatitudeyyy",
//                 34869: "ISOSpeedLatitudezzz",
//                 34908: "FaxRecvParams",
//                 34909: "FaxSubAddress",
//                 34910: "FaxRecvTime",
//                 34954: "LeafSubIFD",
//                 36864: "ExifVersion",
//                 36867: "DateTimeOriginal",
//                 36868: "CreateDate",
//                 37121: "ComponentsConfiguration",
//                 37122: "CompressedBitsPerPixel",
//                 37377: "ShutterSpeedValue",
//                 37378: "ApertureValue",
//                 37379: "BrightnessValue",
//                 37380: "ExposureCompensation",
//                 37381: "MaxApertureValue",
//                 37382: "SubjectDistance",
//                 37383: "MeteringMode",
//                 37384: "LightSource",
//                 37385: "Flash",
//                 37386: "FocalLength",
//                 37387: "FlashEnergy",
//                 37388: "SpatialFrequencyResponse",
//                 37389: "Noise",
//                 37390: "FocalPlaneXResolution",
//                 37391: "FocalPlaneYResolution",
//                 37392: "FocalPlaneResolutionUnit",
//                 37393: "ImageNumber",
//                 37394: "SecurityClassification",
//                 37395: "ImageHistory",
//                 37396: "SubjectArea",
//                 37397: "ExposureIndex",
//                 37398: "TIFF-EPStandardID",
//                 37399: "SensingMethod",
//                 37434: "CIP3DataFile",
//                 37435: "CIP3Sheet",
//                 37436: "CIP3Side",
//                 37439: "StoNits",
//                 37500: "MakerNote",
//                 37510: "UserComment",
//                 37520: "SubSecTime",
//                 37521: "SubSecTimeOriginal",
//                 37522: "SubSecTimeDigitized",
//                 37679: "MSDocumentText",
//                 37680: "MSPropertySetStorage",
//                 37681: "MSDocumentTextPosition",
//                 37724: "ImageSourceData",
//                 40091: "XPTitle",
//                 40092: "XPComment",
//                 40093: "XPAuthor",
//                 40094: "XPKeywords",
//                 40095: "XPSubject",
//                 40960: "FlashpixVersion",
//                 40961: "ColorSpace",
//                 40962: "ExifImageWidth",
//                 40963: "ExifImageHeight",
//                 40964: "RelatedSoundFile",
//                 40965: "InteropOffset",
//                 41483: "FlashEnergy",
//                 41484: "SpatialFrequencyResponse",
//                 41485: "Noise",
//                 41486: "FocalPlaneXResolution",
//                 41487: "FocalPlaneYResolution",
//                 41488: "FocalPlaneResolutionUnit",
//                 41489: "ImageNumber",
//                 41490: "SecurityClassification",
//                 41491: "ImageHistory",
//                 41492: "SubjectLocation",
//                 41493: "ExposureIndex",
//                 41494: "TIFF-EPStandardID",
//                 41495: "SensingMethod",
//                 41728: "FileSource",
//                 41729: "SceneType",
//                 41730: "CFAPattern",
//                 41985: "CustomRendered",
//                 41986: "ExposureMode",
//                 41987: "WhiteBalance",
//                 41988: "DigitalZoomRatio",
//                 41989: "FocalLengthIn35mmFormat",
//                 41990: "SceneCaptureType",
//                 41991: "GainControl",
//                 41992: "Contrast",
//                 41993: "Saturation",
//                 41994: "Sharpness",
//                 41995: "DeviceSettingDescription",
//                 41996: "SubjectDistanceRange",
//                 42016: "ImageUniqueID",
//                 42032: "OwnerName",
//                 42033: "SerialNumber",
//                 42034: "LensInfo",
//                 42035: "LensMake",
//                 42036: "LensModel",
//                 42037: "LensSerialNumber",
//                 42112: "GDALMetadata",
//                 42113: "GDALNoData",
//                 42240: "Gamma",
//                 44992: "ExpandSoftware",
//                 44993: "ExpandLens",
//                 44994: "ExpandFilm",
//                 44995: "ExpandFilterLens",
//                 44996: "ExpandScanner",
//                 44997: "ExpandFlashLamp",
//                 48129: "PixelFormat",
//                 48130: "Transformation",
//                 48131: "Uncompressed",
//                 48132: "ImageType",
//                 48256: "ImageWidth",
//                 48257: "ImageHeight",
//                 48258: "WidthResolution",
//                 48259: "HeightResolution",
//                 48320: "ImageOffset",
//                 48321: "ImageByteCount",
//                 48322: "AlphaOffset",
//                 48323: "AlphaByteCount",
//                 48324: "ImageDataDiscard",
//                 48325: "AlphaDataDiscard",
//                 50215: "OceScanjobDesc",
//                 50216: "OceApplicationSelector",
//                 50217: "OceIDNumber",
//                 50218: "OceImageLogic",
//                 50255: "Annotations",
//                 50341: "PrintIM",
//                 50560: "USPTOOriginalContentType",
//                 50706: "DNGVersion",
//                 50707: "DNGBackwardVersion",
//                 50708: "UniqueCameraModel",
//                 50709: "LocalizedCameraModel",
//                 50710: "CFAPlaneColor",
//                 50711: "CFALayout",
//                 50712: "LinearizationTable",
//                 50713: "BlackLevelRepeatDim",
//                 50714: "BlackLevel",
//                 50715: "BlackLevelDeltaH",
//                 50716: "BlackLevelDeltaV",
//                 50717: "WhiteLevel",
//                 50718: "DefaultScale",
//                 50719: "DefaultCropOrigin",
//                 50720: "DefaultCropSize",
//                 50721: "ColorMatrix1",
//                 50722: "ColorMatrix2",
//                 50723: "CameraCalibration1",
//                 50724: "CameraCalibration2",
//                 50725: "ReductionMatrix1",
//                 50726: "ReductionMatrix2",
//                 50727: "AnalogBalance",
//                 50728: "AsShotNeutral",
//                 50729: "AsShotWhiteXY",
//                 50730: "BaselineExposure",
//                 50731: "BaselineNoise",
//                 50732: "BaselineSharpness",
//                 50733: "BayerGreenSplit",
//                 50734: "LinearResponseLimit",
//                 50735: "CameraSerialNumber",
//                 50736: "DNGLensInfo",
//                 50737: "ChromaBlurRadius",
//                 50738: "AntiAliasStrength",
//                 50739: "ShadowScale",
//                 50740: "DNGPrivateData",
//                 50741: "MakerNoteSafety",
//                 50752: "RawImageSegmentation",
//                 50778: "CalibrationIlluminant1",
//                 50779: "CalibrationIlluminant2",
//                 50780: "BestQualityScale",
//                 50781: "RawDataUniqueID",
//                 50784: "AliasLayerMetadata",
//                 50827: "OriginalRawFileName",
//                 50828: "OriginalRawFileData",
//                 50829: "ActiveArea",
//                 50830: "MaskedAreas",
//                 50831: "AsShotICCProfile",
//                 50832: "AsShotPreProfileMatrix",
//                 50833: "CurrentICCProfile",
//                 50834: "CurrentPreProfileMatrix",
//                 50879: "ColorimetricReference",
//                 50898: "PanasonicTitle",
//                 50899: "PanasonicTitle2",
//                 50931: "CameraCalibrationSig",
//                 50932: "ProfileCalibrationSig",
//                 50933: "ProfileIFD",
//                 50934: "AsShotProfileName",
//                 50935: "NoiseReductionApplied",
//                 50936: "ProfileName",
//                 50937: "ProfileHueSatMapDims",
//                 50938: "ProfileHueSatMapData1",
//                 50939: "ProfileHueSatMapData2",
//                 50940: "ProfileToneCurve",
//                 50941: "ProfileEmbedPolicy",
//                 50942: "ProfileCopyright",
//                 50964: "ForwardMatrix1",
//                 50965: "ForwardMatrix2",
//                 50966: "PreviewApplicationName",
//                 50967: "PreviewApplicationVersion",
//                 50968: "PreviewSettingsName",
//                 50969: "PreviewSettingsDigest",
//                 50970: "PreviewColorSpace",
//                 50971: "PreviewDateTime",
//                 50972: "RawImageDigest",
//                 50973: "OriginalRawFileDigest",
//                 50974: "SubTileBlockSize",
//                 50975: "RowInterleaveFactor",
//                 50981: "ProfileLookTableDims",
//                 50982: "ProfileLookTableData",
//                 51008: "OpcodeList1",
//                 51009: "OpcodeList2",
//                 51022: "OpcodeList3",
//                 51041: "NoiseProfile",
//                 51043: "TimeCodes",
//                 51044: "FrameRate",
//                 51058: "TStop",
//                 51081: "ReelName",
//                 51089: "OriginalDefaultFinalSize",
//                 51090: "OriginalBestQualitySize",
//                 51091: "OriginalDefaultCropSize",
//                 51105: "CameraLabel",
//                 51107: "ProfileHueSatMapEncoding",
//                 51108: "ProfileLookTableEncoding",
//                 51109: "BaselineExposureOffset",
//                 51110: "DefaultBlackRender",
//                 51111: "NewRawImageDigest",
//                 51112: "RawToPreviewGain",
//                 51125: "DefaultUserCrop",
//                 59932: "Padding",
//                 59933: "OffsetSchema",
//                 65e3: "OwnerName",
//                 65001: "SerialNumber",
//                 65002: "Lens",
//                 65024: "KDC_IFD",
//                 65100: "RawFile",
//                 65101: "Converter",
//                 65102: "WhiteBalance",
//                 65105: "Exposure",
//                 65106: "Shadows",
//                 65107: "Brightness",
//                 65108: "Contrast",
//                 65109: "Saturation",
//                 65110: "Sharpness",
//                 65111: "Smoothness",
//                 65112: "MoireFilter",
//               },
//               gps: {
//                 0: "GPSVersionID",
//                 1: "GPSLatitudeRef",
//                 2: "GPSLatitude",
//                 3: "GPSLongitudeRef",
//                 4: "GPSLongitude",
//                 5: "GPSAltitudeRef",
//                 6: "GPSAltitude",
//                 7: "GPSTimeStamp",
//                 8: "GPSSatellites",
//                 9: "GPSStatus",
//                 10: "GPSMeasureMode",
//                 11: "GPSDOP",
//                 12: "GPSSpeedRef",
//                 13: "GPSSpeed",
//                 14: "GPSTrackRef",
//                 15: "GPSTrack",
//                 16: "GPSImgDirectionRef",
//                 17: "GPSImgDirection",
//                 18: "GPSMapDatum",
//                 19: "GPSDestLatitudeRef",
//                 20: "GPSDestLatitude",
//                 21: "GPSDestLongitudeRef",
//                 22: "GPSDestLongitude",
//                 23: "GPSDestBearingRef",
//                 24: "GPSDestBearing",
//                 25: "GPSDestDistanceRef",
//                 26: "GPSDestDistance",
//                 27: "GPSProcessingMethod",
//                 28: "GPSAreaInformation",
//                 29: "GPSDateStamp",
//                 30: "GPSDifferential",
//                 31: "GPSHPositioningError",
//               },
//             }));
//       }
//       var jpeg = jpeg$1,
//         exif = exif$2,
//         simplify = simplify$1;
//       function ExifResult(t, e, i, r, n, a, s) {
//         (this.startMarker = t),
//           (this.tags = e),
//           (this.imageSize = i),
//           (this.thumbnailOffset = r),
//           (this.thumbnailLength = n),
//           (this.thumbnailType = a),
//           (this.app1Offset = s);
//       }
//       function Parser$1(t) {
//         (this.stream = t),
//           (this.flags = {
//             readBinaryTags: !1,
//             resolveTagNames: !0,
//             simplifyValues: !0,
//             imageSize: !0,
//             hidePointers: !0,
//             returnTags: !0,
//           });
//       }
//       (ExifResult.prototype = {
//         hasThumbnail: function (t) {
//           return (
//             !(!this.thumbnailOffset || !this.thumbnailLength) &&
//             ("string" != typeof t ||
//               ("image/jpeg" === t.toLowerCase().trim()
//                 ? 6 === this.thumbnailType
//                 : "image/tiff" === t.toLowerCase().trim() &&
//                   1 === this.thumbnailType))
//           );
//         },
//         getThumbnailOffset: function () {
//           return this.app1Offset + 6 + this.thumbnailOffset;
//         },
//         getThumbnailLength: function () {
//           return this.thumbnailLength;
//         },
//         getThumbnailBuffer: function () {
//           return this._getThumbnailStream().nextBuffer(this.thumbnailLength);
//         },
//         _getThumbnailStream: function () {
//           return this.startMarker.openWithOffset(this.getThumbnailOffset());
//         },
//         getImageSize: function () {
//           return this.imageSize;
//         },
//         getThumbnailSize: function () {
//           var t,
//             e = this._getThumbnailStream();
//           return (
//             jpeg.parseSections(e, function (e, i) {
//               "SOF" === jpeg.getSectionName(e).name &&
//                 (t = jpeg.getSizeFromSOFSection(i));
//             }),
//             t
//           );
//         },
//       }),
//         (Parser$1.prototype = {
//           enableBinaryFields: function (t) {
//             return (this.flags.readBinaryTags = !!t), this;
//           },
//           enablePointers: function (t) {
//             return (this.flags.hidePointers = !t), this;
//           },
//           enableTagNames: function (t) {
//             return (this.flags.resolveTagNames = !!t), this;
//           },
//           enableImageSize: function (t) {
//             return (this.flags.imageSize = !!t), this;
//           },
//           enableReturnTags: function (t) {
//             return (this.flags.returnTags = !!t), this;
//           },
//           enableSimpleValues: function (t) {
//             return (this.flags.simplifyValues = !!t), this;
//           },
//           parse: function () {
//             var t,
//               e,
//               i,
//               r,
//               n,
//               a,
//               s,
//               o,
//               l,
//               h = this.stream.mark(),
//               u = h.openWithOffset(0),
//               f = this.flags;
//             return (
//               f.resolveTagNames && (s = requireExifTags()),
//               f.resolveTagNames
//                 ? ((t = {}),
//                   (o = function (e) {
//                     return t[e.name];
//                   }),
//                   (l = function (e, i) {
//                     t[e.name] = i;
//                   }))
//                 : ((t = []),
//                   (o = function (e) {
//                     var i;
//                     for (i = 0; i < t.length; ++i)
//                       if (t[i].type === e.type && t[i].section === e.section)
//                         return t.value;
//                   }),
//                   (l = function (e, i) {
//                     var r;
//                     for (r = 0; r < t.length; ++r)
//                       if (t[r].type === e.type && t[r].section === e.section)
//                         return void (t.value = i);
//                   })),
//               jpeg.parseSections(u, function (o, l) {
//                 var u = l.offsetFrom(h);
//                 225 === o
//                   ? exif.parseTags(l, function (e, a, o, l) {
//                       if (f.readBinaryTags || 7 !== l) {
//                         if (513 === a) {
//                           if (((i = o[0]), f.hidePointers)) return;
//                         } else if (514 === a) {
//                           if (((r = o[0]), f.hidePointers)) return;
//                         } else if (259 === a && ((n = o[0]), f.hidePointers))
//                           return;
//                         if (f.returnTags) {
//                           if (
//                             (f.simplifyValues &&
//                               (o = simplify.simplifyValue(o, l)),
//                             f.resolveTagNames)
//                           ) {
//                             var h = (e === exif.GPSIFD ? s.gps : s.exif)[a];
//                             h || (h = s.exif[a]),
//                               t.hasOwnProperty(h) || (t[h] = o);
//                           } else t.push({ section: e, type: a, value: o });
//                         }
//                       }
//                     }) && (a = u)
//                   : f.imageSize &&
//                     "SOF" === jpeg.getSectionName(o).name &&
//                     (e = jpeg.getSizeFromSOFSection(l));
//               }),
//               f.simplifyValues &&
//                 (simplify.castDegreeValues(o, l),
//                 simplify.castDateValues(o, l)),
//               new ExifResult(h, t, e, i, r, n, a)
//             );
//           },
//         });
//       var domBufferstream,
//         hasRequiredDomBufferstream,
//         bufferstream,
//         hasRequiredBufferstream,
//         parser = Parser$1;
//       function requireDomBufferstream() {
//         if (hasRequiredDomBufferstream) return domBufferstream;
//         function t(t, e, i, r, n, a) {
//           (this.global = n),
//             (e = e || 0),
//             (i = i || t.byteLength - e),
//             (this.arrayBuffer = t.slice(e, e + i)),
//             (this.view = new n.DataView(
//               this.arrayBuffer,
//               0,
//               this.arrayBuffer.byteLength
//             )),
//             this.setBigEndian(r),
//             (this.offset = 0),
//             (this.parentOffset = (a || 0) + e);
//         }
//         return (
//           (hasRequiredDomBufferstream = 1),
//           (t.prototype = {
//             setBigEndian: function (t) {
//               this.littleEndian = !t;
//             },
//             nextUInt8: function () {
//               var t = this.view.getUint8(this.offset);
//               return (this.offset += 1), t;
//             },
//             nextInt8: function () {
//               var t = this.view.getInt8(this.offset);
//               return (this.offset += 1), t;
//             },
//             nextUInt16: function () {
//               var t = this.view.getUint16(this.offset, this.littleEndian);
//               return (this.offset += 2), t;
//             },
//             nextUInt32: function () {
//               var t = this.view.getUint32(this.offset, this.littleEndian);
//               return (this.offset += 4), t;
//             },
//             nextInt16: function () {
//               var t = this.view.getInt16(this.offset, this.littleEndian);
//               return (this.offset += 2), t;
//             },
//             nextInt32: function () {
//               var t = this.view.getInt32(this.offset, this.littleEndian);
//               return (this.offset += 4), t;
//             },
//             nextFloat: function () {
//               var t = this.view.getFloat32(this.offset, this.littleEndian);
//               return (this.offset += 4), t;
//             },
//             nextDouble: function () {
//               var t = this.view.getFloat64(this.offset, this.littleEndian);
//               return (this.offset += 8), t;
//             },
//             nextBuffer: function (t) {
//               var e = this.arrayBuffer.slice(this.offset, this.offset + t);
//               return (this.offset += t), e;
//             },
//             remainingLength: function () {
//               return this.arrayBuffer.byteLength - this.offset;
//             },
//             nextString: function (t) {
//               var e = this.arrayBuffer.slice(this.offset, this.offset + t);
//               return (
//                 (e = String.fromCharCode.apply(
//                   null,
//                   new this.global.Uint8Array(e)
//                 )),
//                 (this.offset += t),
//                 e
//               );
//             },
//             mark: function () {
//               var e = this;
//               return {
//                 openWithOffset: function (i) {
//                   return (
//                     (i = (i || 0) + this.offset),
//                     new t(
//                       e.arrayBuffer,
//                       i,
//                       e.arrayBuffer.byteLength - i,
//                       !e.littleEndian,
//                       e.global,
//                       e.parentOffset
//                     )
//                   );
//                 },
//                 offset: this.offset,
//                 getParentOffset: function () {
//                   return e.parentOffset;
//                 },
//               };
//             },
//             offsetFrom: function (t) {
//               return (
//                 this.parentOffset +
//                 this.offset -
//                 (t.offset + t.getParentOffset())
//               );
//             },
//             skip: function (t) {
//               this.offset += t;
//             },
//             branch: function (e, i) {
//               return (
//                 (i =
//                   "number" == typeof i
//                     ? i
//                     : this.arrayBuffer.byteLength - (this.offset + e)),
//                 new t(
//                   this.arrayBuffer,
//                   this.offset + e,
//                   i,
//                   !this.littleEndian,
//                   this.global,
//                   this.parentOffset
//                 )
//               );
//             },
//           }),
//           (domBufferstream = t)
//         );
//       }
//       function requireBufferstream() {
//         if (hasRequiredBufferstream) return bufferstream;
//         function t(t, e, i, r) {
//           (this.buffer = t),
//             (this.offset = e || 0),
//             (i = "number" == typeof i ? i : t.length),
//             (this.endPosition = this.offset + i),
//             this.setBigEndian(r);
//         }
//         return (
//           (hasRequiredBufferstream = 1),
//           (t.prototype = {
//             setBigEndian: function (t) {
//               this.bigEndian = !!t;
//             },
//             nextUInt8: function () {
//               var t = this.buffer.readUInt8(this.offset);
//               return (this.offset += 1), t;
//             },
//             nextInt8: function () {
//               var t = this.buffer.readInt8(this.offset);
//               return (this.offset += 1), t;
//             },
//             nextUInt16: function () {
//               var t = this.bigEndian
//                 ? this.buffer.readUInt16BE(this.offset)
//                 : this.buffer.readUInt16LE(this.offset);
//               return (this.offset += 2), t;
//             },
//             nextUInt32: function () {
//               var t = this.bigEndian
//                 ? this.buffer.readUInt32BE(this.offset)
//                 : this.buffer.readUInt32LE(this.offset);
//               return (this.offset += 4), t;
//             },
//             nextInt16: function () {
//               var t = this.bigEndian
//                 ? this.buffer.readInt16BE(this.offset)
//                 : this.buffer.readInt16LE(this.offset);
//               return (this.offset += 2), t;
//             },
//             nextInt32: function () {
//               var t = this.bigEndian
//                 ? this.buffer.readInt32BE(this.offset)
//                 : this.buffer.readInt32LE(this.offset);
//               return (this.offset += 4), t;
//             },
//             nextFloat: function () {
//               var t = this.bigEndian
//                 ? this.buffer.readFloatBE(this.offset)
//                 : this.buffer.readFloatLE(this.offset);
//               return (this.offset += 4), t;
//             },
//             nextDouble: function () {
//               var t = this.bigEndian
//                 ? this.buffer.readDoubleBE(this.offset)
//                 : this.buffer.readDoubleLE(this.offset);
//               return (this.offset += 8), t;
//             },
//             nextBuffer: function (t) {
//               var e = this.buffer.slice(this.offset, this.offset + t);
//               return (this.offset += t), e;
//             },
//             remainingLength: function () {
//               return this.endPosition - this.offset;
//             },
//             nextString: function (t) {
//               var e = this.buffer.toString(
//                 "utf8",
//                 this.offset,
//                 this.offset + t
//               );
//               return (this.offset += t), e;
//             },
//             mark: function () {
//               var e = this;
//               return {
//                 openWithOffset: function (i) {
//                   return (
//                     (i = (i || 0) + this.offset),
//                     new t(e.buffer, i, e.endPosition - i, e.bigEndian)
//                   );
//                 },
//                 offset: this.offset,
//               };
//             },
//             offsetFrom: function (t) {
//               return this.offset - t.offset;
//             },
//             skip: function (t) {
//               this.offset += t;
//             },
//             branch: function (e, i) {
//               return (
//                 (i =
//                   "number" == typeof i
//                     ? i
//                     : this.endPosition - (this.offset + e)),
//                 new t(this.buffer, this.offset + e, i, this.bigEndian)
//               );
//             },
//           }),
//           (bufferstream = t)
//         );
//       }
//       var Parser = parser;
//       function getGlobal() {
//         return (0, eval)("this");
//       }
//       var exifParser = {
//           create: function (t, e) {
//             return new Parser(
//               t instanceof (e = e || getGlobal()).ArrayBuffer
//                 ? new (requireDomBufferstream())(t, 0, t.byteLength, !0, e)
//                 : new (requireBufferstream())(t, 0, t.length, !0)
//             );
//           },
//         },
//         EXIFParser = getDefaultExportFromCjs(exifParser);
//       function getExifOrientation(t) {
//         let e = t._exif;
//         return (e && e.tags && e.tags.Orientation) || 1;
//       }
//       function getExifOrientationTransformation(t) {
//         let e = t.bitmap.width,
//           i = t.bitmap.height;
//         switch (getExifOrientation(t)) {
//           case 1:
//           default:
//             return null;
//           case 2:
//             return function (t, i) {
//               return [e - t - 1, i];
//             };
//           case 3:
//             return function (t, r) {
//               return [e - t - 1, i - r - 1];
//             };
//           case 4:
//             return function (t, e) {
//               return [t, i - e - 1];
//             };
//           case 5:
//             return function (t, e) {
//               return [e, t];
//             };
//           case 6:
//             return function (t, e) {
//               return [e, i - t - 1];
//             };
//           case 7:
//             return function (t, r) {
//               return [e - r - 1, i - t - 1];
//             };
//           case 8:
//             return function (t, i) {
//               return [e - i - 1, t];
//             };
//         }
//       }
//       function transformBitmap(t, e, i, r) {
//         let n = t.bitmap.data,
//           a = t.bitmap.width,
//           s = Buffer.alloc(n.length);
//         for (let t = 0; t < e; t++)
//           for (let o = 0; o < i; o++) {
//             let [i, l] = r(t, o),
//               h = (e * o + t) << 2,
//               u = (a * l + i) << 2,
//               f = n.readUInt32BE(u);
//             s.writeUInt32BE(f, h);
//           }
//         (t.bitmap.data = s),
//           (t.bitmap.width = e),
//           (t.bitmap.height = i),
//           (t._exif.tags.Orientation = 1);
//       }
//       function exifRotate(t) {
//         if (2 > getExifOrientation(t)) return;
//         let e = getExifOrientationTransformation(t),
//           i = getExifOrientation(t) > 4,
//           r = i ? t.bitmap.height : t.bitmap.width,
//           n = i ? t.bitmap.width : t.bitmap.height;
//         e && transformBitmap(t, r, n, e);
//       }
//       async function attemptExifRotate(t, e) {
//         try {
//           (t._exif = EXIFParser.create(e).parse()), exifRotate(t);
//         } catch {}
//       }
//       var __defProp$2 = Object.defineProperty,
//         __defNormalProp$2 = (t, e, i) =>
//           e in t
//             ? __defProp$2(t, e, {
//                 enumerable: !0,
//                 configurable: !0,
//                 writable: !0,
//                 value: i,
//               })
//             : (t[e] = i),
//         __publicField$2 = (t, e, i) =>
//           __defNormalProp$2(t, "symbol" != typeof e ? e + "" : e, i);
//       let emptyBitmap = { data: Buffer.alloc(0), width: 0, height: 0 };
//       function bufferFromArrayBuffer(t) {
//         let e = Buffer.alloc(t.byteLength),
//           i = new Uint8Array(t);
//         for (let t = 0; t < e.length; ++t) e[t] = i[t];
//         return e;
//       }
//       function createJimp({ plugins: t, formats: e } = {}) {
//         let i = t || [],
//           r = (e || []).map((t) => t()),
//           n = class {
//             constructor(t = emptyBitmap) {
//               if (
//                 (__publicField$2(this, "bitmap", emptyBitmap),
//                 __publicField$2(this, "background", 0),
//                 __publicField$2(this, "formats", []),
//                 __publicField$2(this, "mime"),
//                 (this.formats = r),
//                 "data" in t)
//               )
//                 this.bitmap = t;
//               else if (
//                 ((this.bitmap = {
//                   data: Buffer.alloc(t.width * t.height * 4),
//                   width: t.width,
//                   height: t.height,
//                 }),
//                 t.color)
//               ) {
//                 this.background =
//                   "string" == typeof t.color ? cssColorToHex(t.color) : t.color;
//                 for (let t = 0; t < this.bitmap.data.length; t += 4)
//                   this.bitmap.data.writeUInt32BE(this.background, t);
//               }
//               for (let t of i)
//                 for (let e in t)
//                   this[e] = (...i) => {
//                     let r = t[e]?.(this, ...i);
//                     return "object" == typeof r && "bitmap" in r
//                       ? ((this.bitmap = r.bitmap), this)
//                       : r;
//                   };
//             }
//             static async read(t, e) {
//               if (Buffer.isBuffer(t) || t instanceof ArrayBuffer)
//                 return this.fromBuffer(t);
//               let [i, r] = await to(fetch(t));
//               if (i) throw Error(`Could not load Buffer from URL: ${t}`);
//               if (!r.ok) throw Error(`HTTP Status ${r.status} for url ${t}`);
//               let [n, a] = await to(r.arrayBuffer());
//               if (n) throw Error(`Could not load Buffer from ${t}`);
//               let s = bufferFromArrayBuffer(a);
//               return this.fromBuffer(s, e);
//             }
//             static fromBitmap(t) {
//               let e;
//               if (
//                 (t.data instanceof Buffer && (e = Buffer.from(t.data)),
//                 (t.data instanceof Uint8Array ||
//                   t.data instanceof Uint8ClampedArray) &&
//                   (e = Buffer.from(t.data.buffer)),
//                 Array.isArray(t.data) &&
//                   (e = Buffer.concat(
//                     t.data.map((t) =>
//                       Buffer.from(t.toString(16).padStart(8, "0"), "hex")
//                     )
//                   )),
//                 !e)
//               )
//                 throw Error("data must be a Buffer");
//               if ("number" != typeof t.height || "number" != typeof t.width)
//                 throw Error("bitmap must have width and height");
//               return new n({ height: t.height, width: t.width, data: e });
//             }
//             static async fromBuffer(t, e) {
//               let i = t instanceof ArrayBuffer ? bufferFromArrayBuffer(t) : t,
//                 a = await fileType$1.fromBuffer(i);
//               if (!a || !a.mime) throw Error("Could not find MIME for Buffer");
//               let s = r.find((t) => t.mime === a.mime);
//               if (!s || !s.decode)
//                 throw Error(`Mime type ${a.mime} does not support decoding`);
//               let o = new n(await s.decode(i, e?.[s.mime]));
//               return (o.mime = a.mime), attemptExifRotate(o, i), o;
//             }
//             inspect() {
//               return (
//                 "<Jimp " +
//                 (this.bitmap === emptyBitmap
//                   ? "pending..."
//                   : this.bitmap.width + "x" + this.bitmap.height) +
//                 ">"
//               );
//             }
//             toString() {
//               return "[object Jimp]";
//             }
//             get width() {
//               return this.bitmap.width;
//             }
//             get height() {
//               return this.bitmap.height;
//             }
//             async getBuffer(t, e) {
//               let i;
//               let r = this.formats.find((e) => e.mime === t);
//               if (!r || !r.encode) throw Error(`Unsupported MIME type: ${t}`);
//               return (
//                 r.hasAlpha
//                   ? (i = this)
//                   : composite(
//                       (i = new n({
//                         width: this.bitmap.width,
//                         height: this.bitmap.height,
//                         color: this.background,
//                       })),
//                       this
//                     ),
//                 r.encode(i.bitmap, e)
//               );
//             }
//             async getBase64(t, e) {
//               return (
//                 "data:" +
//                 t +
//                 ";base64," +
//                 (await this.getBuffer(t, e)).toString("base64")
//               );
//             }
//             async write(t, e) {
//               let i = mime.getType(t);
//               await writeFile(t, await this.getBuffer(i, e));
//             }
//             clone() {
//               return new n({
//                 ...this.bitmap,
//                 data: Buffer.from(this.bitmap.data),
//               });
//             }
//             getPixelIndex(t, e, i) {
//               let r, n;
//               if (
//                 (i || (i = Edge.EXTEND),
//                 "number" != typeof t || "number" != typeof e)
//               )
//                 throw Error("x and y must be numbers");
//               (r = t = Math.round(t)),
//                 (n = e = Math.round(e)),
//                 i === Edge.EXTEND &&
//                   (t < 0 && (r = 0),
//                   t >= this.bitmap.width && (r = this.bitmap.width - 1),
//                   e < 0 && (n = 0),
//                   e >= this.bitmap.height && (n = this.bitmap.height - 1)),
//                 i === Edge.WRAP &&
//                   (t < 0 && (r = this.bitmap.width + t),
//                   t >= this.bitmap.width && (r = t % this.bitmap.width),
//                   e < 0 && (n = this.bitmap.height + e),
//                   e >= this.bitmap.height && (n = e % this.bitmap.height));
//               let a = (this.bitmap.width * n + r) << 2;
//               return (
//                 (r < 0 || r >= this.bitmap.width) && (a = -1),
//                 (n < 0 || n >= this.bitmap.height) && (a = -1),
//                 a
//               );
//             }
//             getPixelColor(t, e) {
//               if ("number" != typeof t || "number" != typeof e)
//                 throw Error("x and y must be numbers");
//               let i = this.getPixelIndex(t, e);
//               return this.bitmap.data.readUInt32BE(i);
//             }
//             setPixelColor(t, e, i) {
//               if (
//                 "number" != typeof t ||
//                 "number" != typeof e ||
//                 "number" != typeof i
//               )
//                 throw Error("hex, x and y must be numbers");
//               let r = this.getPixelIndex(e, i);
//               return this.bitmap.data.writeUInt32BE(t, r), this;
//             }
//             hasAlpha() {
//               let { width: t, height: e, data: i } = this.bitmap,
//                 r = (t * e) << 2;
//               for (let t = 3; t < r; t += 4) if (255 !== i[t]) return !0;
//               return !1;
//             }
//             composite(t, e = 0, i = 0, r = {}) {
//               return composite(this, t, e, i, r);
//             }
//             scan(t, e, i, r, n) {
//               return scan(this, t, e, i, r, n);
//             }
//             scanIterator(
//               t = 0,
//               e = 0,
//               i = this.bitmap.width,
//               r = this.bitmap.height
//             ) {
//               if ("number" != typeof t || "number" != typeof e)
//                 throw Error("x and y must be numbers");
//               if ("number" != typeof i || "number" != typeof r)
//                 throw Error("w and h must be numbers");
//               return scanIterator(this, t, e, i, r);
//             }
//           };
//         return n;
//       }
//       function Resize(t, e, i, r, n, a, s) {
//         (this.widthOriginal = Math.abs(Math.floor(t) || 0)),
//           (this.heightOriginal = Math.abs(Math.floor(e) || 0)),
//           (this.targetWidth = Math.abs(Math.floor(i) || 0)),
//           (this.targetHeight = Math.abs(Math.floor(r) || 0)),
//           (this.colorChannels = n ? 4 : 3),
//           (this.interpolationPass = !!a),
//           (this.resizeCallback = "function" == typeof s ? s : function () {}),
//           (this.targetWidthMultipliedByChannels =
//             this.targetWidth * this.colorChannels),
//           (this.originalWidthMultipliedByChannels =
//             this.widthOriginal * this.colorChannels),
//           (this.originalHeightMultipliedByChannels =
//             this.heightOriginal * this.colorChannels),
//           (this.widthPassResultSize =
//             this.targetWidthMultipliedByChannels * this.heightOriginal),
//           (this.finalResultSize =
//             this.targetWidthMultipliedByChannels * this.targetHeight),
//           this.initialize();
//       }
//       (ResizeStrategy2 = ResizeStrategy || (ResizeStrategy = {})),
//         (ResizeStrategy2.NEAREST_NEIGHBOR = "nearestNeighbor"),
//         (ResizeStrategy2.BILINEAR = "bilinearInterpolation"),
//         (ResizeStrategy2.BICUBIC = "bicubicInterpolation"),
//         (ResizeStrategy2.HERMITE = "hermiteInterpolation"),
//         (ResizeStrategy2.BEZIER = "bezierInterpolation"),
//         (Resize.prototype.initialize = function () {
//           if (
//             !(
//               this.widthOriginal > 0 &&
//               this.heightOriginal > 0 &&
//               this.targetWidth > 0 &&
//               this.targetHeight > 0
//             )
//           )
//             throw (
//               (console.log(this),
//               Error("Invalid settings specified for the resizer."))
//             );
//           this.configurePasses();
//         }),
//         (Resize.prototype.configurePasses = function () {
//           this.widthOriginal === this.targetWidth
//             ? (this.resizeWidth = this.bypassResizer)
//             : ((this.ratioWeightWidthPass =
//                 this.widthOriginal / this.targetWidth),
//               this.ratioWeightWidthPass < 1 && this.interpolationPass
//                 ? (this.initializeFirstPassBuffers(!0),
//                   (this.resizeWidth =
//                     4 === this.colorChannels
//                       ? this.resizeWidthInterpolatedRGBA
//                       : this.resizeWidthInterpolatedRGB))
//                 : (this.initializeFirstPassBuffers(!1),
//                   (this.resizeWidth =
//                     4 === this.colorChannels
//                       ? this.resizeWidthRGBA
//                       : this.resizeWidthRGB))),
//             this.heightOriginal === this.targetHeight
//               ? (this.resizeHeight = this.bypassResizer)
//               : ((this.ratioWeightHeightPass =
//                   this.heightOriginal / this.targetHeight),
//                 this.ratioWeightHeightPass < 1 && this.interpolationPass
//                   ? (this.initializeSecondPassBuffers(!0),
//                     (this.resizeHeight = this.resizeHeightInterpolated))
//                   : (this.initializeSecondPassBuffers(!1),
//                     (this.resizeHeight =
//                       4 === this.colorChannels
//                         ? this.resizeHeightRGBA
//                         : this.resizeHeightRGB)));
//         }),
//         (Resize.prototype._resizeWidthInterpolatedRGBChannels = function (
//           t,
//           e
//         ) {
//           let i = e ? 4 : 3,
//             r = this.ratioWeightWidthPass,
//             n = this.widthBuffer,
//             a,
//             s,
//             o = 0,
//             l = 0,
//             h = 0,
//             u = 0,
//             f = 0;
//           for (a = 0; o < 1 / 3; a += i, o += r)
//             for (
//               l = a, h = 0;
//               l < this.widthPassResultSize;
//               h += this.originalWidthMultipliedByChannels,
//                 l += this.targetWidthMultipliedByChannels
//             )
//               (n[l] = t[h]),
//                 (n[l + 1] = t[h + 1]),
//                 (n[l + 2] = t[h + 2]),
//                 e && (n[l + 3] = t[h + 3]);
//           for (o -= 1 / 3, s = this.widthOriginal - 1; o < s; a += i, o += r)
//             for (
//               u = 1 - (f = o % 1), l = a, h = Math.floor(o) * i;
//               l < this.widthPassResultSize;
//               h += this.originalWidthMultipliedByChannels,
//                 l += this.targetWidthMultipliedByChannels
//             )
//               (n[l + 0] = t[h + 0] * u + t[h + i + 0] * f),
//                 (n[l + 1] = t[h + 1] * u + t[h + i + 1] * f),
//                 (n[l + 2] = t[h + 2] * u + t[h + i + 2] * f),
//                 e && (n[l + 3] = t[h + 3] * u + t[h + i + 3] * f);
//           for (
//             s = this.originalWidthMultipliedByChannels - i;
//             a < this.targetWidthMultipliedByChannels;
//             a += i
//           )
//             for (
//               l = a, h = s;
//               l < this.widthPassResultSize;
//               h += this.originalWidthMultipliedByChannels,
//                 l += this.targetWidthMultipliedByChannels
//             )
//               (n[l] = t[h]),
//                 (n[l + 1] = t[h + 1]),
//                 (n[l + 2] = t[h + 2]),
//                 e && (n[l + 3] = t[h + 3]);
//           return n;
//         }),
//         (Resize.prototype._resizeWidthRGBChannels = function (t, e) {
//           let i = e ? 4 : 3,
//             r = this.ratioWeightWidthPass,
//             n = 1 / r,
//             a = this.originalWidthMultipliedByChannels - i + 1,
//             s = this.targetWidthMultipliedByChannels - i + 1,
//             o = this.outputWidthWorkBench,
//             l = this.widthBuffer,
//             h = this.outputWidthWorkBenchOpaquePixelsCount,
//             u = 0,
//             f = 0,
//             c = 0,
//             d = 0,
//             p = 0,
//             m = 0,
//             g = 0,
//             _ = 1,
//             b = 0,
//             y = 0,
//             v = 0,
//             w = 0;
//           do {
//             for (p = 0; p < this.originalHeightMultipliedByChannels; )
//               (o[p++] = 0),
//                 (o[p++] = 0),
//                 (o[p++] = 0),
//                 e && ((o[p++] = 0), (h[p / i - 1] = 0));
//             u = r;
//             do {
//               for (
//                 _ = Math.min(u, (f = 1 + c - d)), p = 0, m = c;
//                 p < this.originalHeightMultipliedByChannels;
//                 m += a
//               )
//                 (b = t[m]),
//                   (y = t[++m]),
//                   (v = t[++m]),
//                   (w = e ? t[++m] : 255),
//                   (o[p++] += (w ? b : 0) * _),
//                   (o[p++] += (w ? y : 0) * _),
//                   (o[p++] += (w ? v : 0) * _),
//                   e && ((o[p++] += w * _), (h[p / i - 1] += w ? _ : 0));
//               if (!(u >= f)) {
//                 d += u;
//                 break;
//               }
//               (c += i), (d = c), (u -= f);
//             } while (u > 0 && c < this.originalWidthMultipliedByChannels);
//             for (
//               p = 0, m = g;
//               p < this.originalHeightMultipliedByChannels;
//               m += s
//             )
//               (u = e ? h[p / i] : 1),
//                 (_ = e ? (u ? 1 / u : 0) : n),
//                 (l[m] = o[p++] * _),
//                 (l[++m] = o[p++] * _),
//                 (l[++m] = o[p++] * _),
//                 e && (l[++m] = o[p++] * n);
//             g += i;
//           } while (g < this.targetWidthMultipliedByChannels);
//           return l;
//         }),
//         (Resize.prototype._resizeHeightRGBChannels = function (t, e) {
//           let i = this.ratioWeightHeightPass,
//             r = 1 / i,
//             n = this.outputHeightWorkBench,
//             a = this.heightBuffer,
//             s = this.outputHeightWorkBenchOpaquePixelsCount,
//             o = 0,
//             l = 0,
//             h = 0,
//             u = 0,
//             f = 0,
//             c = 0,
//             d = 0,
//             p = 1,
//             m = 0,
//             g = 0,
//             _ = 0,
//             b = 0;
//           do {
//             for (f = 0; f < this.targetWidthMultipliedByChannels; )
//               (n[f++] = 0),
//                 (n[f++] = 0),
//                 (n[f++] = 0),
//                 e && ((n[f++] = 0), (s[f / 4 - 1] = 0));
//             o = i;
//             do {
//               for (
//                 p = Math.min(o, (l = 1 + h - u)), d = h, f = 0;
//                 f < this.targetWidthMultipliedByChannels;

//               )
//                 (m = t[d++]),
//                   (g = t[d++]),
//                   (_ = t[d++]),
//                   (b = e ? t[d++] : 255),
//                   (n[f++] += (b ? m : 0) * p),
//                   (n[f++] += (b ? g : 0) * p),
//                   (n[f++] += (b ? _ : 0) * p),
//                   e && ((n[f++] += b * p), (s[f / 4 - 1] += b ? p : 0));
//               if (!(o >= l)) {
//                 u += o;
//                 break;
//               }
//               (u = h = d), (o -= l);
//             } while (o > 0 && h < this.widthPassResultSize);
//             for (f = 0; f < this.targetWidthMultipliedByChannels; )
//               (o = e ? s[f / 4] : 1),
//                 (p = e ? (o ? 1 / o : 0) : r),
//                 (a[c++] = Math.round(n[f++] * p)),
//                 (a[c++] = Math.round(n[f++] * p)),
//                 (a[c++] = Math.round(n[f++] * p)),
//                 e && (a[c++] = Math.round(n[f++] * r));
//           } while (c < this.finalResultSize);
//           return a;
//         }),
//         (Resize.prototype.resizeWidthInterpolatedRGB = function (t) {
//           return this._resizeWidthInterpolatedRGBChannels(t, !1);
//         }),
//         (Resize.prototype.resizeWidthInterpolatedRGBA = function (t) {
//           return this._resizeWidthInterpolatedRGBChannels(t, !0);
//         }),
//         (Resize.prototype.resizeWidthRGB = function (t) {
//           return this._resizeWidthRGBChannels(t, !1);
//         }),
//         (Resize.prototype.resizeWidthRGBA = function (t) {
//           return this._resizeWidthRGBChannels(t, !0);
//         }),
//         (Resize.prototype.resizeHeightInterpolated = function (t) {
//           let e = this.ratioWeightHeightPass,
//             i = this.heightBuffer,
//             r,
//             n = 0,
//             a = 0,
//             s = 0,
//             o = 0,
//             l = 0,
//             h = 0,
//             u = 0;
//           for (; n < 1 / 3; n += e)
//             for (s = 0; s < this.targetWidthMultipliedByChannels; )
//               i[a++] = Math.round(t[s++]);
//           for (n -= 1 / 3, r = this.heightOriginal - 1; n < r; n += e)
//             for (
//               h = 1 - (u = n % 1),
//                 l =
//                   (o = Math.floor(n) * this.targetWidthMultipliedByChannels) +
//                   this.targetWidthMultipliedByChannels,
//                 s = 0;
//               s < this.targetWidthMultipliedByChannels;
//               ++s
//             )
//               i[a++] = Math.round(t[o++] * h + t[l++] * u);
//           for (; a < this.finalResultSize; )
//             for (
//               s = 0, o = r * this.targetWidthMultipliedByChannels;
//               s < this.targetWidthMultipliedByChannels;
//               ++s
//             )
//               i[a++] = Math.round(t[o++]);
//           return i;
//         }),
//         (Resize.prototype.resizeHeightRGB = function (t) {
//           return this._resizeHeightRGBChannels(t, !1);
//         }),
//         (Resize.prototype.resizeHeightRGBA = function (t) {
//           return this._resizeHeightRGBChannels(t, !0);
//         }),
//         (Resize.prototype.resize = function (t) {
//           this.resizeCallback(this.resizeHeight(this.resizeWidth(t)));
//         }),
//         (Resize.prototype.bypassResizer = function (t) {
//           return t;
//         }),
//         (Resize.prototype.initializeFirstPassBuffers = function (t) {
//           (this.widthBuffer = this.generateFloatBuffer(
//             this.widthPassResultSize
//           )),
//             t ||
//               ((this.outputWidthWorkBench = this.generateFloatBuffer(
//                 this.originalHeightMultipliedByChannels
//               )),
//               this.colorChannels > 3 &&
//                 (this.outputWidthWorkBenchOpaquePixelsCount =
//                   this.generateFloat64Buffer(this.heightOriginal)));
//         }),
//         (Resize.prototype.initializeSecondPassBuffers = function (t) {
//           (this.heightBuffer = this.generateUint8Buffer(this.finalResultSize)),
//             t ||
//               ((this.outputHeightWorkBench = this.generateFloatBuffer(
//                 this.targetWidthMultipliedByChannels
//               )),
//               this.colorChannels > 3 &&
//                 (this.outputHeightWorkBenchOpaquePixelsCount =
//                   this.generateFloat64Buffer(this.targetWidth)));
//         }),
//         (Resize.prototype.generateFloatBuffer = function (t) {
//           try {
//             return new Float32Array(t);
//           } catch (t) {
//             return console.error(t), [];
//           }
//         }),
//         (Resize.prototype.generateFloat64Buffer = function (t) {
//           try {
//             return new Float64Array(t);
//           } catch (t) {
//             return console.error(t), [];
//           }
//         }),
//         (Resize.prototype.generateUint8Buffer = function (t) {
//           try {
//             return new Uint8Array(t);
//           } catch (t) {
//             return console.error(t), [];
//           }
//         });
//       let operations = {
//           nearestNeighbor(t, e) {
//             let i = t.width,
//               r = t.height,
//               n = e.width,
//               a = e.height,
//               s = t.data,
//               o = e.data;
//             for (let t = 0; t < a; t++)
//               for (let e = 0; e < n; e++) {
//                 let l = 4 * (t * n + e),
//                   h =
//                     4 * (Math.floor((t * r) / a) * i + Math.floor((e * i) / n));
//                 (o[l++] = s[h++]),
//                   (o[l++] = s[h++]),
//                   (o[l++] = s[h++]),
//                   (o[l++] = s[h++]);
//               }
//           },
//           bilinearInterpolation(t, e) {
//             let i = t.width,
//               r = t.height,
//               n = e.width,
//               a = e.height,
//               s = t.data,
//               o = e.data,
//               l = function (t, e, i, r, n) {
//                 return e === r ? i : Math.round((t - e) * n + (r - t) * i);
//               },
//               h = function (t, e, r, n, a, h, u, f) {
//                 let c = 4 * (u * i + n) + e,
//                   d = 4 * (u * i + a) + e,
//                   p = l(r, n, s[c], a, s[d]);
//                 if (f === u) o[t + e] = p;
//                 else {
//                   (c = 4 * (f * i + n) + e), (d = 4 * (f * i + a) + e);
//                   let m = l(r, n, s[c], a, s[d]);
//                   o[t + e] = l(h, u, p, f, m);
//                 }
//               };
//             for (let t = 0; t < a; t++)
//               for (let e = 0; e < n; e++) {
//                 let s = 4 * (t * n + e),
//                   o = (e * i) / n,
//                   l = Math.floor(o),
//                   u = Math.min(Math.ceil(o), i - 1),
//                   f = (t * r) / a,
//                   c = Math.floor(f),
//                   d = Math.min(Math.ceil(f), r - 1);
//                 h(s, 0, o, l, u, f, c, d),
//                   h(s, 1, o, l, u, f, c, d),
//                   h(s, 2, o, l, u, f, c, d),
//                   h(s, 3, o, l, u, f, c, d);
//               }
//           },
//           _interpolate2D(t, e, i, r) {
//             let n = t.data,
//               a = e.data,
//               s = t.width,
//               o = t.height,
//               l = e.width,
//               h = e.height,
//               u = Math.max(1, Math.floor(s / l)),
//               f = l * u,
//               c = Math.max(1, Math.floor(o / h)),
//               d = h * c,
//               p = Buffer.alloc(f * o * 4);
//             for (let t = 0; t < o; t++)
//               for (let e = 0; e < f; e++) {
//                 let i = (e * (s - 1)) / f,
//                   a = Math.floor(i),
//                   o = i - a,
//                   l = 4 * (t * s + a),
//                   h = 4 * (t * f + e);
//                 for (let t = 0; t < 4; t++) {
//                   let e = l + t,
//                     i = a > 0 ? n[e - 4] : 2 * n[e] - n[e + 4],
//                     u = n[e],
//                     f = n[e + 4],
//                     c = a < s - 2 ? n[e + 8] : 2 * n[e + 4] - n[e];
//                   p[h + t] = r(i, u, f, c, o);
//                 }
//               }
//             let m = Buffer.alloc(f * d * 4);
//             for (let t = 0; t < d; t++)
//               for (let e = 0; e < f; e++) {
//                 let i = (t * (o - 1)) / d,
//                   n = Math.floor(i),
//                   a = i - n,
//                   s = 4 * (n * f + e),
//                   l = 4 * (t * f + e);
//                 for (let t = 0; t < 4; t++) {
//                   let e = s + t,
//                     i = n > 0 ? p[e - 4 * f] : 2 * p[e] - p[e + 4 * f],
//                     h = p[e],
//                     u = p[e + 4 * f],
//                     c = n < o - 2 ? p[e + 8 * f] : 2 * p[e + 4 * f] - p[e];
//                   m[l + t] = r(i, h, u, c, a);
//                 }
//               }
//             let g = u * c;
//             if (g > 1)
//               for (let t = 0; t < h; t++)
//                 for (let e = 0; e < l; e++) {
//                   let i = 0,
//                     r = 0,
//                     n = 0,
//                     s = 0,
//                     o = 0;
//                   for (let a = 0; a < c; a++) {
//                     let l = t * c + a;
//                     for (let t = 0; t < u; t++) {
//                       let a = 4 * (l * f + (e * u + t)),
//                         h = m[a + 3];
//                       h && ((i += m[a]), (r += m[a + 1]), (n += m[a + 2]), o++),
//                         (s += h);
//                     }
//                   }
//                   let h = 4 * (t * l + e);
//                   (a[h] = o ? Math.round(i / o) : 0),
//                     (a[h + 1] = o ? Math.round(r / o) : 0),
//                     (a[h + 2] = o ? Math.round(n / o) : 0),
//                     (a[h + 3] = Math.round(s / g));
//                 }
//             else e.data = m;
//           },
//           bicubicInterpolation(t, e, i) {
//             return this._interpolate2D(t, e, i, function (t, e, i, r, n) {
//               let a = r - i - t + e,
//                 s = t - e - a;
//               return Math.max(
//                 0,
//                 Math.min(255, n * n * n * a + n * n * s + (i - t) * n + e)
//               );
//             });
//           },
//           hermiteInterpolation(t, e, i) {
//             return this._interpolate2D(t, e, i, function (t, e, i, r, n) {
//               let a = e,
//                 s = 0.5 * (i - t),
//                 o = t - 2.5 * e + 2 * i - 0.5 * r;
//               return Math.max(
//                 0,
//                 Math.min(
//                   255,
//                   Math.round(
//                     (((0.5 * (r - t) + 1.5 * (e - i)) * n + o) * n + s) * n + a
//                   )
//                 )
//               );
//             });
//           },
//           bezierInterpolation(t, e, i) {
//             return this._interpolate2D(t, e, i, function (t, e, i, r, n) {
//               let a = 1 - n;
//               return Math.max(
//                 0,
//                 Math.min(
//                   255,
//                   Math.round(
//                     e * a * a * a +
//                       3 * (e + (i - t) / 4) * a * a * n +
//                       3 * (i - (r - e) / 4) * a * n * n +
//                       i * n * n * n
//                   )
//                 )
//               );
//             });
//           },
//         },
//         ResizeOptionsSchema = z.union([
//           z.object({
//             w: z.number().min(0),
//             h: z.number().min(0).optional(),
//             mode: z.nativeEnum(ResizeStrategy).optional(),
//           }),
//           z.object({
//             w: z.number().min(0).optional(),
//             h: z.number().min(0),
//             mode: z.nativeEnum(ResizeStrategy).optional(),
//           }),
//         ]),
//         ScaleToFitOptionsSchema = z.object({
//           w: z.number().min(0),
//           h: z.number().min(0),
//           mode: z.nativeEnum(ResizeStrategy).optional(),
//         }),
//         ScaleComplexOptionsSchema = z.object({
//           f: z.number().min(0),
//           mode: z.nativeEnum(ResizeStrategy).optional(),
//         }),
//         methods$d = {
//           resize(t, e) {
//             let i, r;
//             let { mode: n } = ResizeOptionsSchema.parse(e);
//             if ("number" == typeof e.w)
//               (i = e.w), (r = e.h ?? t.bitmap.height * (i / t.bitmap.width));
//             else {
//               if ("number" != typeof e.h) throw Error("w must be a number");
//               (r = e.h), (i = e.w ?? t.bitmap.width * (r / t.bitmap.height));
//             }
//             if (
//               ((i = Math.round(i) || 1),
//               (r = Math.round(r) || 1),
//               n && "function" == typeof operations[n])
//             ) {
//               let e = { data: Buffer.alloc(i * r * 4), width: i, height: r };
//               operations[n](t.bitmap, e), (t.bitmap = e);
//             } else
//               new Resize(t.bitmap.width, t.bitmap.height, i, r, !0, !0, (e) => {
//                 (t.bitmap.data = Buffer.from(e)),
//                   (t.bitmap.width = i),
//                   (t.bitmap.height = r);
//               }).resize(t.bitmap.data);
//             return t;
//           },
//           scale(t, e) {
//             let { f: i, mode: r } =
//                 "number" == typeof e
//                   ? { f: e }
//                   : ScaleComplexOptionsSchema.parse(e),
//               n = t.bitmap.width * i,
//               a = t.bitmap.height * i;
//             return this.resize(t, { w: n, h: a, mode: r });
//           },
//           scaleToFit(t, e) {
//             let { h: i, w: r, mode: n } = ScaleToFitOptionsSchema.parse(e),
//               a =
//                 r / i > t.bitmap.width / t.bitmap.height
//                   ? i / t.bitmap.height
//                   : r / t.bitmap.width;
//             return this.scale(t, { f: a, mode: n });
//           },
//         },
//         ContainOptionsSchema = z.object({
//           w: z.number(),
//           h: z.number(),
//           align: z.number().optional(),
//           mode: z.nativeEnum(ResizeStrategy).optional(),
//         }),
//         methods$c = {
//           contain(t, e) {
//             let {
//                 w: i,
//                 h: r,
//                 align: n = HorizontalAlign.CENTER | VerticalAlign.MIDDLE,
//                 mode: a,
//               } = ContainOptionsSchema.parse(e),
//               s = 7 & n,
//               o = n >> 3;
//             if ((0 === s || s & (s - 1)) && (0 === o || o & (o - 1)))
//               throw Error("only use one flag per alignment direction");
//             let l = s >> 1,
//               h = o >> 1,
//               u =
//                 i / r > t.bitmap.width / t.bitmap.height
//                   ? r / t.bitmap.height
//                   : i / t.bitmap.width,
//               f = methods$d.scale(clone(t), { f: u, mode: a });
//             return (
//               (t = methods$d.resize(t, { w: i, h: r, mode: a })).scan(
//                 (e, i, r) => {
//                   t.bitmap.data.writeUInt32BE(t.background, r);
//                 }
//               ),
//               (t = methods$h.blit(t, {
//                 src: f,
//                 x: ((t.bitmap.width - f.bitmap.width) / 2) * l,
//                 y: ((t.bitmap.height - f.bitmap.height) / 2) * h,
//               }))
//             );
//           },
//         },
//         CropOptionsSchema = z.object({
//           x: z.number(),
//           y: z.number(),
//           w: z.number(),
//           h: z.number(),
//         }),
//         AutocropComplexOptionsSchema = z.object({
//           tolerance: z.number().min(0).max(1).optional(),
//           cropOnlyFrames: z.boolean().optional(),
//           cropSymmetric: z.boolean().optional(),
//           leaveBorder: z.number().optional(),
//           ignoreSides: z
//             .object({
//               north: z.boolean().optional(),
//               south: z.boolean().optional(),
//               east: z.boolean().optional(),
//               west: z.boolean().optional(),
//             })
//             .optional(),
//         }),
//         methods$b = {
//           crop(t, e) {
//             let { x: i, y: r, w: n, h: a } = CropOptionsSchema.parse(e);
//             if (
//               ((i = Math.round(i)),
//               (r = Math.round(r)),
//               (n = Math.round(n)),
//               (a = Math.round(a)),
//               0 === i && n === t.bitmap.width)
//             ) {
//               let e = (n * r + i) << 2,
//                 s = e + ((a * n) << 2);
//               t.bitmap.data = t.bitmap.data.slice(e, s);
//             } else {
//               let e = Buffer.allocUnsafe(n * a * 4),
//                 s = 0;
//               scan(t, i, r, n, a, function (i, r, n) {
//                 let a = t.bitmap.data.readUInt32BE(n);
//                 e.writeUInt32BE(a, s), (s += 4);
//               }),
//                 (t.bitmap.data = e);
//             }
//             return (t.bitmap.width = n), (t.bitmap.height = a), t;
//           },
//           autocrop(t, e = {}) {
//             let {
//                 tolerance: i = 2e-4,
//                 cropOnlyFrames: r = !0,
//                 cropSymmetric: n = !1,
//                 leaveBorder: a = 0,
//                 ignoreSides: s,
//               } = "number" == typeof e
//                 ? { tolerance: e }
//                 : AutocropComplexOptionsSchema.parse(e),
//               o = t.bitmap.width,
//               l = t.bitmap.height,
//               h = { north: !1, south: !1, east: !1, west: !1, ...s },
//               u = t.getPixelColor(0, 0),
//               f = intToRGBA$1(u),
//               c = 0,
//               d = 0,
//               p = 0,
//               m = 0;
//             if (((u = t.getPixelColor(0, 0)), !h.north))
//               t: for (let e = 0; e < l - 1; e++) {
//                 for (let r = 0; r < o; r++)
//                   if (colorDiff(f, intToRGBA$1(t.getPixelColor(r, e))) > i)
//                     break t;
//                 c++;
//               }
//             if (((u = t.getPixelColor(o, 0)), !h.west))
//               t: for (let e = 0; e < o - 1; e++) {
//                 for (let r = 0 + c; r < l; r++)
//                   if (colorDiff(f, intToRGBA$1(t.getPixelColor(e, r))) > i)
//                     break t;
//                 m++;
//               }
//             if (((u = t.getPixelColor(0, l)), !h.south))
//               t: for (let e = l - 1; e >= c + 1; e--) {
//                 for (let r = o - d - 1; r >= 0; r--)
//                   if (colorDiff(f, intToRGBA$1(t.getPixelColor(r, e))) > i)
//                     break t;
//                 p++;
//               }
//             if (((u = t.getPixelColor(o, l)), !h.east))
//               t: for (let e = o - 1; e >= 0 + m + 1; e--) {
//                 for (let r = l - 1; r >= 0 + c; r--)
//                   if (colorDiff(f, intToRGBA$1(t.getPixelColor(e, r))) > i)
//                     break t;
//                 d++;
//               }
//             let g = !1;
//             if (((m -= a), (d -= a), (c -= a), (p -= a), n)) {
//               let t = Math.min(d, m),
//                 e = Math.min(c, p);
//               (m = t), (d = t), (c = e), (p = e);
//             }
//             (m = m >= 0 ? m : 0),
//               (d = d >= 0 ? d : 0),
//               (c = c >= 0 ? c : 0),
//               (p = p >= 0 ? p : 0);
//             let _ = o - (m + d),
//               b = l - (p + c);
//             return (
//               (g = r
//                 ? 0 !== d && 0 !== c && 0 !== m && 0 !== p
//                 : 0 !== d || 0 !== c || 0 !== m || 0 !== p) &&
//                 this.crop(t, { x: m, y: c, w: _, h: b }),
//               t
//             );
//           },
//         },
//         CoverOptionsSchema = z.object({
//           w: z.number(),
//           h: z.number(),
//           align: z.number().optional(),
//           mode: z.nativeEnum(ResizeStrategy).optional(),
//         }),
//         methods$a = {
//           cover(t, e) {
//             let {
//                 w: i,
//                 h: r,
//                 align: n = HorizontalAlign.CENTER | VerticalAlign.MIDDLE,
//                 mode: a,
//               } = CoverOptionsSchema.parse(e),
//               s = 7 & n,
//               o = n >> 3;
//             if ((0 === s || s & (s - 1)) && (0 === o || o & (o - 1)))
//               throw Error("only use one flag per alignment direction");
//             let l = s >> 1,
//               h = o >> 1,
//               u =
//                 i / r > t.bitmap.width / t.bitmap.height
//                   ? i / t.bitmap.width
//                   : r / t.bitmap.height;
//             return (
//               (t = methods$d.scale(t, { f: u, mode: a })),
//               (t = methods$b.crop(t, {
//                 x: ((t.bitmap.width - i) / 2) * l,
//                 y: ((t.bitmap.height - r) / 2) * h,
//                 w: i,
//                 h: r,
//               }))
//             );
//           },
//         },
//         DisplaceOptionsSchema = z.object({
//           map: JimpClassSchema,
//           offset: z.number(),
//         }),
//         methods$9 = {
//           displace(t, e) {
//             let { map: i, offset: r } = DisplaceOptionsSchema.parse(e),
//               n = clone(t);
//             return (
//               t.scan((e, a, s) => {
//                 let o = (i.bitmap.data[s] / 256) * r;
//                 o = Math.round(o);
//                 let l = t.getPixelIndex(e + o, a);
//                 (t.bitmap.data[l] = n.bitmap.data[s]),
//                   (t.bitmap.data[l + 1] = n.bitmap.data[s + 1]),
//                   (t.bitmap.data[l + 2] = n.bitmap.data[s + 2]);
//               }),
//               t
//             );
//           },
//         },
//         methods$8 = {
//           dither(t) {
//             let e = [1, 9, 3, 11, 13, 5, 15, 7, 4, 12, 2, 10, 16, 8, 14, 6];
//             return (
//               t.scan((i, r, n) => {
//                 let a = e[((3 & r) << 2) + (i % 4)];
//                 (t.bitmap.data[n] = Math.min(t.bitmap.data[n] + a, 255)),
//                   (t.bitmap.data[n + 1] = Math.min(
//                     t.bitmap.data[n + 1] + a,
//                     255
//                   )),
//                   (t.bitmap.data[n + 2] = Math.min(
//                     t.bitmap.data[n + 2] + a,
//                     255
//                   ));
//               }),
//               t
//             );
//           },
//         },
//         FisheyeOptionsSchema = z.object({
//           radius: z.number().min(0).optional(),
//         }),
//         methods$7 = {
//           fisheye(t, e = {}) {
//             let { radius: i = 2.5 } = FisheyeOptionsSchema.parse(e),
//               r = clone(t),
//               { width: n, height: a } = r.bitmap;
//             return (
//               r.scan((e, s) => {
//                 let o = e / n,
//                   l = s / a,
//                   h = Math.sqrt(Math.pow(o - 0.5, 2) + Math.pow(l - 0.5, 2)),
//                   u = 2 * Math.pow(h, i),
//                   f = Math.round((((o - 0.5) / h) * u + 0.5) * n),
//                   c = Math.round((((l - 0.5) / h) * u + 0.5) * a),
//                   d = r.getPixelColor(f, c);
//                 t.setPixelColor(d, e, s);
//               }),
//               t.setPixelColor(r.getPixelColor(n / 2, a / 2), n / 2, a / 2),
//               t
//             );
//           },
//         },
//         FlipOptionsSchema = z.object({
//           horizontal: z.boolean().optional(),
//           vertical: z.boolean().optional(),
//         }),
//         methods$6 = {
//           flip(t, e) {
//             let { horizontal: i, vertical: r } = FlipOptionsSchema.parse(e),
//               n = Buffer.alloc(t.bitmap.data.length);
//             return (
//               t.scan((e, a, s) => {
//                 let o = i ? t.bitmap.width - 1 - e : e,
//                   l = r ? t.bitmap.height - 1 - a : a,
//                   h = (t.bitmap.width * l + o) << 2,
//                   u = t.bitmap.data.readUInt32BE(s);
//                 n.writeUInt32BE(u, h);
//               }),
//               (t.bitmap.data = Buffer.from(n)),
//               t
//             );
//           },
//         };
//       function Converter$1(t, e) {
//         if (!(t && e && t.length && e.length)) throw Error("Bad alphabet");
//         (this.srcAlphabet = t), (this.dstAlphabet = e);
//       }
//       (Converter$1.prototype.convert = function (t) {
//         var e,
//           i,
//           r,
//           n = {},
//           a = this.srcAlphabet.length,
//           s = this.dstAlphabet.length,
//           o = t.length,
//           l = "string" == typeof t ? "" : [];
//         if (!this.isValid(t))
//           throw Error(
//             'Number "' +
//               t +
//               '" contains of non-alphabetic digits (' +
//               this.srcAlphabet +
//               ")"
//           );
//         if (this.srcAlphabet === this.dstAlphabet) return t;
//         for (e = 0; e < o; e++) n[e] = this.srcAlphabet.indexOf(t[e]);
//         do {
//           for (i = 0, r = 0, e = 0; e < o; e++)
//             (i = i * a + n[e]) >= s
//               ? ((n[r++] = parseInt(i / s, 10)), (i %= s))
//               : r > 0 && (n[r++] = 0);
//           (o = r), (l = this.dstAlphabet.slice(i, i + 1).concat(l));
//         } while (0 !== r);
//         return l;
//       }),
//         (Converter$1.prototype.isValid = function (t) {
//           for (var e = 0; e < t.length; ++e)
//             if (-1 === this.srcAlphabet.indexOf(t[e])) return !1;
//           return !0;
//         });
//       var converter = Converter$1,
//         Converter = converter;
//       function anyBase(t, e) {
//         var i = new Converter(t, e);
//         return function (t) {
//           return i.convert(t);
//         };
//       }
//       (anyBase.BIN = "01"),
//         (anyBase.OCT = "01234567"),
//         (anyBase.DEC = "0123456789"),
//         (anyBase.HEX = "0123456789abcdef");
//       var anyBase_1 = anyBase,
//         anyBase$1 = getDefaultExportFromCjs(anyBase_1),
//         __defProp$1 = Object.defineProperty,
//         __defNormalProp$1 = (t, e, i) =>
//           e in t
//             ? __defProp$1(t, e, {
//                 enumerable: !0,
//                 configurable: !0,
//                 writable: !0,
//                 value: i,
//               })
//             : (t[e] = i),
//         __publicField$1 = (t, e, i) =>
//           __defNormalProp$1(t, "symbol" != typeof e ? e + "" : e, i);
//       class ImagePHash {
//         constructor(t, e) {
//           __publicField$1(this, "size"),
//             __publicField$1(this, "smallerSize"),
//             (this.size = t || 32),
//             (this.smallerSize = e || 8),
//             initCoefficients(this.size);
//         }
//         distance(t, e) {
//           let i = 0;
//           for (let r = 0; r < t.length; r++) t[r] !== e[r] && i++;
//           return i / t.length;
//         }
//         getHash(t) {
//           (t = methods$d.resize(clone(t), { w: this.size, h: this.size })),
//             (t = methods$e.greyscale(t));
//           let e = [];
//           for (let i = 0; i < t.bitmap.width; i++) {
//             let r = [];
//             for (let e = 0; e < t.bitmap.height; e++)
//               r[e] = intToRGBA(t.getPixelColor(i, e)).b;
//             e[i] = r;
//           }
//           let i = applyDCT(e, this.size),
//             r = 0;
//           for (let t = 0; t < this.smallerSize; t++)
//             for (let e = 0; e < this.smallerSize; e++) r += i[t][e];
//           let n = r / (this.smallerSize * this.smallerSize),
//             a = "";
//           for (let t = 0; t < this.smallerSize; t++)
//             for (let e = 0; e < this.smallerSize; e++)
//               a += i[t][e] > n ? "1" : "0";
//           return a;
//         }
//       }
//       function intToRGBA(t) {
//         let e = 255 & t,
//           i = 255 & (t >>>= 8),
//           r = 255 & (t >>>= 8);
//         return { r: 255 & (t >>>= 8), g: r, b: i, a: e };
//       }
//       let c$1 = [];
//       function initCoefficients(t) {
//         for (let e = 1; e < t; e++) c$1[e] = 1;
//         c$1[0] = 1 / Math.sqrt(2);
//       }
//       function applyDCT(t, e) {
//         let i = e,
//           r = [];
//         for (let e = 0; e < i; e++) {
//           let n = [];
//           for (let a = 0; a < i; a++) {
//             let s = 0;
//             for (let r = 0; r < i; r++)
//               for (let n = 0; n < i; n++)
//                 s +=
//                   Math.cos(((2 * r + 1) / (2 * i)) * e * Math.PI) *
//                   Math.cos(((2 * n + 1) / (2 * i)) * a * Math.PI) *
//                   t[r][n];
//             (s *= (c$1[e] * c$1[a]) / 4), (n[a] = s), (r[e] = n);
//           }
//         }
//         return r;
//       }
//       let alphabet =
//           "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",
//         maxHashLength = [NaN, NaN];
//       for (let e = 2; e < 65; e++) {
//         let t = anyBase$1(
//           anyBase$1.BIN,
//           alphabet.slice(0, e)
//         )(Array(65).join("1"));
//         maxHashLength.push(t.length);
//       }
//       let methods$5 = {
//         pHash: (t) => new ImagePHash().getHash(t),
//         hash(t, e = 64) {
//           if (e < 2 || e > 64)
//             throw Error("base must be a number between 2 and 64");
//           let i = alphabet.slice(0, e),
//             r = this.pHash(t),
//             n = maxHashLength[e];
//           return anyBase$1(anyBase$1.BIN, i)(r).padStart(n, "0");
//         },
//         distanceFromHash(t, e) {
//           let i = new ImagePHash(),
//             r = i.getHash(t);
//           return i.distance(r, e);
//         },
//       };
//       function distance(t, e) {
//         let i = new ImagePHash(),
//           r = i.getHash(t),
//           n = i.getHash(e);
//         return i.distance(r, n);
//       }
//       function compareHashes(t, e) {
//         return new ImagePHash().distance(t, e);
//       }
//       let MaskOptionsObjectSchema = z.object({
//           src: JimpClassSchema,
//           x: z.number().optional(),
//           y: z.number().optional(),
//         }),
//         MaskOptionsSchema = z.union([JimpClassSchema, MaskOptionsObjectSchema]),
//         methods$4 = {
//           mask(t, e) {
//             let i, r, n;
//             MaskOptionsSchema.parse(e),
//               "bitmap" in e
//                 ? ((i = e), (r = 0), (n = 0))
//                 : ((i = e.src), (r = e.x ?? 0), (n = e.y ?? 0)),
//               (r = Math.round(r)),
//               (n = Math.round(n));
//             let a = t.bitmap.width,
//               s = t.bitmap.height;
//             return (
//               i.scan(function (e, o, l) {
//                 let h = r + e,
//                   u = n + o;
//                 if (h >= 0 && u >= 0 && h < a && u < s) {
//                   let e = t.getPixelIndex(h, u),
//                     { data: r } = i.bitmap,
//                     n = (r[l + 0] + r[l + 1] + r[l + 2]) / 3;
//                   t.bitmap.data[e + 3] *= n / 255;
//                 }
//               }),
//               t
//             );
//           },
//         };
//       function measureText(t, e) {
//         let i = 0;
//         for (let r = 0; r < e.length; r++) {
//           let n = e[r],
//             a = t.chars[n];
//           if (a) {
//             let s = t.kernings[n],
//               o = e[r + 1],
//               l = (s && o && s[o] && s[o]) || 0;
//             i += (a.xadvance || 0) + l;
//           }
//         }
//         return i;
//       }
//       function splitLines(t, e, i) {
//         let r = e.replace(/[\r\n]+/g, " \n").split(" "),
//           n = [],
//           a = [],
//           s = 0;
//         return (
//           r.forEach((e) => {
//             if (measureText(t, e + (r.length > 1 ? " " : "")) > i) {
//               let r = e[Symbol.iterator](),
//                 s = "";
//               for (let e of r) {
//                 let r = measureText(t, [...a, s + e].join(" "));
//                 r < i
//                   ? (s += e)
//                   : r > i
//                   ? (n.push([...a, s]), (a = []), (s = e))
//                   : (n.push([...a, s + e]), (a = []), (s = ""));
//               }
//               return;
//             }
//             let o = measureText(t, [...a, e].join(" "));
//             o <= i && !e.includes("\n")
//               ? (o > s && (s = o), a.push(e))
//               : (n.push(a), (a = [e.replace("\n", "")]));
//           }),
//           n.push(a),
//           { lines: n, longestLine: s }
//         );
//       }
//       function measureTextHeight(t, e, i) {
//         let { lines: r } = splitLines(t, e, i);
//         return r.length * t.common.lineHeight;
//       }
//       let PrintOptionsSchema = z.object({
//         x: z.number(),
//         y: z.number(),
//         text: z.union([
//           z.union([z.string(), z.number()]),
//           z.object({
//             text: z.union([z.string(), z.number()]),
//             alignmentX: z.nativeEnum(HorizontalAlign).optional(),
//             alignmentY: z.nativeEnum(VerticalAlign).optional(),
//           }),
//         ]),
//         maxWidth: z.number().optional(),
//         maxHeight: z.number().optional(),
//         cb: z
//           .function(z.tuple([z.object({ x: z.number(), y: z.number() })]))
//           .optional(),
//       });
//       function xOffsetBasedOnAlignment(t, e, i, r) {
//         return r === HorizontalAlign.LEFT
//           ? 0
//           : r === HorizontalAlign.CENTER
//           ? (i - measureText(t, e)) / 2
//           : i - measureText(t, e);
//       }
//       function drawCharacter(t, e, i, r, n) {
//         if (n.width > 0 && n.height > 0) {
//           let a = e.pages[n.page];
//           a &&
//             (t = methods$h.blit(t, {
//               src: a,
//               x: i + n.xoffset,
//               y: r + n.yoffset,
//               srcX: n.x,
//               srcY: n.y,
//               srcW: n.width,
//               srcH: n.height,
//             }));
//         }
//         return t;
//       }
//       function printText(t, e, i, r, n, a) {
//         for (let s = 0; s < n.length; s++) {
//           let o;
//           let l = n[s];
//           o = e.chars[l] ? l : /\s/.test(l) ? "" : "?";
//           let h = e.chars[o] || { xadvance: void 0 },
//             u = e.kernings[o];
//           h && drawCharacter(t, e, i, r, h);
//           let f = n[s + 1];
//           i += ((u && f && u[f] && u[f]) || 0) + (h.xadvance || a);
//         }
//       }
//       let methods$3 = {
//           print(t, { font: e, ...i }) {
//             let r,
//               n,
//               {
//                 x: a,
//                 y: s,
//                 text: o,
//                 maxWidth: l = 1 / 0,
//                 maxHeight: h = 1 / 0,
//                 cb: u = () => {},
//               } = PrintOptionsSchema.parse(i);
//             "object" == typeof o && null !== o.text && void 0 !== o.text
//               ? ((r = o.alignmentX || HorizontalAlign.LEFT),
//                 (n = o.alignmentY || VerticalAlign.TOP),
//                 ({ text: o } = o))
//               : ((r = HorizontalAlign.LEFT),
//                 (n = VerticalAlign.TOP),
//                 (o = o.toString())),
//               "number" == typeof o && (o = o.toString()),
//               h !== 1 / 0 && n === VerticalAlign.BOTTOM
//                 ? (s += h - measureTextHeight(e, o, l))
//                 : h !== 1 / 0 &&
//                   n === VerticalAlign.MIDDLE &&
//                   (s += h / 2 - measureTextHeight(e, o, l) / 2);
//             let f = Object.entries(e.chars).find((t) => t[1].xadvance)?.[1]
//               .xadvance;
//             if ("number" != typeof f)
//               throw Error("Could not find default character width");
//             let { lines: c, longestLine: d } = splitLines(e, o, l);
//             return (
//               c.forEach((i) => {
//                 let n = i.join(" "),
//                   o = xOffsetBasedOnAlignment(e, n, l, r);
//                 printText(t, e, a + o, s, n, f), (s += e.common.lineHeight);
//               }),
//               u.bind(t)({ x: a + d, y: s }),
//               t
//             );
//           },
//         },
//         RotateOptionsSchema = z.union([
//           z.number(),
//           z.object({
//             deg: z.number(),
//             mode: z
//               .union([z.boolean(), z.nativeEnum(ResizeStrategy)])
//               .optional(),
//           }),
//         ]);
//       function createIdxTranslationFunction(t) {
//         return function (e, i) {
//           return (i * t + e) << 2;
//         };
//       }
//       function matrixRotate(t, e) {
//         let i;
//         if (Math.abs(e) % 90 != 0)
//           throw Error("Unsupported matrix rotation degree");
//         let r = t.bitmap.width,
//           n = t.bitmap.height;
//         switch (e) {
//           case 90:
//           case -270:
//             i = 90;
//             break;
//           case 180:
//           case -180:
//             i = 180;
//             break;
//           case 270:
//           case -90:
//             i = -90;
//             break;
//           default:
//             throw Error("Unsupported matrix rotation degree");
//         }
//         let a = 180 === i ? r : n,
//           s = 180 === i ? n : r,
//           o = Buffer.alloc(t.bitmap.data.length),
//           l = createIdxTranslationFunction(r),
//           h = createIdxTranslationFunction(a);
//         for (let e = 0; e < r; e++)
//           for (let a = 0; a < n; a++) {
//             let s;
//             let u = l(e, a),
//               f = t.bitmap.data.readUInt32BE(u);
//             switch (i) {
//               case 90:
//                 s = h(a, r - e - 1);
//                 break;
//               case -90:
//                 s = h(n - a - 1, e);
//                 break;
//               case 180:
//                 s = h(r - e - 1, n - a - 1);
//                 break;
//               default:
//                 throw Error("Unsupported matrix rotation angle");
//             }
//             o.writeUInt32BE(f, s);
//           }
//         (t.bitmap.data = o), (t.bitmap.width = a), (t.bitmap.height = s);
//       }
//       function createTranslationFunction(t, e) {
//         return function (i, r) {
//           return { x: i + t, y: r + e };
//         };
//       }
//       function advancedRotate(t, e, i) {
//         let r = (e * Math.PI) / 180,
//           n = Math.cos(r),
//           a = Math.sin(r),
//           s = t.bitmap.width,
//           o = t.bitmap.height;
//         if (!0 === i || "string" == typeof i) {
//           (s =
//             Math.ceil(
//               Math.abs(t.bitmap.width * n) + Math.abs(t.bitmap.height * a)
//             ) + 1),
//             (o =
//               Math.ceil(
//                 Math.abs(t.bitmap.width * a) + Math.abs(t.bitmap.height * n)
//               ) + 1),
//             s % 2 != 0 && s++,
//             o % 2 != 0 && o++;
//           let e = clone(t);
//           t.scan((e, i, r) => {
//             t.bitmap.data.writeUInt32BE(t.background, r);
//           });
//           let r = Math.max(s, o, t.bitmap.width, t.bitmap.height);
//           t = composite(
//             (t = methods$d.resize(t, {
//               h: r,
//               w: r,
//               mode: !0 === i ? void 0 : i,
//             })),
//             e,
//             t.bitmap.width / 2 - e.bitmap.width / 2,
//             t.bitmap.height / 2 - e.bitmap.height / 2
//           );
//         }
//         let l = t.bitmap.width,
//           h = t.bitmap.height,
//           u = Buffer.alloc(t.bitmap.data.length),
//           f = createTranslationFunction(-l / 2, -h / 2),
//           c = createTranslationFunction(l / 2 + 0.5, h / 2 + 0.5);
//         for (let e = 1; e <= h; e++)
//           for (let i = 1; i <= l; i++) {
//             let r = f(i, e),
//               s = c(n * r.x - a * r.y, n * r.y + a * r.x),
//               o = (l * (e - 1) + i - 1) << 2;
//             if (s.x >= 0 && s.x < l && s.y >= 0 && s.y < h) {
//               let e = (l * (0 | s.y) + s.x) << 2,
//                 i = t.bitmap.data.readUInt32BE(e);
//               u.writeUInt32BE(i, o);
//             } else u.writeUInt32BE(t.background, o);
//           }
//         if (((t.bitmap.data = u), !0 === i || "string" == typeof i)) {
//           let e = Math.max(l / 2 - s / 2, 0),
//             i = Math.max(h / 2 - o / 2, 0);
//           t = methods$b.crop(t, { x: e, y: i, w: s, h: o });
//         }
//       }
//       let methods$2 = {
//           rotate(t, e) {
//             let i = RotateOptionsSchema.parse(e),
//               r = "number" == typeof i ? { deg: i } : i,
//               { mode: n = !0 } = r,
//               { deg: a } = r;
//             return (
//               (a %= 360) % 360 == 0 ||
//                 (a % 90 == 0 &&
//                 (n || t.bitmap.width === t.bitmap.height || a % 180 == 0)
//                   ? matrixRotate(t, a)
//                   : advancedRotate(t, a, n)),
//               t
//             );
//           },
//         },
//         ThresholdOptionsSchema = z.object({
//           max: z.number().min(0).max(255),
//           replace: z.number().min(0).max(255).optional(),
//           autoGreyscale: z.boolean().optional(),
//         }),
//         methods$1 = {
//           threshold(t, e) {
//             let {
//               max: i,
//               replace: r = 255,
//               autoGreyscale: n = !0,
//             } = ThresholdOptionsSchema.parse(e);
//             return (
//               (i = limit255(i)),
//               (r = limit255(r)),
//               n && methods$e.greyscale(t),
//               t.scan((e, n, a) => {
//                 let s = t.bitmap.data[a] < i ? t.bitmap.data[a] : r;
//                 (t.bitmap.data[a] = s),
//                   (t.bitmap.data[a + 1] = s),
//                   (t.bitmap.data[a + 2] = s);
//               }),
//               t
//             );
//           },
//         };
//       var __defProp = Object.defineProperty,
//         __defNormalProp = (t, e, i) =>
//           e in t
//             ? __defProp(t, e, {
//                 enumerable: !0,
//                 configurable: !0,
//                 writable: !0,
//                 value: i,
//               })
//             : (t[e] = i),
//         __export = (t, e) => {
//           for (var i in e) __defProp(t, i, { get: e[i], enumerable: !0 });
//         },
//         __publicField = (t, e, i) => (
//           __defNormalProp(t, "symbol" != typeof e ? e + "" : e, i), i
//         ),
//         constants_exports = {};
//       __export(constants_exports, { bt709: () => bt709_exports });
//       var bt709_exports = {};
//       __export(bt709_exports, { Y: () => Y, x: () => x$1, y: () => y$1 });
//       var Y =
//           ((e = Y || {}),
//           (e[(e.RED = 0.2126)] = "RED"),
//           (e[(e.GREEN = 0.7152)] = "GREEN"),
//           (e[(e.BLUE = 0.0722)] = "BLUE"),
//           (e[(e.WHITE = 1)] = "WHITE"),
//           e),
//         x$1 =
//           ((e = x$1 || {}),
//           (e[(e.RED = 0.64)] = "RED"),
//           (e[(e.GREEN = 0.3)] = "GREEN"),
//           (e[(e.BLUE = 0.15)] = "BLUE"),
//           (e[(e.WHITE = 0.3127)] = "WHITE"),
//           e),
//         y$1 =
//           ((e = y$1 || {}),
//           (e[(e.RED = 0.33)] = "RED"),
//           (e[(e.GREEN = 0.6)] = "GREEN"),
//           (e[(e.BLUE = 0.06)] = "BLUE"),
//           (e[(e.WHITE = 0.329)] = "WHITE"),
//           e),
//         conversion_exports = {};
//       function correctGamma(t) {
//         return t > 0.04045 ? ((t + 0.055) / 1.055) ** 2.4 : t / 12.92;
//       }
//       function rgb2xyz(t, e, i) {
//         return {
//           x:
//             0.4124 * (t = correctGamma(t / 255)) +
//             0.3576 * (e = correctGamma(e / 255)) +
//             0.1805 * (i = correctGamma(i / 255)),
//           y: 0.2126 * t + 0.7152 * e + 0.0722 * i,
//           z: 0.0193 * t + 0.1192 * e + 0.9505 * i,
//         };
//       }
//       __export(conversion_exports, {
//         lab2rgb: () => lab2rgb,
//         lab2xyz: () => lab2xyz,
//         rgb2hsl: () => rgb2hsl,
//         rgb2lab: () => rgb2lab,
//         rgb2xyz: () => rgb2xyz,
//         xyz2lab: () => xyz2lab,
//         xyz2rgb: () => xyz2rgb,
//       });
//       var arithmetic_exports = {};
//       function degrees2radians(t) {
//         return (Math.PI / 180) * t;
//       }
//       function max3(t, e, i) {
//         let r = t;
//         return r < e && (r = e), r < i && (r = i), r;
//       }
//       function min3(t, e, i) {
//         let r = t;
//         return r > e && (r = e), r > i && (r = i), r;
//       }
//       function intInRange(t, e, i) {
//         return t > i && (t = i), t < e && (t = e), 0 | t;
//       }
//       function inRange0to255Rounded(t) {
//         return (t = Math.round(t)) > 255 ? (t = 255) : t < 0 && (t = 0), t;
//       }
//       function inRange0to255(t) {
//         return t > 255 ? (t = 255) : t < 0 && (t = 0), t;
//       }
//       function stableSort(t, e) {
//         let i;
//         let r = typeof t[0];
//         if ("number" === r || "string" === r) {
//           let r = Object.create(null);
//           for (let e = 0, i = t.length; e < i; e++) {
//             let i = t[e];
//             r[i] || 0 === r[i] || (r[i] = e);
//           }
//           i = t.sort((t, i) => e(t, i) || r[t] - r[i]);
//         } else {
//           let r = t.slice(0);
//           i = t.sort((t, i) => e(t, i) || r.indexOf(t) - r.indexOf(i));
//         }
//         return i;
//       }
//       function rgb2hsl(t, e, i) {
//         let r = min3(t, e, i),
//           n = max3(t, e, i),
//           a = n - r,
//           s = (r + n) / 510,
//           o = 0;
//         s > 0 && s < 1 && (o = a / (s < 0.5 ? n + r : 510 - n - r));
//         let l = 0;
//         return (
//           a > 0 &&
//             (l =
//               (n === t
//                 ? (e - i) / a
//                 : n === e
//                 ? 2 + (i - t) / a
//                 : 4 + (t - e) / a) * 60) < 0 &&
//             (l += 360),
//           { h: l, s: o, l: s }
//         );
//       }
//       __export(arithmetic_exports, {
//         degrees2radians: () => degrees2radians,
//         inRange0to255: () => inRange0to255,
//         inRange0to255Rounded: () => inRange0to255Rounded,
//         intInRange: () => intInRange,
//         max3: () => max3,
//         min3: () => min3,
//         stableSort: () => stableSort,
//       });
//       var refX = 0.95047,
//         refY = 1,
//         refZ = 1.08883;
//       function pivot(t) {
//         return t > 0.008856 ? t ** (1 / 3) : 7.787 * t + 16 / 116;
//       }
//       function xyz2lab(t, e, i) {
//         if (
//           ((t = pivot(t / refX)),
//           (e = pivot(e / refY)),
//           (i = pivot(i / refZ)),
//           116 * e - 16 < 0)
//         )
//           throw Error("xxx");
//         return {
//           L: Math.max(0, 116 * e - 16),
//           a: 500 * (t - e),
//           b: 200 * (e - i),
//         };
//       }
//       function rgb2lab(t, e, i) {
//         let r = rgb2xyz(t, e, i);
//         return xyz2lab(r.x, r.y, r.z);
//       }
//       var refX2 = 0.95047,
//         refY2 = 1,
//         refZ2 = 1.08883;
//       function pivot2(t) {
//         return t > 0.206893034 ? t ** 3 : (t - 16 / 116) / 7.787;
//       }
//       function lab2xyz(t, e, i) {
//         let r = (t + 16) / 116,
//           n = r - i / 200;
//         return {
//           x: refX2 * pivot2(e / 500 + r),
//           y: refY2 * pivot2(r),
//           z: refZ2 * pivot2(n),
//         };
//       }
//       function correctGamma2(t) {
//         return t > 0.0031308 ? 1.055 * t ** (1 / 2.4) - 0.055 : 12.92 * t;
//       }
//       function xyz2rgb(t, e, i) {
//         let r = correctGamma2(3.2406 * t + -1.5372 * e + -0.4986 * i),
//           n = correctGamma2(-0.9689 * t + 1.8758 * e + 0.0415 * i),
//           a = correctGamma2(0.0557 * t + -0.204 * e + 1.057 * i);
//         return {
//           r: inRange0to255Rounded(255 * r),
//           g: inRange0to255Rounded(255 * n),
//           b: inRange0to255Rounded(255 * a),
//         };
//       }
//       function lab2rgb(t, e, i) {
//         let r = lab2xyz(t, e, i);
//         return xyz2rgb(r.x, r.y, r.z);
//       }
//       var distance_exports = {};
//       __export(distance_exports, {
//         AbstractDistanceCalculator: () => AbstractDistanceCalculator,
//         AbstractEuclidean: () => AbstractEuclidean,
//         AbstractManhattan: () => AbstractManhattan,
//         CIE94GraphicArts: () => CIE94GraphicArts,
//         CIE94Textiles: () => CIE94Textiles,
//         CIEDE2000: () => CIEDE2000,
//         CMetric: () => CMetric,
//         Euclidean: () => Euclidean,
//         EuclideanBT709: () => EuclideanBT709,
//         EuclideanBT709NoAlpha: () => EuclideanBT709NoAlpha,
//         Manhattan: () => Manhattan,
//         ManhattanBT709: () => ManhattanBT709,
//         ManhattanNommyde: () => ManhattanNommyde,
//         PNGQuant: () => PNGQuant,
//       });
//       var AbstractDistanceCalculator = class {
//           constructor() {
//             __publicField(this, "_maxDistance"),
//               __publicField(this, "_whitePoint"),
//               this._setDefaults(),
//               this.setWhitePoint(255, 255, 255, 255);
//           }
//           setWhitePoint(t, e, i, r) {
//             (this._whitePoint = {
//               r: t > 0 ? 255 / t : 0,
//               g: e > 0 ? 255 / e : 0,
//               b: i > 0 ? 255 / i : 0,
//               a: r > 0 ? 255 / r : 0,
//             }),
//               (this._maxDistance = this.calculateRaw(t, e, i, r, 0, 0, 0, 0));
//           }
//           calculateNormalized(t, e) {
//             return (
//               this.calculateRaw(t.r, t.g, t.b, t.a, e.r, e.g, e.b, e.a) /
//               this._maxDistance
//             );
//           }
//         },
//         AbstractCIE94 = class extends AbstractDistanceCalculator {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = rgb2lab(
//                 inRange0to255(t * this._whitePoint.r),
//                 inRange0to255(e * this._whitePoint.g),
//                 inRange0to255(i * this._whitePoint.b)
//               ),
//               h = rgb2lab(
//                 inRange0to255(n * this._whitePoint.r),
//                 inRange0to255(a * this._whitePoint.g),
//                 inRange0to255(s * this._whitePoint.b)
//               ),
//               u = l.L - h.L,
//               f = l.a - h.a,
//               c = l.b - h.b,
//               d = Math.sqrt(l.a * l.a + l.b * l.b),
//               p = d - Math.sqrt(h.a * h.a + h.b * h.b),
//               m = f * f + c * c - p * p;
//             m = m < 0 ? 0 : Math.sqrt(m);
//             let g = (o - r) * this._whitePoint.a * this._kA;
//             return Math.sqrt(
//               (u / this._Kl) ** 2 +
//                 (p / (1 + this._K1 * d)) ** 2 +
//                 (m / (1 + this._K2 * d)) ** 2 +
//                 g ** 2
//             );
//           }
//         },
//         CIE94Textiles = class extends AbstractCIE94 {
//           _setDefaults() {
//             (this._Kl = 2),
//               (this._K1 = 0.048),
//               (this._K2 = 0.014),
//               (this._kA = 12.5 / 255);
//           }
//         },
//         CIE94GraphicArts = class extends AbstractCIE94 {
//           _setDefaults() {
//             (this._Kl = 1),
//               (this._K1 = 0.045),
//               (this._K2 = 0.015),
//               (this._kA = 25 / 255);
//           }
//         },
//         _CIEDE2000 = class extends AbstractDistanceCalculator {
//           _setDefaults() {}
//           static _calculatehp(t, e) {
//             let i = Math.atan2(t, e);
//             return i >= 0 ? i : i + _CIEDE2000._deg360InRad;
//           }
//           static _calculateRT(t, e) {
//             let i = e ** 7,
//               r = 2 * Math.sqrt(i / (i + _CIEDE2000._pow25to7));
//             return (
//               -Math.sin(
//                 _CIEDE2000._deg30InRad *
//                   Math.exp(
//                     -(
//                       ((t - _CIEDE2000._deg275InRad) /
//                         _CIEDE2000._deg25InRad) **
//                       2
//                     )
//                   ) *
//                   2
//               ) * r
//             );
//           }
//           static _calculateT(t) {
//             return (
//               1 -
//               0.17 * Math.cos(t - _CIEDE2000._deg30InRad) +
//               0.24 * Math.cos(2 * t) +
//               0.32 * Math.cos(3 * t + _CIEDE2000._deg6InRad) -
//               0.2 * Math.cos(4 * t - _CIEDE2000._deg63InRad)
//             );
//           }
//           static _calculate_ahp(t, e, i, r) {
//             let n = i + r;
//             return 0 === t
//               ? n
//               : e <= _CIEDE2000._deg180InRad
//               ? n / 2
//               : n < _CIEDE2000._deg360InRad
//               ? (n + _CIEDE2000._deg360InRad) / 2
//               : (n - _CIEDE2000._deg360InRad) / 2;
//           }
//           static _calculate_dHp(t, e, i, r) {
//             let n;
//             return (
//               (n =
//                 0 === t
//                   ? 0
//                   : e <= _CIEDE2000._deg180InRad
//                   ? i - r
//                   : i <= r
//                   ? i - r + _CIEDE2000._deg360InRad
//                   : i - r - _CIEDE2000._deg360InRad),
//               2 * Math.sqrt(t) * Math.sin(n / 2)
//             );
//           }
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = rgb2lab(
//                 inRange0to255(t * this._whitePoint.r),
//                 inRange0to255(e * this._whitePoint.g),
//                 inRange0to255(i * this._whitePoint.b)
//               ),
//               h = rgb2lab(
//                 inRange0to255(n * this._whitePoint.r),
//                 inRange0to255(a * this._whitePoint.g),
//                 inRange0to255(s * this._whitePoint.b)
//               ),
//               u = (o - r) * this._whitePoint.a * _CIEDE2000._kA;
//             return Math.sqrt(this.calculateRawInLab(l, h) + u * u);
//           }
//           calculateRawInLab(t, e) {
//             let i = t.L,
//               r = t.a,
//               n = t.b,
//               a = e.L,
//               s = e.a,
//               o = e.b,
//               l =
//                 ((Math.sqrt(r * r + n * n) + Math.sqrt(s * s + o * o)) / 2) **
//                 7,
//               h = 0.5 * (1 - Math.sqrt(l / (l + _CIEDE2000._pow25to7))),
//               u = (1 + h) * r,
//               f = (1 + h) * s,
//               c = Math.sqrt(u * u + n * n),
//               d = Math.sqrt(f * f + o * o),
//               p = c * d,
//               m = _CIEDE2000._calculatehp(n, u),
//               g = _CIEDE2000._calculatehp(o, f),
//               _ = Math.abs(m - g),
//               b = a - i,
//               y = d - c,
//               v = _CIEDE2000._calculate_dHp(p, _, g, m),
//               w = _CIEDE2000._calculate_ahp(p, _, m, g),
//               x = (c + d) / 2,
//               E = ((i + a) / 2 - 50) ** 2,
//               k = y / (1 + 0.045 * x),
//               M = v / (1 + 0.015 * _CIEDE2000._calculateT(w) * x);
//             return (
//               (b / (1 + (0.015 * E) / Math.sqrt(20 + E))) ** 2 +
//               k ** 2 +
//               M ** 2 +
//               _CIEDE2000._calculateRT(w, x) * k * M
//             );
//           }
//         },
//         CIEDE2000 = _CIEDE2000;
//       __publicField(CIEDE2000, "_kA", 25 / 255),
//         __publicField(CIEDE2000, "_pow25to7", 6103515625),
//         __publicField(CIEDE2000, "_deg360InRad", degrees2radians(360)),
//         __publicField(CIEDE2000, "_deg180InRad", degrees2radians(180)),
//         __publicField(CIEDE2000, "_deg30InRad", degrees2radians(30)),
//         __publicField(CIEDE2000, "_deg6InRad", degrees2radians(6)),
//         __publicField(CIEDE2000, "_deg63InRad", degrees2radians(63)),
//         __publicField(CIEDE2000, "_deg275InRad", degrees2radians(275)),
//         __publicField(CIEDE2000, "_deg25InRad", degrees2radians(25));
//       var CMetric = class extends AbstractDistanceCalculator {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = ((t + n) / 2) * this._whitePoint.r,
//               h = (t - n) * this._whitePoint.r,
//               u = (e - a) * this._whitePoint.g,
//               f = (i - s) * this._whitePoint.b,
//               c =
//                 (((512 + l) * h * h) >> 8) +
//                 4 * u * u +
//                 (((767 - l) * f * f) >> 8),
//               d = (o - r) * this._whitePoint.a;
//             return Math.sqrt(c + d * d);
//           }
//           _setDefaults() {}
//         },
//         AbstractEuclidean = class extends AbstractDistanceCalculator {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = n - t,
//               h = a - e,
//               u = s - i,
//               f = o - r;
//             return Math.sqrt(
//               this._kR * l * l +
//                 this._kG * h * h +
//                 this._kB * u * u +
//                 this._kA * f * f
//             );
//           }
//         },
//         Euclidean = class extends AbstractEuclidean {
//           _setDefaults() {
//             (this._kR = 1), (this._kG = 1), (this._kB = 1), (this._kA = 1);
//           }
//         },
//         EuclideanBT709 = class extends AbstractEuclidean {
//           _setDefaults() {
//             (this._kR = 0.2126),
//               (this._kG = 0.7152),
//               (this._kB = 0.0722),
//               (this._kA = 1);
//           }
//         },
//         EuclideanBT709NoAlpha = class extends AbstractEuclidean {
//           _setDefaults() {
//             (this._kR = 0.2126),
//               (this._kG = 0.7152),
//               (this._kB = 0.0722),
//               (this._kA = 0);
//           }
//         },
//         AbstractManhattan = class extends AbstractDistanceCalculator {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = n - t,
//               h = a - e,
//               u = s - i,
//               f = o - r;
//             return (
//               l < 0 && (l = 0 - l),
//               h < 0 && (h = 0 - h),
//               u < 0 && (u = 0 - u),
//               f < 0 && (f = 0 - f),
//               this._kR * l + this._kG * h + this._kB * u + this._kA * f
//             );
//           }
//         },
//         Manhattan = class extends AbstractManhattan {
//           _setDefaults() {
//             (this._kR = 1), (this._kG = 1), (this._kB = 1), (this._kA = 1);
//           }
//         },
//         ManhattanNommyde = class extends AbstractManhattan {
//           _setDefaults() {
//             (this._kR = 0.4984),
//               (this._kG = 0.8625),
//               (this._kB = 0.2979),
//               (this._kA = 1);
//           }
//         },
//         ManhattanBT709 = class extends AbstractManhattan {
//           _setDefaults() {
//             (this._kR = 0.2126),
//               (this._kG = 0.7152),
//               (this._kB = 0.0722),
//               (this._kA = 1);
//           }
//         },
//         PNGQuant = class extends AbstractDistanceCalculator {
//           calculateRaw(t, e, i, r, n, a, s, o) {
//             let l = (o - r) * this._whitePoint.a;
//             return (
//               this._colordifferenceCh(
//                 t * this._whitePoint.r,
//                 n * this._whitePoint.r,
//                 l
//               ) +
//               this._colordifferenceCh(
//                 e * this._whitePoint.g,
//                 a * this._whitePoint.g,
//                 l
//               ) +
//               this._colordifferenceCh(
//                 i * this._whitePoint.b,
//                 s * this._whitePoint.b,
//                 l
//               )
//             );
//           }
//           _colordifferenceCh(t, e, i) {
//             let r = t - e,
//               n = r + i;
//             return r * r + n * n;
//           }
//           _setDefaults() {}
//         },
//         palette_exports = {};
//       __export(palette_exports, {
//         AbstractPaletteQuantizer: () => AbstractPaletteQuantizer,
//         ColorHistogram: () => ColorHistogram,
//         NeuQuant: () => NeuQuant,
//         NeuQuantFloat: () => NeuQuantFloat,
//         RGBQuant: () => RGBQuant,
//         WuColorCube: () => WuColorCube,
//         WuQuant: () => WuQuant,
//       });
//       var AbstractPaletteQuantizer = class {
//           quantizeSync() {
//             for (let t of this.quantize()) if (t.palette) return t.palette;
//             throw Error("unreachable");
//           }
//         },
//         Point = class {
//           constructor() {
//             __publicField(this, "r"),
//               __publicField(this, "g"),
//               __publicField(this, "b"),
//               __publicField(this, "a"),
//               __publicField(this, "uint32"),
//               __publicField(this, "rgba"),
//               (this.uint32 = 4294967295),
//               (this.r = this.g = this.b = this.a = 0),
//               (this.rgba = [, , , ,]),
//               (this.rgba[0] = 0),
//               (this.rgba[1] = 0),
//               (this.rgba[2] = 0),
//               (this.rgba[3] = 0);
//           }
//           static createByQuadruplet(t) {
//             let e = new Point();
//             return (
//               (e.r = 0 | t[0]),
//               (e.g = 0 | t[1]),
//               (e.b = 0 | t[2]),
//               (e.a = 0 | t[3]),
//               e._loadUINT32(),
//               e._loadQuadruplet(),
//               e
//             );
//           }
//           static createByRGBA(t, e, i, r) {
//             let n = new Point();
//             return (
//               (n.r = 0 | t),
//               (n.g = 0 | e),
//               (n.b = 0 | i),
//               (n.a = 0 | r),
//               n._loadUINT32(),
//               n._loadQuadruplet(),
//               n
//             );
//           }
//           static createByUint32(t) {
//             let e = new Point();
//             return (e.uint32 = t >>> 0), e._loadRGBA(), e._loadQuadruplet(), e;
//           }
//           from(t) {
//             (this.r = t.r),
//               (this.g = t.g),
//               (this.b = t.b),
//               (this.a = t.a),
//               (this.uint32 = t.uint32),
//               (this.rgba[0] = t.r),
//               (this.rgba[1] = t.g),
//               (this.rgba[2] = t.b),
//               (this.rgba[3] = t.a);
//           }
//           getLuminosity(t) {
//             let e = this.r,
//               i = this.g,
//               r = this.b;
//             return (
//               t &&
//                 ((e = Math.min(255, 255 - this.a + (this.a * e) / 255)),
//                 (i = Math.min(255, 255 - this.a + (this.a * i) / 255)),
//                 (r = Math.min(255, 255 - this.a + (this.a * r) / 255))),
//               0.2126 * e + 0.7152 * i + 0.0722 * r
//             );
//           }
//           _loadUINT32() {
//             this.uint32 =
//               ((this.a << 24) | (this.b << 16) | (this.g << 8) | this.r) >>> 0;
//           }
//           _loadRGBA() {
//             (this.r = 255 & this.uint32),
//               (this.g = (this.uint32 >>> 8) & 255),
//               (this.b = (this.uint32 >>> 16) & 255),
//               (this.a = (this.uint32 >>> 24) & 255);
//           }
//           _loadQuadruplet() {
//             (this.rgba[0] = this.r),
//               (this.rgba[1] = this.g),
//               (this.rgba[2] = this.b),
//               (this.rgba[3] = this.a);
//           }
//         },
//         PointContainer = class {
//           constructor() {
//             __publicField(this, "_pointArray"),
//               __publicField(this, "_width"),
//               __publicField(this, "_height"),
//               (this._width = 0),
//               (this._height = 0),
//               (this._pointArray = []);
//           }
//           getWidth() {
//             return this._width;
//           }
//           getHeight() {
//             return this._height;
//           }
//           setWidth(t) {
//             this._width = t;
//           }
//           setHeight(t) {
//             this._height = t;
//           }
//           getPointArray() {
//             return this._pointArray;
//           }
//           clone() {
//             let t = new PointContainer();
//             (t._width = this._width), (t._height = this._height);
//             for (let e = 0, i = this._pointArray.length; e < i; e++)
//               t._pointArray[e] = Point.createByUint32(
//                 0 | this._pointArray[e].uint32
//               );
//             return t;
//           }
//           toUint32Array() {
//             let t = this._pointArray.length,
//               e = new Uint32Array(t);
//             for (let i = 0; i < t; i++) e[i] = this._pointArray[i].uint32;
//             return e;
//           }
//           toUint8Array() {
//             return new Uint8Array(this.toUint32Array().buffer);
//           }
//           static fromHTMLImageElement(t) {
//             let e = t.naturalWidth,
//               i = t.naturalHeight,
//               r = document.createElement("canvas");
//             return (
//               (r.width = e),
//               (r.height = i),
//               r.getContext("2d").drawImage(t, 0, 0, e, i, 0, 0, e, i),
//               PointContainer.fromHTMLCanvasElement(r)
//             );
//           }
//           static fromHTMLCanvasElement(t) {
//             let e = t.width,
//               i = t.height,
//               r = t.getContext("2d").getImageData(0, 0, e, i);
//             return PointContainer.fromImageData(r);
//           }
//           static fromImageData(t) {
//             let e = t.width,
//               i = t.height;
//             return PointContainer.fromUint8Array(t.data, e, i);
//           }
//           static fromUint8Array(t, e, i) {
//             switch (Object.prototype.toString.call(t)) {
//               case "[object Uint8ClampedArray]":
//               case "[object Uint8Array]":
//                 break;
//               default:
//                 t = new Uint8Array(t);
//             }
//             let r = new Uint32Array(t.buffer);
//             return PointContainer.fromUint32Array(r, e, i);
//           }
//           static fromUint32Array(t, e, i) {
//             let r = new PointContainer();
//             (r._width = e), (r._height = i);
//             for (let e = 0, i = t.length; e < i; e++)
//               r._pointArray[e] = Point.createByUint32(0 | t[e]);
//             return r;
//           }
//           static fromBuffer(t, e, i) {
//             let r = new Uint32Array(
//               t.buffer,
//               t.byteOffset,
//               t.byteLength / Uint32Array.BYTES_PER_ELEMENT
//             );
//             return PointContainer.fromUint32Array(r, e, i);
//           }
//         },
//         hueGroups = 10;
//       function hueGroup(t, e) {
//         let i = 360 / e;
//         for (let r = 1, n = i - i / 2; r < e; r++, n += i)
//           if (t >= n && t < n + i) return r;
//         return 0;
//       }
//       var Palette = class {
//           constructor() {
//             __publicField(this, "_pointContainer"),
//               __publicField(this, "_pointArray", []),
//               __publicField(this, "_i32idx", {}),
//               (this._pointContainer = new PointContainer()),
//               this._pointContainer.setHeight(1),
//               (this._pointArray = this._pointContainer.getPointArray());
//           }
//           add(t) {
//             this._pointArray.push(t),
//               this._pointContainer.setWidth(this._pointArray.length);
//           }
//           has(t) {
//             for (let e = this._pointArray.length - 1; e >= 0; e--)
//               if (t.uint32 === this._pointArray[e].uint32) return !0;
//             return !1;
//           }
//           getNearestColor(t, e) {
//             return this._pointArray[0 | this._getNearestIndex(t, e)];
//           }
//           getPointContainer() {
//             return this._pointContainer;
//           }
//           _nearestPointFromCache(t) {
//             return "number" == typeof this._i32idx[t] ? this._i32idx[t] : -1;
//           }
//           _getNearestIndex(t, e) {
//             let i = this._nearestPointFromCache("" + e.uint32);
//             if (i >= 0) return i;
//             let r = Number.MAX_VALUE;
//             i = 0;
//             for (let n = 0, a = this._pointArray.length; n < a; n++) {
//               let a = this._pointArray[n],
//                 s = t.calculateRaw(e.r, e.g, e.b, e.a, a.r, a.g, a.b, a.a);
//               s < r && ((r = s), (i = n));
//             }
//             return (this._i32idx[e.uint32] = i), i;
//           }
//           sort() {
//             (this._i32idx = {}),
//               this._pointArray.sort((t, e) => {
//                 let i = rgb2hsl(t.r, t.g, t.b),
//                   r = rgb2hsl(e.r, e.g, e.b),
//                   n =
//                     t.r === t.g && t.g === t.b
//                       ? 0
//                       : 1 + hueGroup(i.h, hueGroups),
//                   a =
//                     (e.r === e.g && e.g === e.b
//                       ? 0
//                       : 1 + hueGroup(r.h, hueGroups)) - n;
//                 if (a) return -a;
//                 let s = t.getLuminosity(!0),
//                   o = e.getLuminosity(!0);
//                 if (o - s != 0) return o - s;
//                 let l = ((100 * r.s) | 0) - ((100 * i.s) | 0);
//                 return l ? -l : 0;
//               });
//           }
//         },
//         utils_exports = {};
//       __export(utils_exports, {
//         HueStatistics: () => HueStatistics,
//         Palette: () => Palette,
//         Point: () => Point,
//         PointContainer: () => PointContainer,
//         ProgressTracker: () => ProgressTracker,
//         arithmetic: () => arithmetic_exports,
//       });
//       var HueGroup = class {
//           constructor() {
//             __publicField(this, "num", 0), __publicField(this, "cols", []);
//           }
//         },
//         HueStatistics = class {
//           constructor(t, e) {
//             __publicField(this, "_numGroups"),
//               __publicField(this, "_minCols"),
//               __publicField(this, "_stats"),
//               __publicField(this, "_groupsFull"),
//               (this._numGroups = t),
//               (this._minCols = e),
//               (this._stats = []);
//             for (let e = 0; e <= t; e++) this._stats[e] = new HueGroup();
//             this._groupsFull = 0;
//           }
//           check(t) {
//             this._groupsFull === this._numGroups + 1 && (this.check = () => {});
//             let e = 255 & t,
//               i = (t >>> 8) & 255,
//               r = (t >>> 16) & 255,
//               n =
//                 e === i && i === r
//                   ? 0
//                   : 1 + hueGroup(rgb2hsl(e, i, r).h, this._numGroups),
//               a = this._stats[n],
//               s = this._minCols;
//             a.num++,
//               a.num > s ||
//                 (a.num === s && this._groupsFull++,
//                 a.num <= s && this._stats[n].cols.push(t));
//           }
//           injectIntoDictionary(t) {
//             for (let e = 0; e <= this._numGroups; e++)
//               this._stats[e].num <= this._minCols &&
//                 this._stats[e].cols.forEach((e) => {
//                   t[e] ? t[e]++ : (t[e] = 1);
//                 });
//           }
//           injectIntoArray(t) {
//             for (let e = 0; e <= this._numGroups; e++)
//               this._stats[e].num <= this._minCols &&
//                 this._stats[e].cols.forEach((e) => {
//                   -1 === t.indexOf(e) && t.push(e);
//                 });
//           }
//         },
//         _ProgressTracker = class {
//           constructor(t, e) {
//             __publicField(this, "progress"),
//               __publicField(this, "_step"),
//               __publicField(this, "_range"),
//               __publicField(this, "_last"),
//               __publicField(this, "_progressRange"),
//               (this._range = t),
//               (this._progressRange = e),
//               (this._step = Math.max(
//                 1,
//                 (this._range / (_ProgressTracker.steps + 1)) | 0
//               )),
//               (this._last = -this._step),
//               (this.progress = 0);
//           }
//           shouldNotify(t) {
//             return (
//               t - this._last >= this._step &&
//               ((this._last = t),
//               (this.progress = Math.min(
//                 (this._progressRange * this._last) / this._range,
//                 this._progressRange
//               )),
//               !0)
//             );
//           }
//         },
//         ProgressTracker = _ProgressTracker;
//       __publicField(ProgressTracker, "steps", 100);
//       var networkBiasShift = 3,
//         Neuron = class {
//           constructor(t) {
//             __publicField(this, "r"),
//               __publicField(this, "g"),
//               __publicField(this, "b"),
//               __publicField(this, "a"),
//               (this.r = this.g = this.b = this.a = t);
//           }
//           toPoint() {
//             return Point.createByRGBA(
//               this.r >> networkBiasShift,
//               this.g >> networkBiasShift,
//               this.b >> networkBiasShift,
//               this.a >> networkBiasShift
//             );
//           }
//           subtract(t, e, i, r) {
//             (this.r -= 0 | t),
//               (this.g -= 0 | e),
//               (this.b -= 0 | i),
//               (this.a -= 0 | r);
//           }
//         },
//         _NeuQuant = class extends AbstractPaletteQuantizer {
//           constructor(t, e = 256) {
//             super(),
//               __publicField(this, "_pointArray"),
//               __publicField(this, "_networkSize"),
//               __publicField(this, "_network"),
//               __publicField(this, "_sampleFactor"),
//               __publicField(this, "_radPower"),
//               __publicField(this, "_freq"),
//               __publicField(this, "_bias"),
//               __publicField(this, "_distance"),
//               (this._distance = t),
//               (this._pointArray = []),
//               (this._sampleFactor = 1),
//               (this._networkSize = e),
//               this._distance.setWhitePoint(
//                 255 << networkBiasShift,
//                 255 << networkBiasShift,
//                 255 << networkBiasShift,
//                 255 << networkBiasShift
//               );
//           }
//           sample(t) {
//             this._pointArray = this._pointArray.concat(t.getPointArray());
//           }
//           *quantize() {
//             this._init(),
//               yield* this._learn(),
//               yield { palette: this._buildPalette(), progress: 100 };
//           }
//           _init() {
//             (this._freq = []),
//               (this._bias = []),
//               (this._radPower = []),
//               (this._network = []);
//             for (let t = 0; t < this._networkSize; t++)
//               (this._network[t] = new Neuron(
//                 ((t << (networkBiasShift + 8)) / this._networkSize) | 0
//               )),
//                 (this._freq[t] =
//                   (_NeuQuant._initialBias / this._networkSize) | 0),
//                 (this._bias[t] = 0);
//           }
//           *_learn() {
//             let t = this._sampleFactor,
//               e = this._pointArray.length;
//             e < _NeuQuant._minpicturebytes && (t = 1);
//             let i = (30 + (t - 1) / 3) | 0,
//               r = (e / t) | 0,
//               n,
//               a = (r / _NeuQuant._nCycles) | 0,
//               s = _NeuQuant._initAlpha,
//               o = (this._networkSize >> 3) * _NeuQuant._radiusBias,
//               l = o >> _NeuQuant._radiusBiasShift;
//             l <= 1 && (l = 0);
//             for (let t = 0; t < l; t++)
//               this._radPower[t] =
//                 ((((l * l - t * t) * _NeuQuant._radBias) / (l * l)) * s) >>> 0;
//             n =
//               e < _NeuQuant._minpicturebytes
//                 ? 1
//                 : e % _NeuQuant._prime1 != 0
//                 ? _NeuQuant._prime1
//                 : e % _NeuQuant._prime2 != 0
//                 ? _NeuQuant._prime2
//                 : e % _NeuQuant._prime3 != 0
//                 ? _NeuQuant._prime3
//                 : _NeuQuant._prime4;
//             let h = new ProgressTracker(r, 99);
//             for (let t = 0, u = 0; t < r; ) {
//               h.shouldNotify(t) && (yield { progress: h.progress });
//               let r = this._pointArray[u],
//                 f = r.b << networkBiasShift,
//                 c = r.g << networkBiasShift,
//                 d = r.r << networkBiasShift,
//                 p = r.a << networkBiasShift,
//                 m = this._contest(f, c, d, p);
//               if (
//                 (this._alterSingle(s, m, f, c, d, p),
//                 0 !== l && this._alterNeighbour(l, m, f, c, d, p),
//                 (u += n) >= e && (u -= e),
//                 0 === a && (a = 1),
//                 ++t % a == 0)
//               ) {
//                 (s -= (s / i) | 0),
//                   (o -= (o / _NeuQuant._radiusDecrease) | 0),
//                   (l = o >> _NeuQuant._radiusBiasShift),
//                   l <= 1 && (l = 0);
//                 for (let t = 0; t < l; t++)
//                   this._radPower[t] =
//                     ((((l * l - t * t) * _NeuQuant._radBias) / (l * l)) * s) >>>
//                     0;
//               }
//             }
//           }
//           _buildPalette() {
//             let t = new Palette();
//             return (
//               this._network.forEach((e) => {
//                 t.add(e.toPoint());
//               }),
//               t.sort(),
//               t
//             );
//           }
//           _alterNeighbour(t, e, i, r, n, a) {
//             let s = e - t;
//             s < -1 && (s = -1);
//             let o = e + t;
//             o > this._networkSize && (o = this._networkSize);
//             let l = e + 1,
//               h = e - 1,
//               u = 1;
//             for (; l < o || h > s; ) {
//               let t = this._radPower[u++] / _NeuQuant._alphaRadBias;
//               if (l < o) {
//                 let e = this._network[l++];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//               if (h > s) {
//                 let e = this._network[h--];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//             }
//           }
//           _alterSingle(t, e, i, r, n, a) {
//             t /= _NeuQuant._initAlpha;
//             let s = this._network[e];
//             s.subtract(
//               t * (s.r - n),
//               t * (s.g - r),
//               t * (s.b - i),
//               t * (s.a - a)
//             );
//           }
//           _contest(t, e, i, r) {
//             let n = 1020 << networkBiasShift,
//               a = 2147483647,
//               s = 2147483647,
//               o = -1,
//               l = -1;
//             for (let h = 0; h < this._networkSize; h++) {
//               let u = this._network[h],
//                 f =
//                   (this._distance.calculateNormalized(u, {
//                     r: i,
//                     g: e,
//                     b: t,
//                     a: r,
//                   }) *
//                     n) |
//                   0;
//               f < a && ((a = f), (o = h));
//               let c =
//                 f -
//                 (this._bias[h] >>
//                   (_NeuQuant._initialBiasShift - networkBiasShift));
//               c < s && ((s = c), (l = h));
//               let d = this._freq[h] >> _NeuQuant._betaShift;
//               (this._freq[h] -= d),
//                 (this._bias[h] += d << _NeuQuant._gammaShift);
//             }
//             return (
//               (this._freq[o] += _NeuQuant._beta),
//               (this._bias[o] -= _NeuQuant._betaGamma),
//               l
//             );
//           }
//         },
//         NeuQuant = _NeuQuant;
//       __publicField(NeuQuant, "_prime1", 499),
//         __publicField(NeuQuant, "_prime2", 491),
//         __publicField(NeuQuant, "_prime3", 487),
//         __publicField(NeuQuant, "_prime4", 503),
//         __publicField(NeuQuant, "_minpicturebytes", _NeuQuant._prime4),
//         __publicField(NeuQuant, "_nCycles", 100),
//         __publicField(NeuQuant, "_initialBiasShift", 16),
//         __publicField(
//           NeuQuant,
//           "_initialBias",
//           1 << _NeuQuant._initialBiasShift
//         ),
//         __publicField(NeuQuant, "_gammaShift", 10),
//         __publicField(NeuQuant, "_betaShift", 10),
//         __publicField(
//           NeuQuant,
//           "_beta",
//           _NeuQuant._initialBias >> _NeuQuant._betaShift
//         ),
//         __publicField(
//           NeuQuant,
//           "_betaGamma",
//           _NeuQuant._initialBias <<
//             (_NeuQuant._gammaShift - _NeuQuant._betaShift)
//         ),
//         __publicField(NeuQuant, "_radiusBiasShift", 6),
//         __publicField(NeuQuant, "_radiusBias", 1 << _NeuQuant._radiusBiasShift),
//         __publicField(NeuQuant, "_radiusDecrease", 30),
//         __publicField(NeuQuant, "_alphaBiasShift", 10),
//         __publicField(NeuQuant, "_initAlpha", 1 << _NeuQuant._alphaBiasShift),
//         __publicField(NeuQuant, "_radBiasShift", 8),
//         __publicField(NeuQuant, "_radBias", 1 << _NeuQuant._radBiasShift),
//         __publicField(
//           NeuQuant,
//           "_alphaRadBiasShift",
//           _NeuQuant._alphaBiasShift + _NeuQuant._radBiasShift
//         ),
//         __publicField(
//           NeuQuant,
//           "_alphaRadBias",
//           1 << _NeuQuant._alphaRadBiasShift
//         );
//       var networkBiasShift2 = 3,
//         NeuronFloat = class {
//           constructor(t) {
//             __publicField(this, "r"),
//               __publicField(this, "g"),
//               __publicField(this, "b"),
//               __publicField(this, "a"),
//               (this.r = this.g = this.b = this.a = t);
//           }
//           toPoint() {
//             return Point.createByRGBA(
//               this.r >> networkBiasShift2,
//               this.g >> networkBiasShift2,
//               this.b >> networkBiasShift2,
//               this.a >> networkBiasShift2
//             );
//           }
//           subtract(t, e, i, r) {
//             (this.r -= t), (this.g -= e), (this.b -= i), (this.a -= r);
//           }
//         },
//         _NeuQuantFloat = class extends AbstractPaletteQuantizer {
//           constructor(t, e = 256) {
//             super(),
//               __publicField(this, "_pointArray"),
//               __publicField(this, "_networkSize"),
//               __publicField(this, "_network"),
//               __publicField(this, "_sampleFactor"),
//               __publicField(this, "_radPower"),
//               __publicField(this, "_freq"),
//               __publicField(this, "_bias"),
//               __publicField(this, "_distance"),
//               (this._distance = t),
//               (this._pointArray = []),
//               (this._sampleFactor = 1),
//               (this._networkSize = e),
//               this._distance.setWhitePoint(
//                 255 << networkBiasShift2,
//                 255 << networkBiasShift2,
//                 255 << networkBiasShift2,
//                 255 << networkBiasShift2
//               );
//           }
//           sample(t) {
//             this._pointArray = this._pointArray.concat(t.getPointArray());
//           }
//           *quantize() {
//             this._init(),
//               yield* this._learn(),
//               yield { palette: this._buildPalette(), progress: 100 };
//           }
//           _init() {
//             (this._freq = []),
//               (this._bias = []),
//               (this._radPower = []),
//               (this._network = []);
//             for (let t = 0; t < this._networkSize; t++)
//               (this._network[t] = new NeuronFloat(
//                 (t << (networkBiasShift2 + 8)) / this._networkSize
//               )),
//                 (this._freq[t] =
//                   _NeuQuantFloat._initialBias / this._networkSize),
//                 (this._bias[t] = 0);
//           }
//           *_learn() {
//             let t = this._sampleFactor,
//               e = this._pointArray.length;
//             e < _NeuQuantFloat._minpicturebytes && (t = 1);
//             let i = 30 + (t - 1) / 3,
//               r = e / t,
//               n,
//               a = (r / _NeuQuantFloat._nCycles) | 0,
//               s = _NeuQuantFloat._initAlpha,
//               o = (this._networkSize >> 3) * _NeuQuantFloat._radiusBias,
//               l = o >> _NeuQuantFloat._radiusBiasShift;
//             l <= 1 && (l = 0);
//             for (let t = 0; t < l; t++)
//               this._radPower[t] =
//                 (((l * l - t * t) * _NeuQuantFloat._radBias) / (l * l)) * s;
//             n =
//               e < _NeuQuantFloat._minpicturebytes
//                 ? 1
//                 : e % _NeuQuantFloat._prime1 != 0
//                 ? _NeuQuantFloat._prime1
//                 : e % _NeuQuantFloat._prime2 != 0
//                 ? _NeuQuantFloat._prime2
//                 : e % _NeuQuantFloat._prime3 != 0
//                 ? _NeuQuantFloat._prime3
//                 : _NeuQuantFloat._prime4;
//             let h = new ProgressTracker(r, 99);
//             for (let t = 0, u = 0; t < r; ) {
//               h.shouldNotify(t) && (yield { progress: h.progress });
//               let r = this._pointArray[u],
//                 f = r.b << networkBiasShift2,
//                 c = r.g << networkBiasShift2,
//                 d = r.r << networkBiasShift2,
//                 p = r.a << networkBiasShift2,
//                 m = this._contest(f, c, d, p);
//               if (
//                 (this._alterSingle(s, m, f, c, d, p),
//                 0 !== l && this._alterNeighbour(l, m, f, c, d, p),
//                 (u += n) >= e && (u -= e),
//                 0 === a && (a = 1),
//                 ++t % a == 0)
//               ) {
//                 (s -= s / i),
//                   (o -= o / _NeuQuantFloat._radiusDecrease),
//                   (l = o >> _NeuQuantFloat._radiusBiasShift),
//                   l <= 1 && (l = 0);
//                 for (let t = 0; t < l; t++)
//                   this._radPower[t] =
//                     (((l * l - t * t) * _NeuQuantFloat._radBias) / (l * l)) * s;
//               }
//             }
//           }
//           _buildPalette() {
//             let t = new Palette();
//             return (
//               this._network.forEach((e) => {
//                 t.add(e.toPoint());
//               }),
//               t.sort(),
//               t
//             );
//           }
//           _alterNeighbour(t, e, i, r, n, a) {
//             let s = e - t;
//             s < -1 && (s = -1);
//             let o = e + t;
//             o > this._networkSize && (o = this._networkSize);
//             let l = e + 1,
//               h = e - 1,
//               u = 1;
//             for (; l < o || h > s; ) {
//               let t = this._radPower[u++] / _NeuQuantFloat._alphaRadBias;
//               if (l < o) {
//                 let e = this._network[l++];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//               if (h > s) {
//                 let e = this._network[h--];
//                 e.subtract(
//                   t * (e.r - n),
//                   t * (e.g - r),
//                   t * (e.b - i),
//                   t * (e.a - a)
//                 );
//               }
//             }
//           }
//           _alterSingle(t, e, i, r, n, a) {
//             t /= _NeuQuantFloat._initAlpha;
//             let s = this._network[e];
//             s.subtract(
//               t * (s.r - n),
//               t * (s.g - r),
//               t * (s.b - i),
//               t * (s.a - a)
//             );
//           }
//           _contest(t, e, i, r) {
//             let n = 1020 << networkBiasShift2,
//               a = 2147483647,
//               s = 2147483647,
//               o = -1,
//               l = -1;
//             for (let h = 0; h < this._networkSize; h++) {
//               let u = this._network[h],
//                 f =
//                   this._distance.calculateNormalized(u, {
//                     r: i,
//                     g: e,
//                     b: t,
//                     a: r,
//                   }) * n;
//               f < a && ((a = f), (o = h));
//               let c =
//                 f -
//                 (this._bias[h] >>
//                   (_NeuQuantFloat._initialBiasShift - networkBiasShift2));
//               c < s && ((s = c), (l = h));
//               let d = this._freq[h] >> _NeuQuantFloat._betaShift;
//               (this._freq[h] -= d),
//                 (this._bias[h] += d << _NeuQuantFloat._gammaShift);
//             }
//             return (
//               (this._freq[o] += _NeuQuantFloat._beta),
//               (this._bias[o] -= _NeuQuantFloat._betaGamma),
//               l
//             );
//           }
//         },
//         NeuQuantFloat = _NeuQuantFloat;
//       __publicField(NeuQuantFloat, "_prime1", 499),
//         __publicField(NeuQuantFloat, "_prime2", 491),
//         __publicField(NeuQuantFloat, "_prime3", 487),
//         __publicField(NeuQuantFloat, "_prime4", 503),
//         __publicField(
//           NeuQuantFloat,
//           "_minpicturebytes",
//           _NeuQuantFloat._prime4
//         ),
//         __publicField(NeuQuantFloat, "_nCycles", 100),
//         __publicField(NeuQuantFloat, "_initialBiasShift", 16),
//         __publicField(
//           NeuQuantFloat,
//           "_initialBias",
//           1 << _NeuQuantFloat._initialBiasShift
//         ),
//         __publicField(NeuQuantFloat, "_gammaShift", 10),
//         __publicField(NeuQuantFloat, "_betaShift", 10),
//         __publicField(
//           NeuQuantFloat,
//           "_beta",
//           _NeuQuantFloat._initialBias >> _NeuQuantFloat._betaShift
//         ),
//         __publicField(
//           NeuQuantFloat,
//           "_betaGamma",
//           _NeuQuantFloat._initialBias <<
//             (_NeuQuantFloat._gammaShift - _NeuQuantFloat._betaShift)
//         ),
//         __publicField(NeuQuantFloat, "_radiusBiasShift", 6),
//         __publicField(
//           NeuQuantFloat,
//           "_radiusBias",
//           1 << _NeuQuantFloat._radiusBiasShift
//         ),
//         __publicField(NeuQuantFloat, "_radiusDecrease", 30),
//         __publicField(NeuQuantFloat, "_alphaBiasShift", 10),
//         __publicField(
//           NeuQuantFloat,
//           "_initAlpha",
//           1 << _NeuQuantFloat._alphaBiasShift
//         ),
//         __publicField(NeuQuantFloat, "_radBiasShift", 8),
//         __publicField(
//           NeuQuantFloat,
//           "_radBias",
//           1 << _NeuQuantFloat._radBiasShift
//         ),
//         __publicField(
//           NeuQuantFloat,
//           "_alphaRadBiasShift",
//           _NeuQuantFloat._alphaBiasShift + _NeuQuantFloat._radBiasShift
//         ),
//         __publicField(
//           NeuQuantFloat,
//           "_alphaRadBias",
//           1 << _NeuQuantFloat._alphaRadBiasShift
//         );
//       var _ColorHistogram = class {
//           constructor(t, e) {
//             __publicField(this, "_method"),
//               __publicField(this, "_hueStats"),
//               __publicField(this, "_histogram"),
//               __publicField(this, "_initColors"),
//               __publicField(this, "_minHueCols"),
//               (this._method = t),
//               (this._minHueCols = e << 2),
//               (this._initColors = e << 2),
//               (this._hueStats = new HueStatistics(
//                 _ColorHistogram._hueGroups,
//                 this._minHueCols
//               )),
//               (this._histogram = Object.create(null));
//           }
//           sample(t) {
//             switch (this._method) {
//               case 1:
//                 this._colorStats1D(t);
//                 break;
//               case 2:
//                 this._colorStats2D(t);
//             }
//           }
//           getImportanceSortedColorsIDXI32() {
//             let t;
//             let e = stableSort(
//               Object.keys(this._histogram),
//               (t, e) => this._histogram[e] - this._histogram[t]
//             );
//             if (0 === e.length) return [];
//             switch (this._method) {
//               case 1:
//                 let i = Math.min(e.length, this._initColors),
//                   r = e[i - 1],
//                   n = this._histogram[r];
//                 t = e.slice(0, i);
//                 let a = i,
//                   s = e.length;
//                 for (; a < s && this._histogram[e[a]] === n; ) t.push(e[a++]);
//                 this._hueStats.injectIntoArray(t);
//                 break;
//               case 2:
//                 t = e;
//                 break;
//               default:
//                 throw Error("Incorrect method");
//             }
//             return t.map((t) => +t);
//           }
//           _colorStats1D(t) {
//             let e = this._histogram,
//               i = t.getPointArray(),
//               r = i.length;
//             for (let t = 0; t < r; t++) {
//               let r = i[t].uint32;
//               this._hueStats.check(r), r in e ? e[r]++ : (e[r] = 1);
//             }
//           }
//           _colorStats2D(t) {
//             let e = t.getWidth(),
//               i = t.getHeight(),
//               r = t.getPointArray(),
//               n = _ColorHistogram._boxSize[0],
//               a = _ColorHistogram._boxSize[1],
//               s = n * a,
//               o = this._makeBoxes(e, i, n, a),
//               l = this._histogram;
//             o.forEach((t) => {
//               let i = Math.round((t.w * t.h) / s) * _ColorHistogram._boxPixels;
//               i < 2 && (i = 2);
//               let n = {};
//               this._iterateBox(t, e, (t) => {
//                 let e = r[t].uint32;
//                 this._hueStats.check(e),
//                   e in l
//                     ? l[e]++
//                     : e in n
//                     ? ++n[e] >= i && (l[e] = n[e])
//                     : (n[e] = 1);
//               });
//             }),
//               this._hueStats.injectIntoDictionary(l);
//           }
//           _iterateBox(t, e, i) {
//             let r = t,
//               n = r.y * e + r.x,
//               a = (r.y + r.h - 1) * e + (r.x + r.w - 1),
//               s = e - r.w + 1,
//               o = 0,
//               l = n;
//             do i.call(this, l), (l += ++o % r.w == 0 ? s : 1);
//             while (l <= a);
//           }
//           _makeBoxes(t, e, i, r) {
//             let n = t % i,
//               a = e % r,
//               s = t - n,
//               o = e - a,
//               l = [];
//             for (let h = 0; h < e; h += r)
//               for (let e = 0; e < t; e += i)
//                 l.push({ x: e, y: h, w: e === s ? n : i, h: h === o ? a : r });
//             return l;
//           }
//         },
//         ColorHistogram = _ColorHistogram;
//       __publicField(ColorHistogram, "_boxSize", [64, 64]),
//         __publicField(ColorHistogram, "_boxPixels", 2),
//         __publicField(ColorHistogram, "_hueGroups", 10);
//       var RemovedColor = class {
//           constructor(t, e, i) {
//             __publicField(this, "index"),
//               __publicField(this, "color"),
//               __publicField(this, "distance"),
//               (this.index = t),
//               (this.color = e),
//               (this.distance = i);
//           }
//         },
//         RGBQuant = class extends AbstractPaletteQuantizer {
//           constructor(t, e = 256, i = 2) {
//             super(),
//               __publicField(this, "_colors"),
//               __publicField(this, "_initialDistance"),
//               __publicField(this, "_distanceIncrement"),
//               __publicField(this, "_histogram"),
//               __publicField(this, "_distance"),
//               (this._distance = t),
//               (this._colors = e),
//               (this._histogram = new ColorHistogram(i, e)),
//               (this._initialDistance = 0.01),
//               (this._distanceIncrement = 0.005);
//           }
//           sample(t) {
//             this._histogram.sample(t);
//           }
//           *quantize() {
//             let t = this._histogram.getImportanceSortedColorsIDXI32();
//             if (0 === t.length) throw Error("No colors in image");
//             yield* this._buildPalette(t);
//           }
//           *_buildPalette(t) {
//             let e = new Palette(),
//               i = e.getPointContainer().getPointArray(),
//               r = Array(t.length);
//             for (let e = 0; e < t.length; e++)
//               i.push(Point.createByUint32(t[e])), (r[e] = 1);
//             let n = i.length,
//               a = [],
//               s = n,
//               o = this._initialDistance,
//               l = new ProgressTracker(s - this._colors, 99);
//             for (; s > this._colors; ) {
//               a.length = 0;
//               for (let t = 0; t < n; t++) {
//                 if (
//                   (l.shouldNotify(n - s) && (yield { progress: l.progress }),
//                   0 === r[t])
//                 )
//                   continue;
//                 let e = i[t];
//                 for (let l = t + 1; l < n; l++) {
//                   if (0 === r[l]) continue;
//                   let t = i[l],
//                     n = this._distance.calculateNormalized(e, t);
//                   n < o && (a.push(new RemovedColor(l, t, n)), (r[l] = 0), s--);
//                 }
//               }
//               o +=
//                 s > 3 * this._colors
//                   ? this._initialDistance
//                   : this._distanceIncrement;
//             }
//             if (s < this._colors) {
//               stableSort(a, (t, e) => e.distance - t.distance);
//               let t = 0;
//               for (; s < this._colors && t < a.length; )
//                 (r[a[t].index] = 1), s++, t++;
//             }
//             let h = i.length;
//             for (let t = h - 1; t >= 0; t--)
//               0 === r[t] && (t !== h - 1 && (i[t] = i[h - 1]), --h);
//             (i.length = h), e.sort(), yield { palette: e, progress: 100 };
//           }
//         };
//       function createArray1D(t) {
//         let e = [];
//         for (let i = 0; i < t; i++) e[i] = 0;
//         return e;
//       }
//       function createArray4D(t, e, i, r) {
//         let n = Array(t);
//         for (let a = 0; a < t; a++) {
//           n[a] = Array(e);
//           for (let t = 0; t < e; t++) {
//             n[a][t] = Array(i);
//             for (let e = 0; e < i; e++) {
//               n[a][t][e] = Array(r);
//               for (let i = 0; i < r; i++) n[a][t][e][i] = 0;
//             }
//           }
//         }
//         return n;
//       }
//       function createArray3D(t, e, i) {
//         let r = Array(t);
//         for (let n = 0; n < t; n++) {
//           r[n] = Array(e);
//           for (let t = 0; t < e; t++) {
//             r[n][t] = Array(i);
//             for (let e = 0; e < i; e++) r[n][t][e] = 0;
//           }
//         }
//         return r;
//       }
//       function fillArray3D(t, e, i, r, n) {
//         for (let a = 0; a < e; a++) {
//           t[a] = [];
//           for (let e = 0; e < i; e++) {
//             t[a][e] = [];
//             for (let i = 0; i < r; i++) t[a][e][i] = n;
//           }
//         }
//       }
//       function fillArray1D(t, e, i) {
//         for (let r = 0; r < e; r++) t[r] = i;
//       }
//       var WuColorCube = class {
//           constructor() {
//             __publicField(this, "redMinimum"),
//               __publicField(this, "redMaximum"),
//               __publicField(this, "greenMinimum"),
//               __publicField(this, "greenMaximum"),
//               __publicField(this, "blueMinimum"),
//               __publicField(this, "blueMaximum"),
//               __publicField(this, "volume"),
//               __publicField(this, "alphaMinimum"),
//               __publicField(this, "alphaMaximum");
//           }
//         },
//         _WuQuant = class extends AbstractPaletteQuantizer {
//           constructor(t, e = 256, i = 5) {
//             super(),
//               __publicField(this, "_reds"),
//               __publicField(this, "_greens"),
//               __publicField(this, "_blues"),
//               __publicField(this, "_alphas"),
//               __publicField(this, "_sums"),
//               __publicField(this, "_weights"),
//               __publicField(this, "_momentsRed"),
//               __publicField(this, "_momentsGreen"),
//               __publicField(this, "_momentsBlue"),
//               __publicField(this, "_momentsAlpha"),
//               __publicField(this, "_moments"),
//               __publicField(this, "_table"),
//               __publicField(this, "_pixels"),
//               __publicField(this, "_cubes"),
//               __publicField(this, "_colors"),
//               __publicField(this, "_significantBitsPerChannel"),
//               __publicField(this, "_maxSideIndex"),
//               __publicField(this, "_alphaMaxSideIndex"),
//               __publicField(this, "_sideSize"),
//               __publicField(this, "_alphaSideSize"),
//               __publicField(this, "_distance"),
//               (this._distance = t),
//               this._setQuality(i),
//               this._initialize(e);
//           }
//           sample(t) {
//             let e = t.getPointArray();
//             for (let t = 0, i = e.length; t < i; t++) this._addColor(e[t]);
//             this._pixels = this._pixels.concat(e);
//           }
//           *quantize() {
//             yield* this._preparePalette();
//             let t = new Palette();
//             for (let e = 0; e < this._colors; e++)
//               if (this._sums[e] > 0) {
//                 let i = this._sums[e],
//                   r = this._reds[e] / i,
//                   n = this._greens[e] / i,
//                   a = this._blues[e] / i,
//                   s = this._alphas[e] / i,
//                   o = Point.createByRGBA(0 | r, 0 | n, 0 | a, 0 | s);
//                 t.add(o);
//               }
//             t.sort(), yield { palette: t, progress: 100 };
//           }
//           *_preparePalette() {
//             yield* this._calculateMoments();
//             let t = 0,
//               e = createArray1D(this._colors);
//             for (let i = 1; i < this._colors; ++i) {
//               this._cut(this._cubes[t], this._cubes[i])
//                 ? ((e[t] =
//                     this._cubes[t].volume > 1
//                       ? this._calculateVariance(this._cubes[t])
//                       : 0),
//                   (e[i] =
//                     this._cubes[i].volume > 1
//                       ? this._calculateVariance(this._cubes[i])
//                       : 0))
//                 : ((e[t] = 0), i--),
//                 (t = 0);
//               let r = e[0];
//               for (let n = 1; n <= i; ++n) e[n] > r && ((r = e[n]), (t = n));
//               if (r <= 0) {
//                 this._colors = i + 1;
//                 break;
//               }
//             }
//             let i = [],
//               r = [],
//               n = [],
//               a = [];
//             for (let t = 0; t < this._colors; ++t) {
//               let e = _WuQuant._volume(this._cubes[t], this._weights);
//               e > 0
//                 ? ((i[t] =
//                     (_WuQuant._volume(this._cubes[t], this._momentsRed) / e) |
//                     0),
//                   (r[t] =
//                     (_WuQuant._volume(this._cubes[t], this._momentsGreen) / e) |
//                     0),
//                   (n[t] =
//                     (_WuQuant._volume(this._cubes[t], this._momentsBlue) / e) |
//                     0),
//                   (a[t] =
//                     (_WuQuant._volume(this._cubes[t], this._momentsAlpha) / e) |
//                     0))
//                 : ((i[t] = 0), (r[t] = 0), (n[t] = 0), (a[t] = 0));
//             }
//             (this._reds = createArray1D(this._colors + 1)),
//               (this._greens = createArray1D(this._colors + 1)),
//               (this._blues = createArray1D(this._colors + 1)),
//               (this._alphas = createArray1D(this._colors + 1)),
//               (this._sums = createArray1D(this._colors + 1));
//             for (let t = 0, e = this._pixels.length; t < e; t++) {
//               let e = this._pixels[t],
//                 s = -1,
//                 o = Number.MAX_VALUE;
//               for (let t = 0; t < this._colors; t++) {
//                 let l = i[t],
//                   h = r[t],
//                   u = n[t],
//                   f = a[t],
//                   c = this._distance.calculateRaw(
//                     l,
//                     h,
//                     u,
//                     f,
//                     e.r,
//                     e.g,
//                     e.b,
//                     e.a
//                   );
//                 c < o && ((o = c), (s = t));
//               }
//               (this._reds[s] += e.r),
//                 (this._greens[s] += e.g),
//                 (this._blues[s] += e.b),
//                 (this._alphas[s] += e.a),
//                 this._sums[s]++;
//             }
//           }
//           _addColor(t) {
//             let e = 8 - this._significantBitsPerChannel,
//               i = 1 + (t.r >> e),
//               r = 1 + (t.g >> e),
//               n = 1 + (t.b >> e),
//               a = 1 + (t.a >> e);
//             this._weights[a][i][r][n]++,
//               (this._momentsRed[a][i][r][n] += t.r),
//               (this._momentsGreen[a][i][r][n] += t.g),
//               (this._momentsBlue[a][i][r][n] += t.b),
//               (this._momentsAlpha[a][i][r][n] += t.a),
//               (this._moments[a][i][r][n] +=
//                 this._table[t.r] +
//                 this._table[t.g] +
//                 this._table[t.b] +
//                 this._table[t.a]);
//           }
//           *_calculateMoments() {
//             let t = [],
//               e = [],
//               i = [],
//               r = [],
//               n = [],
//               a = [],
//               s = createArray3D(this._sideSize, this._sideSize, this._sideSize),
//               o = createArray3D(this._sideSize, this._sideSize, this._sideSize),
//               l = createArray3D(this._sideSize, this._sideSize, this._sideSize),
//               h = createArray3D(this._sideSize, this._sideSize, this._sideSize),
//               u = createArray3D(this._sideSize, this._sideSize, this._sideSize),
//               f = createArray3D(this._sideSize, this._sideSize, this._sideSize),
//               c = 0,
//               d = new ProgressTracker(
//                 this._alphaMaxSideIndex * this._maxSideIndex,
//                 99
//               );
//             for (let p = 1; p <= this._alphaMaxSideIndex; ++p) {
//               fillArray3D(s, this._sideSize, this._sideSize, this._sideSize, 0),
//                 fillArray3D(
//                   o,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D(
//                   l,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D(
//                   h,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D(
//                   u,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 ),
//                 fillArray3D(
//                   f,
//                   this._sideSize,
//                   this._sideSize,
//                   this._sideSize,
//                   0
//                 );
//               for (let m = 1; m <= this._maxSideIndex; ++m, ++c) {
//                 d.shouldNotify(c) && (yield { progress: d.progress }),
//                   fillArray1D(t, this._sideSize, 0),
//                   fillArray1D(e, this._sideSize, 0),
//                   fillArray1D(i, this._sideSize, 0),
//                   fillArray1D(r, this._sideSize, 0),
//                   fillArray1D(n, this._sideSize, 0),
//                   fillArray1D(a, this._sideSize, 0);
//                 for (let c = 1; c <= this._maxSideIndex; ++c) {
//                   let d = 0,
//                     g = 0,
//                     _ = 0,
//                     b = 0,
//                     y = 0,
//                     v = 0;
//                   for (let w = 1; w <= this._maxSideIndex; ++w)
//                     (d += this._weights[p][m][c][w]),
//                       (g += this._momentsRed[p][m][c][w]),
//                       (_ += this._momentsGreen[p][m][c][w]),
//                       (b += this._momentsBlue[p][m][c][w]),
//                       (y += this._momentsAlpha[p][m][c][w]),
//                       (v += this._moments[p][m][c][w]),
//                       (t[w] += d),
//                       (e[w] += g),
//                       (i[w] += _),
//                       (r[w] += b),
//                       (n[w] += y),
//                       (a[w] += v),
//                       (s[m][c][w] = s[m - 1][c][w] + t[w]),
//                       (o[m][c][w] = o[m - 1][c][w] + e[w]),
//                       (l[m][c][w] = l[m - 1][c][w] + i[w]),
//                       (h[m][c][w] = h[m - 1][c][w] + r[w]),
//                       (u[m][c][w] = u[m - 1][c][w] + n[w]),
//                       (f[m][c][w] = f[m - 1][c][w] + a[w]),
//                       (this._weights[p][m][c][w] =
//                         this._weights[p - 1][m][c][w] + s[m][c][w]),
//                       (this._momentsRed[p][m][c][w] =
//                         this._momentsRed[p - 1][m][c][w] + o[m][c][w]),
//                       (this._momentsGreen[p][m][c][w] =
//                         this._momentsGreen[p - 1][m][c][w] + l[m][c][w]),
//                       (this._momentsBlue[p][m][c][w] =
//                         this._momentsBlue[p - 1][m][c][w] + h[m][c][w]),
//                       (this._momentsAlpha[p][m][c][w] =
//                         this._momentsAlpha[p - 1][m][c][w] + u[m][c][w]),
//                       (this._moments[p][m][c][w] =
//                         this._moments[p - 1][m][c][w] + f[m][c][w]);
//                 }
//               }
//             }
//           }
//           static _volumeFloat(t, e) {
//             return (
//               e[t.alphaMaximum][t.redMaximum][t.greenMaximum][t.blueMaximum] -
//               e[t.alphaMaximum][t.redMaximum][t.greenMinimum][t.blueMaximum] -
//               e[t.alphaMaximum][t.redMinimum][t.greenMaximum][t.blueMaximum] +
//               e[t.alphaMaximum][t.redMinimum][t.greenMinimum][t.blueMaximum] -
//               e[t.alphaMinimum][t.redMaximum][t.greenMaximum][t.blueMaximum] +
//               e[t.alphaMinimum][t.redMaximum][t.greenMinimum][t.blueMaximum] +
//               e[t.alphaMinimum][t.redMinimum][t.greenMaximum][t.blueMaximum] -
//               e[t.alphaMinimum][t.redMinimum][t.greenMinimum][t.blueMaximum] -
//               (e[t.alphaMaximum][t.redMaximum][t.greenMaximum][t.blueMinimum] -
//                 e[t.alphaMinimum][t.redMaximum][t.greenMaximum][t.blueMinimum] -
//                 e[t.alphaMaximum][t.redMaximum][t.greenMinimum][t.blueMinimum] +
//                 e[t.alphaMinimum][t.redMaximum][t.greenMinimum][t.blueMinimum] -
//                 e[t.alphaMaximum][t.redMinimum][t.greenMaximum][t.blueMinimum] +
//                 e[t.alphaMinimum][t.redMinimum][t.greenMaximum][t.blueMinimum] +
//                 e[t.alphaMaximum][t.redMinimum][t.greenMinimum][t.blueMinimum] -
//                 e[t.alphaMinimum][t.redMinimum][t.greenMinimum][t.blueMinimum])
//             );
//           }
//           static _volume(t, e) {
//             return 0 | _WuQuant._volumeFloat(t, e);
//           }
//           static _top(t, e, i, r) {
//             let n;
//             switch (e) {
//               case _WuQuant._alpha:
//                 n =
//                   r[i][t.redMaximum][t.greenMaximum][t.blueMaximum] -
//                   r[i][t.redMaximum][t.greenMinimum][t.blueMaximum] -
//                   r[i][t.redMinimum][t.greenMaximum][t.blueMaximum] +
//                   r[i][t.redMinimum][t.greenMinimum][t.blueMaximum] -
//                   (r[i][t.redMaximum][t.greenMaximum][t.blueMinimum] -
//                     r[i][t.redMaximum][t.greenMinimum][t.blueMinimum] -
//                     r[i][t.redMinimum][t.greenMaximum][t.blueMinimum] +
//                     r[i][t.redMinimum][t.greenMinimum][t.blueMinimum]);
//                 break;
//               case _WuQuant._red:
//                 n =
//                   r[t.alphaMaximum][i][t.greenMaximum][t.blueMaximum] -
//                   r[t.alphaMaximum][i][t.greenMinimum][t.blueMaximum] -
//                   r[t.alphaMinimum][i][t.greenMaximum][t.blueMaximum] +
//                   r[t.alphaMinimum][i][t.greenMinimum][t.blueMaximum] -
//                   (r[t.alphaMaximum][i][t.greenMaximum][t.blueMinimum] -
//                     r[t.alphaMaximum][i][t.greenMinimum][t.blueMinimum] -
//                     r[t.alphaMinimum][i][t.greenMaximum][t.blueMinimum] +
//                     r[t.alphaMinimum][i][t.greenMinimum][t.blueMinimum]);
//                 break;
//               case _WuQuant._green:
//                 n =
//                   r[t.alphaMaximum][t.redMaximum][i][t.blueMaximum] -
//                   r[t.alphaMaximum][t.redMinimum][i][t.blueMaximum] -
//                   r[t.alphaMinimum][t.redMaximum][i][t.blueMaximum] +
//                   r[t.alphaMinimum][t.redMinimum][i][t.blueMaximum] -
//                   (r[t.alphaMaximum][t.redMaximum][i][t.blueMinimum] -
//                     r[t.alphaMaximum][t.redMinimum][i][t.blueMinimum] -
//                     r[t.alphaMinimum][t.redMaximum][i][t.blueMinimum] +
//                     r[t.alphaMinimum][t.redMinimum][i][t.blueMinimum]);
//                 break;
//               case _WuQuant._blue:
//                 n =
//                   r[t.alphaMaximum][t.redMaximum][t.greenMaximum][i] -
//                   r[t.alphaMaximum][t.redMaximum][t.greenMinimum][i] -
//                   r[t.alphaMaximum][t.redMinimum][t.greenMaximum][i] +
//                   r[t.alphaMaximum][t.redMinimum][t.greenMinimum][i] -
//                   (r[t.alphaMinimum][t.redMaximum][t.greenMaximum][i] -
//                     r[t.alphaMinimum][t.redMaximum][t.greenMinimum][i] -
//                     r[t.alphaMinimum][t.redMinimum][t.greenMaximum][i] +
//                     r[t.alphaMinimum][t.redMinimum][t.greenMinimum][i]);
//                 break;
//               default:
//                 throw Error("impossible");
//             }
//             return 0 | n;
//           }
//           static _bottom(t, e, i) {
//             switch (e) {
//               case _WuQuant._alpha:
//                 return (
//                   -i[t.alphaMinimum][t.redMaximum][t.greenMaximum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                     t.blueMaximum
//                   ] -
//                   i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   (-i[t.alphaMinimum][t.redMaximum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               case _WuQuant._red:
//                 return (
//                   -i[t.alphaMaximum][t.redMinimum][t.greenMaximum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                     t.blueMaximum
//                   ] -
//                   i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   (-i[t.alphaMaximum][t.redMinimum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               case _WuQuant._green:
//                 return (
//                   -i[t.alphaMaximum][t.redMaximum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] +
//                   i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                     t.blueMaximum
//                   ] -
//                   (-i[t.alphaMaximum][t.redMaximum][t.greenMinimum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               case _WuQuant._blue:
//                 return (
//                   -i[t.alphaMaximum][t.redMaximum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                   i[t.alphaMaximum][t.redMaximum][t.greenMinimum][
//                     t.blueMinimum
//                   ] +
//                   i[t.alphaMaximum][t.redMinimum][t.greenMaximum][
//                     t.blueMinimum
//                   ] -
//                   i[t.alphaMaximum][t.redMinimum][t.greenMinimum][
//                     t.blueMinimum
//                   ] -
//                   (-i[t.alphaMinimum][t.redMaximum][t.greenMaximum][
//                     t.blueMinimum
//                   ] +
//                     i[t.alphaMinimum][t.redMaximum][t.greenMinimum][
//                       t.blueMinimum
//                     ] +
//                     i[t.alphaMinimum][t.redMinimum][t.greenMaximum][
//                       t.blueMinimum
//                     ] -
//                     i[t.alphaMinimum][t.redMinimum][t.greenMinimum][
//                       t.blueMinimum
//                     ])
//                 );
//               default:
//                 return 0;
//             }
//           }
//           _calculateVariance(t) {
//             let e = _WuQuant._volume(t, this._momentsRed),
//               i = _WuQuant._volume(t, this._momentsGreen),
//               r = _WuQuant._volume(t, this._momentsBlue),
//               n = _WuQuant._volume(t, this._momentsAlpha);
//             return (
//               _WuQuant._volumeFloat(t, this._moments) -
//               (e * e + i * i + r * r + n * n) /
//                 _WuQuant._volume(t, this._weights)
//             );
//           }
//           _maximize(t, e, i, r, n, a, s, o, l) {
//             let h = 0 | _WuQuant._bottom(t, e, this._momentsRed),
//               u = 0 | _WuQuant._bottom(t, e, this._momentsGreen),
//               f = 0 | _WuQuant._bottom(t, e, this._momentsBlue),
//               c = 0 | _WuQuant._bottom(t, e, this._momentsAlpha),
//               d = 0 | _WuQuant._bottom(t, e, this._weights),
//               p = 0,
//               m = -1;
//             for (let g = i; g < r; ++g) {
//               let i = h + _WuQuant._top(t, e, g, this._momentsRed),
//                 r = u + _WuQuant._top(t, e, g, this._momentsGreen),
//                 _ = f + _WuQuant._top(t, e, g, this._momentsBlue),
//                 b = c + _WuQuant._top(t, e, g, this._momentsAlpha),
//                 y = d + _WuQuant._top(t, e, g, this._weights);
//               if (0 !== y) {
//                 let t = i * i + r * r + _ * _ + b * b,
//                   e = t / y;
//                 (i = n - i),
//                   (r = a - r),
//                   (_ = s - _),
//                   (b = o - b),
//                   0 != (y = l - y) &&
//                     (e += (t = i * i + r * r + _ * _ + b * b) / y) > p &&
//                     ((p = e), (m = g));
//               }
//             }
//             return { max: p, position: m };
//           }
//           _cut(t, e) {
//             let i;
//             let r = _WuQuant._volume(t, this._momentsRed),
//               n = _WuQuant._volume(t, this._momentsGreen),
//               a = _WuQuant._volume(t, this._momentsBlue),
//               s = _WuQuant._volume(t, this._momentsAlpha),
//               o = _WuQuant._volume(t, this._weights),
//               l = this._maximize(
//                 t,
//                 _WuQuant._red,
//                 t.redMinimum + 1,
//                 t.redMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               ),
//               h = this._maximize(
//                 t,
//                 _WuQuant._green,
//                 t.greenMinimum + 1,
//                 t.greenMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               ),
//               u = this._maximize(
//                 t,
//                 _WuQuant._blue,
//                 t.blueMinimum + 1,
//                 t.blueMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               ),
//               f = this._maximize(
//                 t,
//                 _WuQuant._alpha,
//                 t.alphaMinimum + 1,
//                 t.alphaMaximum,
//                 r,
//                 n,
//                 a,
//                 s,
//                 o
//               );
//             if (f.max >= l.max && f.max >= h.max && f.max >= u.max) {
//               if (((i = _WuQuant._alpha), f.position < 0)) return !1;
//             } else
//               i =
//                 l.max >= f.max && l.max >= h.max && l.max >= u.max
//                   ? _WuQuant._red
//                   : h.max >= f.max && h.max >= l.max && h.max >= u.max
//                   ? _WuQuant._green
//                   : _WuQuant._blue;
//             switch (
//               ((e.redMaximum = t.redMaximum),
//               (e.greenMaximum = t.greenMaximum),
//               (e.blueMaximum = t.blueMaximum),
//               (e.alphaMaximum = t.alphaMaximum),
//               i)
//             ) {
//               case _WuQuant._red:
//                 (e.redMinimum = t.redMaximum = l.position),
//                   (e.greenMinimum = t.greenMinimum),
//                   (e.blueMinimum = t.blueMinimum),
//                   (e.alphaMinimum = t.alphaMinimum);
//                 break;
//               case _WuQuant._green:
//                 (e.greenMinimum = t.greenMaximum = h.position),
//                   (e.redMinimum = t.redMinimum),
//                   (e.blueMinimum = t.blueMinimum),
//                   (e.alphaMinimum = t.alphaMinimum);
//                 break;
//               case _WuQuant._blue:
//                 (e.blueMinimum = t.blueMaximum = u.position),
//                   (e.redMinimum = t.redMinimum),
//                   (e.greenMinimum = t.greenMinimum),
//                   (e.alphaMinimum = t.alphaMinimum);
//                 break;
//               case _WuQuant._alpha:
//                 (e.alphaMinimum = t.alphaMaximum = f.position),
//                   (e.blueMinimum = t.blueMinimum),
//                   (e.redMinimum = t.redMinimum),
//                   (e.greenMinimum = t.greenMinimum);
//             }
//             return (
//               (t.volume =
//                 (t.redMaximum - t.redMinimum) *
//                 (t.greenMaximum - t.greenMinimum) *
//                 (t.blueMaximum - t.blueMinimum) *
//                 (t.alphaMaximum - t.alphaMinimum)),
//               (e.volume =
//                 (e.redMaximum - e.redMinimum) *
//                 (e.greenMaximum - e.greenMinimum) *
//                 (e.blueMaximum - e.blueMinimum) *
//                 (e.alphaMaximum - e.alphaMinimum)),
//               !0
//             );
//           }
//           _initialize(t) {
//             (this._colors = t), (this._cubes = []);
//             for (let e = 0; e < t; e++) this._cubes[e] = new WuColorCube();
//             (this._cubes[0].redMinimum = 0),
//               (this._cubes[0].greenMinimum = 0),
//               (this._cubes[0].blueMinimum = 0),
//               (this._cubes[0].alphaMinimum = 0),
//               (this._cubes[0].redMaximum = this._maxSideIndex),
//               (this._cubes[0].greenMaximum = this._maxSideIndex),
//               (this._cubes[0].blueMaximum = this._maxSideIndex),
//               (this._cubes[0].alphaMaximum = this._alphaMaxSideIndex),
//               (this._weights = createArray4D(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsRed = createArray4D(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsGreen = createArray4D(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsBlue = createArray4D(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._momentsAlpha = createArray4D(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._moments = createArray4D(
//                 this._alphaSideSize,
//                 this._sideSize,
//                 this._sideSize,
//                 this._sideSize
//               )),
//               (this._table = []);
//             for (let t = 0; t < 256; ++t) this._table[t] = t * t;
//             this._pixels = [];
//           }
//           _setQuality(t = 5) {
//             (this._significantBitsPerChannel = t),
//               (this._maxSideIndex = 1 << this._significantBitsPerChannel),
//               (this._alphaMaxSideIndex = this._maxSideIndex),
//               (this._sideSize = this._maxSideIndex + 1),
//               (this._alphaSideSize = this._alphaMaxSideIndex + 1);
//           }
//         },
//         WuQuant = _WuQuant;
//       __publicField(WuQuant, "_alpha", 3),
//         __publicField(WuQuant, "_red", 2),
//         __publicField(WuQuant, "_green", 1),
//         __publicField(WuQuant, "_blue", 0);
//       var image_exports = {};
//       __export(image_exports, {
//         AbstractImageQuantizer: () => AbstractImageQuantizer,
//         ErrorDiffusionArray: () => ErrorDiffusionArray,
//         ErrorDiffusionArrayKernel: () => ErrorDiffusionArrayKernel,
//         ErrorDiffusionRiemersma: () => ErrorDiffusionRiemersma,
//         NearestColor: () => NearestColor,
//       });
//       var AbstractImageQuantizer = class {
//           quantizeSync(t, e) {
//             for (let i of this.quantize(t, e))
//               if (i.pointContainer) return i.pointContainer;
//             throw Error("unreachable");
//           }
//         },
//         NearestColor = class extends AbstractImageQuantizer {
//           constructor(t) {
//             super(), __publicField(this, "_distance"), (this._distance = t);
//           }
//           *quantize(t, e) {
//             let i = t.getPointArray(),
//               r = t.getWidth(),
//               n = t.getHeight(),
//               a = new ProgressTracker(n, 99);
//             for (let t = 0; t < n; t++) {
//               a.shouldNotify(t) && (yield { progress: a.progress });
//               for (let n = 0, a = t * r; n < r; n++, a++) {
//                 let t = i[a];
//                 t.from(e.getNearestColor(this._distance, t));
//               }
//             }
//             yield { pointContainer: t, progress: 100 };
//           }
//         },
//         ErrorDiffusionArrayKernel =
//           ((e = ErrorDiffusionArrayKernel || {}),
//           (e[(e.FloydSteinberg = 0)] = "FloydSteinberg"),
//           (e[(e.FalseFloydSteinberg = 1)] = "FalseFloydSteinberg"),
//           (e[(e.Stucki = 2)] = "Stucki"),
//           (e[(e.Atkinson = 3)] = "Atkinson"),
//           (e[(e.Jarvis = 4)] = "Jarvis"),
//           (e[(e.Burkes = 5)] = "Burkes"),
//           (e[(e.Sierra = 6)] = "Sierra"),
//           (e[(e.TwoSierra = 7)] = "TwoSierra"),
//           (e[(e.SierraLite = 8)] = "SierraLite"),
//           e),
//         ErrorDiffusionArray = class extends AbstractImageQuantizer {
//           constructor(t, e, i = !0, r = 0, n = !1) {
//             super(),
//               __publicField(this, "_minColorDistance"),
//               __publicField(this, "_serpentine"),
//               __publicField(this, "_kernel"),
//               __publicField(this, "_calculateErrorLikeGIMP"),
//               __publicField(this, "_distance"),
//               this._setKernel(e),
//               (this._distance = t),
//               (this._minColorDistance = r),
//               (this._serpentine = i),
//               (this._calculateErrorLikeGIMP = n);
//           }
//           *quantize(t, e) {
//             let i = t.getPointArray(),
//               r = new Point(),
//               n = t.getWidth(),
//               a = t.getHeight(),
//               s = [],
//               o = 1,
//               l = 1;
//             for (let t of this._kernel) {
//               let e = t[2] + 1;
//               l < e && (l = e);
//             }
//             for (let t = 0; t < l; t++) this._fillErrorLine((s[t] = []), n);
//             let h = new ProgressTracker(a, 99);
//             for (let t = 0; t < a; t++) {
//               h.shouldNotify(t) && (yield { progress: h.progress }),
//                 this._serpentine && (o *= -1);
//               let l = t * n,
//                 u = 1 === o ? 0 : n - 1,
//                 f = 1 === o ? n : -1;
//               this._fillErrorLine(s[0], n), s.push(s.shift());
//               let c = s[0];
//               for (let h = u, d = l + u; h !== f; h += o, d += o) {
//                 let l, u, f, p;
//                 let m = i[d],
//                   g = c[h];
//                 r.from(m);
//                 let _ = Point.createByRGBA(
//                     inRange0to255Rounded(m.r + g[0]),
//                     inRange0to255Rounded(m.g + g[1]),
//                     inRange0to255Rounded(m.b + g[2]),
//                     inRange0to255Rounded(m.a + g[3])
//                   ),
//                   b = e.getNearestColor(this._distance, _);
//                 if (
//                   (m.from(b),
//                   this._minColorDistance &&
//                     this._distance.calculateNormalized(r, b) <
//                       this._minColorDistance)
//                 )
//                   continue;
//                 this._calculateErrorLikeGIMP
//                   ? ((l = _.r - b.r),
//                     (u = _.g - b.g),
//                     (f = _.b - b.b),
//                     (p = _.a - b.a))
//                   : ((l = r.r - b.r),
//                     (u = r.g - b.g),
//                     (f = r.b - b.b),
//                     (p = r.a - b.a));
//                 let y = 1 === o ? 0 : this._kernel.length - 1,
//                   v = 1 === o ? this._kernel.length : -1;
//                 for (let e = y; e !== v; e += o) {
//                   let i = this._kernel[e][1] * o,
//                     r = this._kernel[e][2];
//                   if (i + h >= 0 && i + h < n && r + t >= 0 && r + t < a) {
//                     let t = this._kernel[e][0],
//                       n = s[r][i + h];
//                     (n[0] += l * t),
//                       (n[1] += u * t),
//                       (n[2] += f * t),
//                       (n[3] += p * t);
//                   }
//                 }
//               }
//             }
//             yield { pointContainer: t, progress: 100 };
//           }
//           _fillErrorLine(t, e) {
//             t.length > e && (t.length = e);
//             let i = t.length;
//             for (let e = 0; e < i; e++) {
//               let i = t[e];
//               i[0] = i[1] = i[2] = i[3] = 0;
//             }
//             for (let r = i; r < e; r++) t[r] = [0, 0, 0, 0];
//           }
//           _setKernel(t) {
//             switch (t) {
//               case 0:
//                 this._kernel = [
//                   [7 / 16, 1, 0],
//                   [3 / 16, -1, 1],
//                   [5 / 16, 0, 1],
//                   [1 / 16, 1, 1],
//                 ];
//                 break;
//               case 1:
//                 this._kernel = [
//                   [3 / 8, 1, 0],
//                   [3 / 8, 0, 1],
//                   [2 / 8, 1, 1],
//                 ];
//                 break;
//               case 2:
//                 this._kernel = [
//                   [8 / 42, 1, 0],
//                   [4 / 42, 2, 0],
//                   [2 / 42, -2, 1],
//                   [4 / 42, -1, 1],
//                   [8 / 42, 0, 1],
//                   [4 / 42, 1, 1],
//                   [2 / 42, 2, 1],
//                   [1 / 42, -2, 2],
//                   [2 / 42, -1, 2],
//                   [4 / 42, 0, 2],
//                   [2 / 42, 1, 2],
//                   [1 / 42, 2, 2],
//                 ];
//                 break;
//               case 3:
//                 this._kernel = [
//                   [1 / 8, 1, 0],
//                   [1 / 8, 2, 0],
//                   [1 / 8, -1, 1],
//                   [1 / 8, 0, 1],
//                   [1 / 8, 1, 1],
//                   [1 / 8, 0, 2],
//                 ];
//                 break;
//               case 4:
//                 this._kernel = [
//                   [7 / 48, 1, 0],
//                   [5 / 48, 2, 0],
//                   [3 / 48, -2, 1],
//                   [5 / 48, -1, 1],
//                   [7 / 48, 0, 1],
//                   [5 / 48, 1, 1],
//                   [3 / 48, 2, 1],
//                   [1 / 48, -2, 2],
//                   [3 / 48, -1, 2],
//                   [5 / 48, 0, 2],
//                   [3 / 48, 1, 2],
//                   [1 / 48, 2, 2],
//                 ];
//                 break;
//               case 5:
//                 this._kernel = [
//                   [0.25, 1, 0],
//                   [4 / 32, 2, 0],
//                   [2 / 32, -2, 1],
//                   [4 / 32, -1, 1],
//                   [0.25, 0, 1],
//                   [4 / 32, 1, 1],
//                   [2 / 32, 2, 1],
//                 ];
//                 break;
//               case 6:
//                 this._kernel = [
//                   [5 / 32, 1, 0],
//                   [3 / 32, 2, 0],
//                   [2 / 32, -2, 1],
//                   [4 / 32, -1, 1],
//                   [5 / 32, 0, 1],
//                   [4 / 32, 1, 1],
//                   [2 / 32, 2, 1],
//                   [2 / 32, -1, 2],
//                   [3 / 32, 0, 2],
//                   [2 / 32, 1, 2],
//                 ];
//                 break;
//               case 7:
//                 this._kernel = [
//                   [0.25, 1, 0],
//                   [3 / 16, 2, 0],
//                   [1 / 16, -2, 1],
//                   [2 / 16, -1, 1],
//                   [3 / 16, 0, 1],
//                   [2 / 16, 1, 1],
//                   [1 / 16, 2, 1],
//                 ];
//                 break;
//               case 8:
//                 this._kernel = [
//                   [0.5, 1, 0],
//                   [1 / 4, -1, 1],
//                   [1 / 4, 0, 1],
//                 ];
//                 break;
//               default:
//                 throw Error(`ErrorDiffusionArray: unknown kernel = ${t}`);
//             }
//           }
//         };
//       function* hilbertCurve(t, e, i) {
//         let r = Math.max(t, e),
//           n = {
//             width: t,
//             height: e,
//             level: Math.floor(Math.log(r) / Math.log(2) + 1),
//             callback: i,
//             tracker: new ProgressTracker(t * e, 99),
//             index: 0,
//             x: 0,
//             y: 0,
//           };
//         yield* walkHilbert(n, 1), visit(n, 0);
//       }
//       function* walkHilbert(t, e) {
//         if (!(t.level < 1)) {
//           switch (
//             (t.tracker.shouldNotify(t.index) &&
//               (yield { progress: t.tracker.progress }),
//             t.level--,
//             e)
//           ) {
//             case 2:
//               yield* walkHilbert(t, 1),
//                 visit(t, 3),
//                 yield* walkHilbert(t, 2),
//                 visit(t, 4),
//                 yield* walkHilbert(t, 2),
//                 visit(t, 2),
//                 yield* walkHilbert(t, 4);
//               break;
//             case 3:
//               yield* walkHilbert(t, 4),
//                 visit(t, 2),
//                 yield* walkHilbert(t, 3),
//                 visit(t, 1),
//                 yield* walkHilbert(t, 3),
//                 visit(t, 3),
//                 yield* walkHilbert(t, 1);
//               break;
//             case 1:
//               yield* walkHilbert(t, 2),
//                 visit(t, 4),
//                 yield* walkHilbert(t, 1),
//                 visit(t, 3),
//                 yield* walkHilbert(t, 1),
//                 visit(t, 1),
//                 yield* walkHilbert(t, 3);
//               break;
//             case 4:
//               yield* walkHilbert(t, 3),
//                 visit(t, 1),
//                 yield* walkHilbert(t, 4),
//                 visit(t, 2),
//                 yield* walkHilbert(t, 4),
//                 visit(t, 4),
//                 yield* walkHilbert(t, 2);
//           }
//           t.level++;
//         }
//       }
//       function visit(t, e) {
//         switch (
//           (t.x >= 0 &&
//             t.x < t.width &&
//             t.y >= 0 &&
//             t.y < t.height &&
//             (t.callback(t.x, t.y), t.index++),
//           e)
//         ) {
//           case 2:
//             t.x--;
//             break;
//           case 3:
//             t.x++;
//             break;
//           case 1:
//             t.y--;
//             break;
//           case 4:
//             t.y++;
//         }
//       }
//       var ErrorDiffusionRiemersma = class extends AbstractImageQuantizer {
//           constructor(t, e = 16, i = 1) {
//             super(),
//               __publicField(this, "_distance"),
//               __publicField(this, "_weights"),
//               __publicField(this, "_errorQueueSize"),
//               (this._distance = t),
//               (this._errorQueueSize = e),
//               (this._weights = ErrorDiffusionRiemersma._createWeights(i, e));
//           }
//           *quantize(t, e) {
//             let i = t.getPointArray(),
//               r = t.getWidth(),
//               n = t.getHeight(),
//               a = [],
//               s = 0;
//             for (let t = 0; t < this._errorQueueSize; t++)
//               a[t] = { r: 0, g: 0, b: 0, a: 0 };
//             yield* hilbertCurve(r, n, (t, n) => {
//               let o = i[t + n * r],
//                 { r: l, g: h, b: u, a: f } = o;
//               for (let t = 0; t < this._errorQueueSize; t++) {
//                 let e = this._weights[t],
//                   i = a[(t + s) % this._errorQueueSize];
//                 (l += i.r * e), (h += i.g * e), (u += i.b * e), (f += i.a * e);
//               }
//               let c = Point.createByRGBA(
//                   inRange0to255Rounded(l),
//                   inRange0to255Rounded(h),
//                   inRange0to255Rounded(u),
//                   inRange0to255Rounded(f)
//                 ),
//                 d = e.getNearestColor(this._distance, c),
//                 p =
//                   ((s = (s + 1) % this._errorQueueSize) +
//                     this._errorQueueSize -
//                     1) %
//                   this._errorQueueSize;
//               (a[p].r = o.r - d.r),
//                 (a[p].g = o.g - d.g),
//                 (a[p].b = o.b - d.b),
//                 (a[p].a = o.a - d.a),
//                 o.from(d);
//             }),
//               yield { pointContainer: t, progress: 100 };
//           }
//           static _createWeights(t, e) {
//             let i = [],
//               r = Math.exp(Math.log(e) / (e - 1));
//             for (let n = 0, a = 1; n < e; n++)
//               (i[n] = (((a + 0.5) | 0) / e) * t), (a *= r);
//             return i;
//           }
//         },
//         quality_exports = {};
//       __export(quality_exports, { ssim: () => ssim });
//       var K1 = 0.01,
//         K2 = 0.03;
//       function ssim(t, e) {
//         if (t.getHeight() !== e.getHeight() || t.getWidth() !== e.getWidth())
//           throw Error("Images have different sizes!");
//         let i = (255 * K1) ** 2,
//           r = (255 * K2) ** 2,
//           n = 0,
//           a = 0;
//         return (
//           iterate(t, e, (t, e, s, o) => {
//             let l = 0,
//               h = 0,
//               u = 0;
//             for (let i = 0; i < t.length; i++)
//               (h += (t[i] - s) ** 2),
//                 (u += (e[i] - o) ** 2),
//                 (l += (t[i] - s) * (e[i] - o));
//             let f = t.length - 1;
//             (h /= f),
//               (u /= f),
//               (l /= f),
//               (a +=
//                 ((2 * s * o + i) * (2 * l + r)) /
//                 ((s ** 2 + o ** 2 + i) * (h + u + r))),
//               n++;
//           }),
//           a / n
//         );
//       }
//       function iterate(t, e, i) {
//         let r = t.getWidth(),
//           n = t.getHeight();
//         for (let a = 0; a < n; a += 8)
//           for (let s = 0; s < r; s += 8) {
//             let o = Math.min(8, r - s),
//               l = Math.min(8, n - a),
//               h = calculateLumaValuesForWindow(t, s, a, o, l),
//               u = calculateLumaValuesForWindow(e, s, a, o, l);
//             i(h, u, calculateAverageLuma(h), calculateAverageLuma(u));
//           }
//       }
//       function calculateLumaValuesForWindow(t, e, i, r, n) {
//         let a = t.getPointArray(),
//           s = [],
//           o = 0;
//         for (let l = i; l < i + n; l++) {
//           let i = l * t.getWidth();
//           for (let t = e; t < e + r; t++) {
//             let e = a[i + t];
//             (s[o] = 0.2126 * e.r + 0.7152 * e.g + 0.0722 * e.b), o++;
//           }
//         }
//         return s;
//       }
//       function calculateAverageLuma(t) {
//         let e = 0;
//         for (let i of t) e += i;
//         return e / t.length;
//       }
//       function buildPaletteSync(
//         t,
//         { colorDistanceFormula: e, paletteQuantization: i, colors: r } = {}
//       ) {
//         let n = paletteQuantizationToPaletteQuantizer(
//           colorDistanceFormulaToColorDistance(e),
//           i,
//           r
//         );
//         return t.forEach((t) => n.sample(t)), n.quantizeSync();
//       }
//       function applyPaletteSync(
//         t,
//         e,
//         { colorDistanceFormula: i, imageQuantization: r } = {}
//       ) {
//         return imageQuantizationToImageQuantizer(
//           colorDistanceFormulaToColorDistance(i),
//           r
//         ).quantizeSync(t, e);
//       }
//       function colorDistanceFormulaToColorDistance(t = "euclidean-bt709") {
//         switch (t) {
//           case "cie94-graphic-arts":
//             return new CIE94GraphicArts();
//           case "cie94-textiles":
//             return new CIE94Textiles();
//           case "ciede2000":
//             return new CIEDE2000();
//           case "color-metric":
//             return new CMetric();
//           case "euclidean":
//             return new Euclidean();
//           case "euclidean-bt709":
//             return new EuclideanBT709();
//           case "euclidean-bt709-noalpha":
//             return new EuclideanBT709NoAlpha();
//           case "manhattan":
//             return new Manhattan();
//           case "manhattan-bt709":
//             return new ManhattanBT709();
//           case "manhattan-nommyde":
//             return new ManhattanNommyde();
//           case "pngquant":
//             return new PNGQuant();
//           default:
//             throw Error(`Unknown colorDistanceFormula ${t}`);
//         }
//       }
//       function imageQuantizationToImageQuantizer(t, e = "floyd-steinberg") {
//         switch (e) {
//           case "nearest":
//             return new NearestColor(t);
//           case "riemersma":
//             return new ErrorDiffusionRiemersma(t);
//           case "floyd-steinberg":
//             return new ErrorDiffusionArray(t, 0);
//           case "false-floyd-steinberg":
//             return new ErrorDiffusionArray(t, 1);
//           case "stucki":
//             return new ErrorDiffusionArray(t, 2);
//           case "atkinson":
//             return new ErrorDiffusionArray(t, 3);
//           case "jarvis":
//             return new ErrorDiffusionArray(t, 4);
//           case "burkes":
//             return new ErrorDiffusionArray(t, 5);
//           case "sierra":
//             return new ErrorDiffusionArray(t, 6);
//           case "two-sierra":
//             return new ErrorDiffusionArray(t, 7);
//           case "sierra-lite":
//             return new ErrorDiffusionArray(t, 8);
//           default:
//             throw Error(`Unknown imageQuantization ${e}`);
//         }
//       }
//       function paletteQuantizationToPaletteQuantizer(
//         t,
//         e = "wuquant",
//         i = 256
//       ) {
//         switch (e) {
//           case "neuquant":
//             return new NeuQuant(t, i);
//           case "rgbquant":
//             return new RGBQuant(t, i);
//           case "wuquant":
//             return new WuQuant(t, i);
//           case "neuquant-float":
//             return new NeuQuantFloat(t, i);
//           default:
//             throw Error(`Unknown paletteQuantization ${e}`);
//         }
//       }
//       "function" == typeof setImmediate
//         ? setImmediate
//         : void 0 !== process && (null == process || process.nextTick);
//       let QuantizeOptionsSchema = z.object({
//           colors: z.number().optional(),
//           colorDistanceFormula: z
//             .union([
//               z.literal("cie94-textiles"),
//               z.literal("cie94-graphic-arts"),
//               z.literal("ciede2000"),
//               z.literal("color-metric"),
//               z.literal("euclidean"),
//               z.literal("euclidean-bt709-noalpha"),
//               z.literal("euclidean-bt709"),
//               z.literal("manhattan"),
//               z.literal("manhattan-bt709"),
//               z.literal("manhattan-nommyde"),
//               z.literal("pngquant"),
//             ])
//             .optional(),
//           paletteQuantization: z
//             .union([
//               z.literal("neuquant"),
//               z.literal("neuquant-float"),
//               z.literal("rgbquant"),
//               z.literal("wuquant"),
//             ])
//             .optional(),
//           imageQuantization: z
//             .union([
//               z.literal("nearest"),
//               z.literal("riemersma"),
//               z.literal("floyd-steinberg"),
//               z.literal("false-floyd-steinberg"),
//               z.literal("stucki"),
//               z.literal("atkinson"),
//               z.literal("jarvis"),
//               z.literal("burkes"),
//               z.literal("sierra"),
//               z.literal("two-sierra"),
//               z.literal("sierra-lite"),
//             ])
//             .optional(),
//         }),
//         methods = {
//           quantize(t, e) {
//             let {
//                 colors: i,
//                 colorDistanceFormula: r,
//                 paletteQuantization: n,
//                 imageQuantization: a,
//               } = QuantizeOptionsSchema.parse(e),
//               s = utils_exports.PointContainer.fromUint8Array(
//                 t.bitmap.data,
//                 t.bitmap.width,
//                 t.bitmap.height
//               ),
//               o = applyPaletteSync(
//                 s,
//                 buildPaletteSync([s], {
//                   colors: i,
//                   colorDistanceFormula: r,
//                   paletteQuantization: n,
//                 }),
//                 { colorDistanceFormula: r, imageQuantization: a }
//               );
//             return (t.bitmap.data = Buffer.from(o.toUint8Array())), t;
//           },
//         };
//       var parseBmfontAscii = function (t) {
//         if (!t) throw Error("no data provided");
//         var e = { pages: [], chars: [], kernings: [] },
//           i = (t = t.toString().trim()).split(/\r\n?|\n/g);
//         if (0 === i.length) throw Error("no data in BMFont file");
//         for (var r = 0; r < i.length; r++) {
//           var n = splitLine(i[r], r);
//           if (n) {
//             if ("page" === n.key) {
//               if ("number" != typeof n.data.id)
//                 throw Error(
//                   "malformed file at line " + r + " -- needs page id=N"
//                 );
//               if ("string" != typeof n.data.file)
//                 throw Error(
//                   "malformed file at line " + r + ' -- needs page file="path"'
//                 );
//               e.pages[n.data.id] = n.data.file;
//             } else
//               "chars" === n.key ||
//                 "kernings" === n.key ||
//                 ("char" === n.key
//                   ? e.chars.push(n.data)
//                   : "kerning" === n.key
//                   ? e.kernings.push(n.data)
//                   : (e[n.key] = n.data));
//           }
//         }
//         return e;
//       };
//       function splitLine(t, e) {
//         if (!(t = t.replace(/\t+/g, " ").trim())) return null;
//         var i = t.indexOf(" ");
//         if (-1 === i) throw Error("no named row at line " + e);
//         var r = t.substring(0, i);
//         t = (t = (t = (t = t.substring(i + 1)).replace(
//           /letter=[\'\"]\S+[\'\"]/gi,
//           ""
//         )).split("=")).map(function (t) {
//           return t.trim().match(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g);
//         });
//         for (var n = [], a = 0; a < t.length; a++) {
//           var s = t[a];
//           0 === a
//             ? n.push({ key: s[0], data: "" })
//             : a === t.length - 1
//             ? (n[n.length - 1].data = parseData(s[0]))
//             : ((n[n.length - 1].data = parseData(s[0])),
//               n.push({ key: s[1], data: "" }));
//         }
//         var o = { key: r, data: {} };
//         return (
//           n.forEach(function (t) {
//             o.data[t.key] = t.data;
//           }),
//           o
//         );
//       }
//       function parseData(t) {
//         return t && 0 !== t.length
//           ? 0 === t.indexOf('"') || 0 === t.indexOf("'")
//             ? t.substring(1, t.length - 1)
//             : -1 !== t.indexOf(",")
//             ? parseIntList$1(t)
//             : parseInt(t, 10)
//           : "";
//       }
//       function parseIntList$1(t) {
//         return t.split(",").map(function (t) {
//           return parseInt(t, 10);
//         });
//       }
//       var parseASCII = getDefaultExportFromCjs(parseBmfontAscii),
//         GLYPH_DESIGNER_ERROR = "chasrset",
//         parseAttribs = function (t) {
//           for (var e in (GLYPH_DESIGNER_ERROR in (t = Object.assign({}, t)) &&
//             ((t.charset = t[GLYPH_DESIGNER_ERROR]),
//             delete t[GLYPH_DESIGNER_ERROR]),
//           t))
//             "face" !== e &&
//               "charset" !== e &&
//               (t[e] =
//                 "padding" === e || "spacing" === e
//                   ? parseIntList(t[e])
//                   : parseInt(t[e], 10));
//           return t;
//         };
//       function parseIntList(t) {
//         return t.split(",").map(function (t) {
//           return parseInt(t, 10);
//         });
//       }
//       var xmlParseFromString =
//           void 0 !== self.DOMParser
//             ? function (t) {
//                 return new self.DOMParser().parseFromString(
//                   t,
//                   "application/xml"
//                 );
//               }
//             : void 0 !== self.ActiveXObject &&
//               new self.ActiveXObject("Microsoft.XMLDOM")
//             ? function (t) {
//                 var e = new self.ActiveXObject("Microsoft.XMLDOM");
//                 return (e.async = "false"), e.loadXML(t), e;
//               }
//             : function (t) {
//                 var e = document.createElement("div");
//                 return (e.innerHTML = t), e;
//               },
//         parseAttributes = parseAttribs,
//         parseFromString = xmlParseFromString,
//         NAME_MAP = {
//           scaleh: "scaleH",
//           scalew: "scaleW",
//           stretchh: "stretchH",
//           lineheight: "lineHeight",
//           alphachnl: "alphaChnl",
//           redchnl: "redChnl",
//           greenchnl: "greenChnl",
//           bluechnl: "blueChnl",
//         },
//         browser = function (t) {
//           var e = parseFromString((t = t.toString())),
//             i = { pages: [], chars: [], kernings: [] };
//           ["info", "common"].forEach(function (t) {
//             var r = e.getElementsByTagName(t)[0];
//             r && (i[t] = parseAttributes(getAttribs(r)));
//           });
//           var r = e.getElementsByTagName("pages")[0];
//           if (!r) throw Error("malformed file -- no <pages> element");
//           for (
//             var n = r.getElementsByTagName("page"), a = 0;
//             a < n.length;
//             a++
//           ) {
//             var s = n[a],
//               o = parseInt(s.getAttribute("id"), 10),
//               l = s.getAttribute("file");
//             if (isNaN(o))
//               throw Error('malformed file -- page "id" attribute is NaN');
//             if (!l)
//               throw Error('malformed file -- needs page "file" attribute');
//             i.pages[parseInt(o, 10)] = l;
//           }
//           return (
//             ["chars", "kernings"].forEach(function (t) {
//               var r = e.getElementsByTagName(t)[0];
//               if (r)
//                 for (
//                   var n = t.substring(0, t.length - 1),
//                     a = r.getElementsByTagName(n),
//                     s = 0;
//                   s < a.length;
//                   s++
//                 ) {
//                   var o = a[s];
//                   i[t].push(parseAttributes(getAttribs(o)));
//                 }
//             }),
//             i
//           );
//         };
//       function getAttribs(t) {
//         return getAttribList(t).reduce(function (t, e) {
//           return (t[mapName(e.nodeName)] = e.nodeValue), t;
//         }, {});
//       }
//       function getAttribList(t) {
//         for (var e = [], i = 0; i < t.attributes.length; i++)
//           e.push(t.attributes[i]);
//         return e;
//       }
//       function mapName(t) {
//         return NAME_MAP[t.toLowerCase()] || t;
//       }
//       var parseXML = getDefaultExportFromCjs(browser),
//         HEADER$1 = [66, 77, 70],
//         parseBmfontBinary = function (t) {
//           if (t.length < 6) throw Error("invalid buffer length for BMFont");
//           if (
//             !HEADER$1.every(function (e, i) {
//               return t.readUInt8(i) === e;
//             })
//           )
//             throw Error("BMFont missing BMF byte header");
//           var e = 3;
//           if (t.readUInt8(e++) > 3)
//             throw Error("Only supports BMFont Binary v3 (BMFont App v1.10)");
//           for (var i = { kernings: [], chars: [] }, r = 0; r < 5; r++)
//             e += readBlock(i, t, e);
//           return i;
//         };
//       function readBlock(t, e, i) {
//         if (i > e.length - 1) return 0;
//         var r = e.readUInt8(i++),
//           n = e.readInt32LE(i);
//         switch (((i += 4), r)) {
//           case 1:
//             t.info = readInfo(e, i);
//             break;
//           case 2:
//             t.common = readCommon(e, i);
//             break;
//           case 3:
//             t.pages = readPages(e, i, n);
//             break;
//           case 4:
//             t.chars = readChars(e, i, n);
//             break;
//           case 5:
//             t.kernings = readKernings(e, i, n);
//         }
//         return 5 + n;
//       }
//       function readInfo(t, e) {
//         var i = {};
//         i.size = t.readInt16LE(e);
//         var r = t.readUInt8(e + 2);
//         return (
//           (i.smooth = (r >> 7) & 1),
//           (i.unicode = (r >> 6) & 1),
//           (i.italic = (r >> 5) & 1),
//           (i.bold = (r >> 4) & 1),
//           (r >> 3) & 1 && (i.fixedHeight = 1),
//           (i.charset = t.readUInt8(e + 3) || ""),
//           (i.stretchH = t.readUInt16LE(e + 4)),
//           (i.aa = t.readUInt8(e + 6)),
//           (i.padding = [
//             t.readInt8(e + 7),
//             t.readInt8(e + 8),
//             t.readInt8(e + 9),
//             t.readInt8(e + 10),
//           ]),
//           (i.spacing = [t.readInt8(e + 11), t.readInt8(e + 12)]),
//           (i.outline = t.readUInt8(e + 13)),
//           (i.face = readStringNT(t, e + 14)),
//           i
//         );
//       }
//       function readCommon(t, e) {
//         var i = {};
//         return (
//           (i.lineHeight = t.readUInt16LE(e)),
//           (i.base = t.readUInt16LE(e + 2)),
//           (i.scaleW = t.readUInt16LE(e + 4)),
//           (i.scaleH = t.readUInt16LE(e + 6)),
//           (i.pages = t.readUInt16LE(e + 8)),
//           t.readUInt8(e + 10),
//           (i.packed = 0),
//           (i.alphaChnl = t.readUInt8(e + 11)),
//           (i.redChnl = t.readUInt8(e + 12)),
//           (i.greenChnl = t.readUInt8(e + 13)),
//           (i.blueChnl = t.readUInt8(e + 14)),
//           i
//         );
//       }
//       function readPages(t, e, i) {
//         for (
//           var r = [], n = readNameNT(t, e), a = n.length + 1, s = i / a, o = 0;
//           o < s;
//           o++
//         )
//           (r[o] = t.slice(e, e + n.length).toString("utf8")), (e += a);
//         return r;
//       }
//       function readChars(t, e, i) {
//         for (var r = [], n = i / 20, a = 0; a < n; a++) {
//           var s = {},
//             o = 20 * a;
//           (s.id = t.readUInt32LE(e + 0 + o)),
//             (s.x = t.readUInt16LE(e + 4 + o)),
//             (s.y = t.readUInt16LE(e + 6 + o)),
//             (s.width = t.readUInt16LE(e + 8 + o)),
//             (s.height = t.readUInt16LE(e + 10 + o)),
//             (s.xoffset = t.readInt16LE(e + 12 + o)),
//             (s.yoffset = t.readInt16LE(e + 14 + o)),
//             (s.xadvance = t.readInt16LE(e + 16 + o)),
//             (s.page = t.readUInt8(e + 18 + o)),
//             (s.chnl = t.readUInt8(e + 19 + o)),
//             (r[a] = s);
//         }
//         return r;
//       }
//       function readKernings(t, e, i) {
//         for (var r = [], n = i / 10, a = 0; a < n; a++) {
//           var s = {},
//             o = 10 * a;
//           (s.first = t.readUInt32LE(e + 0 + o)),
//             (s.second = t.readUInt32LE(e + 4 + o)),
//             (s.amount = t.readInt16LE(e + 8 + o)),
//             (r[a] = s);
//         }
//         return r;
//       }
//       function readNameNT(t, e) {
//         for (var i = e; i < t.length && 0 !== t[i]; i++);
//         return t.slice(e, i);
//       }
//       function readStringNT(t, e) {
//         return readNameNT(t, e).toString("utf8");
//       }
//       var readBinary = getDefaultExportFromCjs(parseBmfontBinary);
//       function normalizeArray(t, e) {
//         for (var i = 0, r = t.length - 1; r >= 0; r--) {
//           var n = t[r];
//           "." === n
//             ? t.splice(r, 1)
//             : ".." === n
//             ? (t.splice(r, 1), i++)
//             : i && (t.splice(r, 1), i--);
//         }
//         if (e) for (; i--; i) t.unshift("..");
//         return t;
//       }
//       var splitPathRe =
//           /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,
//         splitPath = function (t) {
//           return splitPathRe.exec(t).slice(1);
//         };
//       function resolve() {
//         for (var t = "", e = !1, i = arguments.length - 1; i >= -1 && !e; i--) {
//           var r = i >= 0 ? arguments[i] : "/";
//           if ("string" != typeof r)
//             throw TypeError("Arguments to path.resolve must be strings");
//           r && ((t = r + "/" + t), (e = "/" === r.charAt(0)));
//         }
//         return (
//           (t = normalizeArray(
//             filter(t.split("/"), function (t) {
//               return !!t;
//             }),
//             !e
//           ).join("/")),
//           (e ? "/" : "") + t || "."
//         );
//       }
//       function normalize(t) {
//         var e = isAbsolute(t),
//           i = "/" === substr(t, -1);
//         return (
//           (t = normalizeArray(
//             filter(t.split("/"), function (t) {
//               return !!t;
//             }),
//             !e
//           ).join("/")) ||
//             e ||
//             (t = "."),
//           t && i && (t += "/"),
//           (e ? "/" : "") + t
//         );
//       }
//       function isAbsolute(t) {
//         return "/" === t.charAt(0);
//       }
//       function join() {
//         return normalize(
//           filter(Array.prototype.slice.call(arguments, 0), function (t, e) {
//             if ("string" != typeof t)
//               throw TypeError("Arguments to path.join must be strings");
//             return t;
//           }).join("/")
//         );
//       }
//       function relative(t, e) {
//         function i(t) {
//           for (var e = 0; e < t.length && "" === t[e]; e++);
//           for (var i = t.length - 1; i >= 0 && "" === t[i]; i--);
//           return e > i ? [] : t.slice(e, i - e + 1);
//         }
//         (t = resolve(t).substr(1)), (e = resolve(e).substr(1));
//         for (
//           var r = i(t.split("/")),
//             n = i(e.split("/")),
//             a = Math.min(r.length, n.length),
//             s = a,
//             o = 0;
//           o < a;
//           o++
//         )
//           if (r[o] !== n[o]) {
//             s = o;
//             break;
//           }
//         var l = [];
//         for (o = s; o < r.length; o++) l.push("..");
//         return (l = l.concat(n.slice(s))).join("/");
//       }
//       var sep = "/",
//         delimiter = ":";
//       function dirname(t) {
//         var e = splitPath(t),
//           i = e[0],
//           r = e[1];
//         return i || r ? (r && (r = r.substr(0, r.length - 1)), i + r) : ".";
//       }
//       function basename(t, e) {
//         var i = splitPath(t)[2];
//         return (
//           e &&
//             i.substr(-1 * e.length) === e &&
//             (i = i.substr(0, i.length - e.length)),
//           i
//         );
//       }
//       function extname(t) {
//         return splitPath(t)[3];
//       }
//       var n = dirname,
//         a = join;
//       function filter(t, e) {
//         if (t.filter) return t.filter(e);
//         for (var i = [], r = 0; r < t.length; r++)
//           e(t[r], r, t) && i.push(t[r]);
//         return i;
//       }
//       var substr = function (t, e, i) {
//         return t.substr(e, i);
//       };
//       function e(t) {
//         return t &&
//           t.__esModule &&
//           Object.prototype.hasOwnProperty.call(t, "default")
//           ? t.default
//           : t;
//       }
//       let t = (e) => {
//           if (!e) return null;
//           let i = {};
//           switch (e.type) {
//             case "ELEMENT": {
//               let n = {},
//                 a = E(e.value.attributes),
//                 s = t(e.value.children);
//               a && (n = Object.assign(n, a)),
//                 s && (n = Object.assign(n, r(e.value.children))),
//                 (i[e.value.type] = n);
//               break;
//             }
//             case "ATTRIBUTE": {
//               let n = e.value;
//               i[n.name] = n.value;
//               break;
//             }
//             case "CONTENT":
//               return { content: e.value };
//           }
//           return i;
//         },
//         r = (e) =>
//           e && Array.isArray(e) && 0 !== e.length
//             ? n(e)
//               ? { content: e[0].value }
//               : { children: e.map(t) }
//             : null,
//         n = (t) =>
//           t && Array.isArray(t) && 1 === t.length && "CONTENT" === t[0].type,
//         E = (e) =>
//           e && Array.isArray(e)
//             ? e.map(t).reduce((e, i) => Object.assign(e, i), {})
//             : null;
//       var s = { convert: (e) => t(e.value.children[0]) },
//         a = {
//           Token: (t, e) => ({ type: t, value: e }),
//           TOKEN_TYPE: {
//             OPEN_BRACKET: "OPEN_BRACKET",
//             ELEMENT_TYPE: "ELEMENT_TYPE",
//             CLOSE_ELEMENT: "CLOSE_ELEMENT",
//             ATTRIB_NAME: "ATTRIB_NAME",
//             ATTRIB_VALUE: "ATTRIB_VALUE",
//             ASSIGN: "ASSIGN",
//             CLOSE_BRACKET: "CLOSE_BRACKET",
//             CONTENT: "CONTENT",
//             EOF: "EOF",
//           },
//         };
//       let { Token: T, TOKEN_TYPE: u } = a,
//         c = T("EOF"),
//         l = (t) => " " === t || "\n" === t || "\r" === t || "	" === t,
//         o = (t) => t.replace(/'/g, '"');
//       var N = {
//         createLexer: function (t) {
//           let e = null,
//             i = ((t) => {
//               let e = 0;
//               for (; e < t.length && l(t[e]); ) e++;
//               return ((t, e) => {
//                 if (t.startsWith("<?xml", e)) {
//                   let i = t.length;
//                   for (; e < i; )
//                     if ("?" !== t[e]) e++;
//                     else {
//                       if (">" === t[e + 1]) return e + 2;
//                       e++;
//                     }
//                 }
//                 return e;
//               })(t, e);
//             })(t),
//             r = [],
//             n = () => t[i],
//             a = () => e !== c && i < t.length,
//             s = (t) => '"' === t || "'" === t,
//             h = () => {
//               for (; a() && l(t[i]); ) i++;
//             },
//             f = (e) => {
//               if (a()) {
//                 if ("<" === t[i]) {
//                   let e = "<";
//                   return (
//                     i++,
//                     a() && "/" === t[i]
//                       ? (i++, (e = "</"))
//                       : a() &&
//                         "!" === t[i] &&
//                         "-" === t[i + 1] &&
//                         "-" === t[i + 2] &&
//                         (i++, i++, i++, (e = "<!--")),
//                     e
//                   );
//                 }
//                 if ("/" === n()) {
//                   let t = "/";
//                   return i++, a() && ">" === n() && (i++, (t = "/>")), t;
//                 }
//                 if ("=" === t[i] || ">" === t[i]) {
//                   let e = t[i];
//                   return i++, e;
//                 }
//               }
//               return d(!!e);
//             },
//             d = (e) => {
//               let r = e ? /[^>=<]/u : /[a-zA-Z0-9_:-]/,
//                 n = i;
//               for (; a() && t[i].match(r); ) i++;
//               return o(t.substring(n, i));
//             },
//             p = () => {
//               let m = i;
//               h();
//               let g = i - m;
//               if (a()) {
//                 if (e && e.type === u.OPEN_BRACKET) {
//                   h();
//                   let t = f(!1);
//                   (e = T(u.ELEMENT_TYPE, t)), r.push(t);
//                 } else if (e && e.type === u.ASSIGN) {
//                   a() && s(n()) && i++;
//                   let r = i;
//                   for (; a() && !s(n()); ) i++;
//                   let h = o(t.substring(r, i));
//                   i++, (e = T(u.ATTRIB_VALUE, h));
//                 } else {
//                   h();
//                   let s = f(!0);
//                   switch (s) {
//                     case "=":
//                       e =
//                         e.type === u.ATTRIB_NAME
//                           ? T(u.ASSIGN)
//                           : T(u.CONTENT, s);
//                       break;
//                     case "</": {
//                       let n = i;
//                       for (; ">" !== t[i]; ) i++;
//                       (e = T(u.CLOSE_ELEMENT, t.substring(n, i))), i++, r.pop();
//                       break;
//                     }
//                     case "/>": {
//                       let t = r.pop();
//                       e = T(u.CLOSE_ELEMENT, t);
//                       break;
//                     }
//                     case "<!--": {
//                       let e = ["!", "-", "-"];
//                       for (
//                         ;
//                         a() && (">" !== e[2] || "-" !== e[1] || "-" !== e[0]);

//                       )
//                         e.shift(), e.push(t[i]), i++;
//                       return p();
//                     }
//                     case ">":
//                       e = T(u.CLOSE_BRACKET);
//                       break;
//                     case "<":
//                       e = T(u.OPEN_BRACKET);
//                       break;
//                     default:
//                       if (s && s.length > 0) {
//                         if (e.type === u.CLOSE_BRACKET) {
//                           let t = "";
//                           "<" !== n() && (t = d(!0)), (e = T(u.CONTENT, s + t));
//                         } else if (
//                           e.type !== u.ATTRIB_NAME &&
//                           e.type !== u.CONTENT
//                         )
//                           e.type === u.CLOSE_ELEMENT
//                             ? ((s = " ".repeat(g) + s), (e = T(u.CONTENT, s)))
//                             : (e = T(u.ATTRIB_NAME, s));
//                         else {
//                           let t = " ".repeat(g) + s;
//                           e = T(u.CONTENT, t);
//                         }
//                         break;
//                       }
//                       throw Error('Unknown Syntax : "' + t[i] + '"');
//                   }
//                 }
//               } else e = c;
//               return e;
//             };
//           return { peek: n, next: p, hasNext: a };
//         },
//       };
//       let { createLexer: i } = N,
//         { Token: p, TOKEN_TYPE: O } = a,
//         [A, f, C, h] = ["ROOT", "ELEMENT", "ATTRIBUTE", "CONTENT"],
//         _ = (t, e) => ({ type: t, value: e }),
//         L = (t) => _(h, t),
//         y = (t, e, i) => _(f, { type: t, attributes: e, children: i }),
//         v = (t, e) => _(C, { name: t, value: e }),
//         S = (t, e) => {
//           let i = [];
//           for (; t.hasNext(); ) {
//             let r = t.next();
//             switch (r.type) {
//               case O.OPEN_BRACKET: {
//                 let e = t.next(),
//                   [r, n] = R(t),
//                   a = [];
//                 n.type !== O.CLOSE_ELEMENT && (a = S(t, e)),
//                   a && a.length > 0 && a[0].type === O.CONTENT && (a = b(a)),
//                   i.push(y(e.value, r, a));
//                 break;
//               }
//               case O.CLOSE_ELEMENT:
//                 if (r.value === e.value) return i;
//                 break;
//               case O.CONTENT:
//                 i.push(L(r.value));
//                 break;
//               case O.EOF:
//                 return i;
//               default:
//                 throw Error(
//                   `Unknown Lexem type: ${r.type} "${r.value}, scoping element: ${e.value}"`
//                 );
//             }
//           }
//           return i;
//         },
//         R = (t) => {
//           let e = [],
//             i = t.peek();
//           if (
//             !t.hasNext() ||
//             (i && i.type === O.CLOSE_BRACKET) ||
//             (i && i.type === O.CLOSE_ELEMENT)
//           )
//             return [e, i];
//           for (
//             i = t.next();
//             t.hasNext() &&
//             i &&
//             i.type !== O.CLOSE_BRACKET &&
//             i.type !== O.CLOSE_ELEMENT;

//           ) {
//             let r = i;
//             t.next();
//             let n = t.next(),
//               a = v(r.value, n.value);
//             e.push(a), (i = t.next());
//           }
//           return [e, i];
//         };
//       function b(t) {
//         let e = [],
//           i = "";
//         return (
//           t.forEach((t) => {
//             t.type === O.CONTENT
//               ? (i += t.value)
//               : (i.length && (e.push(L(i)), (i = "")), e.push(t));
//           }),
//           i.length && e.push(L(i)),
//           e
//         );
//       }
//       var B = {
//         transpile: function (t, e) {
//           let r = _(A, { children: S(i(t), p(A, "ROOT")) });
//           return e ? e.convert(r) : r;
//         },
//         Node: _,
//         ElementNode: y,
//         AttribNode: v,
//       };
//       let M = s,
//         { transpile: x } = B;
//       var k = e({
//           convertXML: function (t, e) {
//             return x(t, e || M);
//           },
//           createAST: function (t) {
//             return x(t);
//           },
//         }),
//         simpleXmlToJson_min = k,
//         xmlPackage = getDefaultExportFromCjs(simpleXmlToJson_min);
//       let { convertXML: convertXML } = xmlPackage,
//         isWebWorker = "undefined" != typeof self && void 0 === self.document,
//         CharacterJimp = createJimp({ formats: [png] }),
//         HEADER = Buffer.from([66, 77, 70, 3]);
//       function isBinary(t) {
//         if ("string" == typeof t) return "BMF" === t.substring(0, 3);
//         let e = t.slice(0, 4);
//         return (
//           t.length > 4 &&
//           e[0] === HEADER[0] &&
//           e[1] === HEADER[1] &&
//           e[2] === HEADER[2]
//         );
//       }
//       function parseFont(t, e) {
//         return isBinary(e)
//           ? ("string" == typeof e && (e = Buffer.from(e, "binary")),
//             readBinary(e))
//           : ((e = e.toString().trim()),
//             /.json$/.test(t) || "{" === e.charAt(0)
//               ? JSON.parse(e)
//               : /.xml$/.test(t) || "<" === e.charAt(0)
//               ? parseXML(e)
//               : parseASCII(e));
//       }
//       function parseNumbersInObject(t) {
//         for (let e in t) {
//           try {
//             t[e] = parseInt(t[e], 10);
//           } catch {}
//           "object" == typeof t[e] && parseNumbersInObject(t[e]);
//         }
//         return t;
//       }
//       async function loadBitmapFontData(t) {
//         if (isWebWorker && "string" == typeof t) {
//           let e = await fetch(t),
//             i = convertXML(await e.text()).font.children.reduce(
//               (t, e) => ({ ...t, ...e }),
//               {}
//             ),
//             r = [],
//             n = [],
//             a = [];
//           for (let t = 0; t < i.pages.children.length; t++) {
//             let e = i.pages.children[t].page;
//             r[parseInt(e.id, 10)] = parseNumbersInObject(e.file);
//           }
//           for (let t = 0; t < i.chars.children.length; t++)
//             n.push(parseNumbersInObject(i.chars.children[t].char));
//           for (let t = 0; t < i.kernings.children.length; t++)
//             a.push(parseNumbersInObject(i.kernings.children[t].kerning));
//           return {
//             info: i.info,
//             common: i.common,
//             pages: r,
//             chars: n,
//             kernings: a,
//           };
//         }
//         if ("string" == typeof t) {
//           let e = await fetch(t);
//           return parseFont(t, await e.text());
//         }
//         return parseFont("", t);
//       }
//       async function processBitmapFont(t, e) {
//         let i = {},
//           r = {};
//         for (let t = 0; t < e.chars.length; t++) {
//           let r = e.chars[t];
//           i[String.fromCharCode(r.id)] = r;
//         }
//         for (let t = 0; t < e.kernings.length; t++) {
//           let i = String.fromCharCode(e.kernings[t].first);
//           (r[i] = r[i] || {}),
//             (r[i][String.fromCharCode(e.kernings[t].second)] =
//               e.kernings[t].amount);
//         }
//         return {
//           ...e,
//           chars: i,
//           kernings: r,
//           pages: await Promise.all(
//             e.pages.map(async (e) => CharacterJimp.read(a(n(t), e)))
//           ),
//         };
//       }
//       async function loadFont(t) {
//         let e = t;
//         if ("undefined" == typeof window && !isWebWorker) {
//           let { existsSync: i, promises: r } = await Promise.resolve().then(
//             function () {
//               return _polyfillNode_fs$1;
//             }
//           );
//           i(t) && (e = await r.readFile(t));
//         }
//         return processBitmapFont(t, await loadBitmapFontData(e));
//       }
//       var pixelmatch_1 = pixelmatch;
//       let defaultOptions = {
//         threshold: 0.1,
//         includeAA: !1,
//         alpha: 0.1,
//         aaColor: [255, 255, 0],
//         diffColor: [255, 0, 0],
//         diffColorAlt: null,
//         diffMask: !1,
//       };
//       function pixelmatch(t, e, i, r, n, a) {
//         if (!isPixelData(t) || !isPixelData(e) || (i && !isPixelData(i)))
//           throw Error(
//             "Image data: Uint8Array, Uint8ClampedArray or Buffer expected."
//           );
//         if (t.length !== e.length || (i && i.length !== t.length))
//           throw Error("Image sizes do not match.");
//         if (t.length !== r * n * 4)
//           throw Error("Image data size does not match width/height.");
//         a = Object.assign({}, defaultOptions, a);
//         let s = r * n,
//           o = new Uint32Array(t.buffer, t.byteOffset, s),
//           l = new Uint32Array(e.buffer, e.byteOffset, s),
//           h = !0;
//         for (let t = 0; t < s; t++)
//           if (o[t] !== l[t]) {
//             h = !1;
//             break;
//           }
//         if (h) {
//           if (i && !a.diffMask)
//             for (let e = 0; e < s; e++) drawGrayPixel(t, 4 * e, a.alpha, i);
//           return 0;
//         }
//         let u = 35215 * a.threshold * a.threshold,
//           f = 0;
//         for (let s = 0; s < n; s++)
//           for (let o = 0; o < r; o++) {
//             let l = 4 * (s * r + o),
//               h = colorDelta(t, e, l, l);
//             Math.abs(h) > u
//               ? !a.includeAA &&
//                 (antialiased(t, o, s, r, n, e) || antialiased(e, o, s, r, n, t))
//                 ? i && !a.diffMask && drawPixel(i, l, ...a.aaColor)
//                 : (i &&
//                     drawPixel(
//                       i,
//                       l,
//                       ...((h < 0 && a.diffColorAlt) || a.diffColor)
//                     ),
//                   f++)
//               : i && (a.diffMask || drawGrayPixel(t, l, a.alpha, i));
//           }
//         return f;
//       }
//       function isPixelData(t) {
//         return ArrayBuffer.isView(t) && 1 === t.constructor.BYTES_PER_ELEMENT;
//       }
//       function antialiased(t, e, i, r, n, a) {
//         let s = Math.max(e - 1, 0),
//           o = Math.max(i - 1, 0),
//           l = Math.min(e + 1, r - 1),
//           h = Math.min(i + 1, n - 1),
//           u = 4 * (i * r + e),
//           f,
//           c,
//           d,
//           p,
//           m = e === s || e === l || i === o || i === h ? 1 : 0,
//           g = 0,
//           _ = 0;
//         for (let n = s; n <= l; n++)
//           for (let a = o; a <= h; a++) {
//             if (n === e && a === i) continue;
//             let s = colorDelta(t, t, u, 4 * (a * r + n), !0);
//             if (0 === s) {
//               if (++m > 2) return !1;
//             } else
//               s < g
//                 ? ((g = s), (f = n), (c = a))
//                 : s > _ && ((_ = s), (d = n), (p = a));
//           }
//         return (
//           0 !== g &&
//           0 !== _ &&
//           ((hasManySiblings(t, f, c, r, n) && hasManySiblings(a, f, c, r, n)) ||
//             (hasManySiblings(t, d, p, r, n) && hasManySiblings(a, d, p, r, n)))
//         );
//       }
//       function hasManySiblings(t, e, i, r, n) {
//         let a = Math.max(e - 1, 0),
//           s = Math.max(i - 1, 0),
//           o = Math.min(e + 1, r - 1),
//           l = Math.min(i + 1, n - 1),
//           h = 4 * (i * r + e),
//           u = e === a || e === o || i === s || i === l ? 1 : 0;
//         for (let n = a; n <= o; n++)
//           for (let a = s; a <= l; a++) {
//             if (n === e && a === i) continue;
//             let s = 4 * (a * r + n);
//             if (
//               (t[h] === t[s] &&
//                 t[h + 1] === t[s + 1] &&
//                 t[h + 2] === t[s + 2] &&
//                 t[h + 3] === t[s + 3] &&
//                 u++,
//               u > 2)
//             )
//               return !0;
//           }
//         return !1;
//       }
//       function colorDelta(t, e, i, r, n) {
//         let a = t[i + 0],
//           s = t[i + 1],
//           o = t[i + 2],
//           l = t[i + 3],
//           h = e[r + 0],
//           u = e[r + 1],
//           f = e[r + 2],
//           c = e[r + 3];
//         if (l === c && a === h && s === u && o === f) return 0;
//         l < 255 &&
//           ((l /= 255), (a = blend(a, l)), (s = blend(s, l)), (o = blend(o, l))),
//           c < 255 &&
//             ((c /= 255),
//             (h = blend(h, c)),
//             (u = blend(u, c)),
//             (f = blend(f, c)));
//         let d = rgb2y(a, s, o),
//           p = rgb2y(h, u, f),
//           m = d - p;
//         if (n) return m;
//         let g = rgb2i(a, s, o) - rgb2i(h, u, f),
//           _ = rgb2q(a, s, o) - rgb2q(h, u, f),
//           b = 0.5053 * m * m + 0.299 * g * g + 0.1957 * _ * _;
//         return d > p ? -b : b;
//       }
//       function rgb2y(t, e, i) {
//         return 0.29889531 * t + 0.58662247 * e + 0.11448223 * i;
//       }
//       function rgb2i(t, e, i) {
//         return 0.59597799 * t - 0.2741761 * e - 0.32180189 * i;
//       }
//       function rgb2q(t, e, i) {
//         return 0.21147017 * t - 0.52261711 * e + 0.31114694 * i;
//       }
//       function blend(t, e) {
//         return 255 + (t - 255) * e;
//       }
//       function drawPixel(t, e, i, r, n) {
//         (t[e + 0] = i), (t[e + 1] = r), (t[e + 2] = n), (t[e + 3] = 255);
//       }
//       function drawGrayPixel(t, e, i, r) {
//         let n = blend(
//           rgb2y(t[e + 0], t[e + 1], t[e + 2]),
//           (i * t[e + 3]) / 255
//         );
//         drawPixel(r, e, n, n, n);
//       }
//       var pixelMatch = getDefaultExportFromCjs(pixelmatch_1);
//       function diff(t, e, i = 0.1) {
//         let r = t.bitmap,
//           n = e.bitmap;
//         if (
//           ((r.width === n.width && r.height === n.height) ||
//             (r.width * r.height > n.width * n.height
//               ? (r = methods$d.resize(clone(t), {
//                   w: n.width,
//                   h: n.height,
//                 }).bitmap)
//               : (n = methods$d.resize(clone(e), {
//                   w: r.width,
//                   h: r.height,
//                 }).bitmap)),
//           "number" != typeof i || i < 0 || i > 1)
//         )
//           throw Error("threshold must be a number between 0 and 1");
//         let a = new t.constructor({
//           width: r.width,
//           height: r.height,
//           color: 4294967295,
//         });
//         return {
//           percent:
//             pixelMatch(
//               r.data,
//               n.data,
//               a.bitmap.data,
//               a.bitmap.width,
//               a.bitmap.height,
//               { threshold: i }
//             ) /
//             (a.bitmap.width * a.bitmap.height),
//           image: a,
//         };
//       }
//       let defaultPlugins = [
//           methods$h,
//           methods$g,
//           methods$f,
//           methods$e,
//           methods$c,
//           methods$a,
//           methods$b,
//           methods$9,
//           methods$8,
//           methods$7,
//           methods$6,
//           methods$5,
//           methods$4,
//           methods$3,
//           methods$d,
//           methods$2,
//           methods$1,
//           methods,
//         ],
//         defaultFormats = [bmp, msBmp, gif, jpeg$2, png, tiff],
//         JimpMime = {
//           bmp: bmp().mime,
//           gif: gif().mime,
//           jpeg: jpeg$2().mime,
//           png: png().mime,
//           tiff: tiff().mime,
//         },
//         Jimp = createJimp({ formats: defaultFormats, plugins: defaultPlugins });
//     },
//   },
// ]);
